{"version":3,"sources":["webpack/bootstrap","external \"ng.common\"","external \"rxjs\"","external \"ng.elements\"","external \"ng.common.http\"","external \"ng.platformBrowser\"","external \"ng.core\"","node_modules/@angular-extensions/elements/fesm2015/angular-extensions-elements.js","node_modules/@angular/animations/fesm2015/animations.js","node_modules/@angular/animations/fesm2015/browser.js","node_modules/@angular/platform-browser/fesm2015/animations.js","../narnia/src/app/shared/state.interface.ts","node_modules/rxjs/_esm2015/internal/util/isFunction.js","node_modules/rxjs/_esm2015/internal/config.js","node_modules/rxjs/_esm2015/internal/util/hostReportError.js","node_modules/rxjs/_esm2015/internal/Observer.js","node_modules/rxjs/_esm2015/internal/util/isArray.js","node_modules/rxjs/_esm2015/internal/util/isObject.js","node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js","node_modules/rxjs/_esm2015/internal/Subscription.js","node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js","node_modules/rxjs/_esm2015/internal/Subscriber.js","node_modules/rxjs/_esm2015/internal/operators/map.js","node_modules/rxjs/_esm2015/internal/operators/filter.js","node_modules/rxjs/_esm2015/internal/InnerSubscriber.js","node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js","node_modules/rxjs/_esm2015/internal/symbol/iterator.js","node_modules/rxjs/_esm2015/internal/symbol/observable.js","node_modules/rxjs/_esm2015/internal/util/isArrayLike.js","node_modules/rxjs/_esm2015/internal/util/isPromise.js","node_modules/rxjs/_esm2015/internal/util/subscribeTo.js","node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js","node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js","node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js","node_modules/rxjs/_esm2015/internal/util/noop.js","node_modules/rxjs/_esm2015/internal/Observable.js","node_modules/rxjs/_esm2015/internal/util/toSubscriber.js","node_modules/rxjs/_esm2015/internal/util/canReportError.js","node_modules/rxjs/_esm2015/internal/util/pipe.js","node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js","node_modules/rxjs/_esm2015/internal/OuterSubscriber.js","node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js","node_modules/rxjs/_esm2015/internal/observable/from.js","node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js","node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js","node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js","node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js","node_modules/rxjs/_esm2015/internal/util/isIterable.js","node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js","node_modules/rxjs/_esm2015/internal/operators/mergeMap.js","node_modules/rxjs/_esm2015/internal/util/identity.js","node_modules/rxjs/_esm2015/internal/operators/mergeAll.js","node_modules/rxjs/_esm2015/internal/operators/concatAll.js","node_modules/rxjs/_esm2015/internal/util/EmptyError.js","node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js","node_modules/rxjs/_esm2015/internal/observable/empty.js","node_modules/rxjs/_esm2015/internal/operators/takeLast.js","node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js","node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js","node_modules/rxjs/_esm2015/internal/operators/catchError.js","node_modules/rxjs/_esm2015/internal/operators/take.js","node_modules/rxjs/_esm2015/internal/operators/first.js","node_modules/rxjs/_esm2015/internal/operators/tap.js","node_modules/rxjs/_esm2015/internal/operators/every.js","node_modules/rxjs/_esm2015/internal/operators/switchMap.js","node_modules/rxjs/_esm2015/internal/util/isScheduler.js","node_modules/rxjs/_esm2015/internal/observable/concat.js","node_modules/rxjs/_esm2015/internal/observable/of.js","node_modules/rxjs/_esm2015/internal/observable/fromArray.js","node_modules/rxjs/_esm2015/internal/operators/startWith.js","node_modules/rxjs/_esm2015/internal/operators/scan.js","node_modules/rxjs/_esm2015/internal/operators/concatMap.js","node_modules/rxjs/_esm2015/internal/operators/finalize.js","node_modules/@angular/router/fesm2015/router.js","node_modules/rxjs/_esm2015/internal/operators/last.js","node_modules/@angular/cdk/fesm2015/keycodes.js","node_modules/rxjs/_esm2015/internal/scheduler/Action.js","node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js","node_modules/rxjs/_esm2015/internal/Scheduler.js","node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js","node_modules/rxjs/_esm2015/internal/scheduler/async.js","node_modules/rxjs/_esm2015/internal/operators/debounceTime.js","node_modules/@angular/cdk/fesm2015/coercion.js","node_modules/@angular/cdk/fesm2015/platform.js","node_modules/@angular/cdk/fesm2015/observers.js","node_modules/@angular/cdk/fesm2015/a11y.js","node_modules/@angular/cdk/fesm2015/bidi.js","node_modules/@angular/cdk/fesm2015/cdk.js","node_modules/@angular/material/fesm2015/core.js","node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js","node_modules/rxjs/_esm2015/internal/SubjectSubscription.js","node_modules/rxjs/_esm2015/internal/Subject.js","node_modules/rxjs/_esm2015/internal/operators/refCount.js","node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js","node_modules/rxjs/_esm2015/internal/operators/share.js","node_modules/@angular/material/fesm2015/icon.js","node_modules/rxjs/_esm2015/internal/operators/multicast.js","src/app/core/icons.service.ts","src/app/core/tab-manager.service.ts","src/app/core/state.service.ts","node_modules/@angular/cdk/fesm2015/portal.js","node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js","node_modules/rxjs/_esm2015/internal/operators/takeUntil.js","node_modules/rxjs/_esm2015/internal/operators/audit.js","node_modules/rxjs/_esm2015/internal/util/isNumeric.js","node_modules/rxjs/_esm2015/internal/observable/timer.js","node_modules/rxjs/_esm2015/internal/operators/auditTime.js","node_modules/@angular/cdk/fesm2015/scrolling.js","node_modules/@angular/material/fesm2015/tabs.js","src/app/app.component.html","src/app/app.component.ts","node_modules/@angular/cdk/fesm2015/overlay.js","node_modules/@angular/material/fesm2015/button.js","node_modules/rxjs/_esm2015/internal/operators/skip.js","node_modules/@angular/cdk/fesm2015/layout.js","node_modules/@angular/material/fesm2015/snack-bar.js","src/app/core/toaster.service.ts","node_modules/@angular/material/fesm2015/card.js","src/app/error/error.component.ts","src/app/error/error.component.html","node_modules/@angular/material/fesm2015/progress-bar.js","src/app/loading/loading.component.ts","src/app/loading/loading.component.html","node_modules/@angular/material/fesm2015/form-field.js","node_modules/@angular/material/fesm2015/autocomplete.js","node_modules/@angular/material/fesm2015/badge.js","node_modules/@angular/material/fesm2015/bottom-sheet.js","node_modules/@angular/material/fesm2015/button-toggle.js","node_modules/@angular/material/fesm2015/checkbox.js","node_modules/@angular/material/fesm2015/chips.js","node_modules/@angular/material/fesm2015/dialog.js","node_modules/@angular/cdk/fesm2015/text-field.js","node_modules/@angular/material/fesm2015/input.js","node_modules/@angular/material/fesm2015/datepicker.js","node_modules/@angular/material/fesm2015/divider.js","node_modules/@angular/material/fesm2015/grid-list.js","node_modules/@angular/material/fesm2015/list.js","node_modules/@angular/material/fesm2015/menu.js","node_modules/@angular/material/fesm2015/select.js","node_modules/@angular/material/fesm2015/tooltip.js","node_modules/@angular/material/fesm2015/paginator.js","node_modules/@angular/material/fesm2015/progress-spinner.js","node_modules/@angular/material/fesm2015/radio.js","node_modules/@angular/material/fesm2015/sidenav.js","node_modules/@angular/material/fesm2015/slide-toggle.js","node_modules/@angular/material/fesm2015/slider.js","node_modules/@angular/material/fesm2015/sort.js","node_modules/@angular/cdk/fesm2015/stepper.js","node_modules/@angular/material/fesm2015/stepper.js","node_modules/@angular/cdk/fesm2015/table.js","node_modules/@angular/material/fesm2015/table.js","node_modules/@angular/material/fesm2015/toolbar.js","node_modules/@angular/cdk/fesm2015/tree.js","node_modules/@angular/material/fesm2015/tree.js","node_modules/@angular/cdk/fesm2015/drag-drop.js","node_modules/@angular/cdk/fesm2015/clipboard.js","node_modules/@angular/cdk/fesm2015/accordion.js","src/app/shared/material.module.ts","src/app/shared/shared.module.ts","src/app/tab-container/tab-container.component.html","src/app/app-routing.module.ts","src/app/tab-container/tab-container.component.ts","src/app/app.module.ts","src/main.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ng","common","rxjs","elements","http","platformBrowser","core","LAZY_ELEMENT_CONFIGS","LAZY_ELEMENT_ROOT_OPTIONS","LAZY_ELEMENT_ROOT_GUARD","LAZY_ELEMENTS_REGISTRY","providedIn","factory","Map","LOG_PREFIX","LazyElementsLoaderService","registry","options","this","configs","newConfigs","forEach","newConfig","getElementConfig","tag","console","warn","push","undefined","preload","loadElement","url","isModule","find","config","tags","filter","includes","Error","hasElement","notifier","addElement","script","document","createElement","type","src","onload","resolve","onerror","reject","body","appendChild","stripUrlProtocol","set","Promise","has","replace","ɵfac","ɵprov","token","LazyElementDynamicDirective","renderer","vcr","cfr","cdr","template","elementsLoaderService","length","elementConfig","loadingComponent","loadingTemplateRef","createEmbeddedView","resolveComponentFactory","createComponent","then","clear","originalCreateElement","namespace","markForCheck","catch","error","errorComponent","errorTemplateRef","ɵdir","selectors","inputs","createLazyElementRootGuard","TypeError","LazyElementsModule","lazyElementsLoaderService","elementConfigsMultiProvider","guard","addConfigs","ngModule","providers","provide","useValue","elementConfigs","multi","rootOptions","useFactory","deps","ɵmod","ɵinj","imports","AnimationBuilder","trigger","definitions","animate","timings","styles","sequence","steps","tokens","offset","stateChangeExpr","expr","animation","scheduleMicroTask","cb","NoopAnimationPlayer","duration","delay","_onDoneFns","_onStartFns","_onDestroyFns","_started","_destroyed","_finished","parentPlayer","totalTime","fn","hasStarted","_onStart","triggerMicrotask","_onFinish","finish","position","phaseName","methods","AnimationGroupPlayer","_players","players","doneCount","destroyCount","startCount","total","player","onDone","onDestroy","_onDestroy","onStart","reduce","time","Math","max","init","play","pause","restart","destroy","reset","timeAtPosition","min","setPosition","getPosition","beforeDestroy","isNode","process","toString","optimizeGroupPlayer","normalizeKeyframes","driver","normalizer","element","keyframes","preStyles","postStyles","errors","normalizedKeyframes","previousOffset","previousKeyframe","kf","isSameOffset","normalizedKeyframe","keys","prop","normalizedProp","normalizedValue","normalizePropertyName","normalizeStyleValue","LINE_START","join","listenOnPlayer","eventName","event","callback","copyAnimationEvent","e","makeAnimationEvent","triggerName","fromState","toState","disabled","data","getOrSetAsInMap","map","defaultValue","parseTimelineCommand","command","separatorPos","indexOf","substring","substr","_contains","elm1","elm2","_matches","selector","_query","_isNode","Element","contains","matches","proto","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","apply","results","querySelectorAll","elm","querySelector","_CACHED_BODY","_IS_WEBKIT","validateStyleProperty","style","result","charAt","toUpperCase","matchesElement","containsElement","invokeQuery","hypenatePropsObject","newObj","newProp","NoopAnimationDriver","easing","previousPlayers","scrubberAccessRequested","AnimationDriver","NOOP","resolveTimingValue","match","_convertTimeValueToMS","parseFloat","unit","resolveTiming","allowNegativeValues","exp","delayMatch","easingVal","containsErrors","startIndex","splice","copyObj","obj","destination","copyStyles","readPrototype","getStyleAttributeString","writeStyleAttribute","styleAttrValue","item","getPropertyValue","startsWith","toLowerCase","setAttribute","setStyles","formerStyles","camelProp","dashCaseToCamelCase","eraseStyles","normalizeAnimationEntry","Array","isArray","PARAM_REGEX","RegExp","extractStyleParams","params","exec","lastIndex","interpolateParams","original","str","_","varName","localVal","iteratorToArray","iterator","arr","next","done","DASH_CASE_REGEXP","input","allowPreviousPlayerStylesMerge","balancePreviousStylesIntoKeyframes","previousStyles","previousStyleProps","startingKeyframe","missingStyleProps","computeStyle","visitDslNode","visitor","node","context","visitTrigger","visitState","visitTransition","visitSequence","visitGroup","visitAnimate","visitKeyframes","visitStyle","visitReference","visitAnimateChild","visitAnimateRef","visitQuery","visitStagger","window","getComputedStyle","parseTransitionExpr","transitionValue","expressions","split","eventStr","alias","separator","makeLambdaFromStates","TRUE_BOOLEAN_VALUES","Set","FALSE_BOOLEAN_VALUES","lhs","rhs","LHS_MATCH_BOOLEAN","RHS_MATCH_BOOLEAN","lhsMatch","rhsMatch","SELF_TOKEN_REGEX","buildAnimationAst","metadata","build","_driver","AnimationAstBuilderContext","_resetContextStyleTimingState","currentQuerySelector","collectedStyles","currentTime","queryCount","depCount","states","transitions","def","stateDef","transition","styleAst","astParams","containsDynamicStyles","missingSubs","isObject","stylesObj","sub","add","size","missingSubsArr","values","matchers","normalizeAnimationOptions","furthestTime","step","innerAst","timingAst","makeTimingAst","strValue","some","v","ast","dynamic","currentAnimateTimings","styleMetadata","isEmpty","newStyleData","_styleAst","isEmptyStep","_makeStyleAst","_validateStyleAst","styleTuple","collectedEasing","styleData","styleMap","endTime","startTime","tuple","collectedEntry","updateCollectedStyle","totalKeyframesWithOffsets","offsets","offsetsOutOfOrder","keyframesOutOfRange","offsetVal","generatedOffset","limit","animateDuration","durationUpToThisFrame","parentSelector","currentQuery","includeSelf","hasAmpersand","NG_TRIGGER_SELECTOR","optional","originalSelector","currentTransition","createTimelineInstruction","preStyleProps","postStyleProps","subTimeline","ElementInstructionMap","_map","instructions","delete","existingInstructions","ENTER_TOKEN_REGEX","LEAVE_TOKEN_REGEX","buildAnimationTimelines","rootElement","enterClassName","leaveClassName","startingStyles","finalStyles","subInstructions","AnimationTimelineBuilderVisitor","buildKeyframes","AnimationTimelineContext","currentTimeline","timelines","timeline","containsAnimation","tl","allowOnlyTimelineStyles","elementInstructions","consume","innerContext","createSubContext","_visitSubInstructions","transformIntoNewTimeline","previousNode","instruction","instructionTimings","appendInstructionToTimeline","updateOptions","subContextCount","ctx","snapshotCurrentStyles","DEFAULT_NOOP_PREVIOUS_NODE","delayNextStep","applyStylesToKeyframe","innerTimelines","mergeTimelineCollectedStyles","_visitTiming","incrementTime","getCurrentStyleProperties","forwardFrame","applyEmptyStep","innerTimeline","forwardTime","elms","currentQueryTotal","sameElementTimeline","currentQueryIndex","parentContext","abs","maxTime","currentStaggerTime","startingTime","_enterClassName","_leaveClassName","initialTimeline","skipIfExists","newOptions","optionsToUpdate","newParams","paramsToUpdate","oldParams","newTime","target","fork","_copyOptions","updatedTimings","builder","SubTimelineBuilder","stretchStartingKeyframe","query","slice","_elementTimelineStylesLookup","_previousKeyframe","_currentKeyframe","_keyframes","_styleSummary","_pendingStyles","_backFill","_currentEmptyStepKeyframe","_localTimelineStyles","_globalTimelineStyles","_loadKeyframe","hasPreStyleStep","allStyles","allProperties","val","_updateStyle","props","properties","details0","details1","finalKeyframes","keyframe","finalKeyframe","preProps","postProps","kf0","kf1","_stretchStartingKeyframe","super","newKeyframes","startingGap","newFirstKeyframe","oldFirstKeyframe","roundOffset","decimalPoints","mult","pow","round","AnimationStyleNormalizer","WebAnimationsStyleNormalizer","propertyName","userProvidedProperty","normalizedProperty","strVal","trim","DIMENSIONAL_PROP_MAP","valAndSuffixMatch","createTransitionInstruction","isRemovalTransition","fromStyles","toStyles","queriedElements","EMPTY_OBJECT","AnimationTransitionFactory","_triggerName","_stateStyles","currentState","nextState","matchFns","stateName","backupStateStyler","stateStyler","backupStyles","buildStyles","currentOptions","nextOptions","skipAstBuild","transitionAnimationParams","currentStateStyles","nextAnimationParams","nextStateStyles","preStyleMap","postStyleMap","isRemoval","animationOptions","assign","queriedElementsList","AnimationStateStyles","defaultParams","combinedParams","styleObj","AnimationTrigger","transitionFactories","balanceProperties","fallbackTransition","f","key1","key2","EMPTY_INSTRUCTION_MAP","bodyNode","_normalizer","_animations","_playersById","id","autoStylesMap","inst","_buildPlayer","_getPlayer","index","baseEvent","args","register","EMPTY_PLAYER_ARRAY","NULL_REMOVAL_STATE","namespaceId","setForRemoval","setForMove","hasAnimation","removedBeforeQueried","NULL_REMOVED_QUERIED_STATE","StateValue","isObj","DEFAULT_STATE_VALUE","AnimationTransitionNamespace","hostElement","_engine","_triggers","_queue","_elementListeners","_hostClassName","addClass","phase","listeners","triggersWithStates","statesByElement","NG_TRIGGER_CLASSNAME","afterFlush","defaultToFallback","_getTrigger","absorbOptions","a","b","k1","k2","matchStyles","reportError","playersOnElement","playersByElement","queued","matchTransition","isFallbackTransition","totalQueuedPlayers","removeClass","stateMap","entry","elementPlayers","namespaces","fetchNamespacesByElement","triggerLeaveAnimation","clearElementCache","afterFlushAnimationsDone","destroyAfterComplete","triggerStates","markElementAsRemoved","processLeaveNode","visitedTriggers","listener","engine","childElementCount","_signalRemovalForInnerTriggers","containsPotentialParentTransition","totalAnimations","currentPlayers","playersByQueriedElement","parent","parentNode","prepareLeaveAnimationListeners","removalFlag","destroyInnerAnimations","_onRemovalComplete","microtaskId","destroyed","markedForDestroy","sort","d0","d1","containsData","newHostElements","disabledNodes","_namespaceLookup","_namespaceList","_flushFns","_whenQuietFns","namespacesByHostElement","collectedEnterElements","collectedLeaveElements","onRemovalComplete","_balanceNamespaceList","collectEnterElement","found","createNamespace","_fetchNamespace","elementStates","nsId","isElementNode","insertBefore","details","insertNode","isHostElement","removeNode","hostNS","listen","subTimelines","skipBuildAst","containerElement","destroyActiveAnimationsForElement","finishActiveQueriedAnimationOnElement","markElementAsDisabled","cleanupFns","_flushAnimations","quietFns","skippedPlayers","skippedPlayersMap","queuedInstructions","allPreStyleElements","allPostStyleElements","disabledElementsSet","nodesThatAreDisabled","allTriggerElements","from","enterNodeMap","buildRootMap","enterNodeMapIds","nodes","root","className","allLeaveNodes","mergedLeaveNodes","leaveNodesWithoutAnimations","leaveNodeMapIds","leaveNodeMap","allPlayers","erroneousTransitions","drainQueuedTransitions","nodeIsOrphaned","_buildInstruction","append","stringMap","setVal","allPreviousPlayersMap","animationElementMap","_beforeAnimationBuild","_getPreviousPlayers","prevPlayer","replaceNodes","replacePostStylesAsPre","postStylesMap","cloakAndComputeStyles","preStylesMap","post","pre","rootPlayers","subPlayers","NO_PARENT_ANIMATION_ELEMENT_DETECTED","overrideTotalTime","parentWithAnimation","parentsToAdd","detectedParent","innerPlayer","_buildAnimation","setRealPlayer","parentPlayers","playersForElement","syncPlayerEvents","queriedPlayerResults","queriedInnerElements","j","queriedPlayers","activePlayers","removeNodesAfterAnimationDone","elementContainsData","isQueriedElement","toStateValue","queriedElementPlayers","isRemovalAnimation","targetNameSpaceId","targetTriggerName","timelineInstruction","realPlayer","getRealPlayer","allQueriedPlayers","allConsumedElements","allSubElements","allNewPlayers","finalPlayers","_flattenGroupPlayersRecur","wrappedPlayer","currentValues","_player","_containsRealPlayer","_queuedCallbacks","triggerCallback","_queueEvent","cloakElement","oldValue","display","valuesMap","elementPropsMap","defaultStyle","cloakVals","failedElements","roots","rootMap","nodeSet","localRootMap","getRoot","classList","classes","remove","postEntry","preEntry","AnimationEngine","_triggerCache","_transitionEngine","_timelineEngine","componentId","cacheKey","registerTrigger","disable","action","eventPhase","flush","concat","whenRenderingDone","packageNonAnimatableStyles","startStyles","endStyles","filterNonAnimatableStyles","SpecialCasedStyles","_element","_startStyles","_endStyles","_state","initialStyles","initialStylesByElement","_initialStyles","start","WeakMap","isNonAnimatableStyle","ElementAnimationStyleHandler","_name","_duration","_delay","_easing","_fillMode","_onDoneFn","_startTime","_position","_eventFn","_handleCallback","anim","getAnimationStyle","char","count","setAnimationStyle","addRemoveAnimationEvent","Date","now","playPauseAnimation","findIndexForAnimation","timestamp","_ngTestManualTimestamp","elapsedTime","toFixed","animationName","findMatchingTokenIndex","status","searchToken","doRemove","removeEventListener","addEventListener","CssKeyframesPlayer","_finalStyles","_specialStyles","currentSnapshot","_buildStyler","_styler","_flushStartFns","_flushDoneFns","resume","finished","_startingStyles","__initialized","_styles","setProperty","removeProperty","CssKeyframesDriver","_count","_head","_warningIssued","keyframeStr","tab","kfElm","innerHTML","_notifyFaultyScrubber","previousCssKeyframePlayers","flatKeyframes","buildKeyframeElement","specialStyles","removeChild","WebAnimationsPlayer","_initialized","_preparePlayerBeforeStart","domPlayer","_triggerWebAnimation","_finalKeyframe","_resetDomPlayerState","cancel","WebAnimationsDriver","_isNativeImpl","test","getElementAnimateFn","_cssKeyframesDriver","supported","playerOptions","fill","previousWebAnimationPlayers","BrowserAnimationBuilder","rootRenderer","doc","_nextAnimationId","_renderer","createRenderer","encapsulation","None","issueAnimationCommand","_id","RendererAnimationPlayer","_command","_listen","AnimationRendererFactory","delegate","_zone","_currentId","_microtaskId","_animationCallbacksBuffer","_rendererCache","_cdRecurDepth","promise","BaseAnimationRenderer","AnimationRenderer","begin","run","runOutsideAngular","_scheduleCountTask","end","destroyNode","createComment","createText","newChild","onInsert","refChild","oldChild","onRemove","selectorOrNode","preserveContent","selectRootElement","nextSibling","el","removeAttribute","flags","setStyle","removeStyle","disableAnimations","setValue","dotIndex","scheduleListenerCallback","InjectableAnimationEngine","ANIMATION_MODULE_TYPE","BROWSER_ANIMATIONS_PROVIDERS","useClass","zone","BrowserAnimationsModule","Permissions","EMPTY_STATE","user","topic","permissions","NONE","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","stack","log","hostReportError","err","setTimeout","empty","closed","useDeprecatedSynchronousErrorHandling","UnsubscriptionError","UnsubscriptionErrorImpl","message","Subscription","unsubscribe","_parentOrParents","_subscriptions","_unsubscribe","flattenUnsubscriptionErrors","len","teardown","subscription","EMPTY","tmp","subscriptions","subscriptionIndex","errs","rxSubscriber","random","destinationOrNext","complete","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","subscriber","_next","_error","_complete","_parentSubscriber","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","project","thisArg","source","lift","MapOperator","subscribe","predicate","FilterOperator","outerValue","outerIndex","notifyNext","notifyError","notifyComplete","subscribeToArray","array","getSymbolIterator","observable","isArrayLike","isPromise","subscribeTo","obs","iterable","return","noop","Observable","_isScalar","_subscribe","operator","sink","nextOrObserver","_trySubscribe","observer","promiseCtor","getPromiseCtor","operations","fns","prev","subscribeToResult","outerSubscriber","innerSubscriber","innerValue","innerIndex","innerSub","scheduleArray","scheduler","schedule","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","pipe","ii","MergeMapOperator","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscription","shift","identity","mergeAll","concatAll","EmptyError","EmptyErrorImpl","ArgumentOutOfRangeError","ArgumentOutOfRangeErrorImpl","takeLast","ring","idx","throwIfEmpty","errorFactory","defaultErrorFactory","ThrowIfEmptyOperator","hasValue","defaultIfEmpty","DefaultIfEmptyOperator","catchError","CatchOperator","caught","err2","_unsubscribeAndRecycle","take","first","hasDefaultValue","tap","DoOperator","_tapNext","_tapError","_tapComplete","EveryOperator","everyValueMatch","switchMap","SwitchMapOperator","isScheduler","observables","pop","startWith","ScanOperator","accumulator","seed","hasSeed","_seed","concatMap","finalize","FinallyOperator","RouterEvent","NavigationStart","navigationTrigger","restoredState","NavigationEnd","urlAfterRedirects","NavigationCancel","reason","NavigationError","RoutesRecognized","state","GuardsCheckStart","GuardsCheckEnd","shouldActivate","ResolveStart","ResolveEnd","RouteConfigLoadStart","route","path","RouteConfigLoadEnd","ChildActivationStart","snapshot","routeConfig","ChildActivationEnd","ActivationStart","ActivationEnd","Scroll","routerEvent","anchor","ɵEmptyOutletComponent","ɵcmp","decls","vars","rf","directives","ParamsAsMap","convertToParamMap","navigationCancelingError","defaultUrlMatcher","segments","segmentGroup","parts","pathMatch","hasChildren","posParams","part","segment","consumed","LoadedRouterConfig","routes","validateConfig","parentPath","validateNode","getFullPath","fullPath","component","children","loadChildren","outlet","redirectTo","matcher","currentRoute","standardizeConfig","shallowEqual","equalArraysOrString","every","aItem","flatten","wrapIntoObservable","containsTree","container","containee","exact","queryParams","equalSegmentGroups","equalPath","numberOfChildren","containsSegmentGroup","containsSegmentGroupHelper","containeePaths","current","UrlTree","fragment","_queryParamMap","DEFAULT_SERIALIZER","serialize","UrlSegmentGroup","k","serializePaths","UrlSegment","parameters","_parameterMap","serializePath","as","bs","mapChildrenIntoArray","res","child","childOutlet","UrlSerializer","DefaultUrlSerializer","UrlParser","parseRootSegment","parseQueryParams","parseFragment","tree","serializeSegment","primary","strParams","encodeUriQuery","encodeURI","encodeUriString","encodeURIComponent","encodeUriSegment","decode","decodeURIComponent","decodeQuery","SEGMENT_RE","matchSegments","QUERY_PARAM_RE","QUERY_PARAM_VALUE_RE","remaining","consumeOptional","peekStartsWith","parseChildren","parseQueryParam","parseSegment","capture","parseParens","parseMatrixParams","parseParam","valueMatch","decodedKey","decodedVal","currentVal","allowPrimary","outletName","Tree","_root","pathFromRoot","findNode","findPath","cc","unshift","TreeNode","nodeChildrenAsMap","RouterState","setRouterState","createEmptyState","urlTree","rootComponent","activated","ActivatedRouteSnapshot","RouterStateSnapshot","emptyUrl","emptyParams","emptyData","emptyQueryParams","futureSnapshot","_futureSnapshot","_routerState","firstChild","_paramMap","inheritedParamsDataResolve","paramsInheritanceStrategy","inheritingStartingFrom","curr","_resolvedData","urlSegment","lastPathIndex","_urlSegment","_lastPathIndex","_resolve","serializeNode","advanceActivatedRoute","nextSnapshot","equalParamsAndUrlSegments","isMatrixParams","outlets","segmentPath","oldSegmentGroup","newSegmentGroup","qp","replaceSegment","oldSegment","newSegment","Navigation","isAbsolute","numberOfDoubleDots","commands","cmdWithOutlet","Position","processChildren","getPath","updateSegmentGroup","updateSegmentGroupChildren","currentCommandIndex","currentPathIndex","noMatch","pathIndex","commandIndex","compare","slicedCommands","g","createNewSegmentGroup","paths","createNewSegmentChildren","stringify","ActivateRoutes","routeReuseStrategy","futureState","currState","forwardEvent","parentContexts","futureRoot","currRoot","deactivateChildRoutes","activateChildRoutes","futureNode","currNode","contexts","futureChild","childOutletName","deactivateRoutes","childName","deactivateRouteAndItsChildren","future","getContext","shouldDetach","detachAndStoreRouteSubtree","deactivateRouteAndOutlet","componentRef","detach","onOutletDeactivated","store","deactivate","activateRoutes","getOrCreateContext","shouldAttach","stored","retrieve","onOutletReAttached","attachRef","attach","advanceActivatedRouteNodeAndItsChildren","_loadedConfig","cmpFactoryResolver","componentFactoryResolver","resolver","activateWith","isUrlTree","NoMatch","AbsoluteRedirect","absoluteRedirect","newTree","namedOutletsRedirect","moduleInjector","configLoader","urlSerializer","allowRedirects","expandSegmentGroup","rootSegmentGroup","createUrlTree","noMatchError","rootCandidate","expandChildren","expandSegment","waitHead","waitTail","mapped","expandSegmentAgainstRoute","noLeftoversInUrl","getOutlet","matchSegmentAgainstRoute","expandSegmentAgainstRouteUsingRedirect","expandWildCardWithParamsAgainstRouteUsingRedirect","expandRegularSegmentAgainstRouteUsingRedirect","applyRedirectCommands","lineralizeSegments","newSegments","group","matched","consumedSegments","lastChild","positionalParamSegments","rawSegmentGroup","load","injector","cfg","rawSlicedSegments","getChildConfig","routerConfig","childModule","childConfig","slicedSegments","isEmptyPathRedirect","mergeTrivialChildren","primarySegmentGroup","cs","runCanLoadGuards","shouldLoadResult","canLoad","injectionToken","guardVal","applyRedirectCreatreUrlTree","parse","newRoot","createSegmentGroup","createQueryParams","redirectToParams","actualParams","sourceName","updatedSegments","createSegments","redirectToSegments","actualSegments","findPosParam","findOrReturn","redirectToUrlSegment","pos","CanActivate","CanDeactivate","getAllRouteGuards","getChildRouteGuards","futurePath","checks","canDeactivateChecks","canActivateChecks","prevChildren","shouldRun","runGuardsAndResolvers","getToken","isActivated","INITIAL_VALUE","prioritizedGuardValue","acc","list","isPending","innerAcc","fireActivationStart","fireChildActivationStart","runCanActivate","futureRSS","futureARS","canActivate","canActivateObservables","runCanActivateChild","canActivateChildGuardsMapped","reverse","canActivateChild","guards","guardsMapped","NoMatch$1","rootComponentType","relativeLinkResolution","split$1","processSegmentGroup","freeze","rootNode","routeState","inheritParamsAndData","routeNode","processSegment","names","routeWithSameOutletName","localeCompare","processSegmentAgainstRoute","rawSegment","getData","getSourceSegmentGroup","getPathIndexShift","getResolve","_sourceSegment","_segmentIndexShift","emptyPathMatch","getOutlet$1","primarySegment","switchTap","nextResult","DefaultRouteReuseStrategy","detachedTree","ROUTES","loader","compiler","onLoadStartListener","onLoadEndListener","parentInjector","loadModuleFactory","compileModuleAsync","OutletContext","ChildrenOutletContexts","DefaultUrlHandlingStrategy","newUrlPart","wholeUrl","defaultErrorHandler","defaultMalformedUriErrorHandler","defaultRouterHook","runExtras","Router","rootContexts","location","lastSuccessfulNavigation","currentNavigation","navigationId","isNgZoneEnabled","events","errorHandler","malformedUriErrorHandler","navigated","lastSuccessfulId","hooks","beforePreactivation","afterPreactivation","urlHandlingStrategy","onSameUrlNavigation","urlUpdateStrategy","ngZone","resetConfig","currentUrlTree","rawUrlTree","browserUrlTree","triggerEvent","routerState","currentRawUrl","extractedUrl","extract","rawUrl","extras","targetSnapshot","currentRouterState","targetRouterState","guardsResult","navigations","setupNavigations","processNavigations","eventsSubject","completed","errored","initialUrl","previousNavigation","urlTransition","shouldProcessUrl","getValue","serializeUrl","finalUrl","serializer","recognize","skipLocationChange","setBrowserUrl","replaceUrl","routesRecognized","navStart","appliedUrlTree","guardsStart","currRSS","check","currARS","canDeactivate","canDeactivateObservables","evt","guardsEnd","resetUrlToCurrentUrlTree","navCancel","resolveStart","dataResolved","canActivateChecksResolved","resolvedData","resolveEnd","prevState","createNode","shouldReuseRoute","detachedRouteHandle","setFutureSnapshotsOfActivatedRoutes","merge","activate","redirecting","resetStateAndUrl","mergedTree","scheduleNavigation","navError","ee","getTransition","setUpLocationChangeListener","navigateByUrl","locationSubscription","change","parseUrl","dispose","navigationExtras","relativeTo","preserveQueryParams","queryParamsHandling","preserveFragment","q","removeEmptyProps","nav","cmd","cmdIdx","urlPart","partIndex","toRoot","startingPosition","modifier","ci","dd","isInAngularZone","priorPromise","lastNavigation","rej","setTransition","isCurrentPathEqualTo","replaceState","go","storedState","storedUrl","RouterLink","router","tabIndex","nativeElement","preserve","attrBoolValue","hostBindings","onClick","routerLink","RouterLinkWithHref","locationStrategy","updateTargetUrlAndHref","changes","button","ctrlKey","metaKey","shiftKey","href","prepareExternalUrl","hostVars","$event","features","RouterLinkActive","link","linkWithHref","isActive","routerLinkActiveOptions","update","links","linksWithHrefs","hasActiveLinks","isActiveCheckFn","isLinkActive","contentQueries","dirIndex","_t","routerLinkActive","exportAs","RouterOutlet","changeDetector","_activatedRoute","activateEvents","deactivateEvents","onChildOutletCreated","onChildOutletDestroyed","instance","cmp","ref","activatedRoute","insert","hostView","emit","childContexts","OutletInjector","outputs","notFoundValue","PreloadingStrategy","RouterPreloader","moduleLoader","preloadingStrategy","processRoutes","preloadConfig","RouterScroller","viewportScroller","lastId","lastSource","restoredId","scrollPositionRestoration","anchorScrolling","setHistoryScrollRestoration","routerEventsSubscription","createScrollEvents","scrollEventsSubscription","consumeScrollEvents","getScrollPosition","scheduleScrollEvent","scrollToPosition","scrollToAnchor","ROUTER_CONFIGURATION","ROUTER_FORROOT_GUARD","ROUTER_PROVIDERS","opts","enableTracing","dom","logGroup","constructor","logGroupEnd","routerNgProbeToken","RouterModule","provideRoutes","provideForRootGuard","provideLocationStrategy","createRouterScroller","useExisting","getAppInitializer","ROUTER_INITIALIZER","getBootstrapListener","scrollOffset","setOffset","platformLocationStrategy","baseHref","useHash","RouterInitializer","initNavigation","resultOfPreactivationDone","isLegacyDisabled","isLegacyEnabled","initialNavigation","bootstrappedComponentRef","preloader","routerScroller","components","setUpPreloading","resetRootComponentType","componentTypes","appInitializer","bootstrapListener","hasModifierKey","modifiers","altKey","work","pending","recycleAsyncId","requestAsyncId","setInterval","clearInterval","_execute","errorValue","actions","Scheduler","SchedulerAction","scheduled","execute","debounceTime","dueTime","DebounceTimeOperator","debouncedSubscription","lastValue","clearDebounce","dispatchNext","debouncedNext","coerceBooleanProperty","coerceNumberProperty","fallbackValue","isNaN","coerceArray","coerceCssPixelValue","coerceElement","elementOrRef","hasV8BreakIterator","Intl","v8BreakIterator","_a","supportsPassiveEvents","shadowDomIsSupported","Platform","_platformId","isBrowser","EDGE","navigator","userAgent","TRIDENT","BLINK","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","PlatformModule","normalizePassiveListenerOptions","_getShadowRoot","head","createShadowRoot","attachShadow","getRootNode","ShadowRoot","MutationObserverFactory","MutationObserver","ContentObserver","_mutationObserverFactory","_observedElements","_cleanupObserver","_observeElement","_unobserveElement","stream","mutations","observe","characterData","childList","subtree","disconnect","CdkObserveContent","_contentObserver","_elementRef","_ngZone","_disabled","_currentSubscription","_debounce","debounce","ObserversModule","FocusKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","_vertical","_allowedModifierKeys","_skipPredicateFn","_pressedLetters","tabOut","newItems","newIndex","toArray","shouldWrap","enabled","direction","_horizontal","debounceInterval","getLabel","letter","inputString","items","_getItemsArray","setActiveItem","previousActiveItem","updateActiveItem","keyCode","isModifierAllowed","setNextItemActive","setPreviousItemActive","toLocaleUpperCase","String","fromCharCode","preventDefault","_setActiveItemByIndex","setFirstItemActive","_setActiveItemByDelta","setLastItemActive","itemArray","activeItem","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","_origin","origin","focus","InteractivityChecker","_platform","hasAttribute","offsetWidth","offsetHeight","getClientRects","visibility","frameElement","ownerDocument","defaultView","frameType","nodeName","getTabIndexValue","isVisible","tabIndexValue","inputType","hasValidTabIndex","isDisabled","getAttribute","parseInt","_checker","_document","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","_startAnchor","_endAnchor","_toggleAnchorTabIndex","startAnchor","endAnchor","_createAnchor","_executeOnStable","focusInitialElement","bound","markers","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","isFocusable","_getRegionBoundary","isTabbable","childNodes","tabbableChild","nodeType","ELEMENT_NODE","isEnabled","isStable","onStable","asObservable","FocusTrapFactory","deferCaptureElements","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","defaultOptions","politeness","clearTimeout","_previousTimeout","textContent","previousElements","getElementsByClassName","liveEl","isFakeMousedownFromScreenReader","buttons","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","passive","FocusMonitor","_windowFocused","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_documentKeydownListener","_lastTouchTarget","_setOriginForCurrentEventQueue","_documentMousedownListener","_documentTouchstartListener","_touchTimeoutId","getTarget","_windowFocusListener","_windowFocusTimeoutId","_rootNodeFocusAndBlurListener","handler","_onFocus","_onBlur","parentElement","_detectionMode","detectionMode","checkChildren","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","elementInfo","_setClasses","_removeGlobalListeners","_info","stopMonitoring","shouldSet","_lastFocusOrigin","_wasCausedByTouch","_toggleClass","_originTimeoutId","focusTarget","Node","_getFocusOrigin","_emitOrigin","relatedTarget","rootNodeFocusListeners","_getWindow","composedPath","CdkMonitorFocus","_focusMonitor","cdkFocusChange","_monitorSubscription","monitor","HighContrastModeDetector","testElement","backgroundColor","documentWindow","computedStyle","computedColor","bodyClasses","getHighContrastMode","A11yModule","highContrastModeDetector","_applyBodyHighContrastModeCssClasses","DIR_DOCUMENT","Directionality","htmlDir","documentElement","dir","Dir","_dir","_isInitialized","old","_rawDir","BidiModule","VERSION$1","MATERIAL_SANITY_CHECKS","SUPPORTS_INTL_API","MatCommonModule","sanityChecks","_hasDoneGlobalChecks","_sanityChecks","_checkDoctypeIsDefined","_checkThemeIsPresent","_checkCdkVersionMatch","win","_isTestEnv","__karma__","jasmine","_checksAreEnabled","doctype","theme","version","full","mixinDisabled","base","mixinColor","defaultColor","color","_color","colorPalette","mixinDisableRipple","_disableRipple","_localeChanges","isDateInstance","isValid","invalid","locale","second","getYear","getMonth","getDate","firstValid","secondValid","compareDate","date","ErrorStateMatcher","control","form","touched","submitted","MatLineModule","RippleRef","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","passiveEventOptions","pointerDownEvents","pointerUpEvents","_target","elementOrElementRef","platform","_isPointerDown","_activeRipples","_pointerUpEventsRegistered","_containerElement","y","containerRect","_containerRect","getBoundingClientRect","animationConfig","centered","left","width","top","height","radius","rect","distX","right","distY","bottom","sqrt","offsetX","offsetY","ripple","transitionDuration","transform","rippleRef","persistent","_mostRecentTransientRipple","_runTimeoutOutsideZone","isMostRecentTransientRipple","fadeOut","wasActive","rippleEl","opacity","_triggerElement","_removeTriggerEvents","_registerEvents","_onMousedown","_onTouchStart","_onPointerUp","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","rippleDisabled","fadeInRipple","clientX","clientY","rippleConfig","touches","changedTouches","terminateOnPointerUp","eventTypes","MAT_RIPPLE_GLOBAL_OPTIONS","MatRipple","globalOptions","_animationMode","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","fadeOutAll","setupTriggerEvents","configOrX","hostAttrs","unbounded","MatRippleModule","MatPseudoCheckboxModule","MatOptionModule","ObjectUnsubscribedError","ObjectUnsubscribedErrorImpl","observers","subscriberIndex","Subject","hasError","thrownError","copy","RefCountOperator","connectable","_refCount","refCounter","connection","connect","refCount","sharedConnection","_connection","subjectFactory","_isComplete","getSubject","_subject","connectableObservableDescriptor","connectableProto","writable","shareSubjectFactory","getMatIconNameNotFoundError","iconName","getMatIconFailedToSanitizeUrlError","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgElement","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIconInNamespace","addSvgIconLiteralInNamespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","svg","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","handleError","foundIcon","_extractSvgIconFromSet","_fetchIcon","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","div","attributes","viewBox","iconConfig","withCredentials","inProgressFetch","req","responseType","subjectOrSubjectFactory","configNamespace","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","_location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","inline","_fontSet","_cleanupFontValue","_fontIcon","svgIconChanges","svgIcon","_splitIconName","getNamedSvgIcon","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","_cacheChildrenWithExternalReferences","layoutElement","childCount","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","attrs","elementsWithFuncIri","elementWithReference","ngContentSelectors","changeDetection","MatIconModule","IconsService","sanitizer","icons","addSvgIcon","bypassSecurityTrustResourceUrl","TabManagerService","tabElements","currentTab","tabs","nextTab","getTabByRoute","navigate","registerIcons","icon","StateService","throwPortalAlreadyAttachedError","Portal","host","hasAttached","_attachedHost","ComponentPortal","viewContainerRef","TemplatePortal","templateRef","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","anchorNode","setDisposeFn","replaceChild","componentFactory","attachView","detachView","_getComponentRootNode","viewContainer","viewRef","detectChanges","rootNodes","CdkPortal","CdkPortalOutlet","_viewContainerRef","attached","_getRootNode","_attachedRef","PortalHostDirective","ɵPortalHostDirective_BaseFactory","PortalModule","PortalInjector","_parentInjector","_customTokens","DistinctUntilChangedOperator","keySelector","hasKey","takeUntil","takeUntilSubscriber","notifierSubscription","seenValue","AuditOperator","durationSelector","throttled","clearThrottle","isNumeric","dispatch","period","auditTime","periodOrScheduler","due","ScrollDispatcher","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","scrollable","elementScrolled","scrollableReference","auditTimeInMs","_addGlobalListener","_removeGlobalListener","deregister","ancestors","getAncestorScrollContainers","scrolled","scrollingContainers","_subscription","_scrollableContainsElement","scrollableElement","getElementRef","ViewportRuler","_change","_invalidateCache","_updateViewportSize","_viewportSize","output","scrollPosition","getViewportScrollPosition","getViewportSize","documentRect","scrollTop","scrollY","scrollLeft","scrollX","throttleTime","innerWidth","innerHeight","CdkScrollableModule","ScrollingModule","MatTab_ng_template_0_Template","MatTabBody_ng_template_2_Template","a0","animationDuration","a1","_c3","_c4","MatTabGroup_div_2_ng_template_2_ng_template_0_Template","MatTabGroup_div_2_ng_template_2_Template","tab_r4","$implicit","templateLabel","MatTabGroup_div_2_ng_template_3_Template","textLabel","MatTabGroup_div_2_Template","_r12","i_r5","ctx_r11","_r0","_handleClick","ctx_r1","selectedIndex","_getTabLabelId","disableRipple","_getTabIndex","_tabs","_getTabContentId","ariaLabel","ariaLabelledby","MatTabGroup_mat_tab_body_5_Template","_r16","_removeTabBodyWrapperHeight","_setTabBodyWrapperHeight","tab_r13","i_r14","ctx_r3","content","_c5","_c6","_c7","_c8","_MAT_INK_BAR_POSITIONER","offsetLeft","MatInkBar","_inkBarPositioner","show","requestAnimationFrame","_setStyles","positions","inkBar","MatTabContent","MatTabLabel","ɵMatTabLabel_BaseFactory","MatTabBase","_MatTabMixinBase","MAT_TAB_GROUP","MatTab","_closestTabGroup","_contentPortal","_stateChanges","_templateLabel","_explicitContent","_implicitContent","viewQuery","matTabsAnimations","translateTab","minHeight","MatTabBodyPortal","_host","_centeringSub","_leavingSub","ngOnInit","_beforeCentering","_isCenterPosition","isCentering","_content","_afterLeavingCenter","ngOnDestroy","_MatTabBodyBase","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","_onCentered","_computePositionAnimationState","distinctUntilChanged","_positionIndex","_computePositionFromOrigin","clientHeight","_getLayoutDirection","MatTabBody","_portalHost","consts","_onTranslateTabStarted","MAT_TABS_CONFIG","MatTabChangeEvent","MatTabGroupMixinBase","_MatTabGroupMixinBase","_MatTabGroupBase","_changeDetectorRef","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","disablePagination","_animationDuration","_backgroundColor","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","_subscribeToAllTabChanges","_subscribeToTabLabels","_allTabs","notifyOnChanges","_tabHeader","_alignInkBarToSelectedTab","tabHeight","wrapper","_tabBodyWrapper","tabHeader","focusIndex","dynamicHeight","MatTabGroup","animationMode","_focusChanged","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","passiveEventListenerOptions","MatPaginatedTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","selectFocusedIndex","indexFocused","_stopInterval","_keyManager","_previousPaginator","_handlePaginatorPress","_nextPaginator","dirChange","resize","realign","updatePagination","withHorizontalOrientation","withWrap","newFocusIndex","_setTabFocus","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_itemSelected","onKeydown","_currentTextContent","_checkPaginationEnabled","activeItemIndex","_isValidIndex","containerEl","_tabListContainer","scrollWidth","scrollDistance","translateX","_tabList","_scrollTo","_scrollHeader","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","_getMaxScrollDistance","selectedItem","selectedLabelWrapper","_inkBar","alignToElement","hide","mouseEvent","maxScrollDistance","distance","_MatTabHeaderBase","viewportRuler","MatTabHeader","_handlePaginatorClick","_handleKeydown","_onContentChanges","MatTabsModule","AppComponent","tabManager","stateService","state$","currentTab$","insertNarnia","initializeTabs","narniaScript","defer","narnia","after","stateChange","updateState","detail","_previousHTMLStyles","_isEnabled","_canBeEnabled","_previousScrollPosition","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","viewport","scrollHeight","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_config","_scrollSubscription","_detach","_overlayRef","overlayRef","threshold","_initialScrollPosition","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","containerBounds","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","ScrollStrategyOptions","close","block","reposition","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","configKeys","ConnectionPositionPair","overlay","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","validateHorizontalPosition","OverlayKeyboardDispatcher","_attachedOverlays","_keydownListener","overlays","_keydownEvents","_isAttached","isTestEnvironment","OverlayContainer","_createContainer","oppositePlatformContainers","_portalOutlet","_pane","_keyboardDispatcher","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","strategy","sizeConfig","getDirection","minWidth","maxWidth","maxHeight","enablePointer","pointerEvents","timeoutId","backdropToDetach","finishDetach","cssClasses","isAdd","cssClass","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","_boundingBox","_isInitialRender","_lastPosition","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","originRect","viewportRect","flexibleFits","fallback","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","margin","flexibleDimensions","growAfterOpen","canPush","isLocked","_transformOriginSelector","startX","_isRtl","endX","overlayStartX","overlayStartY","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","horizontalFit","overflowRight","overflowBottom","overflowTop","overflowLeft","pushX","pushY","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","horizontalStyleProperty","clientWidth","originBounds","overlayBounds","scrollContainerBounds","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","currentValue","currentOverflow","axis","pair","units","ConnectedPositionStrategy","originPos","overlayPos","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","OverlayPositionBuilder","nextUniqueId","Overlay","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","OverlayModule","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","MatButton","isRoundButton","_hasHostAttributes","isIconButton","_getHostElement","focusVia","attribute","_isRippleDisabled","MatButtonModule","SkipOperator","LayoutModule","mediaQueriesForWebkitCompatibility","mediaQueryStyleNode","MediaMatcher","_matchMedia","matchMedia","noopMatchMedia","sheet","insertRule","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_queries","_destroySubject","splitQueries","mediaQuery","_registerQuery","mql","stateObservable","breakpointStates","response","breakpoints","nextMql","queries","a2","SimpleSnackBar_div_2_Template","_r2","ctx_r0","MatSnackBarContainer_ng_template_0_Template","MAX_TIMEOUT","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","_durationTimeoutId","dismissWithAction","dismissedByAction","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","hasAction","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","_assertNotAttached","_applySnackBarClasses","_role","_completeExit","onEnter","onMicrotaskEmpty","panelClasses","onAnimationEnd","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","_attach","openFromComponent","containerPortal","containerRef","userConfig","_createOverlay","_attachSnackBarContainer","_createInjector","contentRef","detachments","_animateSnackBar","afterDismissed","enter","afterOpened","_dismissAfter","announce","global","isLeft","isRight","centerHorizontally","ToasterService","snackbar","commonConfig","application","open","MatCardContent","MatCardTitle","MatCard","MatCardModule","ErrorComponent","toaster","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","progressbarId","MatProgressBar","_isNoopAnimation","_value","_bufferValue","animationEnd","_animationEndSubscription","_rectangleFillValue","clamp","bufferValue","_primaryValueBar","_bufferTransform","_primaryTransform","MatProgressBarModule","LoadingComponent","MatFormFieldModule","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MatAutocompleteModule","MatBadgeModule","MatBottomSheetModule","MatButtonToggleModule","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MAT_CHIPS_DEFAULT_OPTIONS","separatorKeyCodes","MatChipsModule","MatDialogContainer_ng_template_0_Template","MatDialogConfig","role","disableClose","ariaDescribedBy","ariaLabelledBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","throwMatDialogContentAlreadyAttachedError","MatDialogContainer","_focusTrapFactory","_elementFocusedBeforeDialogWasOpened","_animationStateChanged","_setupFocusTrap","_ariaLabelledBy","_containsFocus","_focusTrap","focusInitialElementWhenReady","toFocus","activeElement","_trapFocus","_restoreFocus","_onAnimationStart","_onAnimationDone","uniqueId","_containerInstance","_afterClosed","_beforeClosed","_closeFallbackTimeout","_finishDialogClose","_result","componentInstance","keydownEvents","backdropClick","_recaptureFocus","dialogResult","_startExitAnimation","_getPositionStrategy","centerVertically","addPanelClass","removePanelClass","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MatDialog","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","afterClosed","_removeOpenDialog","_closeDialogs","dialog","_getOverlayConfig","dialogConfig","userInjector","siblings","sibling","dialogs","MatDialogModule","TextFieldModule","MatInputModule","MatDatepickerIntl","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","DateRange","MAT_DATE_RANGE_SELECTION_STRATEGY","DefaultMatCalendarRangeStrategy","_dateAdapter","currentRange","activeDate","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","MatDividerModule","MatGridListModule","MatListModule","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","_MatMenuDirectivesModule","MatMenuModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MatTooltipModule","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","MAT_PAGINATOR_INTL_PROVIDER","parentIntl","MatPaginatorModule","MatProgressSpinnerModule","MatRadioModule","MatSidenavModule","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","MatSliderModule","MatSortHeaderIntl","sortButtonLabel","MAT_SORT_HEADER_INTL_PROVIDER","MatSortModule","CdkStepperModule","MatStepperIntl","optionalLabel","MAT_STEPPER_INTL_PROVIDER","MatStepperModule","CdkTableModule","MatTableModule","MatToolbarModule","CdkTreeNodeDef","when","CdkTreeModule","MatTreeModule","dest","toggleNativeDragInteractions","userSelect","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","parseCssPropertyValue","getMutableClientRect","clientRect","isInsideClientRect","adjustClientRect","isPointerNearClientRect","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","cachedPosition","scrolledParentNode","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","activeEventListenerOptions","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","_pointerUpSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","handle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","_pickupPositionOnPage","dragStartThreshold","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","_getDragDistance","_pointerDirectionDelta","_pointerUp","withRootElement","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","_previewTemplate","_placeholderTemplate","_removeRootElementListeners","_initialTransform","boundaryElement","_containInsideBoundaryOnResize","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","_pointerPositionAtLastDirectionChange","_previewRef","_placeholderRef","stopDragging","_rootElementTapHighlight","_animatePreviewToPlaceholder","_cleanupDragArtifacts","_cleanupCachedDimensions","_lastTouchEventTime","dropContainer","preview","_createPreviewElement","placeholder","_createPlaceholderElement","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","draggable","pointerMove","pointerUp","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","matchElementSize","deepCloneNode","zIndex","placeholderRect","transitionedProperties","propertyIndex","rawDurations","rawDelays","timeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","targetTouches","_getViewportScrollPosition","pageX","pageY","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","clone","descendantsWithId","descendantCanvases","cloneCanvases","correspondingCloneContext","drawImage","sourceRect","clamp$1","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","_startReceiving","_listenToScrollEvents","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","reference","_cacheItemPositions","_cacheParentPositions","_reset","previousItems","_withDropContainer","orientation","_scrollableElements","findIndex","currentItem","pointerDelta","_clientRect","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","fromIndex","toIndex","to","isDraggedItem","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","elementToMeasure","getVisibleElement","_stopReceiving","immediateSibling","itemPositions","lastItemRect","firstItemRect","floor","_canReceive","elementFromPoint","activeSiblings","_sortFromLastPointerPosition","isReceiving","shadowRoot","amount","scrollBy","activeCapturingEventOptions","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","isTouchEvent","upEvent","_clearGlobalListeners","DEFAULT_CONFIG","DragDrop","DragDropModule","ClipboardModule","CdkAccordionModule","MaterialModule","SharedModule","TabContainerComponent","AppRoutingModule","forRoot","AppModule","appRef","customElements","define","bootstrapModule"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,GAAAA,SAAcA,GAAO,OAAON,EAAMM,KAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,iEClFrDhC,EAAOD,QAAUkC,GAAGC,+uCCApBlC,EAAOD,QAAUoC,2BCAjBnC,EAAOD,QAAUkC,GAAGG,6BCApBpC,EAAOD,QAAUkC,GAAGC,OAAOG,2BCA3BrC,EAAOD,QAAUkC,GAAGK,oCCApBtC,EAAOD,QAAUkC,GAAGM,2ECSpB,MAAMC,EAAuB,IAAI,EAAA,eAAe,wBAE1CC,EAA4B,IAAI,EAAA,eAAe,6BAE/CC,EAA0B,IAAI,EAAA,eAAe,2BAE7CC,EAAyB,IAAI,EAAA,eAAe,yBAA0B,CACxEC,WAAY,OACZC,QAAS,IAGH,IAAIC,MAoBRC,EAAa,iDAmBbC,EAKF,YAAYC,EAAUC,GAClBC,KAAKF,SAAWA,EAChBE,KAAKD,QAAUA,EACfC,KAAKC,QAAU,GACVF,IACDC,KAAKD,QAAU,IAOvB,WAAWG,GACPA,EAAWC,QAIXC,IAE2BJ,KAAKK,iBAAiBD,EAAUE,KAEnDC,QAAQC,KAAK,GAAGZ,8BAAuCQ,EAAUE,gFAGjEN,KAAKC,QAAQQ,KAAKL,SAE0BM,IAAtBN,EAAUO,QAC1BP,EAAUO,QACVX,KAAKD,QAAQY,UAEfX,KAAKY,YAAYR,EAAUS,IAAKT,EAAUE,IAAKF,EAAUU,aASzE,iBAAiBR,GACb,OAAON,KAAKC,QAAQc,KAIpBC,GAAUA,EAAOV,MAAQA,GAM7B,QAAQW,GAEJ,IAAIhB,EAAUD,KAAKC,QACfgB,IACAhB,EAAUD,KAAKC,QAAQiB,OAIvBF,GAAUC,EAAKE,SAASH,EAAOV,OAEnCL,EAAQE,QAIRa,GAAUhB,KAAKY,YAAYI,EAAOH,IAAKG,EAAOV,IAAKU,EAAOF,WAQ9D,YAAYD,EAAKP,EAAKQ,GAElB,MAAME,EAAShB,KAAKK,iBAAiBC,GACrC,IAAKO,EAAK,CACN,IAAKG,IAAWA,EAAOH,IACnB,MAAM,IAAIO,MAAM,GAAGxB,gBAAyBU,gBAEhDO,EAAMG,EAAOH,IAQjB,QANiBH,IAAbI,IACAA,EACIE,QAA8BN,IAApBM,EAAOF,SACXE,EAAOF,SACPd,KAAKD,QAAQe,WAEtBR,EACD,MAAM,IAAIc,MAAM,GAAGxB,gBAAyBiB,mEAEhD,IAAKb,KAAKqB,WAAWR,GAAM,CAEvB,MAAMS,EAAWtB,KAAKuB,WAAWV,GAE3BW,EAA4BC,SAASC,cAAc,UACrDZ,IACAU,EAAOG,KAAO,UAElBH,EAAOI,IAAMf,EACbW,EAAOK,OAASP,EAASQ,QACzBN,EAAOO,QAAUT,EAASU,OAC1BP,SAASQ,KAAKC,YAAYV,GAE9B,OAAOxB,KAAKF,SAASnC,IAAIqC,KAAKmC,iBAAiBtB,IAOnD,WAAWA,GAEP,IAAIS,EAOJ,OANAtB,KAAKF,SAASsC,IAAIpC,KAAKmC,iBAAiBtB,GAAM,IAAIwB,QAAQ,CAKzDP,EAASE,IAAYV,EAAW,CAAEQ,QAAAA,EAASE,OAAAA,KACrCV,EAOX,WAAWT,GACP,OAAOb,KAAKF,SAASwC,IAAItC,KAAKmC,iBAAiBtB,IAOnD,iBAAiBA,GACb,OAAOA,EAAI0B,QAAQ,cAAe,YAG1C1C,EAA0B2C,UAAO,SAA2CxE,GAAK,OAAO,IAAKA,GAAK6B,GAA2B,EAAA,sBAAgBL,GAAyB,EAAA,sBAAgBF,EAA2B,KAM9LO,EAA0B4C,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA+C,OAAO,IAAIG,EAA0B,OAAA,EAAA,sBAAA,CAASL,GAAyB,OAAA,EAAA,sBAAA,CAASF,EAA2B,KAAQoD,MAAO7C,EAA2BJ,WAAY,6BAoM7RkD,EAWF,YAAYlB,EAAUmB,EAAUC,EAAKC,EAAKC,EAAKC,EAAUC,GACrDjD,KAAKyB,SAAWA,EAChBzB,KAAK4C,SAAWA,EAChB5C,KAAK6C,IAAMA,EACX7C,KAAK8C,IAAMA,EACX9C,KAAK+C,IAAMA,EACX/C,KAAKgD,SAAWA,EAChBhD,KAAKiD,sBAAwBA,EAKjC,WACI,IAAKjD,KAAKM,KAA2B,IAApBN,KAAKM,IAAI4C,SAAiBlD,KAAKM,IAAIa,SAAS,KACzD,MAAM,IAAIC,MAAM,2JAA8IpB,KAAKM,QAGvK,MAAM6C,EAAgBnD,KAAKiD,sBAAsB5C,iBAAiBL,KAAKM,MACnE,GAEEP,EAAUC,KAAKiD,sBAAsBlD,QAErCqD,EAAmBD,EAAcC,kBAAoBrD,EAAQqD,iBACnE,GAAIpD,KAAKqD,mBACLrD,KAAK6C,IAAIS,mBAAmBtD,KAAKqD,yBAEhC,GAAID,EAAkB,CAEvB,MAAM1D,EAAUM,KAAK8C,IAAIS,wBAAwBH,GACjDpD,KAAK6C,IAAIW,gBAAgB9D,GAE7BM,KAAKiD,sBACArC,YAAYZ,KAAKa,IAAKb,KAAKM,IAAKN,KAAKc,UACrC2C,KAAK,KAINzD,KAAK6C,IAAIa,QAET,MAAMC,EAAwB3D,KAAK4C,SAASlB,cAC5C1B,KAAK4C,SAASlB,cAAgB,CAK7BrE,EAAMuG,KACU,oBAATvG,IACAA,EAAO2C,KAAKM,KAETN,KAAKyB,SAASC,cAAcrE,IAEvC2C,KAAK6C,IAAIS,mBAAmBtD,KAAKgD,UACjChD,KAAK4C,SAASlB,cAAgBiC,EAC9B3D,KAAK+C,IAAIc,iBAERC,MAILC,IAEI,MAAMC,EAAiBb,EAAca,gBAAkBjE,EAAQiE,eAE/D,GADAhE,KAAK6C,IAAIa,QACL1D,KAAKiE,iBACLjE,KAAK6C,IAAIS,mBAAmBtD,KAAKiE,kBACjCjE,KAAK+C,IAAIc,oBAER,GAAIG,EAAgB,CAErB,MAAMtE,EAAUM,KAAK8C,IAAIS,wBAAwBS,GACjDhE,KAAK6C,IAAIW,gBAAgB9D,GACzBM,KAAK+C,IAAIc,oBAGTtD,QAAQwD,MAAM,sDAAyC/D,KAAKM,+MAAgNyD,aAK5RpB,EAA4BH,UAAO,SAA6CxE,GAAK,OAAO,IAAKA,GAAK2E,GAA6B,EAAA,+BAAyB,EAAA,UAAW,EAAA,+BAAyB,EAAA,WAAmB,EAAA,+BAAyB,EAAA,kBAA0B,EAAA,+BAAyB,EAAA,0BAAkC,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyB,EAAA,aAAqB,EAAA,+BAAyB,KAC5bA,EAA4BuB,UAAO,EAAA,+BAAyB,CAAEvC,KAAMgB,EAA6BwB,UAAW,CAAC,CAAC,GAAI,uBAAwB,KAAMC,OAAQ,CAAE9D,IAAK,CAAC,uBAAwB,OAAQO,IAAK,CAAC,0BAA2B,OAAQwC,mBAAoB,CAAC,sCAAuC,sBAAuBY,iBAAkB,CAAC,oCAAqC,oBAAqBnD,SAAU,CAAC,6BAA8B,qBAkGlb,SAASuD,EAA2BtE,GAChC,GAAIA,EACA,MAAM,IAAIuE,UAAU,kHAExB,MAAO,4BAELC,EAMF,YAAYC,EAA2BC,EAA6BC,GAC5DD,GAA+BA,EAA4BvB,QAG3DsB,EAA0BG,WADDF,EAA4BA,EAA4BvB,OAAS,IAQlG,eAAenD,GACX,MAAO,CACH6E,SAAUL,EACVM,UAAW,CACP,CACIC,QAASzF,EACT0F,SAAUhF,GAAWA,EAAQiF,eAAiBjF,EAAQiF,eAAiB,GACvEC,OAAO,GAEX,CACIH,QAASxF,EACTyF,SAAUhF,EAAQmF,YAAcnF,EAAQmF,YAAc,IAE1D,CACIJ,QAASvF,EACT4F,WAAYd,EACZe,KAAM,CAAC,CAAC/F,EAAsB,IAAI,EAAA,SAAY,IAAI,EAAA,cASlE,kBAAkBU,GACd,MAAO,CACH6E,SAAUL,EACVM,UAAW,CACP,CACIC,QAASzF,EACT0F,SAAUhF,GAAWA,EAAQiF,eAAiBjF,EAAQiF,eAAiB,GACvEC,OAAO,aAM3BV,EAAmBc,UAAO,EAAA,8BAAwB,CAAE1D,KAAM4C,IAC1DA,EAAmBe,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAoC1B,GAAK,OAAO,IAAKA,GAAKuG,GAAoB,EAAA,sBAAgB,GAA4B,EAAA,sBAAgBlF,EAAsB,GAAI,EAAA,sBAAgBE,EAAyB,KAAQsF,UAAW,GAAIU,QAAS,CAAC,CAAC,EAAA,mDC3lB5S,MAAMC,GA2KN,SAASC,EAAQpI,EAAMqI,GACnB,MAAO,CAAE/D,KAAM,EAAiBtE,KAAAA,EAAMqI,YAAAA,EAAa3F,QAAS,IA4DhE,SAAS4F,EAAQC,EAASC,EAAS,MAC/B,MAAO,CAAElE,KAAM,EAAiBkE,OAAAA,EAAQD,QAAAA,GAuE5C,SAASE,EAASC,EAAOhG,EAAU,MAC/B,MAAO,CAAE4B,KAAM,EAAkBoE,MAAAA,EAAOhG,QAAAA,GAyC5C,SAAS,EAAMiG,GACX,MAAO,CAAErE,KAAM,EAAekE,OAAQG,EAAQC,OAAQ,MA+B1D,SAAS,EAAM5I,EAAMwI,EAAQ9F,GACzB,MAAO,CAAE4B,KAAM,EAAetE,KAAAA,EAAMwI,OAAAA,EAAQ9F,QAAAA,GA0NhD,SAAS,EAAWmG,EAAiBH,EAAOhG,EAAU,MAClD,MAAO,CAAE4B,KAAM,EAAoBwE,KAAMD,EAAiBE,UAAWL,EAAOhG,QAAAA,GA0QhF,SAASsG,EAAkBC,GACvBjE,QAAQP,QAAQ,MAAM2B,KAAK6C,GAqB/B,MAAMC,EACF,YAAYC,EAAW,EAAGC,EAAQ,GAC9BzG,KAAK0G,WAAa,GAClB1G,KAAK2G,YAAc,GACnB3G,KAAK4G,cAAgB,GACrB5G,KAAK6G,UAAW,EAChB7G,KAAK8G,YAAa,EAClB9G,KAAK+G,WAAY,EACjB/G,KAAKgH,aAAe,KACpBhH,KAAKiH,UAAYT,EAAWC,EAEhC,YACSzG,KAAK+G,YACN/G,KAAK+G,WAAY,EACjB/G,KAAK0G,WAAWvG,QAAQ+G,GAAMA,KAC9BlH,KAAK0G,WAAa,IAG1B,QAAQQ,GACJlH,KAAK2G,YAAYlG,KAAKyG,GAE1B,OAAOA,GACHlH,KAAK0G,WAAWjG,KAAKyG,GAEzB,UAAUA,GACNlH,KAAK4G,cAAcnG,KAAKyG,GAE5B,aACI,OAAOlH,KAAK6G,SAEhB,QACA,OACS7G,KAAKmH,eACNnH,KAAKoH,WACLpH,KAAKqH,oBAETrH,KAAK6G,UAAW,EAGpB,mBACIR,EAAkB,IAAMrG,KAAKsH,aAEjC,WACItH,KAAK2G,YAAYxG,QAAQ+G,GAAMA,KAC/BlH,KAAK2G,YAAc,GAEvB,SACA,WACA,SACI3G,KAAKsH,YAET,UACStH,KAAK8G,aACN9G,KAAK8G,YAAa,EACb9G,KAAKmH,cACNnH,KAAKoH,WAETpH,KAAKuH,SACLvH,KAAK4G,cAAczG,QAAQ+G,GAAMA,KACjClH,KAAK4G,cAAgB,IAG7B,SACA,YAAYY,IACZ,cACI,OAAO,EAGX,gBAAgBC,GACZ,MAAMC,EAAuB,SAAbD,EAAuBzH,KAAK2G,YAAc3G,KAAK0G,WAC/DgB,EAAQvH,QAAQ+G,GAAMA,KACtBQ,EAAQxE,OAAS,GAmBzB,MAAMyE,EACF,YAAYC,GACR5H,KAAK0G,WAAa,GAClB1G,KAAK2G,YAAc,GACnB3G,KAAK+G,WAAY,EACjB/G,KAAK6G,UAAW,EAChB7G,KAAK8G,YAAa,EAClB9G,KAAK4G,cAAgB,GACrB5G,KAAKgH,aAAe,KACpBhH,KAAKiH,UAAY,EACjBjH,KAAK6H,QAAUD,EACf,IAAIE,EAAY,EACZC,EAAe,EACfC,EAAa,EACjB,MAAMC,EAAQjI,KAAK6H,QAAQ3E,OACd,GAAT+E,EACA5B,EAAkB,IAAMrG,KAAKsH,aAG7BtH,KAAK6H,QAAQ1H,QAAQ+H,IACjBA,EAAOC,OAAO,OACJL,GAAaG,GACfjI,KAAKsH,cAGbY,EAAOE,UAAU,OACPL,GAAgBE,GAClBjI,KAAKqI,eAGbH,EAAOI,QAAQ,OACLN,GAAcC,GAChBjI,KAAKoH,eAKrBpH,KAAKiH,UAAYjH,KAAK6H,QAAQU,OAAO,CAACC,EAAMN,IAAWO,KAAKC,IAAIF,EAAMN,EAAOjB,WAAY,GAE7F,YACSjH,KAAK+G,YACN/G,KAAK+G,WAAY,EACjB/G,KAAK0G,WAAWvG,QAAQ+G,GAAMA,KAC9BlH,KAAK0G,WAAa,IAG1B,OACI1G,KAAK6H,QAAQ1H,QAAQ+H,GAAUA,EAAOS,QAE1C,QAAQzB,GACJlH,KAAK2G,YAAYlG,KAAKyG,GAE1B,WACSlH,KAAKmH,eACNnH,KAAK6G,UAAW,EAChB7G,KAAK2G,YAAYxG,QAAQ+G,GAAMA,KAC/BlH,KAAK2G,YAAc,IAG3B,OAAOO,GACHlH,KAAK0G,WAAWjG,KAAKyG,GAEzB,UAAUA,GACNlH,KAAK4G,cAAcnG,KAAKyG,GAE5B,aACI,OAAOlH,KAAK6G,SAEhB,OACS7G,KAAKgH,cACNhH,KAAK2I,OAET3I,KAAKoH,WACLpH,KAAK6H,QAAQ1H,QAAQ+H,GAAUA,EAAOU,QAE1C,QACI5I,KAAK6H,QAAQ1H,QAAQ+H,GAAUA,EAAOW,SAE1C,UACI7I,KAAK6H,QAAQ1H,QAAQ+H,GAAUA,EAAOY,WAE1C,SACI9I,KAAKsH,YACLtH,KAAK6H,QAAQ1H,QAAQ+H,GAAUA,EAAOX,UAE1C,UACIvH,KAAKqI,aAET,aACSrI,KAAK8G,aACN9G,KAAK8G,YAAa,EAClB9G,KAAKsH,YACLtH,KAAK6H,QAAQ1H,QAAQ+H,GAAUA,EAAOa,WACtC/I,KAAK4G,cAAczG,QAAQ+G,GAAMA,KACjClH,KAAK4G,cAAgB,IAG7B,QACI5G,KAAK6H,QAAQ1H,QAAQ+H,GAAUA,EAAOc,SACtChJ,KAAK8G,YAAa,EAClB9G,KAAK+G,WAAY,EACjB/G,KAAK6G,UAAW,EAEpB,YAAYjI,GACR,MAAMqK,EAAiBrK,EAAIoB,KAAKiH,UAChCjH,KAAK6H,QAAQ1H,QAAQ+H,IACjB,MAAMV,EAAWU,EAAOjB,UAAYwB,KAAKS,IAAI,EAAGD,EAAiBf,EAAOjB,WAAa,EACrFiB,EAAOiB,YAAY3B,KAG3B,cACI,IAAI0B,EAAM,EAKV,OAJAlJ,KAAK6H,QAAQ1H,QAAQ+H,IACjB,MAAMtJ,EAAIsJ,EAAOkB,cACjBF,EAAMT,KAAKS,IAAItK,EAAGsK,KAEfA,EAEX,gBACIlJ,KAAK6H,QAAQ1H,QAAQ+H,IACbA,EAAOmB,eACPnB,EAAOmB,kBAKnB,gBAAgB5B,GACZ,MAAMC,EAAuB,SAAbD,EAAuBzH,KAAK2G,YAAc3G,KAAK0G,WAC/DgB,EAAQvH,QAAQ+G,GAAMA,KACtBQ,EAAQxE,OAAS,GCjnCzB,SAASoG,IAML,MAA0B,oBAAZC,SAAyD,qBAA9B,GAAGC,SAASvM,KAAKsM,SAE9D,SAASE,EAAoB5B,GACzB,OAAQA,EAAQ3E,QACZ,KAAK,EACD,OAAO,IAAIqD,EACf,KAAK,EACD,OAAOsB,EAAQ,GACnB,QACI,OAAO,IAAI,EAAsBA,IAG7C,SAAS6B,EAAmBC,EAAQC,EAAYC,EAASC,EAAWC,EAAY,GAAIC,EAAa,IAC7F,MAAMC,EAAS,GACTC,EAAsB,GAC5B,IAAIC,GAAkB,EAClBC,EAAmB,KA+BvB,GA9BAN,EAAU3J,QAAQkK,IACd,MAAMpE,EAASoE,EAAW,OACpBC,EAAerE,GAAUkE,EACzBI,EAAsBD,GAAgBF,GAAqB,GACjE5M,OAAOgN,KAAKH,GAAIlK,QAAQsK,IACpB,IAAIC,EAAiBD,EACjBE,EAAkBN,EAAGI,GACzB,GAAa,WAATA,EAEA,OADAC,EAAiBd,EAAWgB,sBAAsBF,EAAgBT,GAC1DU,GACJ,ID2lCD,IC1lCKA,EAAkBZ,EAAUU,GAC5B,MACJ,IDkBD,ICjBKE,EAAkBX,EAAWS,GAC7B,MACJ,QACIE,EACIf,EAAWiB,oBAAoBJ,EAAMC,EAAgBC,EAAiBV,GAItFM,EAAmBG,GAAkBC,IAEpCL,GACDJ,EAAoBzJ,KAAK8J,GAE7BH,EAAmBG,EACnBJ,EAAiBlE,IAEjBgE,EAAO/G,OAAQ,CACf,MAAM4H,EAAa,QACnB,MAAM,IAAI1J,MAAM,iDAAiD0J,IAAab,EAAOc,KAAKD,MAE9F,OAAOZ,EAEX,SAASc,EAAe9C,EAAQ+C,EAAWC,EAAOC,GAC9C,OAAQF,GACJ,IAAK,QACD/C,EAAOI,QAAQ,IAAM6C,EAASD,GAASE,EAAmBF,EAAO,QAAShD,KAC1E,MACJ,IAAK,OACDA,EAAOC,OAAO,IAAMgD,EAASD,GAASE,EAAmBF,EAAO,OAAQhD,KACxE,MACJ,IAAK,UACDA,EAAOE,UAAU,IAAM+C,EAASD,GAASE,EAAmBF,EAAO,UAAWhD,MAI1F,SAASkD,EAAmBC,EAAG5D,EAAWS,GACtC,MAAMjB,EAAYiB,EAAOjB,UAEnBiE,EAAQI,EAAmBD,EAAExB,QAASwB,EAAEE,YAAaF,EAAEG,UAAWH,EAAEI,QAAShE,GAAa4D,EAAE5D,UAAwB/G,MAAbuG,EAAyBoE,EAAEpE,UAAYA,IADnIiB,EAAOwD,UAElBC,EAAON,EAAS,MAItB,OAHY,MAARM,IACAT,EAAa,MAAIS,GAEdT,EAEX,SAASI,EAAmBzB,EAAS0B,EAAaC,EAAWC,EAAShE,EAAY,GAAIR,EAAY,EAAGyE,GACjG,MAAO,CAAE7B,QAAAA,EAAS0B,YAAAA,EAAaC,UAAAA,EAAWC,QAAAA,EAAShE,UAAAA,EAAWR,UAAAA,EAAWyE,WAAYA,GAEzF,SAASE,EAAgBC,EAAKxN,EAAKyN,GAC/B,IAAI/N,EAaJ,OAZI8N,aAAelM,KACf5B,EAAQ8N,EAAIlO,IAAIU,GACXN,GACD8N,EAAIzJ,IAAI/D,EAAKN,EAAQ+N,KAIzB/N,EAAQ8N,EAAIxN,GACPN,IACDA,EAAQ8N,EAAIxN,GAAOyN,IAGpB/N,EAEX,SAASgO,EAAqBC,GAC1B,MAAMC,EAAeD,EAAQE,QAAQ,KAGrC,MAAO,CAFIF,EAAQG,UAAU,EAAGF,GACjBD,EAAQI,OAAOH,EAAe,IAGjD,IAAII,EAAY,CAACC,EAAMC,KAAS,EAE5BC,EAAW,CAAC3C,EAAS4C,KAAa,EAElCC,EAAS,CAAC7C,EAAS4C,EAAUxH,IACtB,GAEX,MAGM0H,EAAUrD,KACZqD,GAA8B,oBAAZC,WAElBP,EAAY,CAACC,EAAMC,IACRD,EAAKO,SAASN,GAEzBC,EAAW,MACP,GAAIG,GAAWC,QAAQlO,UAAUoO,QAC7B,MAAO,CAACjD,EAAS4C,IAAa5C,EAAQiD,QAAQL,GAE7C,CACD,MAAMM,EAAQH,QAAQlO,UAChBwI,EAAK6F,EAAMC,iBAAmBD,EAAME,oBAAsBF,EAAMG,mBAClEH,EAAMI,kBAAoBJ,EAAMK,sBACpC,OAAIlG,EACO,CAAC2C,EAAS4C,IAAavF,EAAGmG,MAAMxD,EAAS,CAAC4C,IAG1CD,IAZR,GAgBXE,EAAS,CAAC7C,EAAS4C,EAAUxH,KACzB,IAAIqI,EAAU,GACd,GAAIrI,EACAqI,EAAQ7M,QAAQoJ,EAAQ0D,iBAAiBd,QAExC,CACD,MAAMe,EAAM3D,EAAQ4D,cAAchB,GAC9Be,GACAF,EAAQ7M,KAAK+M,GAGrB,OAAOF,IAQf,IAAII,EAAe,KACfC,GAAa,EACjB,SAASC,EAAsBnD,GACtBiD,IACDA,GAcmB,oBAAZjM,SACAA,SAASQ,KAEb,OAjB6B,GAChC0L,IAAaD,EAAaG,OAAS,qBAAsBH,EAAaG,OAE1E,IAAIC,GAAS,EAQb,OAPIJ,EAAaG,QAbrB,SAA8BpD,GAG1B,MAA+B,SAAxBA,EAAK0B,UAAU,EAAG,GAH7B,CAaoD1B,KAC5CqD,EAASrD,KAAQiD,EAAaG,OACzBC,GAAUH,KAEXG,EADkB,SAAWrD,EAAKsD,OAAO,GAAGC,cAAgBvD,EAAK2B,OAAO,KAClDsB,EAAaG,OAGpCC,EAQX,MAAMG,EAAiBzB,EACjB0B,EAAkB7B,EAClB8B,EAAczB,EACpB,SAAS0B,EAAoB5P,GACzB,MAAM6P,EAAS,GAKf,OAJA7Q,OAAOgN,KAAKhM,GAAQ2B,QAAQsK,IACxB,MAAM6D,EAAU7D,EAAKlI,QAAQ,kBAAmB,SAChD8L,EAAOC,GAAW9P,EAAOiM,KAEtB4D,oBAaLE,EACF,sBAAsB9D,GAClB,OAAOmD,EAAsBnD,GAEjC,eAAeZ,EAAS4C,GACpB,OAAOwB,EAAepE,EAAS4C,GAEnC,gBAAgBH,EAAMC,GAClB,OAAO2B,EAAgB5B,EAAMC,GAEjC,MAAM1C,EAAS4C,EAAUxH,GACrB,OAAOkJ,EAAYtE,EAAS4C,EAAUxH,GAE1C,aAAa4E,EAASY,EAAMqB,GACxB,OAAOA,GAAgB,GAE3B,QAAQjC,EAASC,EAAWtD,EAAUC,EAAO+H,EAAQC,EAAkB,GAAIC,GACvE,OAAO,IAAInI,EAAoBC,EAAUC,WAGjD8H,EAAoB/L,UAAO,SAAqCxE,GAAK,OAAO,IAAKA,GAAKuQ,IACtFA,EAAoB9L,WAAQ,EAAA,gCAA0B,CAAEC,MAAO6L,EAAqB7O,QAAS6O,EAAoB/L,gCAO3GmM,UAENA,EAAgBC,KAAO,IAAI,QAoB3B,SAASC,EAAmB9Q,GACxB,GAAoB,iBAATA,EACP,OAAOA,EACX,MAAM+O,EAAU/O,EAAM+Q,MAAM,qBAC5B,OAAKhC,GAAWA,EAAQ5J,OAAS,EACtB,EACJ6L,EAAsBC,WAAWlC,EAAQ,IAAKA,EAAQ,IAEjE,SAASiC,EAAsBhR,EAAOkR,GAClC,OAAQA,GACJ,IAAK,IACD,OAtBO,IAsBAlR,EACX,QACI,OAAOA,GAGnB,SAASmR,EAActJ,EAASqE,EAAQkF,GACpC,OAAOvJ,EAAQjH,eAAe,YAC1BiH,EAGR,SAA6BwJ,EAAKnF,EAAQkF,GAEtC,IAAI3I,EACAC,EAAQ,EACR+H,EAAS,GACb,GAAmB,iBAARY,EAAkB,CACzB,MAAMtC,EAAUsC,EAAIN,MALV,4EAMV,GAAgB,OAAZhC,EAEA,OADA7C,EAAOxJ,KAAK,8BAA8B2O,kBACnC,CAAE5I,SAAU,EAAGC,MAAO,EAAG+H,OAAQ,IAE5ChI,EAAWuI,EAAsBC,WAAWlC,EAAQ,IAAKA,EAAQ,IACjE,MAAMuC,EAAavC,EAAQ,GACT,MAAduC,IACA5I,EAAQsI,EAAsBC,WAAWK,GAAavC,EAAQ,KAElE,MAAMwC,EAAYxC,EAAQ,GACtBwC,IACAd,EAASc,QAIb9I,EAAW4I,EAEf,IAAKD,EAAqB,CACtB,IAAII,GAAiB,EACjBC,EAAavF,EAAO/G,OACpBsD,EAAW,IACXyD,EAAOxJ,KAAK,oEACZ8O,GAAiB,GAEjB9I,EAAQ,IACRwD,EAAOxJ,KAAK,iEACZ8O,GAAiB,GAEjBA,GACAtF,EAAOwF,OAAOD,EAAY,EAAG,8BAA8BJ,kBAGnE,MAAO,CAAE5I,SAAAA,EAAUC,MAAAA,EAAO+H,OAAAA,GAvC9B,CAF4B5I,EAASqE,EAAQkF,GA2C7C,SAASO,EAAQC,EAAKC,EAAc,IAIhC,OAHApS,OAAOgN,KAAKmF,GAAKxP,QAAQsK,IACrBmF,EAAYnF,GAAQkF,EAAIlF,KAErBmF,EAYX,SAASC,EAAWhK,EAAQiK,EAAeF,EAAc,IACrD,GAAIE,EAIA,IAAK,IAAIrF,KAAQ5E,EACb+J,EAAYnF,GAAQ5E,EAAO4E,QAI/BiF,EAAQ7J,EAAQ+J,GAEpB,OAAOA,EAEX,SAASG,EAAwBlG,EAASxL,EAAKN,GAG3C,OAAIA,EACOM,EAAM,IAAMN,EAAQ,IAGpB,GAGf,SAASiS,EAAoBnG,GAKzB,IAAIoG,EAAiB,GACrB,IAAK,IAAInT,EAAI,EAAGA,EAAI+M,EAAQgE,MAAM3K,OAAQpG,IAAK,CAC3C,MAAMuB,EAAMwL,EAAQgE,MAAMqC,KAAKpT,GAC/BmT,GAAkBF,EAAwBlG,EAASxL,EAAKwL,EAAQgE,MAAMsC,iBAAiB9R,IAE3F,IAAK,MAAMA,KAAOwL,EAAQgE,MAEjBhE,EAAQgE,MAAMlP,eAAeN,KAAQA,EAAI+R,WAAW,OAIzDH,GAAkBF,EAAwBlG,EADNxL,EA0G3BkE,QAAQ,kBAAmB,SAAS8N,cAzGexG,EAAQgE,MAAMxP,KAE9EwL,EAAQyG,aAAa,QAASL,GAElC,SAASM,GAAU1G,EAAShE,EAAQ2K,GAC5B3G,EAAe,QACfrM,OAAOgN,KAAK3E,GAAQ1F,QAAQsK,IACxB,MAAMgG,EAAYC,GAAoBjG,GAClC+F,IAAiBA,EAAa7R,eAAe8L,KAC7C+F,EAAa/F,GAAQZ,EAAQgE,MAAM4C,IAEvC5G,EAAQgE,MAAM4C,GAAa5K,EAAO4E,KAGlCnB,KACA0G,EAAoBnG,IAIhC,SAAS8G,GAAY9G,EAAShE,GACtBgE,EAAe,QACfrM,OAAOgN,KAAK3E,GAAQ1F,QAAQsK,IACxB,MAAMgG,EAAYC,GAAoBjG,GACtCZ,EAAQgE,MAAM4C,GAAa,KAG3BnH,KACA0G,EAAoBnG,IAIhC,SAAS+G,GAAwB7K,GAC7B,OAAI8K,MAAMC,QAAQ/K,GACM,GAAhBA,EAAM7C,OACC6C,EAAM,GACVD,EAASC,GAEbA,EAaX,MAAMgL,GAAc,IAAIC,OAAO,oBAAmE,KAClG,SAASC,GAAmBlT,GACxB,IAAImT,EAAS,GACb,GAAqB,iBAAVnT,EAAoB,CAC3B,IAAI+Q,EACJ,KAAOA,EAAQiC,GAAYI,KAAKpT,IAC5BmT,EAAOzQ,KAAKqO,EAAM,IAEtBiC,GAAYK,UAAY,EAE5B,OAAOF,EAEX,SAASG,GAAkBtT,EAAOmT,EAAQjH,GACtC,MAAMqH,EAAWvT,EAAMyL,WACjB+H,EAAMD,EAAS/O,QAAQwO,GAAa,CAACS,EAAGC,KAC1C,IAAIC,EAAWR,EAAOO,GAMtB,OAJKP,EAAOvS,eAAe8S,KACvBxH,EAAOxJ,KAAK,kDAAkDgR,GAC9DC,EAAW,IAERA,EAASlI,aAGpB,OAAO+H,GAAOD,EAAWvT,EAAQwT,EAErC,SAASI,GAAgBC,GACrB,MAAMC,EAAM,GACZ,IAAI3B,EAAO0B,EAASE,OACpB,MAAQ5B,EAAK6B,MACTF,EAAIpR,KAAKyP,EAAKnS,OACdmS,EAAO0B,EAASE,OAEpB,OAAOD,EAiBX,MAAMG,GAAmB,gBACzB,SAAStB,GAAoBuB,GACzB,OAAOA,EAAM1P,QAAQyP,GAAkB,IAAI9U,IAAMA,EAAE,GAAG8Q,eAK1D,SAASkE,GAA+B1L,EAAUC,GAC9C,OAAoB,IAAbD,GAA4B,IAAVC,EAE7B,SAAS0L,GAAmCtI,EAASC,EAAWsI,GAC5D,MAAMC,EAAqB7U,OAAOgN,KAAK4H,GACvC,GAAIC,EAAmBnP,QAAU4G,EAAU5G,OAAQ,CAC/C,IAAIoP,EAAmBxI,EAAU,GAC7ByI,EAAoB,GAOxB,GANAF,EAAmBlS,QAAQsK,IAClB6H,EAAiB3T,eAAe8L,IACjC8H,EAAkB9R,KAAKgK,GAE3B6H,EAAiB7H,GAAQ2H,EAAe3H,KAExC8H,EAAkBrP,OAElB,IAAK,IAAIpG,EAAI,EAAGA,EAAIgN,EAAU5G,OAAQpG,IAAK,CACvC,IAAIuN,EAAKP,EAAUhN,GACnByV,EAAkBpS,SAAAA,SAAkBsK,GAChCJ,EAAGI,GAAQ+H,GAAa3I,EAASY,OAKjD,OAAOX,EAEX,SAAS2I,GAAaC,EAASC,EAAMC,GACjC,OAAQD,EAAKhR,MACT,KAAK,EACD,OAAO+Q,EAAQG,aAAaF,EAAMC,GACtC,KAAK,EACD,OAAOF,EAAQI,WAAWH,EAAMC,GACpC,KAAK,EACD,OAAOF,EAAQK,gBAAgBJ,EAAMC,GACzC,KAAK,EACD,OAAOF,EAAQM,cAAcL,EAAMC,GACvC,KAAK,EACD,OAAOF,EAAQO,WAAWN,EAAMC,GACpC,KAAK,EACD,OAAOF,EAAQQ,aAAaP,EAAMC,GACtC,KAAK,EACD,OAAOF,EAAQS,eAAeR,EAAMC,GACxC,KAAK,EACD,OAAOF,EAAQU,WAAWT,EAAMC,GACpC,KAAK,EACD,OAAOF,EAAQW,eAAeV,EAAMC,GACxC,KAAK,EACD,OAAOF,EAAQY,kBAAkBX,EAAMC,GAC3C,KAAK,GACD,OAAOF,EAAQa,gBAAgBZ,EAAMC,GACzC,KAAK,GACD,OAAOF,EAAQc,WAAWb,EAAMC,GACpC,KAAK,GACD,OAAOF,EAAQe,aAAad,EAAMC,GACtC,QACI,MAAM,IAAIxR,MAAM,8CAA8CuR,EAAKhR,OAG/E,SAAS6Q,GAAa3I,EAASY,GAC3B,OAAOiJ,OAAOC,iBAAiB9J,GAASY,GAW5C,SAASmJ,GAAoBC,EAAiB5J,GAC1C,MAAM6J,EAAc,GAOpB,MAN8B,iBAAnBD,EACPA,EAAgBE,MAAM,WAAW5T,QAAQoR,GAOjD,SAAiCyC,EAAUF,EAAa7J,GACpD,GAAmB,KAAf+J,EAAS,GAAW,CACpB,MAAMlG,EAqBd,SAA6BmG,EAAOhK,GAChC,OAAQgK,GACJ,IAAK,SACD,MAAO,YACX,IAAK,SACD,MAAO,YACX,IAAK,aACD,MAAO,CAACzI,EAAWC,IAAYuD,WAAWvD,GAAWuD,WAAWxD,GACpE,IAAK,aACD,MAAO,CAACA,EAAWC,IAAYuD,WAAWvD,GAAWuD,WAAWxD,GACpE,QAEI,OADAvB,EAAOxJ,KAAK,+BAA+BwT,uBACpC,UAZnB,CArB2CD,EAAU/J,GAC7C,GAAqB,mBAAV6D,EAEP,YADAgG,EAAYrT,KAAKqN,GAGrBkG,EAAWlG,EAEf,MAAMgB,EAAQkF,EAASlF,MAAM,2CAC7B,GAAa,MAATA,GAAiBA,EAAM5L,OAAS,EAEhC,OADA+G,EAAOxJ,KAAK,uCAAuCuT,uBAC5CF,EAEX,MAAMtI,EAAYsD,EAAM,GAClBoF,EAAYpF,EAAM,GAClBrD,EAAUqD,EAAM,GACtBgF,EAAYrT,KAAK0T,GAAqB3I,EAAWC,IAE7B,KAAhByI,EAAU,IA9BA,KA6Ba1I,GA7Bb,KA6BuCC,GAEjDqI,EAAYrT,KAAK0T,GAAqB1I,EAASD,IApBvD,CAPgF+F,EAAKuC,EAAa7J,IAG1F6J,EAAYrT,KAAKoT,GAEdC,EA4CX,MAAMM,GAAsB,IAAIC,IAAI,CAAC,OAAQ,MACvCC,GAAuB,IAAID,IAAI,CAAC,QAAS,MAC/C,SAASF,GAAqBI,EAAKC,GAC/B,MAAMC,EAAoBL,GAAoB9R,IAAIiS,IAAQD,GAAqBhS,IAAIiS,GAC7EG,EAAoBN,GAAoB9R,IAAIkS,IAAQF,GAAqBhS,IAAIkS,GACnF,MAAO,CAAChJ,EAAWC,KACf,IAAIkJ,EA3DM,KA2DKJ,GAAoBA,GAAO/I,EACtCoJ,EA5DM,KA4DKJ,GAAoBA,GAAO/I,EAO1C,OANKkJ,GAAYF,GAA0C,kBAAdjJ,IACzCmJ,EAAWnJ,EAAY4I,GAAoB9R,IAAIiS,GAAOD,GAAqBhS,IAAIiS,KAE9EK,GAAYF,GAAwC,kBAAZjJ,IACzCmJ,EAAWnJ,EAAU2I,GAAoB9R,IAAIkS,GAAOF,GAAqBhS,IAAIkS,IAE1EG,GAAYC,GAW3B,MACMC,GAAmB,IAAI7D,OAAO,cAAyB,KAqC7D,SAAS8D,GAAkBnL,EAAQoL,EAAU9K,GACzC,OAAO,IAAI,GAA2BN,GAAQqL,MAAMD,EAAU9K,GAGlE,MAAM,GACF,YAAYgL,GACRjV,KAAKiV,QAAUA,EAEnB,MAAMF,EAAU9K,GACZ,MAAM2I,EAAU,IAAIsC,GAA2BjL,GAE/C,OADAjK,KAAKmV,8BAA8BvC,GAC5BH,GAAazS,KAAM4Q,GAAwBmE,GAAWnC,GAEjE,8BAA8BA,GAC1BA,EAAQwC,qBAXM,GAYdxC,EAAQyC,gBAAkB,GAC1BzC,EAAQyC,gBAbM,IAa2B,GACzCzC,EAAQ0C,YAAc,EAE1B,aAAaP,EAAUnC,GACnB,IAAI2C,EAAa3C,EAAQ2C,WAAa,EAClCC,EAAW5C,EAAQ4C,SAAW,EAClC,MAAMC,EAAS,GACTC,EAAc,GAyBpB,MAxB+B,KAA3BX,EAAS1X,KAAK0Q,OAAO,IACrB6E,EAAQ3I,OAAOxJ,KAAK,wFAExBsU,EAASrP,YAAYvF,QAAQwV,IAEzB,GADA3V,KAAKmV,8BAA8BvC,GACnB,GAAZ+C,EAAIhU,KAAuB,CAC3B,MAAMiU,EAAWD,EACXtY,EAAOuY,EAASvY,KACtBA,EAAKmM,WAAWuK,MAAM,WAAW5T,QAAQ5B,IACrCqX,EAASvY,KAAOkB,EAChBkX,EAAOhV,KAAKT,KAAK8S,WAAW8C,EAAUhD,MAE1CgD,EAASvY,KAAOA,OAEf,GAAgB,GAAZsY,EAAIhU,KAA4B,CACrC,MAAMkU,EAAa7V,KAAK+S,gBAAgB4C,EAAK/C,GAC7C2C,GAAcM,EAAWN,WACzBC,GAAYK,EAAWL,SACvBE,EAAYjV,KAAKoV,QAGjBjD,EAAQ3I,OAAOxJ,KAAK,6EAGrB,CACHkB,KAAM,EACNtE,KAAM0X,EAAS1X,KACfoY,OAAAA,EACAC,YAAAA,EACAH,WAAAA,EACAC,SAAAA,EACAzV,QAAS,MAGjB,WAAWgV,EAAUnC,GACjB,MAAMkD,EAAW9V,KAAKoT,WAAW2B,EAASlP,OAAQ+M,GAC5CmD,EAAahB,EAAShV,SAAWgV,EAAShV,QAAQmR,QAAW,KACnE,GAAI4E,EAASE,sBAAuB,CAChC,MAAMC,EAAc,IAAI5B,IAClBnD,EAAS6E,GAAa,GAa5B,GAZAD,EAASjQ,OAAO1F,QAAQpC,IACpB,GAAImY,GAASnY,GAAQ,CACjB,MAAMoY,EAAYpY,EAClBP,OAAOgN,KAAK2L,GAAWhW,QAAQsK,IAC3BwG,GAAmBkF,EAAU1L,IAAOtK,QAAQiW,IACnClF,EAAOvS,eAAeyX,IACvBH,EAAYI,IAAID,UAMhCH,EAAYK,KAAM,CAClB,MAAMC,EAAiB5E,GAAgBsE,EAAYO,UACnD5D,EAAQ3I,OAAOxJ,KAAK,UAAUsU,EACzB1X,qFAAqFkZ,EAAexL,KAAK,UAGtH,MAAO,CACHpJ,KAAM,EACNtE,KAAM0X,EAAS1X,KACfwQ,MAAOiI,EACP/V,QAASgW,EAAY,CAAE7E,OAAQ6E,GAAc,MAGrD,gBAAgBhB,EAAUnC,GACtBA,EAAQ2C,WAAa,EACrB3C,EAAQ4C,SAAW,EACnB,MAAMpP,EAAYqM,GAAazS,KAAM4Q,GAAwBmE,EAAS3O,WAAYwM,GAElF,MAAO,CACHjR,KAAM,EACN8U,SAHa7C,GAAoBmB,EAAS5O,KAAMyM,EAAQ3I,QAIxD7D,UAAAA,EACAmP,WAAY3C,EAAQ2C,WACpBC,SAAU5C,EAAQ4C,SAClBzV,QAAS2W,GAA0B3B,EAAShV,UAGpD,cAAcgV,EAAUnC,GACpB,MAAO,CACHjR,KAAM,EACNoE,MAAOgP,EAAShP,MAAM8F,IAAIhN,GAAK4T,GAAazS,KAAMnB,EAAG+T,IACrD7S,QAAS2W,GAA0B3B,EAAShV,UAGpD,WAAWgV,EAAUnC,GACjB,MAAM0C,EAAc1C,EAAQ0C,YAC5B,IAAIqB,EAAe,EACnB,MAAM5Q,EAAQgP,EAAShP,MAAM8F,IAAI+K,IAC7BhE,EAAQ0C,YAAcA,EACtB,MAAMuB,EAAWpE,GAAazS,KAAM4W,EAAMhE,GAE1C,OADA+D,EAAelO,KAAKC,IAAIiO,EAAc/D,EAAQ0C,aACvCuB,IAGX,OADAjE,EAAQ0C,YAAcqB,EACf,CACHhV,KAAM,EACNoE,MAAAA,EACAhG,QAAS2W,GAA0B3B,EAAShV,UAGpD,aAAagV,EAAUnC,GACnB,MAAMkE,EAkSd,SAA4B/Y,EAAOkM,GAC/B,IAAIrE,EAAU,KACd,GAAI7H,EAAMY,eAAe,YACrBiH,EAAU7H,OAET,GAAoB,iBAATA,EAEZ,OAAOgZ,GADU7H,EAAcnR,EAAOkM,GAAQzD,SACf,EAAG,IAEtC,MAAMwQ,EAAWjZ,EAEjB,GADkBiZ,EAASjD,MAAM,OAAOkD,KAAKC,GAAoB,KAAfA,EAAEnJ,OAAO,IAA4B,KAAfmJ,EAAEnJ,OAAO,IAClE,CACX,MAAMoJ,EAAMJ,GAAc,EAAG,EAAG,IAGhC,OAFAI,EAAIC,SAAU,EACdD,EAAIH,SAAWA,EACRG,EAGX,OADAvR,EAAUA,GAAWsJ,EAAc8H,EAAU/M,GACtC8M,GAAcnR,EAAQY,SAAUZ,EAAQa,MAAOb,EAAQ4I,QAlBlE,CAlS6CuG,EAASnP,QAASgN,EAAQ3I,QAE/D,IAAI6L,EADJlD,EAAQyE,sBAAwBP,EAEhC,IAAIQ,EAAgBvC,EAASlP,OAASkP,EAASlP,OAAS,EAAM,IAC9D,GAA0B,GAAtByR,EAAc3V,KACdmU,EAAW9V,KAAKmT,eAAemE,EAAe1E,OAE7C,CACD,IAAI0E,EAAgBvC,EAASlP,OACzB0R,GAAU,EACd,IAAKD,EAAe,CAChBC,GAAU,EACV,MAAMC,EAAe,GACjBV,EAAUtI,SACVgJ,EAAqB,OAAIV,EAAUtI,QAEvC8I,EAAgB,EAAME,GAE1B5E,EAAQ0C,aAAewB,EAAUtQ,SAAWsQ,EAAUrQ,MACtD,MAAMgR,EAAYzX,KAAKoT,WAAWkE,EAAe1E,GACjD6E,EAAUC,YAAcH,EACxBzB,EAAW2B,EAGf,OADA7E,EAAQyE,sBAAwB,KACzB,CACH1V,KAAM,EACNiE,QAASkR,EACTjJ,MAAOiI,EACP/V,QAAS,MAGjB,WAAWgV,EAAUnC,GACjB,MAAMuE,EAAMnX,KAAK2X,cAAc5C,EAAUnC,GAEzC,OADA5S,KAAK4X,kBAAkBT,EAAKvE,GACrBuE,EAEX,cAAcpC,EAAUnC,GACpB,MAAM/M,EAAS,GACXgL,MAAMC,QAAQiE,EAASlP,QACvBkP,EAASlP,OAAO1F,QAAQ0X,IACK,iBAAdA,EDxwBR,KCywBKA,EACAhS,EAAOpF,KAAKoX,GAGZjF,EAAQ3I,OAAOxJ,KAAK,mCAAmCoX,qBAI3DhS,EAAOpF,KAAKoX,KAKpBhS,EAAOpF,KAAKsU,EAASlP,QAEzB,IAAImQ,GAAwB,EACxB8B,EAAkB,KAoBtB,OAnBAjS,EAAO1F,QAAQ4X,IACX,GAAI7B,GAAS6B,GAAY,CACrB,MAAMC,EAAWD,EACXvJ,EAASwJ,EAAiB,OAKhC,GAJIxJ,IACAsJ,EAAkBtJ,SACXwJ,EAAiB,SAEvBhC,EACD,IAAK,IAAIvL,KAAQuN,EAEb,GADcA,EAASvN,GACbjB,WAAW0C,QAxmBb,OAwmBiD,EAAG,CACxD8J,GAAwB,EACxB,UAMb,CACHrU,KAAM,EACNkE,OAAAA,EACA2I,OAAQsJ,EACR7R,OAAQ8O,EAAS9O,OACjB+P,sBAAAA,EACAjW,QAAS,MAGjB,kBAAkBoX,EAAKvE,GACnB,MAAMhN,EAAUgN,EAAQyE,sBACxB,IAAIY,EAAUrF,EAAQ0C,YAClB4C,EAAYtF,EAAQ0C,YACpB1P,GAAWsS,EAAY,IACvBA,GAAatS,EAAQY,SAAWZ,EAAQa,OAE5C0Q,EAAItR,OAAO1F,QAAQgY,IACK,iBAATA,GAEX3a,OAAOgN,KAAK2N,GAAOhY,QAAQsK,IACvB,IAAKzK,KAAKiV,QAAQrH,sBAAsBnD,GAEpC,YADAmI,EAAQ3I,OAAOxJ,KAAK,oCAAoCgK,qDAG5D,MAAM4K,EAAkBzC,EAAQyC,gBAAgBzC,EAAQwC,sBAClDgD,EAAiB/C,EAAgB5K,GACvC,IAAI4N,GAAuB,EACvBD,IACIF,GAAaD,GAAWC,GAAaE,EAAeF,WACpDD,GAAWG,EAAeH,UAC1BrF,EAAQ3I,OAAOxJ,KAAK,qBAAqBgK,wCAA2C2N,EAAeF,qBAAqBE,EACnHH,mFAAmFC,aAAqBD,QAC7GI,GAAuB,GAK3BH,EAAYE,EAAeF,WAE3BG,IACAhD,EAAgB5K,GAAQ,CAAEyN,UAAAA,EAAWD,QAAAA,IAErCrF,EAAQ7S,SAnf5B,SAA6BhC,EAAOgC,EAASkK,GACzC,MAAMiH,EAASnR,EAAQmR,QAAU,GAC3BpE,EAAUmE,GAAmBlT,GAC/B+O,EAAQ5J,QACR4J,EAAQ3M,QAAQsR,IACPP,EAAOvS,eAAe8S,IACvBxH,EAAOxJ,KAAK,+CAA+CgR,mCAN3E,CAofwC0G,EAAM1N,GAAOmI,EAAQ7S,QAAS6S,EAAQ3I,YAK1E,eAAe8K,EAAUnC,GACrB,MAAMuE,EAAM,CAAExV,KAAM,EAAmBkE,OAAQ,GAAI9F,QAAS,MAC5D,IAAK6S,EAAQyE,sBAET,OADAzE,EAAQ3I,OAAOxJ,KAAK,4DACb0W,EAGX,IAAImB,EAA4B,EAChC,MAAMC,EAAU,GAChB,IAAIC,GAAoB,EACpBC,GAAsB,EACtBtO,EAAiB,EACrB,MAAML,EAAYiL,EAAShP,MAAM8F,IAAIhG,IACjC,MAAMgI,EAAQ7N,KAAK2X,cAAc9R,EAAQ+M,GACzC,IAAI8F,EAA4B,MAAhB7K,EAAM5H,OAAiB4H,EAAM5H,OAgIzD,SAAuBJ,GACnB,GAAqB,iBAAVA,EACP,OAAO,KACX,IAAII,EAAS,KACb,GAAI4K,MAAMC,QAAQjL,GACdA,EAAO1F,QAAQ0X,IACX,GAAI3B,GAAS2B,IAAeA,EAAWlZ,eAAe,UAAW,CAC7D,MAAMgR,EAAMkI,EACZ5R,EAAS+I,WAAWW,EAAY,eACzBA,EAAY,eAI1B,GAAIuG,GAASrQ,IAAWA,EAAOlH,eAAe,UAAW,CAC1D,MAAMgR,EAAM9J,EACZI,EAAS+I,WAAWW,EAAY,eACzBA,EAAY,OAEvB,OAAO1J,EAlBX,CAhIgF4H,EAAMhI,QACtEI,EAAS,EASb,OARiB,MAAbyS,IACAJ,IACArS,EAAS4H,EAAM5H,OAASyS,GAE5BD,EAAsBA,GAAuBxS,EAAS,GAAKA,EAAS,EACpEuS,EAAoBA,GAAqBvS,EAASkE,EAClDA,EAAiBlE,EACjBsS,EAAQ9X,KAAKwF,GACN4H,IAEP4K,GACA7F,EAAQ3I,OAAOxJ,KAAK,+DAEpB+X,GACA5F,EAAQ3I,OAAOxJ,KAAK,wDAExB,MAAMyC,EAAS6R,EAAShP,MAAM7C,OAC9B,IAAIyV,EAAkB,EAClBL,EAA4B,GAAKA,EAA4BpV,EAC7D0P,EAAQ3I,OAAOxJ,KAAK,yEAEc,GAA7B6X,IACLK,EAhCwB,GAgCiBzV,EAAS,IAEtD,MAAM0V,EAAQ1V,EAAS,EACjBoS,EAAc1C,EAAQ0C,YACtB+B,EAAwBzE,EAAQyE,sBAChCwB,EAAkBxB,EAAsB7Q,SAU9C,OATAsD,EAAU3J,QAAQ,CAACkK,EAAIvN,KACnB,MAAMmJ,EAAS0S,EAAkB,EAAK7b,GAAK8b,EAAQ,EAAKD,EAAkB7b,EAAMyb,EAAQzb,GAClFgc,EAAwB7S,EAAS4S,EACvCjG,EAAQ0C,YAAcA,EAAc+B,EAAsB5Q,MAAQqS,EAClEzB,EAAsB7Q,SAAWsS,EACjC9Y,KAAK4X,kBAAkBvN,EAAIuI,GAC3BvI,EAAGpE,OAASA,EACZkR,EAAItR,OAAOpF,KAAK4J,KAEb8M,EAEX,eAAepC,EAAUnC,GACrB,MAAO,CACHjR,KAAM,EACNyE,UAAWqM,GAAazS,KAAM4Q,GAAwBmE,EAAS3O,WAAYwM,GAC3E7S,QAAS2W,GAA0B3B,EAAShV,UAGpD,kBAAkBgV,EAAUnC,GAExB,OADAA,EAAQ4C,WACD,CACH7T,KAAM,EACN5B,QAAS2W,GAA0B3B,EAAShV,UAGpD,gBAAgBgV,EAAUnC,GACtB,MAAO,CACHjR,KAAM,GACNyE,UAAWpG,KAAKqT,eAAe0B,EAAS3O,UAAWwM,GACnD7S,QAAS2W,GAA0B3B,EAAShV,UAGpD,WAAWgV,EAAUnC,GACjB,MAAMmG,EAAiBnG,EAAQwC,qBACzBrV,EAAWgV,EAAShV,SAAW,GACrC6S,EAAQ2C,aACR3C,EAAQoG,aAAejE,EACvB,MAAOtI,EAAUwM,GAiCzB,SAA2BxM,GACvB,MAAMyM,IAAezM,EAASsH,MAAM,WAAWhT,KAAK2B,GArZrC,SAqZ8CA,GAQ7D,OAPIwW,IACAzM,EAAWA,EAASlK,QAAQsS,GAAkB,KAM3C,CAHPpI,EAAWA,EAASlK,QAAQ,OAjxBJ,eAkxBnBA,QAAQ,QAASuM,GAASqK,eAA4BrK,EAAM1C,OAAO,IACnE7J,QAAQ,cAjxBa,iBAkxBR2W,GATtB,CAjC0DnE,EAAStI,UAC3DmG,EAAQwC,qBACJ2D,EAAe7V,OAAU6V,EAAiB,IAAMtM,EAAYA,EAChEb,EAAgBgH,EAAQyC,gBAAiBzC,EAAQwC,qBAAsB,IACvE,MAAMhP,EAAYqM,GAAazS,KAAM4Q,GAAwBmE,EAAS3O,WAAYwM,GAGlF,OAFAA,EAAQoG,aAAe,KACvBpG,EAAQwC,qBAAuB2D,EACxB,CACHpX,KAAM,GACN8K,SAAAA,EACAmM,MAAO7Y,EAAQ6Y,OAAS,EACxBQ,WAAYrZ,EAAQqZ,SACpBH,YAAAA,EACA7S,UAAAA,EACAiT,iBAAkBtE,EAAStI,SAC3B1M,QAAS2W,GAA0B3B,EAAShV,UAGpD,aAAagV,EAAUnC,GACdA,EAAQoG,cACTpG,EAAQ3I,OAAOxJ,KAAK,gDAExB,MAAMmF,EAA+B,SAArBmP,EAASnP,QACrB,CAAEY,SAAU,EAAGC,MAAO,EAAG+H,OAAQ,QACjCU,EAAc6F,EAASnP,QAASgN,EAAQ3I,QAAQ,GACpD,MAAO,CACHtI,KAAM,GACNyE,UAAWqM,GAAazS,KAAM4Q,GAAwBmE,EAAS3O,WAAYwM,GAC3EhN,QAAAA,EACA7F,QAAS,OAkBrB,MAAMmV,GACF,YAAYjL,GACRjK,KAAKiK,OAASA,EACdjK,KAAKuV,WAAa,EAClBvV,KAAKwV,SAAW,EAChBxV,KAAKsZ,kBAAoB,KACzBtZ,KAAKgZ,aAAe,KACpBhZ,KAAKoV,qBAAuB,KAC5BpV,KAAKqX,sBAAwB,KAC7BrX,KAAKsV,YAAc,EACnBtV,KAAKqV,gBAAkB,GACvBrV,KAAKD,QAAU,MAuBvB,SAASmW,GAASnY,GACd,OAAQ8S,MAAMC,QAAQ/S,IAA0B,iBAATA,EAsB3C,SAAS2Y,GAA0B3W,GA5DnC,IAAyB4P,EAsErB,OATI5P,GACAA,EAAU2P,EAAQ3P,IACE,SAChBA,EAAgB,QAhEH4P,EAgEuB5P,EAAgB,QA/D/C2P,EAAQC,GAAO,MAmExB5P,EAAU,GAEPA,EAEX,SAASgX,GAAcvQ,EAAUC,EAAO+H,GACpC,MAAO,CAAEhI,SAAAA,EAAUC,MAAAA,EAAO+H,OAAAA,GAG9B,SAAS+K,GAA0B1P,EAASC,EAAW0P,EAAeC,EAAgBjT,EAAUC,EAAO+H,EAAS,KAAMkL,GAAc,GAChI,MAAO,CACH/X,KAAM,EACNkI,QAAAA,EACAC,UAAAA,EACA0P,cAAAA,EACAC,eAAAA,EACAjT,SAAAA,EACAC,MAAAA,EACAQ,UAAWT,EAAWC,EACtB+H,OAAAA,EACAkL,YAAAA,GAIR,MAAMC,GACF,cACI3Z,KAAK4Z,KAAO,IAAIja,IAEpB,QAAQkK,GACJ,IAAIgQ,EAAe7Z,KAAK4Z,KAAKjc,IAAIkM,GAOjC,OANIgQ,EACA7Z,KAAK4Z,KAAKE,OAAOjQ,GAGjBgQ,EAAe,GAEZA,EAEX,OAAOhQ,EAASgQ,GACZ,IAAIE,EAAuB/Z,KAAK4Z,KAAKjc,IAAIkM,GACpCkQ,GACD/Z,KAAK4Z,KAAKxX,IAAIyH,EAASkQ,EAAuB,IAElDA,EAAqBtZ,QAAQoZ,GAEjC,IAAIhQ,GACA,OAAO7J,KAAK4Z,KAAKtX,IAAIuH,GAEzB,QACI7J,KAAK4Z,KAAKlW,SAWlB,MAEMsW,GAAoB,IAAIhJ,OADV,SAC8B,KAE5CiJ,GAAoB,IAAIjJ,OADV,SAC8B,KAqFlD,SAASkJ,GAAwBvQ,EAAQwQ,EAAahD,EAAKiD,EAAgBC,EAAgBC,EAAiB,GAAIC,EAAc,GAAIxa,EAASya,EAAiBvQ,EAAS,IACjK,OAAA,IAAWwQ,IAAkCC,eAAe/Q,EAAQwQ,EAAahD,EAAKiD,EAAgBC,EAAgBC,EAAgBC,EAAaxa,EAASya,EAAiBvQ,GAEjL,MAAMwQ,GACF,eAAe9Q,EAAQwQ,EAAahD,EAAKiD,EAAgBC,EAAgBC,EAAgBC,EAAaxa,EAASya,EAAiBvQ,EAAS,IACrIuQ,EAAkBA,GAAmB,IAAIb,GACzC,MAAM/G,EAAU,IAAI+H,GAAyBhR,EAAQwQ,EAAaK,EAAiBJ,EAAgBC,EAAgBpQ,EAAQ,IAC3H2I,EAAQ7S,QAAUA,EAClB6S,EAAQgI,gBAAgBrK,UAAU,CAAC+J,GAAiB,KAAM1H,EAAQ3I,OAAQlK,GAC1E0S,GAAazS,KAAMmX,EAAKvE,GAExB,MAAMiI,EAAYjI,EAAQiI,UAAU3Z,OAAO4Z,GAAYA,EAASC,qBAChE,GAAIF,EAAU3X,QAAU1F,OAAOgN,KAAK+P,GAAarX,OAAQ,CACrD,MAAM8X,EAAKH,EAAUA,EAAU3X,OAAS,GACnC8X,EAAGC,2BACJD,EAAGzK,UAAU,CAACgK,GAAc,KAAM3H,EAAQ3I,OAAQlK,GAG1D,OAAO8a,EAAU3X,OAAS2X,EAAUhP,IAAIiP,GAAYA,EAASJ,kBACzD,CAACnB,GAA0BY,EAAa,GAAI,GAAI,GAAI,EAAG,EAAG,IAAI,IAEtE,aAAahD,EAAKvE,IAGlB,WAAWuE,EAAKvE,IAGhB,gBAAgBuE,EAAKvE,IAGrB,kBAAkBuE,EAAKvE,GACnB,MAAMsI,EAAsBtI,EAAQ4H,gBAAgBW,QAAQvI,EAAQ/I,SACpE,GAAIqR,EAAqB,CACrB,MAAME,EAAexI,EAAQyI,iBAAiBlE,EAAIpX,SAC5CmY,EAAYtF,EAAQgI,gBAAgBtF,YACpC2C,EAAUjY,KAAKsb,sBAAsBJ,EAAqBE,EAAcA,EAAarb,SACvFmY,GAAaD,GAGbrF,EAAQ2I,yBAAyBtD,GAGzCrF,EAAQ4I,aAAerE,EAE3B,gBAAgBA,EAAKvE,GACjB,MAAMwI,EAAexI,EAAQyI,iBAAiBlE,EAAIpX,SAClDqb,EAAaG,2BACbvb,KAAKqT,eAAe8D,EAAI/Q,UAAWgV,GACnCxI,EAAQ2I,yBAAyBH,EAAaR,gBAAgBtF,aAC9D1C,EAAQ4I,aAAerE,EAE3B,sBAAsB0C,EAAcjH,EAAS7S,GAEzC,IAAI4W,EADc/D,EAAQgI,gBAAgBtF,YAI1C,MAAM9O,EAA+B,MAApBzG,EAAQyG,SAAmBqI,EAAmB9O,EAAQyG,UAAY,KAC7EC,EAAyB,MAAjB1G,EAAQ0G,MAAgBoI,EAAmB9O,EAAQ0G,OAAS,KAQ1E,OAPiB,IAAbD,GACAqT,EAAa1Z,QAAQsb,IACjB,MAAMC,EAAqB9I,EAAQ+I,4BAA4BF,EAAajV,EAAUC,GACtFkQ,EACIlO,KAAKC,IAAIiO,EAAc+E,EAAmBlV,SAAWkV,EAAmBjV,SAG7EkQ,EAEX,eAAeQ,EAAKvE,GAChBA,EAAQgJ,cAAczE,EAAIpX,SAAS,GACnC0S,GAAazS,KAAMmX,EAAI/Q,UAAWwM,GAClCA,EAAQ4I,aAAerE,EAE3B,cAAcA,EAAKvE,GACf,MAAMiJ,EAAkBjJ,EAAQiJ,gBAChC,IAAIC,EAAMlJ,EACV,MAAM7S,EAAUoX,EAAIpX,QACpB,GAAIA,IAAYA,EAAQmR,QAAUnR,EAAQ0G,SACtCqV,EAAMlJ,EAAQyI,iBAAiBtb,GAC/B+b,EAAIP,2BACiB,MAAjBxb,EAAQ0G,OAAe,CACM,GAAzBqV,EAAIN,aAAa7Z,OACjBma,EAAIlB,gBAAgBmB,wBACpBD,EAAIN,aAAeQ,IAEvB,MAAMvV,EAAQoI,EAAmB9O,EAAQ0G,OACzCqV,EAAIG,cAAcxV,GAGtB0Q,EAAIpR,MAAM7C,SACViU,EAAIpR,MAAM5F,QAAQtB,GAAK4T,GAAazS,KAAMnB,EAAGid,IAE7CA,EAAIlB,gBAAgBsB,wBAIhBJ,EAAID,gBAAkBA,GACtBC,EAAIP,4BAGZ3I,EAAQ4I,aAAerE,EAE3B,WAAWA,EAAKvE,GACZ,MAAMuJ,EAAiB,GACvB,IAAIxF,EAAe/D,EAAQgI,gBAAgBtF,YAC3C,MAAM7O,EAAQ0Q,EAAIpX,SAAWoX,EAAIpX,QAAQ0G,MAAQoI,EAAmBsI,EAAIpX,QAAQ0G,OAAS,EACzF0Q,EAAIpR,MAAM5F,QAAQtB,IACd,MAAMuc,EAAexI,EAAQyI,iBAAiBlE,EAAIpX,SAC9C0G,GACA2U,EAAaa,cAAcxV,GAE/BgM,GAAazS,KAAMnB,EAAGuc,GACtBzE,EAAelO,KAAKC,IAAIiO,EAAcyE,EAAaR,gBAAgBtF,aACnE6G,EAAe1b,KAAK2a,EAAaR,mBAKrCuB,EAAehc,QAAQ2a,GAAYlI,EAAQgI,gBAAgBwB,6BAA6BtB,IACxFlI,EAAQ2I,yBAAyB5E,GACjC/D,EAAQ4I,aAAerE,EAE3B,aAAaA,EAAKvE,GACd,GAAIuE,EAAIC,QAAS,CACb,MAAMJ,EAAWG,EAAIH,SAErB,OAAO9H,EADa0D,EAAQ1B,OAASG,GAAkB2F,EAAUpE,EAAQ1B,OAAQ0B,EAAQ3I,QAAU+M,EACjEpE,EAAQ3I,QAG1C,MAAO,CAAEzD,SAAU2Q,EAAI3Q,SAAUC,MAAO0Q,EAAI1Q,MAAO+H,OAAQ2I,EAAI3I,QAGvE,aAAa2I,EAAKvE,GACd,MAAMhN,EAAUgN,EAAQyE,sBAAwBrX,KAAKqc,aAAalF,EAAIvR,QAASgN,GACzEkI,EAAWlI,EAAQgI,gBACrBhV,EAAQa,QACRmM,EAAQ0J,cAAc1W,EAAQa,OAC9BqU,EAASiB,yBAEb,MAAMlO,EAAQsJ,EAAItJ,MACA,GAAdA,EAAMlM,KACN3B,KAAKmT,eAAetF,EAAO+E,IAG3BA,EAAQ0J,cAAc1W,EAAQY,UAC9BxG,KAAKoT,WAAWvF,EAAO+E,GACvBkI,EAASoB,yBAEbtJ,EAAQyE,sBAAwB,KAChCzE,EAAQ4I,aAAerE,EAE3B,WAAWA,EAAKvE,GACZ,MAAMkI,EAAWlI,EAAQgI,gBACnBhV,EAAUgN,EAAQyE,uBAGnBzR,GAAWkV,EAASyB,4BAA4BrZ,QACjD4X,EAAS0B,eAEb,MAAMhO,EAAU5I,GAAWA,EAAQ4I,QAAW2I,EAAI3I,OAC9C2I,EAAIO,YACJoD,EAAS2B,eAAejO,GAGxBsM,EAASvK,UAAU4G,EAAItR,OAAQ2I,EAAQoE,EAAQ3I,OAAQ2I,EAAQ7S,SAEnE6S,EAAQ4I,aAAerE,EAE3B,eAAeA,EAAKvE,GAChB,MAAMyE,EAAwBzE,EAAQyE,sBAChCa,EAAatF,EAAuB,gBAAEpM,SACtCA,EAAW6Q,EAAsB7Q,SAEjCkW,EADe9J,EAAQyI,mBACMT,gBACnC8B,EAAclO,OAAS6I,EAAsB7I,OAC7C2I,EAAItR,OAAO1F,QAAQyW,IAEf8F,EAAcC,aADC/F,EAAK3Q,QAAU,GACKO,GACnCkW,EAAcnM,UAAUqG,EAAK/Q,OAAQ+Q,EAAKpI,OAAQoE,EAAQ3I,OAAQ2I,EAAQ7S,SAC1E2c,EAAcR,0BAIlBtJ,EAAQgI,gBAAgBwB,6BAA6BM,GAGrD9J,EAAQ2I,yBAAyBrD,EAAY1R,GAC7CoM,EAAQ4I,aAAerE,EAE3B,WAAWA,EAAKvE,GAGZ,MAAMsF,EAAYtF,EAAQgI,gBAAgBtF,YACpCvV,EAAWoX,EAAIpX,SAAW,GAC1B0G,EAAQ1G,EAAQ0G,MAAQoI,EAAmB9O,EAAQ0G,OAAS,EAC9DA,IAC+B,IAA9BmM,EAAQ4I,aAAa7Z,MACJ,GAAbuW,GAAkBtF,EAAQgI,gBAAgB2B,4BAA4BrZ,UAC3E0P,EAAQgI,gBAAgBmB,wBACxBnJ,EAAQ4I,aAAeQ,IAE3B,IAAIrF,EAAeuB,EACnB,MAAM0E,EAAOhK,EAAQzE,YAAYgJ,EAAI1K,SAAU0K,EAAIkC,iBAAkBlC,EAAIyB,MAAOzB,EAAI8B,cAAalZ,EAAQqZ,SAAyBxG,EAAQ3I,QAC1I2I,EAAQiK,kBAAoBD,EAAK1Z,OACjC,IAAI4Z,EAAsB,KAC1BF,EAAKzc,QAAQ,CAAC0J,EAAS/M,KACnB8V,EAAQmK,kBAAoBjgB,EAC5B,MAAMse,EAAexI,EAAQyI,iBAAiBlE,EAAIpX,QAAS8J,GACvDpD,GACA2U,EAAaa,cAAcxV,GAE3BoD,IAAY+I,EAAQ/I,UACpBiT,EAAsB1B,EAAaR,iBAEvCnI,GAAazS,KAAMmX,EAAI/Q,UAAWgV,GAIlCA,EAAaR,gBAAgBsB,wBAE7BvF,EAAelO,KAAKC,IAAIiO,EADRyE,EAAaR,gBAAgBtF,eAGjD1C,EAAQmK,kBAAoB,EAC5BnK,EAAQiK,kBAAoB,EAC5BjK,EAAQ2I,yBAAyB5E,GAC7BmG,IACAlK,EAAQgI,gBAAgBwB,6BAA6BU,GACrDlK,EAAQgI,gBAAgBmB,yBAE5BnJ,EAAQ4I,aAAerE,EAE3B,aAAaA,EAAKvE,GACd,MAAMoK,EAAgBpK,EAAQoK,cACxBhC,EAAKpI,EAAQgI,gBACbhV,EAAUuR,EAAIvR,QACdY,EAAWiC,KAAKwU,IAAIrX,EAAQY,UAC5B0W,EAAU1W,GAAYoM,EAAQiK,kBAAoB,GACxD,IAAIpW,EAAQD,EAAWoM,EAAQmK,kBAE/B,OADyBnX,EAAQY,SAAW,EAAI,UAAYZ,EAAQ4I,QAEhE,IAAK,UACD/H,EAAQyW,EAAUzW,EAClB,MACJ,IAAK,OACDA,EAAQuW,EAAcG,mBAG9B,MAAMrC,EAAWlI,EAAQgI,gBACrBnU,GACAqU,EAASmB,cAAcxV,GAE3B,MAAM2W,EAAetC,EAASxF,YAC9B7C,GAAazS,KAAMmX,EAAI/Q,UAAWwM,GAClCA,EAAQ4I,aAAerE,EAKvB6F,EAAcG,mBACTnC,EAAG1F,YAAc8H,GAAiBpC,EAAG9C,UAAY8E,EAAcpC,gBAAgB1C,YAG5F,MAAM8D,GAA6B,GACnC,MAAMrB,GACF,YAAY1F,EAASpL,EAAS2Q,EAAiB6C,EAAiBC,EAAiBrT,EAAQ4Q,EAAW0C,GAChGvd,KAAKiV,QAAUA,EACfjV,KAAK6J,QAAUA,EACf7J,KAAKwa,gBAAkBA,EACvBxa,KAAKqd,gBAAkBA,EACvBrd,KAAKsd,gBAAkBA,EACvBtd,KAAKiK,OAASA,EACdjK,KAAK6a,UAAYA,EACjB7a,KAAKgd,cAAgB,KACrBhd,KAAKqX,sBAAwB,KAC7BrX,KAAKwb,aAAeQ,GACpBhc,KAAK6b,gBAAkB,EACvB7b,KAAKD,QAAU,GACfC,KAAK+c,kBAAoB,EACzB/c,KAAK6c,kBAAoB,EACzB7c,KAAKmd,mBAAqB,EAC1Bnd,KAAK4a,gBAAkB2C,GAAmB,IAAI,GAAgBvd,KAAKiV,QAASpL,EAAS,GACrFgR,EAAUpa,KAAKT,KAAK4a,iBAExB,aACI,OAAO5a,KAAKD,QAAQmR,OAExB,cAAcnR,EAASyd,GACnB,IAAKzd,EACD,OACJ,MAAM0d,EAAa1d,EACnB,IAAI2d,EAAkB1d,KAAKD,QAEA,MAAvB0d,EAAWjX,WACXkX,EAAgBlX,SAAWqI,EAAmB4O,EAAWjX,WAErC,MAApBiX,EAAWhX,QACXiX,EAAgBjX,MAAQoI,EAAmB4O,EAAWhX,QAE1D,MAAMkX,EAAYF,EAAWvM,OAC7B,GAAIyM,EAAW,CACX,IAAIC,EAAiBF,EAAgBxM,OAChC0M,IACDA,EAAiB5d,KAAKD,QAAQmR,OAAS,IAE3C1T,OAAOgN,KAAKmT,GAAWxd,QAAQ9C,IACtBmgB,GAAiBI,EAAejf,eAAetB,KAChDugB,EAAevgB,GAAQgU,GAAkBsM,EAAUtgB,GAAOugB,EAAgB5d,KAAKiK,YAK/F,eACI,MAAMlK,EAAU,GAChB,GAAIC,KAAKD,QAAS,CACd,MAAM8d,EAAY7d,KAAKD,QAAQmR,OAC/B,GAAI2M,EAAW,CACX,MAAM3M,EAASnR,EAAgB,OAAI,GACnCvC,OAAOgN,KAAKqT,GAAW1d,QAAQ9C,IAC3B6T,EAAO7T,GAAQwgB,EAAUxgB,MAIrC,OAAO0C,EAEX,iBAAiBA,EAAU,KAAM8J,EAASiU,GACtC,MAAMC,EAASlU,GAAW7J,KAAK6J,QACzB+I,EAAU,IAAI+H,GAAyB3a,KAAKiV,QAAS8I,EAAQ/d,KAAKwa,gBAAiBxa,KAAKqd,gBAAiBrd,KAAKsd,gBAAiBtd,KAAKiK,OAAQjK,KAAK6a,UAAW7a,KAAK4a,gBAAgBoD,KAAKD,EAAQD,GAAW,IAS/M,OARAlL,EAAQ4I,aAAexb,KAAKwb,aAC5B5I,EAAQyE,sBAAwBrX,KAAKqX,sBACrCzE,EAAQ7S,QAAUC,KAAKie,eACvBrL,EAAQgJ,cAAc7b,GACtB6S,EAAQmK,kBAAoB/c,KAAK+c,kBACjCnK,EAAQiK,kBAAoB7c,KAAK6c,kBACjCjK,EAAQoK,cAAgBhd,KACxBA,KAAK6b,kBACEjJ,EAEX,yBAAyBkL,GAIrB,OAHA9d,KAAKwb,aAAeQ,GACpBhc,KAAK4a,gBAAkB5a,KAAK4a,gBAAgBoD,KAAKhe,KAAK6J,QAASiU,GAC/D9d,KAAK6a,UAAUpa,KAAKT,KAAK4a,iBAClB5a,KAAK4a,gBAEhB,4BAA4Ba,EAAajV,EAAUC,GAC/C,MAAMyX,EAAiB,CACnB1X,SAAsB,MAAZA,EAAmBA,EAAWiV,EAAYjV,SACpDC,MAAOzG,KAAK4a,gBAAgBtF,aAAwB,MAAT7O,EAAgBA,EAAQ,GAAKgV,EAAYhV,MACpF+H,OAAQ,IAEN2P,EAAU,IAAIC,GAAmBpe,KAAKiV,QAASwG,EAAY5R,QAAS4R,EAAY3R,UAAW2R,EAAYjC,cAAeiC,EAAYhC,eAAgByE,EAAgBzC,EAAY4C,yBAEpL,OADAre,KAAK6a,UAAUpa,KAAK0d,GACbD,EAEX,cAAc1V,GACVxI,KAAK4a,gBAAgB+B,YAAY3c,KAAK4a,gBAAgBpU,SAAWgC,GAErE,cAAc/B,GAENA,EAAQ,GACRzG,KAAK4a,gBAAgBqB,cAAcxV,GAG3C,YAAYgG,EAAU4M,EAAkBT,EAAOK,EAAaG,EAAUnP,GAClE,IAAIqD,EAAU,GAId,GAHI2L,GACA3L,EAAQ7M,KAAKT,KAAK6J,SAElB4C,EAASvJ,OAAS,EAAG,CAErBuJ,GADAA,EAAWA,EAASlK,QAAQyX,GAAmB,IAAMha,KAAKqd,kBACtC9a,QAAQ0X,GAAmB,IAAMja,KAAKsd,iBAE1D,IAAIre,EAAWe,KAAKiV,QAAQqJ,MAAMte,KAAK6J,QAAS4C,EADzB,GAATmM,GAEA,IAAVA,IACA3Z,EAAW2Z,EAAQ,EAAI3Z,EAASsf,MAAMtf,EAASiE,OAAS0V,EAAO3Z,EAASiE,QACpEjE,EAASsf,MAAM,EAAG3F,IAE1BtL,EAAQ7M,QAAQxB,GAKpB,OAHKma,GAA8B,GAAlB9L,EAAQpK,QACrB+G,EAAOxJ,KAAK,YAAY4Y,+CAA8DA,yDAEnF/L,GAGf,MAAM,GACF,YAAY2H,EAASpL,EAASqO,EAAWsG,GACrCxe,KAAKiV,QAAUA,EACfjV,KAAK6J,QAAUA,EACf7J,KAAKkY,UAAYA,EACjBlY,KAAKwe,6BAA+BA,EACpCxe,KAAKwG,SAAW,EAChBxG,KAAKye,kBAAoB,GACzBze,KAAK0e,iBAAmB,GACxB1e,KAAK2e,WAAa,IAAIhf,IACtBK,KAAK4e,cAAgB,GACrB5e,KAAK6e,eAAiB,GACtB7e,KAAK8e,UAAY,GACjB9e,KAAK+e,0BAA4B,KAC5B/e,KAAKwe,+BACNxe,KAAKwe,6BAA+B,IAAI7e,KAE5CK,KAAKgf,qBAAuBxhB,OAAOY,OAAO4B,KAAK8e,UAAW,IAC1D9e,KAAKif,sBAAwBjf,KAAKwe,6BAA6B7gB,IAAIkM,GAC9D7J,KAAKif,wBACNjf,KAAKif,sBAAwBjf,KAAKgf,qBAClChf,KAAKwe,6BAA6Bpc,IAAIyH,EAAS7J,KAAKgf,uBAExDhf,KAAKkf,gBAET,oBACI,OAAQlf,KAAK2e,WAAWrI,MACpB,KAAK,EACD,OAAO,EACX,KAAK,EACD,OAAOtW,KAAKuc,4BAA4BrZ,OAAS,EACrD,QACI,OAAO,GAGnB,4BACI,OAAO1F,OAAOgN,KAAKxK,KAAK0e,kBAE5B,kBACI,OAAO1e,KAAKkY,UAAYlY,KAAKwG,SAEjC,cAAcC,GAKV,MAAM0Y,EAA0C,GAAxBnf,KAAK2e,WAAWrI,MAAa9Y,OAAOgN,KAAKxK,KAAK6e,gBAAgB3b,OAClFlD,KAAKwG,UAAY2Y,GACjBnf,KAAK2c,YAAY3c,KAAKsV,YAAc7O,GAChC0Y,GACAnf,KAAK+b,yBAIT/b,KAAKkY,WAAazR,EAG1B,KAAKoD,EAASyL,GAEV,OADAtV,KAAKkc,wBACE,IAAI,GAAgBlc,KAAKiV,QAASpL,EAASyL,GAAetV,KAAKsV,YAAatV,KAAKwe,8BAE5F,gBACQxe,KAAK0e,mBACL1e,KAAKye,kBAAoBze,KAAK0e,kBAElC1e,KAAK0e,iBAAmB1e,KAAK2e,WAAWhhB,IAAIqC,KAAKwG,UAC5CxG,KAAK0e,mBACN1e,KAAK0e,iBAAmBlhB,OAAOY,OAAO4B,KAAK8e,UAAW,IACtD9e,KAAK2e,WAAWvc,IAAIpC,KAAKwG,SAAUxG,KAAK0e,mBAGhD,eACI1e,KAAKwG,UAhiBqB,EAiiB1BxG,KAAKkf,gBAET,YAAY1W,GACRxI,KAAKkc,wBACLlc,KAAKwG,SAAWgC,EAChBxI,KAAKkf,gBAET,aAAazU,EAAM1M,GACfiC,KAAKgf,qBAAqBvU,GAAQ1M,EAClCiC,KAAKif,sBAAsBxU,GAAQ1M,EACnCiC,KAAK4e,cAAcnU,GAAQ,CAAEjC,KAAMxI,KAAKsV,YAAavX,MAAAA,GAEzD,0BACI,OAAOiC,KAAK+e,4BAA8B/e,KAAK0e,iBAEnD,eAAelQ,GACPA,IACAxO,KAAKye,kBAA0B,OAAIjQ,GAQvChR,OAAOgN,KAAKxK,KAAKif,uBAAuB9e,QAAQsK,IAC5CzK,KAAK8e,UAAUrU,GAAQzK,KAAKif,sBAAsBxU,IDppD3C,ICqpDPzK,KAAK0e,iBAAiBjU,GDrpDf,MCupDXzK,KAAK+e,0BAA4B/e,KAAK0e,iBAE1C,UAAUzM,EAAOzD,EAAQvE,EAAQlK,GACzByO,IACAxO,KAAKye,kBAA0B,OAAIjQ,GAEvC,MAAM0C,EAAUnR,GAAWA,EAAQmR,QAAW,GACxCrL,EAwJd,SAAuBoM,EAAOmN,GAC1B,MAAMvZ,EAAS,GACf,IAAIwZ,EAYJ,OAXApN,EAAM9R,QAAQuC,IACI,MAAVA,GACA2c,EAAgBA,GAAiB7hB,OAAOgN,KAAK4U,GAC7CC,EAAclf,QAAQsK,IAClB5E,EAAO4E,GD7zDJ,OCi0DPoF,EAAWnN,GAAO,EAAOmD,KAG1BA,EAdX,CAxJqCoM,EAAOjS,KAAKif,uBACzCzhB,OAAOgN,KAAK3E,GAAQ1F,QAAQsK,IACxB,MAAM6U,EAAMjO,GAAkBxL,EAAO4E,GAAOyG,EAAQjH,GACpDjK,KAAK6e,eAAepU,GAAQ6U,EACvBtf,KAAKgf,qBAAqBrgB,eAAe8L,KAC1CzK,KAAK8e,UAAUrU,GAAQzK,KAAKif,sBAAsBtgB,eAAe8L,GAC7DzK,KAAKif,sBAAsBxU,GDpqD5B,KCuqDPzK,KAAKuf,aAAa9U,EAAM6U,KAGhC,wBACI,MAAMzZ,EAAS7F,KAAK6e,eACdW,EAAQhiB,OAAOgN,KAAK3E,GACN,GAAhB2Z,EAAMtc,SAEVlD,KAAK6e,eAAiB,GACtBW,EAAMrf,QAAQsK,IAEVzK,KAAK0e,iBAAiBjU,GADV5E,EAAO4E,KAGvBjN,OAAOgN,KAAKxK,KAAKgf,sBAAsB7e,QAAQsK,IACtCzK,KAAK0e,iBAAiB/f,eAAe8L,KACtCzK,KAAK0e,iBAAiBjU,GAAQzK,KAAKgf,qBAAqBvU,OAIpE,wBACIjN,OAAOgN,KAAKxK,KAAKgf,sBAAsB7e,QAAQsK,IAC3C,MAAM6U,EAAMtf,KAAKgf,qBAAqBvU,GACtCzK,KAAK6e,eAAepU,GAAQ6U,EAC5Btf,KAAKuf,aAAa9U,EAAM6U,KAGhC,mBACI,OAAOtf,KAAK2e,WAAWhhB,IAAIqC,KAAKwG,UAEpC,iBACI,MAAMiZ,EAAa,GACnB,IAAK,IAAIhV,KAAQzK,KAAK0e,iBAClBe,EAAWhf,KAAKgK,GAEpB,OAAOgV,EAEX,6BAA6B3E,GACzBtd,OAAOgN,KAAKsQ,EAAS8D,eAAeze,QAAQsK,IACxC,MAAMiV,EAAW1f,KAAK4e,cAAcnU,GAC9BkV,EAAW7E,EAAS8D,cAAcnU,KACnCiV,GAAYC,EAASnX,KAAOkX,EAASlX,OACtCxI,KAAKuf,aAAa9U,EAAMkV,EAAS5hB,SAI7C,iBACIiC,KAAKkc,wBACL,MAAM1C,EAAgB,IAAInF,IACpBoF,EAAiB,IAAIpF,IACrBkD,EAAmC,IAAzBvX,KAAK2e,WAAWrI,MAAgC,IAAlBtW,KAAKwG,SACnD,IAAIoZ,EAAiB,GACrB5f,KAAK2e,WAAWxe,QAAQ,CAAC0f,EAAUrX,KAC/B,MAAMsX,EAAgBjQ,EAAWgQ,GAAU,GAC3CriB,OAAOgN,KAAKsV,GAAe3f,QAAQsK,IAC/B,MAAM1M,EAAQ+hB,EAAcrV,GDvpBzB,KCwpBC1M,EACAyb,EAAcnD,IAAI5L,GD/tDnB,KCiuDM1M,GACL0b,EAAepD,IAAI5L,KAGtB8M,IACDuI,EAAsB,OAAItX,EAAOxI,KAAKwG,UAE1CoZ,EAAenf,KAAKqf,KAExB,MAAMC,EAAWvG,EAAclD,KAAO3E,GAAgB6H,EAAchD,UAAY,GAC1EwJ,EAAYvG,EAAenD,KAAO3E,GAAgB8H,EAAejD,UAAY,GAEnF,GAAIe,EAAS,CACT,MAAM0I,EAAML,EAAe,GACrBM,EAAMxQ,EAAQuQ,GACpBA,EAAY,OAAI,EAChBC,EAAY,OAAI,EAChBN,EAAiB,CAACK,EAAKC,GAE3B,OAAO3G,GAA0BvZ,KAAK6J,QAAS+V,EAAgBG,EAAUC,EAAWhgB,KAAKwG,SAAUxG,KAAKkY,UAAWlY,KAAKwO,QAAQ,IAGxI,MAAM4P,WAA2B,GAC7B,YAAYzU,EAAQE,EAASC,EAAW0P,EAAeC,EAAgB7T,EAASua,GAA2B,GACvGC,MAAMzW,EAAQE,EAASjE,EAAQa,OAC/BzG,KAAK6J,QAAUA,EACf7J,KAAK8J,UAAYA,EACjB9J,KAAKwZ,cAAgBA,EACrBxZ,KAAKyZ,eAAiBA,EACtBzZ,KAAKmgB,yBAA2BA,EAChCngB,KAAK4F,QAAU,CAAEY,SAAUZ,EAAQY,SAAUC,MAAOb,EAAQa,MAAO+H,OAAQ5I,EAAQ4I,QAEvF,oBACI,OAAOxO,KAAK8J,UAAU5G,OAAS,EAEnC,iBACI,IAAI4G,EAAY9J,KAAK8J,WACjB,MAAErD,EAAK,SAAED,EAAQ,OAAEgI,GAAWxO,KAAK4F,QACvC,GAAI5F,KAAKmgB,0BAA4B1Z,EAAO,CACxC,MAAM4Z,EAAe,GACfpZ,EAAYT,EAAWC,EACvB6Z,EAAc7Z,EAAQQ,EAEtBsZ,EAAmB1Q,EAAW/F,EAAU,IAAI,GAClDyW,EAAyB,OAAI,EAC7BF,EAAa5f,KAAK8f,GAClB,MAAMC,EAAmB3Q,EAAW/F,EAAU,IAAI,GAClD0W,EAAyB,OAAIC,GAAYH,GACzCD,EAAa5f,KAAK+f,GAgBlB,MAAM5H,EAAQ9O,EAAU5G,OAAS,EACjC,IAAK,IAAIpG,EAAI,EAAGA,GAAK8b,EAAO9b,IAAK,CAC7B,IAAIuN,EAAKwF,EAAW/F,EAAUhN,IAAI,GAGlCuN,EAAW,OAAIoW,IADQha,EADL4D,EAAW,OACc7D,GACCS,GAC5CoZ,EAAa5f,KAAK4J,GAGtB7D,EAAWS,EACXR,EAAQ,EACR+H,EAAS,GACT1E,EAAYuW,EAEhB,OAAO9G,GAA0BvZ,KAAK6J,QAASC,EAAW9J,KAAKwZ,cAAexZ,KAAKyZ,eAAgBjT,EAAUC,EAAO+H,GAAQ,IAGpI,SAASiS,GAAYxa,EAAQya,EAAgB,GACzC,MAAMC,EAAOlY,KAAKmY,IAAI,GAAIF,EAAgB,GAC1C,OAAOjY,KAAKoY,MAAM5a,EAAS0a,GAAQA,EAwDvC,MAAMG,IAqBN,MAAMC,WAAqCD,GACvC,sBAAsBE,EAAc/W,GAChC,OAAOyG,GAAoBsQ,GAE/B,oBAAoBC,EAAsBC,EAAoBnjB,EAAOkM,GACjE,IAAIgF,EAAO,GACX,MAAMkS,EAASpjB,EAAMyL,WAAW4X,OAChC,GAAIC,GAAqBH,IAAiC,IAAVnjB,GAAyB,MAAVA,EAC3D,GAAqB,iBAAVA,EACPkR,EAAO,SAEN,CACD,MAAMqS,EAAoBvjB,EAAM+Q,MAAM,0BAClCwS,GAAoD,GAA/BA,EAAkB,GAAGpe,QAC1C+G,EAAOxJ,KAAK,uCAAuCwgB,KAAwBljB,KAIvF,OAAOojB,EAASlS,GAGxB,MAEMoS,GAFO,KAGb,SAAwB7W,GACpB,MAAMqB,EAAM,GAEZ,OADArB,EAAKrK,QAAQ9B,GAAOwN,EAAIxN,IAAO,GACxBwN,EAHX,CAHkC,iUAC7BkI,MAAM,MADE,GASb,SAASwN,GAA4B1X,EAAS0B,EAAaC,EAAWC,EAAS+V,EAAqBC,EAAYC,EAAU7G,EAAW8G,EAAiBnI,EAAeC,EAAgBxS,EAAWgD,GAC5L,MAAO,CACHtI,KAAM,EACNkI,QAAAA,EACA0B,YAAAA,EACAiW,oBAAAA,EACAhW,UAAAA,EACAiW,WAAAA,EACAhW,QAAAA,EACAiW,SAAAA,EACA7G,UAAAA,EACA8G,gBAAAA,EACAnI,cAAAA,EACAC,eAAAA,EACAxS,UAAAA,EACAgD,OAAAA,GAIR,MAAM2X,GAAe,GACrB,MAAMC,GACF,YAAYC,EAAc3K,EAAK4K,GAC3B/hB,KAAK8hB,aAAeA,EACpB9hB,KAAKmX,IAAMA,EACXnX,KAAK+hB,aAAeA,EAExB,MAAMC,EAAcC,EAAWpY,EAASqH,GACpC,OA4CR,SAAmCgR,EAAUF,EAAcC,EAAWpY,EAASqH,GAC3E,OAAOgR,EAASjL,KAAK/P,GAAMA,EAAG8a,EAAcC,EAAWpY,EAASqH,IADpE,CA5CyClR,KAAKmX,IAAIV,SAAUuL,EAAcC,EAAWpY,EAASqH,GAE1F,YAAYiR,EAAWjR,EAAQjH,GAC3B,MAAMmY,EAAoBpiB,KAAK+hB,aAAa,KACtCM,EAAcriB,KAAK+hB,aAAaI,GAChCG,EAAeF,EAAoBA,EAAkBG,YAAYrR,EAAQjH,GAAU,GACzF,OAAOoY,EAAcA,EAAYE,YAAYrR,EAAQjH,GAAUqY,EAEnE,MAAM3Y,EAAQE,EAASmY,EAAcC,EAAW7H,EAAgBC,EAAgBmI,EAAgBC,EAAajI,EAAiBkI,GAC1H,MAAMzY,EAAS,GACT0Y,EAA4B3iB,KAAKmX,IAAIpX,SAAWC,KAAKmX,IAAIpX,QAAQmR,QAAU0Q,GAE3EgB,EAAqB5iB,KAAKuiB,YAAYP,EADbQ,GAAkBA,EAAetR,QAAU0Q,GACQ3X,GAC5E4Y,EAAsBJ,GAAeA,EAAYvR,QAAU0Q,GAC3DkB,EAAkB9iB,KAAKuiB,YAAYN,EAAWY,EAAqB5Y,GACnE0X,EAAkB,IAAItN,IACtB0O,EAAc,IAAIpjB,IAClBqjB,EAAe,IAAIrjB,IACnBsjB,EAA0B,SAAdhB,EACZiB,EAAmB,CAAEhS,OAAQ1T,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIR,GAA4BE,IACzFhI,EAAY6H,EACd,GACAxI,GAAwBvQ,EAAQE,EAAS7J,KAAKmX,IAAI/Q,UAAWgU,EAAgBC,EAAgBuI,EAAoBE,EAAiBI,EAAkB1I,EAAiBvQ,GACzK,IAAIhD,EAAY,EAIhB,GAHA4T,EAAU1a,QAAQ6a,IACd/T,EAAYwB,KAAKC,IAAIsS,EAAGxU,SAAWwU,EAAGvU,MAAOQ,KAE7CgD,EAAO/G,OACP,OAAOqe,GAA4B1X,EAAS7J,KAAK8hB,aAAcE,EAAcC,EAAWgB,EAAWL,EAAoBE,EAAiB,GAAI,GAAIC,EAAaC,EAAc/b,EAAWgD,GAE1L4Q,EAAU1a,QAAQ6a,IACd,MAAMxN,EAAMwN,EAAGnR,QACTkW,EAAWnU,EAAgBmX,EAAavV,EAAK,IACnDwN,EAAGxB,cAAcrZ,QAAQsK,GAAQsV,EAAStV,IAAQ,GAClD,MAAMuV,EAAYpU,EAAgBoX,EAAcxV,EAAK,IACrDwN,EAAGvB,eAAetZ,QAAQsK,GAAQuV,EAAUvV,IAAQ,GAChD+C,IAAQ3D,GACR8X,EAAgBtL,IAAI7I,KAG5B,MAAM4V,EAAsBzR,GAAgBgQ,EAAgBnL,UAC5D,OAAO+K,GAA4B1X,EAAS7J,KAAK8hB,aAAcE,EAAcC,EAAWgB,EAAWL,EAAoBE,EAAiBjI,EAAWuI,EAAqBL,EAAaC,EAAc/b,IAM3M,MAAMoc,GACF,YAAYxd,EAAQyd,GAChBtjB,KAAK6F,OAASA,EACd7F,KAAKsjB,cAAgBA,EAEzB,YAAYpS,EAAQjH,GAChB,MAAMsQ,EAAc,GACdgJ,EAAiB7T,EAAQ1P,KAAKsjB,eAmBpC,OAlBA9lB,OAAOgN,KAAK0G,GAAQ/Q,QAAQ9B,IACxB,MAAMN,EAAQmT,EAAO7S,GACR,MAATN,IACAwlB,EAAellB,GAAON,KAG9BiC,KAAK6F,OAAOA,OAAO1F,QAAQpC,IACvB,GAAqB,iBAAVA,EAAoB,CAC3B,MAAMylB,EAAWzlB,EACjBP,OAAOgN,KAAKgZ,GAAUrjB,QAAQsK,IAC1B,IAAI6U,EAAMkE,EAAS/Y,GACf6U,EAAIpc,OAAS,IACboc,EAAMjO,GAAkBiO,EAAKiE,EAAgBtZ,IAEjDsQ,EAAY9P,GAAQ6U,OAIzB/E,GAaf,MAAMkJ,GACF,YAAYpmB,EAAM8Z,GACdnX,KAAK3C,KAAOA,EACZ2C,KAAKmX,IAAMA,EACXnX,KAAK0jB,oBAAsB,GAC3B1jB,KAAKyV,OAAS,GACd0B,EAAI1B,OAAOtV,QAAQgX,IAEfnX,KAAKyV,OAAO0B,EAAI9Z,MAAQ,IAAIgmB,GAAqBlM,EAAItJ,MAD9BsJ,EAAIpX,SAAWoX,EAAIpX,QAAQmR,QAAW,MAGjEyS,GAAkB3jB,KAAKyV,OAAQ,OAAQ,KACvCkO,GAAkB3jB,KAAKyV,OAAQ,QAAS,KACxC0B,EAAIzB,YAAYvV,QAAQgX,IACpBnX,KAAK0jB,oBAAoBjjB,KAAK,IAAIohB,GAA2BxkB,EAAM8Z,EAAKnX,KAAKyV,WAEjFzV,KAAK4jB,mBAwBF,IAAI/B,GAxB4CxkB,EAgBpC,CACfsE,KAAM,EACNyE,UAHc,CAAEzE,KAAM,EAAkBoE,MAAO,GAAIhG,QAAS,MAI5D0W,SALa,CAAC,CAACjL,EAAWC,KAAY,GAMtC1L,QAAS,KACTwV,WAAY,EACZC,SAAU,GAtB+CxV,KAAKyV,QAElE,sBACI,OAAOzV,KAAKmX,IAAI5B,WAAa,EAEjC,gBAAgByM,EAAcC,EAAWpY,EAASqH,GAE9C,OADclR,KAAK0jB,oBAAoB3iB,KAAK8iB,GAAKA,EAAE/U,MAAMkT,EAAcC,EAAWpY,EAASqH,KAC3E,KAEpB,YAAY8Q,EAAc9Q,EAAQjH,GAC9B,OAAOjK,KAAK4jB,mBAAmBrB,YAAYP,EAAc9Q,EAAQjH,IAgBzE,SAAS0Z,GAAkBhU,EAAKmU,EAAMC,GAC9BpU,EAAIhR,eAAemlB,GACdnU,EAAIhR,eAAeolB,KACpBpU,EAAIoU,GAAQpU,EAAImU,IAGfnU,EAAIhR,eAAeolB,KACxBpU,EAAImU,GAAQnU,EAAIoU,IAWxB,MAAMC,GAAwB,IAAIrK,GAClC,MAAM,GACF,YAAYsK,EAAUhP,EAASiP,GAC3BlkB,KAAKikB,SAAWA,EAChBjkB,KAAKiV,QAAUA,EACfjV,KAAKkkB,YAAcA,EACnBlkB,KAAKmkB,YAAc,GACnBnkB,KAAKokB,aAAe,GACpBpkB,KAAK6H,QAAU,GAEnB,SAASwc,EAAItP,GACT,MAAM9K,EAAS,GACTkN,EAAMrC,GAAkB9U,KAAKiV,QAASF,EAAU9K,GACtD,GAAIA,EAAO/G,OACP,MAAM,IAAI9B,MAAM,8DAA8D6I,EAAOc,KAAK,OAG1F/K,KAAKmkB,YAAYE,GAAMlN,EAG/B,aAAara,EAAGiN,EAAWC,GACvB,MAAMH,EAAU/M,EAAE+M,QACZC,EAAYJ,EAAmB1J,EAAcA,KAAKkkB,YAAara,EAAS/M,EAAEgN,UAAWC,EAAWC,GACtG,OAAOhK,KAAKiV,QAAQtP,QAAQkE,EAASC,EAAWhN,EAAE0J,SAAU1J,EAAE2J,MAAO3J,EAAE0R,OAAQ,IAAI,GAEvF,OAAO6V,EAAIxa,EAAS9J,EAAU,IAC1B,MAAMkK,EAAS,GACTkN,EAAMnX,KAAKmkB,YAAYE,GAC7B,IAAIxK,EACJ,MAAMyK,EAAgB,IAAI3kB,IAY1B,GAXIwX,GACA0C,EAAeK,GAAwBla,KAAKiV,QAASpL,EAASsN,EA36DlD,WACA,WA06DyF,GAAI,GAAIpX,EAASikB,GAAuB/Z,GAC7I4P,EAAa1Z,QAAQokB,IACjB,MAAM1e,EAAS+F,EAAgB0Y,EAAeC,EAAK1a,QAAS,IAC5D0a,EAAK9K,eAAetZ,QAAQsK,GAAQ5E,EAAO4E,GAAQ,UAIvDR,EAAOxJ,KAAK,uEACZoZ,EAAe,IAEf5P,EAAO/G,OACP,MAAM,IAAI9B,MAAM,+DAA+D6I,EAAOc,KAAK,OAE/FuZ,EAAcnkB,QAAQ,CAAC0F,EAAQgE,KAC3BrM,OAAOgN,KAAK3E,GAAQ1F,QAAQsK,IACxB5E,EAAO4E,GAAQzK,KAAKiV,QAAQzC,aAAa3I,EAASY,EDznE/C,SC4nEX,MAIMvC,EAASuB,EAJCoQ,EAAahO,IAAI/O,IAC7B,MAAM+I,EAASye,EAAc3mB,IAAIb,EAAE+M,SACnC,OAAO7J,KAAKwkB,aAAa1nB,EAAG,GAAI+I,MAMpC,OAHA7F,KAAKokB,aAAaC,GAAMnc,EACxBA,EAAOE,UAAU,IAAMpI,KAAK+I,QAAQsb,IACpCrkB,KAAK6H,QAAQpH,KAAKyH,GACXA,EAEX,QAAQmc,GACJ,MAAMnc,EAASlI,KAAKykB,WAAWJ,GAC/Bnc,EAAOa,iBACA/I,KAAKokB,aAAaC,GACzB,MAAMK,EAAQ1kB,KAAK6H,QAAQqE,QAAQhE,GAC/Bwc,GAAS,GACT1kB,KAAK6H,QAAQ4H,OAAOiV,EAAO,GAGnC,WAAWL,GACP,MAAMnc,EAASlI,KAAKokB,aAAaC,GACjC,IAAKnc,EACD,MAAM,IAAI9G,MAAM,oDAAoDijB,GAExE,OAAOnc,EAEX,OAAOmc,EAAIxa,EAASoB,EAAWE,GAE3B,MAAMwZ,EAAYrZ,EAAmBzB,EAAS,GAAI,GAAI,IAEtD,OADAmB,EAAehL,KAAKykB,WAAWJ,GAAKpZ,EAAW0Z,EAAWxZ,GACnD,OAEX,QAAQkZ,EAAIxa,EAASmC,EAAS4Y,GAC1B,GAAe,YAAX5Y,EAEA,YADAhM,KAAK6kB,SAASR,EAAIO,EAAK,IAG3B,GAAe,UAAX5Y,EAGA,YADAhM,KAAK5B,OAAOimB,EAAIxa,EADC+a,EAAK,IAAM,IAIhC,MAAM1c,EAASlI,KAAKykB,WAAWJ,GAC/B,OAAQrY,GACJ,IAAK,OACD9D,EAAOU,OACP,MACJ,IAAK,QACDV,EAAOW,QACP,MACJ,IAAK,QACDX,EAAOc,QACP,MACJ,IAAK,UACDd,EAAOY,UACP,MACJ,IAAK,SACDZ,EAAOX,SACP,MACJ,IAAK,OACDW,EAAOS,OACP,MACJ,IAAK,cACDT,EAAOiB,YAAY6F,WAAW4V,EAAK,KACnC,MACJ,IAAK,UACD5kB,KAAK+I,QAAQsb,KAa7B,MAMMS,GAAqB,GACrBC,GAAqB,CACvBC,YAAa,GACbC,eAAe,EACfC,YAAY,EACZC,cAAc,EACdC,sBAAsB,GAEpBC,GAA6B,CAC/BL,YAAa,GACbE,YAAY,EACZD,eAAe,EACfE,cAAc,EACdC,sBAAsB,GAG1B,MAAME,GACF,YAAYrT,EAAO+S,EAAc,IAC7BhlB,KAAKglB,YAAcA,EACnB,MAAMO,EAAQtT,GAASA,EAAMtT,eAAe,SAG5C,GADAqB,KAAKjC,MA+yCO,OAJWA,EA5yCTwnB,EAAQtT,EAAa,MAAIA,GAgzCpBlU,EAAQ,KA9yCvBwnB,EAAO,CACP,MAAMxlB,EAAU2P,EAAQuC,UACjBlS,EAAe,MACtBC,KAAKD,QAAUA,OAGfC,KAAKD,QAAU,GAoyC3B,IAA+BhC,EAlyClBiC,KAAKD,QAAQmR,SACdlR,KAAKD,QAAQmR,OAAS,IAG9B,aACI,OAAOlR,KAAKD,QAAQmR,OAExB,cAAcnR,GACV,MAAM4d,EAAY5d,EAAQmR,OAC1B,GAAIyM,EAAW,CACX,MAAME,EAAY7d,KAAKD,QAAQmR,OAC/B1T,OAAOgN,KAAKmT,GAAWxd,QAAQsK,IACJ,MAAnBoT,EAAUpT,KACVoT,EAAUpT,GAAQkT,EAAUlT,QAMhD,MACM+a,GAAsB,IAAIF,GADb,QAEnB,MAAMG,GACF,YAAYpB,EAAIqB,EAAaC,GACzB3lB,KAAKqkB,GAAKA,EACVrkB,KAAK0lB,YAAcA,EACnB1lB,KAAK2lB,QAAUA,EACf3lB,KAAK6H,QAAU,GACf7H,KAAK4lB,UAAY,GACjB5lB,KAAK6lB,OAAS,GACd7lB,KAAK8lB,kBAAoB,IAAInmB,IAC7BK,KAAK+lB,eAAiB,UAAY1B,EAClC2B,GAASN,EAAa1lB,KAAK+lB,gBAE/B,OAAOlc,EAASxM,EAAM4oB,EAAO9a,GACzB,IAAKnL,KAAK4lB,UAAUjnB,eAAetB,GAC/B,MAAM,IAAI+D,MAAM,oDAAoD6kB,qCAAyC5oB,qBAEjH,GAAa,MAAT4oB,GAAiC,GAAhBA,EAAM/iB,OACvB,MAAM,IAAI9B,MAAM,8CAA8C/D,+CAElE,GAowCgB,UADK4N,EAnwCIgb,IAowCe,QAAbhb,EAnwCvB,MAAM,IAAI7J,MAAM,yCAAyC6kB,iCAAqC5oB,wBAkwC1G,IAA6B4N,EAhwCrB,MAAMib,EAAYta,EAAgB5L,KAAK8lB,kBAAmBjc,EAAS,IAC7D8B,EAAO,CAAEtO,KAAAA,EAAM4oB,MAAAA,EAAO9a,SAAAA,GAC5B+a,EAAUzlB,KAAKkL,GACf,MAAMwa,EAAqBva,EAAgB5L,KAAK2lB,QAAQS,gBAAiBvc,EAAS,IAMlF,OALKsc,EAAmBxnB,eAAetB,KACnC2oB,GAASnc,EA5lEQ,cA6lEjBmc,GAASnc,EAASwc,cAA6BhpB,GAC/C8oB,EAAmB9oB,GAAQmoB,IAExB,KAIHxlB,KAAK2lB,QAAQW,WAAW,KACpB,MAAM5B,EAAQwB,EAAUha,QAAQP,GAC5B+Y,GAAS,GACTwB,EAAUzW,OAAOiV,EAAO,GAEvB1kB,KAAK4lB,UAAUvoB,WACT8oB,EAAmB9oB,MAK1C,SAASA,EAAM8Z,GACX,OAAInX,KAAK4lB,UAAUvoB,KAKf2C,KAAK4lB,UAAUvoB,GAAQ8Z,GAChB,GAGf,YAAY9Z,GACR,MAAMoI,EAAUzF,KAAK4lB,UAAUvoB,GAC/B,IAAKoI,EACD,MAAM,IAAIrE,MAAM,mCAAmC/D,+BAEvD,OAAOoI,EAEX,QAAQoE,EAAS0B,EAAaxN,EAAOwoB,GAAoB,GACrD,MAAM9gB,EAAUzF,KAAKwmB,YAAYjb,GAC3BrD,EAAS,IAAI,GAA0BlI,KAAKqkB,GAAI9Y,EAAa1B,GACnE,IAAIsc,EAAqBnmB,KAAK2lB,QAAQS,gBAAgBzoB,IAAIkM,GACrDsc,IACDH,GAASnc,EAroEQ,cAsoEjBmc,GAASnc,EAASwc,cAA6B9a,GAC/CvL,KAAK2lB,QAAQS,gBAAgBhkB,IAAIyH,EAASsc,EAAqB,KAEnE,IAAI3a,EAAY2a,EAAmB5a,GACnC,MAAME,EAAU,IAAI6Z,GAAWvnB,EAAOiC,KAAKqkB,IAgB3C,KAfctmB,GAASA,EAAMY,eAAe,WAC9B6M,GACVC,EAAQgb,cAAcjb,EAAUzL,SAEpComB,EAAmB5a,GAAeE,EAC7BD,IACDA,EAAYga,IAlFL,SAoFO/Z,EAAQ1N,OAORyN,EAAUzN,QAAU0N,EAAQ1N,MAAO,CAGjD,IA0zCZ,SAAmB2oB,EAAGC,GAClB,MAAMC,EAAKppB,OAAOgN,KAAKkc,GACjBG,EAAKrpB,OAAOgN,KAAKmc,GACvB,GAAIC,EAAG1jB,QAAU2jB,EAAG3jB,OAChB,OAAO,EACX,IAAK,IAAIpG,EAAI,EAAGA,EAAI8pB,EAAG1jB,OAAQpG,IAAK,CAChC,MAAM2N,EAAOmc,EAAG9pB,GAChB,IAAK6pB,EAAEhoB,eAAe8L,IAASic,EAAEjc,KAAUkc,EAAElc,GACzC,OAAO,EAEf,OAAO,EAVX,CA1zC2Be,EAAU0F,OAAQzF,EAAQyF,QAAS,CAC9C,MAAMjH,EAAS,GACTwX,EAAahc,EAAQqhB,YAAYtb,EAAUzN,MAAOyN,EAAU0F,OAAQjH,GACpEyX,EAAWjc,EAAQqhB,YAAYrb,EAAQ1N,MAAO0N,EAAQyF,OAAQjH,GAChEA,EAAO/G,OACPlD,KAAK2lB,QAAQoB,YAAY9c,GAGzBjK,KAAK2lB,QAAQW,WAAW,KACpB3V,GAAY9G,EAAS4X,GACrBlR,GAAU1G,EAAS6X,KAI/B,OAEJ,MAAMsF,EAAmBpb,EAAgB5L,KAAK2lB,QAAQsB,iBAAkBpd,EAAS,IACjFmd,EAAiB7mB,QAAQ+H,IAKjBA,EAAO8c,aAAehlB,KAAKqkB,IAAMnc,EAAOqD,aAAeA,GAAerD,EAAOgf,QAC7Ehf,EAAOa,YAGf,IAAI8M,EAAapQ,EAAQ0hB,gBAAgB3b,EAAUzN,MAAO0N,EAAQ1N,MAAO8L,EAAS4B,EAAQyF,QACtFkW,GAAuB,EAC3B,IAAKvR,EAAY,CACb,IAAK0Q,EACD,OACJ1Q,EAAapQ,EAAQme,mBACrBwD,GAAuB,EAyB3B,OAvBApnB,KAAK2lB,QAAQ0B,qBACbrnB,KAAK6lB,OAAOplB,KAAK,CAAEoJ,QAAAA,EAAS0B,YAAAA,EAAasK,WAAAA,EAAYrK,UAAAA,EAAWC,QAAAA,EAASvD,OAAAA,EAAQkf,qBAAAA,IAC5EA,IACDpB,GAASnc,EA1LI,qBA2Lb3B,EAAOI,QAAQ,KACXgf,GAAYzd,EA5LH,wBA+LjB3B,EAAOC,OAAO,KACV,IAAIuc,EAAQ1kB,KAAK6H,QAAQqE,QAAQhE,GAC7Bwc,GAAS,GACT1kB,KAAK6H,QAAQ4H,OAAOiV,EAAO,GAE/B,MAAM7c,EAAU7H,KAAK2lB,QAAQsB,iBAAiBtpB,IAAIkM,GAClD,GAAIhC,EAAS,CACT,IAAI6c,EAAQ7c,EAAQqE,QAAQhE,GACxBwc,GAAS,GACT7c,EAAQ4H,OAAOiV,EAAO,MAIlC1kB,KAAK6H,QAAQpH,KAAKyH,GAClB8e,EAAiBvmB,KAAKyH,GACfA,EAEX,WAAW7K,UACA2C,KAAK4lB,UAAUvoB,GACtB2C,KAAK2lB,QAAQS,gBAAgBjmB,QAAQ,CAAConB,EAAU1d,YACrC0d,EAASlqB,KAEpB2C,KAAK8lB,kBAAkB3lB,QAAQ,CAAC+lB,EAAWrc,KACvC7J,KAAK8lB,kBAAkB1jB,IAAIyH,EAASqc,EAAUhlB,OAAOsmB,GAC1CA,EAAMnqB,MAAQA,MAIjC,kBAAkBwM,GACd7J,KAAK2lB,QAAQS,gBAAgBtM,OAAOjQ,GACpC7J,KAAK8lB,kBAAkBhM,OAAOjQ,GAC9B,MAAM4d,EAAiBznB,KAAK2lB,QAAQsB,iBAAiBtpB,IAAIkM,GACrD4d,IACAA,EAAetnB,QAAQ+H,GAAUA,EAAOa,WACxC/I,KAAK2lB,QAAQsB,iBAAiBnN,OAAOjQ,IAG7C,+BAA+BsQ,EAAavH,GACxC,MAAM3T,EAAWe,KAAK2lB,QAAQhc,OAAO2U,MAAMnE,EA5uEvB,eA4uEyD,GAI7Elb,EAASkB,QAAQqN,IAGb,GAAIA,EAAgB,aAChB,OACJ,MAAMka,EAAa1nB,KAAK2lB,QAAQgC,yBAAyBna,GACrDka,EAAWpR,KACXoR,EAAWvnB,QAAQhC,GAAMA,EAAGypB,sBAAsBpa,EAAKoF,GAAS,GAAO,IAGvE5S,KAAK6nB,kBAAkBra,KAK/BxN,KAAK2lB,QAAQmC,yBAAyB,IAAM7oB,EAASkB,QAAQqN,GAAOxN,KAAK6nB,kBAAkBra,KAE/F,sBAAsB3D,EAAS+I,EAASmV,EAAsBxB,GAC1D,MAAMyB,EAAgBhoB,KAAK2lB,QAAQS,gBAAgBzoB,IAAIkM,GACvD,GAAIme,EAAe,CACf,MAAMngB,EAAU,GAWhB,GAVArK,OAAOgN,KAAKwd,GAAe7nB,QAAQoL,IAG/B,GAAIvL,KAAK4lB,UAAUra,GAAc,CAC7B,MAAMrD,EAASlI,KAAKyF,QAAQoE,EAAS0B,EA3MtC,OA2M+Dgb,GAC1Dre,GACAL,EAAQpH,KAAKyH,MAIrBL,EAAQ3E,OAKR,OAJAlD,KAAK2lB,QAAQsC,qBAAqBjoB,KAAKqkB,GAAIxa,GAAS,EAAM+I,GACtDmV,GACAte,EAAoB5B,GAASM,OAAO,IAAMnI,KAAK2lB,QAAQuC,iBAAiBre,KAErE,EAGf,OAAO,EAEX,+BAA+BA,GAC3B,MAAMqc,EAAYlmB,KAAK8lB,kBAAkBnoB,IAAIkM,GAC7C,GAAIqc,EAAW,CACX,MAAMiC,EAAkB,IAAI9T,IAC5B6R,EAAU/lB,QAAQioB,IACd,MAAM7c,EAAc6c,EAAS/qB,KAC7B,GAAI8qB,EAAgB7lB,IAAIiJ,GACpB,OACJ4c,EAAgB9R,IAAI9K,GACpB,MACMsK,EADU7V,KAAK4lB,UAAUra,GACJqY,mBAErBpY,EADgBxL,KAAK2lB,QAAQS,gBAAgBzoB,IAAIkM,GACvB0B,IAAgBia,GAC1C/Z,EAAU,IAAI6Z,GAxOjB,QAyOGpd,EAAS,IAAI,GAA0BlI,KAAKqkB,GAAI9Y,EAAa1B,GACnE7J,KAAK2lB,QAAQ0B,qBACbrnB,KAAK6lB,OAAOplB,KAAK,CACboJ,QAAAA,EACA0B,YAAAA,EACAsK,WAAAA,EACArK,UAAAA,EACAC,QAAAA,EACAvD,OAAAA,EACAkf,sBAAsB,OAKtC,WAAWvd,EAAS+I,GAChB,MAAMyV,EAASroB,KAAK2lB,QAKpB,GAJI9b,EAAQye,mBACRtoB,KAAKuoB,+BAA+B1e,EAAS+I,GAG7C5S,KAAK4nB,sBAAsB/d,EAAS+I,GAAS,GAC7C,OAGJ,IAAI4V,GAAoC,EACxC,GAAIH,EAAOI,gBAAiB,CACxB,MAAMC,EAAiBL,EAAOxgB,QAAQ3E,OAASmlB,EAAOM,wBAAwBhrB,IAAIkM,GAAW,GAK7F,GAAI6e,GAAkBA,EAAexlB,OACjCslB,GAAoC,MAEnC,CACD,IAAII,EAAS/e,EACb,KAAO+e,EAASA,EAAOC,YAEnB,GADiBR,EAAOjC,gBAAgBzoB,IAAIirB,GAC9B,CACVJ,GAAoC,EACpC,QAYhB,GAHAxoB,KAAK8oB,+BAA+Bjf,GAGhC2e,EACAH,EAAOJ,qBAAqBjoB,KAAKqkB,GAAIxa,GAAS,EAAO+I,OAEpD,CACD,MAAMmW,EAAclf,EAAoB,aACnCkf,GAAeA,IAAgBhE,KAGhCsD,EAAO/B,WAAW,IAAMtmB,KAAK6nB,kBAAkBhe,IAC/Cwe,EAAOW,uBAAuBnf,GAC9Bwe,EAAOY,mBAAmBpf,EAAS+I,KAI/C,WAAW/I,EAAS+e,GAChB5C,GAASnc,EAAS7J,KAAK+lB,gBAE3B,uBAAuBmD,GACnB,MAAMrP,EAAe,GA4BrB,OA3BA7Z,KAAK6lB,OAAO1lB,QAAQqnB,IAChB,MAAMtf,EAASsf,EAAMtf,OACrB,GAAIA,EAAOihB,UACP,OACJ,MAAMtf,EAAU2d,EAAM3d,QAChBqc,EAAYlmB,KAAK8lB,kBAAkBnoB,IAAIkM,GACzCqc,GACAA,EAAU/lB,QAASioB,IACf,GAAIA,EAAS/qB,MAAQmqB,EAAMjc,YAAa,CACpC,MAAMoZ,EAAYrZ,EAAmBzB,EAAS2d,EAAMjc,YAAaic,EAAMhc,UAAUzN,MAAOypB,EAAM/b,QAAQ1N,OACtG4mB,EAAiB,MAAIuE,EACrBle,EAAewc,EAAMtf,OAAQkgB,EAASnC,MAAOtB,EAAWyD,EAASjd,aAIzEjD,EAAOkhB,iBACPppB,KAAK2lB,QAAQW,WAAW,KAGpBpe,EAAOa,YAIX8Q,EAAapZ,KAAK+mB,KAG1BxnB,KAAK6lB,OAAS,GACPhM,EAAawP,KAAK,CAAC3C,EAAGC,KAGzB,MAAM2C,EAAK5C,EAAE7Q,WAAWsB,IAAI3B,SACtB+T,EAAK5C,EAAE9Q,WAAWsB,IAAI3B,SAC5B,OAAU,GAAN8T,GAAiB,GAANC,EACJD,EAAKC,EAETvpB,KAAK2lB,QAAQhc,OAAOuE,gBAAgBwY,EAAE7c,QAAS8c,EAAE9c,SAAW,GAAK,IAGhF,QAAQ+I,GACJ5S,KAAK6H,QAAQ1H,QAAQvB,GAAKA,EAAEmK,WAC5B/I,KAAKuoB,+BAA+BvoB,KAAK0lB,YAAa9S,GAE1D,oBAAoB/I,GAChB,IAAI2f,GAAe,EAKnB,OAJIxpB,KAAK8lB,kBAAkBxjB,IAAIuH,KAC3B2f,GAAe,GACnBA,IACKxpB,KAAK6lB,OAAO9kB,KAAKymB,GAASA,EAAM3d,UAAYA,IAA4B2f,EACtEA,GAGf,MAAM,GACF,YAAYvF,EAAUta,EAAQua,GAC1BlkB,KAAKikB,SAAWA,EAChBjkB,KAAK2J,OAASA,EACd3J,KAAKkkB,YAAcA,EACnBlkB,KAAK6H,QAAU,GACf7H,KAAKypB,gBAAkB,IAAI9pB,IAC3BK,KAAKinB,iBAAmB,IAAItnB,IAC5BK,KAAK2oB,wBAA0B,IAAIhpB,IACnCK,KAAKomB,gBAAkB,IAAIzmB,IAC3BK,KAAK0pB,cAAgB,IAAIrV,IACzBrU,KAAKyoB,gBAAkB,EACvBzoB,KAAKqnB,mBAAqB,EAC1BrnB,KAAK2pB,iBAAmB,GACxB3pB,KAAK4pB,eAAiB,GACtB5pB,KAAK6pB,UAAY,GACjB7pB,KAAK8pB,cAAgB,GACrB9pB,KAAK+pB,wBAA0B,IAAIpqB,IACnCK,KAAKgqB,uBAAyB,GAC9BhqB,KAAKiqB,uBAAyB,GAE9BjqB,KAAKkqB,kBAAoB,CAACrgB,EAAS+I,OAGvC,mBAAmB/I,EAAS+I,GACxB5S,KAAKkqB,kBAAkBrgB,EAAS+I,GAEpC,oBACI,MAAM/K,EAAU,GAQhB,OAPA7H,KAAK4pB,eAAezpB,QAAQhC,IACxBA,EAAG0J,QAAQ1H,QAAQ+H,IACXA,EAAOgf,QACPrf,EAAQpH,KAAKyH,OAIlBL,EAEX,gBAAgBmd,EAAaU,GACzB,MAAMvnB,EAAK,IAAIsnB,GAA6BT,EAAaU,EAAa1lB,MAgBtE,OAfI0lB,EAAYmD,WACZ7oB,KAAKmqB,sBAAsBhsB,EAAIunB,IAM/B1lB,KAAKypB,gBAAgBrnB,IAAIsjB,EAAavnB,GAMtC6B,KAAKoqB,oBAAoB1E,IAEtB1lB,KAAK2pB,iBAAiB3E,GAAe7mB,EAEhD,sBAAsBA,EAAIunB,GACtB,MAAM9M,EAAQ5Y,KAAK4pB,eAAe1mB,OAAS,EAC3C,GAAI0V,GAAS,EAAG,CACZ,IAAIyR,GAAQ,EACZ,IAAK,IAAIvtB,EAAI8b,EAAO9b,GAAK,EAAGA,IAExB,GAAIkD,KAAK2J,OAAOuE,gBADMlO,KAAK4pB,eAAe9sB,GACI4oB,YAAaA,GAAc,CACrE1lB,KAAK4pB,eAAena,OAAO3S,EAAI,EAAG,EAAGqB,GACrCksB,GAAQ,EACR,MAGHA,GACDrqB,KAAK4pB,eAAena,OAAO,EAAG,EAAGtR,QAIrC6B,KAAK4pB,eAAenpB,KAAKtC,GAG7B,OADA6B,KAAK+pB,wBAAwB3nB,IAAIsjB,EAAavnB,GACvCA,EAEX,SAAS6mB,EAAaU,GAClB,IAAIvnB,EAAK6B,KAAK2pB,iBAAiB3E,GAI/B,OAHK7mB,IACDA,EAAK6B,KAAKsqB,gBAAgBtF,EAAaU,IAEpCvnB,EAEX,gBAAgB6mB,EAAa3nB,EAAMoI,GAC/B,IAAItH,EAAK6B,KAAK2pB,iBAAiB3E,GAC3B7mB,GAAMA,EAAG0mB,SAASxnB,EAAMoI,IACxBzF,KAAKyoB,kBAGb,QAAQzD,EAAapS,GACjB,IAAKoS,EACD,OACJ,MAAM7mB,EAAK6B,KAAKuqB,gBAAgBvF,GAChChlB,KAAKsmB,WAAW,KACZtmB,KAAK+pB,wBAAwBjQ,OAAO3b,EAAGunB,oBAChC1lB,KAAK2pB,iBAAiB3E,GAC7B,MAAMN,EAAQ1kB,KAAK4pB,eAAe1d,QAAQ/N,GACtCumB,GAAS,GACT1kB,KAAK4pB,eAAena,OAAOiV,EAAO,KAG1C1kB,KAAK8nB,yBAAyB,IAAM3pB,EAAG4K,QAAQ6J,IAEnD,gBAAgByR,GACZ,OAAOrkB,KAAK2pB,iBAAiBtF,GAEjC,yBAAyBxa,GAMrB,MAAM6d,EAAa,IAAIrT,IACjBmW,EAAgBxqB,KAAKomB,gBAAgBzoB,IAAIkM,GAC/C,GAAI2gB,EAAe,CACf,MAAMhgB,EAAOhN,OAAOgN,KAAKggB,GACzB,IAAK,IAAI1tB,EAAI,EAAGA,EAAI0N,EAAKtH,OAAQpG,IAAK,CAClC,MAAM2tB,EAAOD,EAAchgB,EAAK1N,IAAIkoB,YACpC,GAAIyF,EAAM,CACN,MAAMtsB,EAAK6B,KAAKuqB,gBAAgBE,GAC5BtsB,GACAupB,EAAWrR,IAAIlY,KAK/B,OAAOupB,EAEX,QAAQ1C,EAAanb,EAASxM,EAAMU,GAChC,GAAI2sB,GAAc7gB,GAAU,CACxB,MAAM1L,EAAK6B,KAAKuqB,gBAAgBvF,GAChC,GAAI7mB,EAEA,OADAA,EAAGsH,QAAQoE,EAASxM,EAAMU,IACnB,EAGf,OAAO,EAEX,WAAWinB,EAAanb,EAAS+e,EAAQ+B,GACrC,IAAKD,GAAc7gB,GACf,OAGJ,MAAM+gB,EAAU/gB,EAAoB,aACpC,GAAI+gB,GAAWA,EAAQ3F,cAAe,CAClC2F,EAAQ3F,eAAgB,EACxB2F,EAAQ1F,YAAa,EACrB,MAAMR,EAAQ1kB,KAAKiqB,uBAAuB/d,QAAQrC,GAC9C6a,GAAS,GACT1kB,KAAKiqB,uBAAuBxa,OAAOiV,EAAO,GAMlD,GAAIM,EAAa,CACb,MAAM7mB,EAAK6B,KAAKuqB,gBAAgBvF,GAO5B7mB,GACAA,EAAG0sB,WAAWhhB,EAAS+e,GAI3B+B,GACA3qB,KAAKoqB,oBAAoBvgB,GAGjC,oBAAoBA,GAChB7J,KAAKgqB,uBAAuBvpB,KAAKoJ,GAErC,sBAAsBA,EAAS9L,GACvBA,EACKiC,KAAK0pB,cAAcpnB,IAAIuH,KACxB7J,KAAK0pB,cAAcrT,IAAIxM,GACvBmc,GAASnc,EA9kBE,wBAilBV7J,KAAK0pB,cAAcpnB,IAAIuH,KAC5B7J,KAAK0pB,cAAc5P,OAAOjQ,GAC1Byd,GAAYzd,EAnlBG,wBAslBvB,WAAWmb,EAAanb,EAASihB,EAAelY,GAC5C,GAAI8X,GAAc7gB,GAAU,CACxB,MAAM1L,EAAK6mB,EAAchlB,KAAKuqB,gBAAgBvF,GAAe,KAO7D,GANI7mB,EACAA,EAAG4sB,WAAWlhB,EAAS+I,GAGvB5S,KAAKioB,qBAAqBjD,EAAanb,GAAS,EAAO+I,GAEvDkY,EAAe,CACf,MAAME,EAAShrB,KAAK+pB,wBAAwBpsB,IAAIkM,GAC5CmhB,GAAUA,EAAO3G,KAAOW,GACxBgG,EAAOD,WAAWlhB,EAAS+I,SAKnC5S,KAAKipB,mBAAmBpf,EAAS+I,GAGzC,qBAAqBoS,EAAanb,EAASsb,EAAcvS,GACrD5S,KAAKiqB,uBAAuBxpB,KAAKoJ,GACjCA,EAAoB,aAChB,CAAEmb,YAAAA,EAAaC,cAAerS,EAASuS,aAAAA,EAAcC,sBAAsB,GAEnF,OAAOJ,EAAanb,EAASxM,EAAM4oB,EAAO9a,GACtC,OAAIuf,GAAc7gB,GACP7J,KAAKuqB,gBAAgBvF,GAAaiG,OAAOphB,EAASxM,EAAM4oB,EAAO9a,GAEnE,OAEX,kBAAkBqc,EAAO0D,EAAc9Q,EAAgBC,EAAgB8Q,GACnE,OAAO3D,EAAM3R,WAAWb,MAAMhV,KAAK2J,OAAQ6d,EAAM3d,QAAS2d,EAAMhc,UAAUzN,MAAOypB,EAAM/b,QAAQ1N,MAAOqc,EAAgBC,EAAgBmN,EAAMhc,UAAUzL,QAASynB,EAAM/b,QAAQ1L,QAASmrB,EAAcC,GAExM,uBAAuBC,GACnB,IAAInsB,EAAWe,KAAK2J,OAAO2U,MAAM8M,EAloFb,eAkoFoD,GACxEnsB,EAASkB,QAAQ0J,GAAW7J,KAAKqrB,kCAAkCxhB,IAC1B,GAArC7J,KAAK2oB,wBAAwBrS,OAEjCrX,EAAWe,KAAK2J,OAAO2U,MAAM8M,EApoFP,iBAooFgD,GACtEnsB,EAASkB,QAAQ0J,GAAW7J,KAAKsrB,sCAAsCzhB,KAE3E,kCAAkCA,GAC9B,MAAMhC,EAAU7H,KAAKinB,iBAAiBtpB,IAAIkM,GACtChC,GACAA,EAAQ1H,QAAQ+H,IAIRA,EAAOgf,OACPhf,EAAOkhB,kBAAmB,EAG1BlhB,EAAOa,YAKvB,sCAAsCc,GAClC,MAAMhC,EAAU7H,KAAK2oB,wBAAwBhrB,IAAIkM,GAC7ChC,GACAA,EAAQ1H,QAAQ+H,GAAUA,EAAOX,UAGzC,oBACI,OAAO,IAAIlF,QAAQP,IACf,GAAI9B,KAAK6H,QAAQ3E,OACb,OAAOuG,EAAoBzJ,KAAK6H,SAASM,OAAO,IAAMrG,KAGtDA,MAIZ,iBAAiB+H,GACb,MAAM+gB,EAAU/gB,EAAoB,aACpC,GAAI+gB,GAAWA,EAAQ3F,cAAe,CAGlC,GADApb,EAAoB,aAAIkb,GACpB6F,EAAQ5F,YAAa,CACrBhlB,KAAKgpB,uBAAuBnf,GAC5B,MAAM1L,EAAK6B,KAAKuqB,gBAAgBK,EAAQ5F,aACpC7mB,GACAA,EAAG0pB,kBAAkBhe,GAG7B7J,KAAKipB,mBAAmBpf,EAAS+gB,EAAQ3F,eAEzCjlB,KAAK2J,OAAOsE,eAAepE,EA7qBb,yBA8qBd7J,KAAKurB,sBAAsB1hB,GAAS,GAExC7J,KAAK2J,OAAO2U,MAAMzU,EAhrBA,wBAgrB4B,GAAM1J,QAAQwS,IACxD3S,KAAKurB,sBAAsB5Y,GAAM,KAGzC,MAAMuW,GAAc,GAChB,IAAIrhB,EAAU,GAKd,GAJI7H,KAAKypB,gBAAgBnT,OACrBtW,KAAKypB,gBAAgBtpB,QAAQ,CAAChC,EAAI0L,IAAY7J,KAAKmqB,sBAAsBhsB,EAAI0L,IAC7E7J,KAAKypB,gBAAgB/lB,SAErB1D,KAAKyoB,iBAAmBzoB,KAAKgqB,uBAAuB9mB,OACpD,IAAK,IAAIpG,EAAI,EAAGA,EAAIkD,KAAKgqB,uBAAuB9mB,OAAQpG,IAEpDkpB,GADYhmB,KAAKgqB,uBAAuBltB,GA3rBjC,oBA+rBf,GAAIkD,KAAK4pB,eAAe1mB,SACnBlD,KAAKqnB,oBAAsBrnB,KAAKiqB,uBAAuB/mB,QAAS,CACjE,MAAMsoB,EAAa,GACnB,IACI3jB,EAAU7H,KAAKyrB,iBAAiBD,EAAYtC,WAG5C,IAAK,IAAIpsB,EAAI,EAAGA,EAAI0uB,EAAWtoB,OAAQpG,IACnC0uB,EAAW1uB,WAKnB,IAAK,IAAIA,EAAI,EAAGA,EAAIkD,KAAKiqB,uBAAuB/mB,OAAQpG,IAEpDkD,KAAKkoB,iBADWloB,KAAKiqB,uBAAuBntB,IASpD,GALAkD,KAAKqnB,mBAAqB,EAC1BrnB,KAAKgqB,uBAAuB9mB,OAAS,EACrClD,KAAKiqB,uBAAuB/mB,OAAS,EACrClD,KAAK6pB,UAAU1pB,QAAQ+G,GAAMA,KAC7BlH,KAAK6pB,UAAY,GACb7pB,KAAK8pB,cAAc5mB,OAAQ,CAI3B,MAAMwoB,EAAW1rB,KAAK8pB,cACtB9pB,KAAK8pB,cAAgB,GACjBjiB,EAAQ3E,OACRuG,EAAoB5B,GAASM,OAAO,KAChCujB,EAASvrB,QAAQ+G,GAAMA,OAI3BwkB,EAASvrB,QAAQ+G,GAAMA,MAInC,YAAY+C,GACR,MAAM,IAAI7I,MAAM,kFAAkF6I,EAAOc,KAAK,OAElH,iBAAiBygB,EAAYtC,GACzB,MAAMgC,EAAe,IAAIvR,GACnBgS,EAAiB,GACjBC,EAAoB,IAAIjsB,IACxBksB,EAAqB,GACrBlK,EAAkB,IAAIhiB,IACtBmsB,EAAsB,IAAInsB,IAC1BosB,EAAuB,IAAIpsB,IAC3BqsB,EAAsB,IAAI3X,IAChCrU,KAAK0pB,cAAcvpB,QAAQwS,IACvBqZ,EAAoB3V,IAAI1D,GACxB,MAAMsZ,EAAuBjsB,KAAK2J,OAAO2U,MAAM3L,EAvvBnC,sBAuvB0D,GACtE,IAAK,IAAI7V,EAAI,EAAGA,EAAImvB,EAAqB/oB,OAAQpG,IAC7CkvB,EAAoB3V,IAAI4V,EAAqBnvB,MAGrD,MAAMmnB,EAAWjkB,KAAKikB,SAChBiI,EAAqBrb,MAAMsb,KAAKnsB,KAAKomB,gBAAgB5b,QACrD4hB,EAAeC,GAAaH,EAAoBlsB,KAAKgqB,wBAIrDsC,EAAkB,IAAI3sB,IAC5B,IAAI7C,EAAI,EACRsvB,EAAajsB,QAAQ,CAACosB,EAAOC,KACzB,MAAMC,EAlxFM,WAkxFwB3vB,IACpCwvB,EAAgBlqB,IAAIoqB,EAAMC,GAC1BF,EAAMpsB,QAAQwS,GAAQqT,GAASrT,EAAM8Z,MAEzC,MAAMC,EAAgB,GAChBC,EAAmB,IAAItY,IACvBuY,EAA8B,IAAIvY,IACxC,IAAK,IAAIvX,EAAI,EAAGA,EAAIkD,KAAKiqB,uBAAuB/mB,OAAQpG,IAAK,CACzD,MAAM+M,EAAU7J,KAAKiqB,uBAAuBntB,GACtC8tB,EAAU/gB,EAAoB,aAChC+gB,GAAWA,EAAQ3F,gBACnByH,EAAcjsB,KAAKoJ,GACnB8iB,EAAiBtW,IAAIxM,GACjB+gB,EAAQzF,aACRnlB,KAAK2J,OAAO2U,MAAMzU,EA/wBhB,qBA+wBwC,GAAM1J,QAAQqN,GAAOmf,EAAiBtW,IAAI7I,IAGpFof,EAA4BvW,IAAIxM,IAI5C,MAAMgjB,EAAkB,IAAIltB,IACtBmtB,EAAeT,GAAaH,EAAoBrb,MAAMsb,KAAKQ,IACjEG,EAAa3sB,QAAQ,CAACosB,EAAOC,KACzB,MAAMC,EAzyFM,WAyyFwB3vB,IACpC+vB,EAAgBzqB,IAAIoqB,EAAMC,GAC1BF,EAAMpsB,QAAQwS,GAAQqT,GAASrT,EAAM8Z,MAEzCjB,EAAW/qB,KAAK,KACZ2rB,EAAajsB,QAAQ,CAACosB,EAAOC,KACzB,MAAMC,EAAYH,EAAgB3uB,IAAI6uB,GACtCD,EAAMpsB,QAAQwS,GAAQ2U,GAAY3U,EAAM8Z,MAE5CK,EAAa3sB,QAAQ,CAACosB,EAAOC,KACzB,MAAMC,EAAYI,EAAgBlvB,IAAI6uB,GACtCD,EAAMpsB,QAAQwS,GAAQ2U,GAAY3U,EAAM8Z,MAE5CC,EAAcvsB,QAAQ0J,IAClB7J,KAAKkoB,iBAAiBre,OAG9B,MAAMkjB,EAAa,GACbC,EAAuB,GAC7B,IAAK,IAAIlwB,EAAIkD,KAAK4pB,eAAe1mB,OAAS,EAAGpG,GAAK,EAAGA,IACtCkD,KAAK4pB,eAAe9sB,GAC5BmwB,uBAAuB/D,GAAa/oB,QAAQqnB,IAC3C,MAAMtf,EAASsf,EAAMtf,OACf2B,EAAU2d,EAAM3d,QAEtB,GADAkjB,EAAWtsB,KAAKyH,GACZlI,KAAKgqB,uBAAuB9mB,OAAQ,CACpC,MAAM0nB,EAAU/gB,EAAoB,aAEpC,GAAI+gB,GAAWA,EAAQ1F,WAEnB,YADAhd,EAAOa,UAIf,MAAMmkB,GAAkBjJ,IAAajkB,KAAK2J,OAAOuE,gBAAgB+V,EAAUpa,GACrEwQ,EAAiBwS,EAAgBlvB,IAAIkM,GACrCuQ,EAAiBkS,EAAgB3uB,IAAIkM,GACrC4R,EAAczb,KAAKmtB,kBAAkB3F,EAAO0D,EAAc9Q,EAAgBC,EAAgB6S,GAChG,GAAIzR,EAAYxR,QAAUwR,EAAYxR,OAAO/G,OACzC8pB,EAAqBvsB,KAAKgb,OAD9B,CAQA,GAAIyR,EAIA,OAHAhlB,EAAOI,QAAQ,IAAMqI,GAAY9G,EAAS4R,EAAYgG,aACtDvZ,EAAOE,UAAU,IAAMmI,GAAU1G,EAAS4R,EAAYiG,gBACtDiK,EAAelrB,KAAKyH,GAKxB,GAAIsf,EAAMJ,qBAIN,OAHAlf,EAAOI,QAAQ,IAAMqI,GAAY9G,EAAS4R,EAAYgG,aACtDvZ,EAAOE,UAAU,IAAMmI,GAAU1G,EAAS4R,EAAYiG,gBACtDiK,EAAelrB,KAAKyH,GAQxBuT,EAAYZ,UAAU1a,QAAQ6a,GAAMA,EAAGqD,yBAA0B,GACjE6M,EAAakC,OAAOvjB,EAAS4R,EAAYZ,WAEzCgR,EAAmBprB,KADL,CAAEgb,YAAAA,EAAavT,OAAAA,EAAQ2B,QAAAA,IAErC4R,EAAYkG,gBAAgBxhB,QAAQ0J,GAAW+B,EAAgB+V,EAAiB9X,EAAS,IAAIpJ,KAAKyH,IAClGuT,EAAYjC,cAAcrZ,QAAQ,CAACktB,EAAWxjB,KAC1C,MAAM2V,EAAQhiB,OAAOgN,KAAK6iB,GAC1B,GAAI7N,EAAMtc,OAAQ,CACd,IAAIoqB,EAASxB,EAAoBnuB,IAAIkM,GAChCyjB,GACDxB,EAAoB1pB,IAAIyH,EAASyjB,EAAS,IAAIjZ,KAElDmL,EAAMrf,QAAQsK,GAAQ6iB,EAAOjX,IAAI5L,OAGzCgR,EAAYhC,eAAetZ,QAAQ,CAACktB,EAAWxjB,KAC3C,MAAM2V,EAAQhiB,OAAOgN,KAAK6iB,GAC1B,IAAIC,EAASvB,EAAqBpuB,IAAIkM,GACjCyjB,GACDvB,EAAqB3pB,IAAIyH,EAASyjB,EAAS,IAAIjZ,KAEnDmL,EAAMrf,QAAQsK,GAAQ6iB,EAAOjX,IAAI5L,SAI7C,GAAIuiB,EAAqB9pB,OAAQ,CAC7B,MAAM+G,EAAS,GACf+iB,EAAqB7sB,QAAQsb,IACzBxR,EAAOxJ,KAAK,IAAIgb,EAAYlQ,oCAC5BkQ,EAAYxR,OAAO9J,QAAQ4D,GAASkG,EAAOxJ,KAAK,KAAKsD,UAEzDgpB,EAAW5sB,QAAQ+H,GAAUA,EAAOa,WACpC/I,KAAK+mB,YAAY9c,GAErB,MAAMsjB,EAAwB,IAAI5tB,IAK5B6tB,EAAsB,IAAI7tB,IAChCksB,EAAmB1rB,QAAQqnB,IACvB,MAAM3d,EAAU2d,EAAM3d,QAClBqhB,EAAa5oB,IAAIuH,KACjB2jB,EAAoBprB,IAAIyH,EAASA,GACjC7J,KAAKytB,sBAAsBjG,EAAMtf,OAAO8c,YAAawC,EAAM/L,YAAa8R,MAGhF5B,EAAexrB,QAAQ+H,IACnB,MAAM2B,EAAU3B,EAAO2B,QACC7J,KAAK0tB,oBAAoB7jB,GAAS,EAAO3B,EAAO8c,YAAa9c,EAAOqD,YAAa,MACzFpL,QAAQwtB,IACpB/hB,EAAgB2hB,EAAuB1jB,EAAS,IAAIpJ,KAAKktB,GACzDA,EAAW5kB,cAUnB,MAAM6kB,EAAelB,EAAcxrB,OAAOyR,GAC/Bkb,GAAuBlb,EAAMmZ,EAAqBC,IAGvD+B,EAAgB,IAAInuB,IACGouB,GAAsBD,EAAe9tB,KAAK2J,OAAQijB,EAA6Bb,ED5mGjG,KC6mGU5rB,QAAQwS,IACrBkb,GAAuBlb,EAAMmZ,EAAqBC,IAClD6B,EAAantB,KAAKkS,KAI1B,MAAMqb,EAAe,IAAIruB,IACzBysB,EAAajsB,QAAQ,CAACosB,EAAOC,KACzBuB,GAAsBC,EAAchuB,KAAK2J,OAAQ,IAAI0K,IAAIkY,GAAQT,ED/iE1D,OCijEX8B,EAAaztB,QAAQwS,IACjB,MAAMsb,EAAOH,EAAcnwB,IAAIgV,GACzBub,EAAMF,EAAarwB,IAAIgV,GAC7Bmb,EAAc1rB,IAAIuQ,EAAMnV,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI8K,GAAOC,MAEnE,MAAMC,EAAc,GACdC,EAAa,GACbC,EAAuC,GAC7CxC,EAAmB1rB,QAAQqnB,IACvB,MAAM,QAAE3d,EAAO,OAAE3B,EAAM,YAAEuT,GAAgB+L,EAGzC,GAAI0D,EAAa5oB,IAAIuH,GAAU,CAC3B,GAAImiB,EAAoB1pB,IAAIuH,GAKxB,OAJA3B,EAAOE,UAAU,IAAMmI,GAAU1G,EAAS4R,EAAYiG,WACtDxZ,EAAOwD,UAAW,EAClBxD,EAAOomB,kBAAkB7S,EAAYxU,gBACrC0kB,EAAelrB,KAAKyH,GASxB,IAAIqmB,EAAsBF,EAC1B,GAAIb,EAAoBlX,KAAO,EAAG,CAC9B,IAAI9I,EAAM3D,EACV,MAAM2kB,EAAe,GACrB,KAAOhhB,EAAMA,EAAIqb,YAAY,CACzB,MAAM4F,EAAiBjB,EAAoB7vB,IAAI6P,GAC/C,GAAIihB,EAAgB,CAChBF,EAAsBE,EACtB,MAEJD,EAAa/tB,KAAK+M,GAEtBghB,EAAaruB,QAAQyoB,GAAU4E,EAAoBprB,IAAIwmB,EAAQ2F,IAEnE,MAAMG,EAAc1uB,KAAK2uB,gBAAgBzmB,EAAO8c,YAAavJ,EAAa8R,EAAuB3B,EAAmBoC,EAAcF,GAElI,GADA5lB,EAAO0mB,cAAcF,GACjBH,IAAwBF,EACxBF,EAAY1tB,KAAKyH,OAEhB,CACD,MAAM2mB,EAAgB7uB,KAAKinB,iBAAiBtpB,IAAI4wB,GAC5CM,GAAiBA,EAAc3rB,SAC/BgF,EAAOlB,aAAeyC,EAAoBolB,IAE9ClD,EAAelrB,KAAKyH,SAIxByI,GAAY9G,EAAS4R,EAAYgG,YACjCvZ,EAAOE,UAAU,IAAMmI,GAAU1G,EAAS4R,EAAYiG,WAItD0M,EAAW3tB,KAAKyH,GACZ8jB,EAAoB1pB,IAAIuH,IACxB8hB,EAAelrB,KAAKyH,KAKhCkmB,EAAWjuB,QAAQ+H,IAGf,MAAM4mB,EAAoBlD,EAAkBjuB,IAAIuK,EAAO2B,SACvD,GAAIilB,GAAqBA,EAAkB5rB,OAAQ,CAC/C,MAAMwrB,EAAcjlB,EAAoBqlB,GACxC5mB,EAAO0mB,cAAcF,MAM7B/C,EAAexrB,QAAQ+H,IACfA,EAAOlB,aACPkB,EAAO6mB,iBAAiB7mB,EAAOlB,cAG/BkB,EAAOa,YAMf,IAAK,IAAIjM,EAAI,EAAGA,EAAI4vB,EAAcxpB,OAAQpG,IAAK,CAC3C,MAAM+M,EAAU6iB,EAAc5vB,GACxB8tB,EAAU/gB,EAAoB,aAKpC,GAJAyd,GAAYzd,EAnhGA,YAuhGR+gB,GAAWA,EAAQzF,aACnB,SACJ,IAAItd,EAAU,GAId,GAAI8Z,EAAgBrL,KAAM,CACtB,IAAI0Y,EAAuBrN,EAAgBhkB,IAAIkM,GAC3CmlB,GAAwBA,EAAqB9rB,QAC7C2E,EAAQpH,QAAQuuB,GAEpB,IAAIC,EAAuBjvB,KAAK2J,OAAO2U,MAAMzU,EA5hG/B,iBA4hG+D,GAC7E,IAAK,IAAIqlB,EAAI,EAAGA,EAAID,EAAqB/rB,OAAQgsB,IAAK,CAClD,IAAIC,EAAiBxN,EAAgBhkB,IAAIsxB,EAAqBC,IAC1DC,GAAkBA,EAAejsB,QACjC2E,EAAQpH,QAAQ0uB,IAI5B,MAAMC,EAAgBvnB,EAAQ3G,OAAOtC,IAAMA,EAAEuqB,WACzCiG,EAAclsB,OACdmsB,GAA8BrvB,KAAM6J,EAASulB,GAG7CpvB,KAAKkoB,iBAAiBre,GAc9B,OAVA6iB,EAAcxpB,OAAS,EACvBirB,EAAYhuB,QAAQ+H,IAChBlI,KAAK6H,QAAQpH,KAAKyH,GAClBA,EAAOC,OAAO,KACVD,EAAOa,UACP,MAAM2b,EAAQ1kB,KAAK6H,QAAQqE,QAAQhE,GACnClI,KAAK6H,QAAQ4H,OAAOiV,EAAO,KAE/Bxc,EAAOU,SAEJulB,EAEX,oBAAoBnJ,EAAanb,GAC7B,IAAI2f,GAAe,EACnB,MAAMoB,EAAU/gB,EAAoB,aASpC,OARI+gB,GAAWA,EAAQ3F,gBACnBuE,GAAe,GACfxpB,KAAKinB,iBAAiB3kB,IAAIuH,KAC1B2f,GAAe,GACfxpB,KAAK2oB,wBAAwBrmB,IAAIuH,KACjC2f,GAAe,GACfxpB,KAAKomB,gBAAgB9jB,IAAIuH,KACzB2f,GAAe,GACZxpB,KAAKuqB,gBAAgBvF,GAAasK,oBAAoBzlB,IAAY2f,EAE7E,WAAWre,GACPnL,KAAK6pB,UAAUppB,KAAK0K,GAExB,yBAAyBA,GACrBnL,KAAK8pB,cAAcrpB,KAAK0K,GAE5B,oBAAoBtB,EAAS0lB,EAAkBvK,EAAazZ,EAAaikB,GACrE,IAAI3nB,EAAU,GACd,GAAI0nB,EAAkB,CAClB,MAAME,EAAwBzvB,KAAK2oB,wBAAwBhrB,IAAIkM,GAC3D4lB,IACA5nB,EAAU4nB,OAGb,CACD,MAAMhI,EAAiBznB,KAAKinB,iBAAiBtpB,IAAIkM,GACjD,GAAI4d,EAAgB,CAChB,MAAMiI,GAAsBF,GA3hCzB,QA2hCyCA,EAC5C/H,EAAetnB,QAAQ+H,IACfA,EAAOgf,SAENwI,GAAsBxnB,EAAOqD,aAAeA,IAEjD1D,EAAQpH,KAAKyH,MAazB,OATI8c,GAAezZ,KACf1D,EAAUA,EAAQ3G,OAAOgH,KACjB8c,GAAeA,GAAe9c,EAAO8c,aAErCzZ,GAAeA,GAAerD,EAAOqD,eAK1C1D,EAEX,sBAAsBmd,EAAavJ,EAAa8R,GAC5C,MACMpT,EAAcsB,EAAY5R,QAG1B8lB,EAAoBlU,EAAY+F,yBAAsB9gB,EAAYskB,EAClE4K,EAAoBnU,EAAY+F,yBAAsB9gB,EALxC+a,EAAYlQ,YAMhC,IAAK,MAAMskB,KAAuBpU,EAAYZ,UAAW,CACrD,MAAMhR,EAAUgmB,EAAoBhmB,QAC9B0lB,EAAmB1lB,IAAYsQ,EAC/BtS,EAAU+D,EAAgB2hB,EAAuB1jB,EAAS,IACxC7J,KAAK0tB,oBAAoB7jB,EAAS0lB,EAAkBI,EAAmBC,EAAmBnU,EAAYhQ,SAC9GtL,QAAQ+H,IACpB,MAAM4nB,EAAa5nB,EAAO6nB,gBACtBD,EAAWzmB,eACXymB,EAAWzmB,gBAEfnB,EAAOa,UACPlB,EAAQpH,KAAKyH,KAKrByI,GAAYwJ,EAAasB,EAAYgG,YAEzC,gBAAgBuD,EAAavJ,EAAa8R,EAAuB3B,EAAmBoC,EAAcF,GAC9F,MAAMviB,EAAckQ,EAAYlQ,YAC1B4O,EAAcsB,EAAY5R,QAG1BmmB,EAAoB,GACpBC,EAAsB,IAAI5b,IAC1B6b,EAAiB,IAAI7b,IACrB8b,EAAgB1U,EAAYZ,UAAUhP,IAAIgkB,IAC5C,MAAMhmB,EAAUgmB,EAAoBhmB,QACpComB,EAAoB5Z,IAAIxM,GAExB,MAAM+gB,EAAU/gB,EAAoB,aACpC,GAAI+gB,GAAWA,EAAQxF,qBACnB,OAAO,IAAI7e,EAAoBspB,EAAoBrpB,SAAUqpB,EAAoBppB,OACrF,MAAM8oB,EAAmB1lB,IAAYsQ,EAC/B1L,EA+SlB,SAA6B5G,GACzB,MAAMuoB,EAAe,GAErB,OAEJ,SAASC,EAA0BxoB,EAASuoB,GACxC,IAAK,IAAItzB,EAAI,EAAGA,EAAI+K,EAAQ3E,OAAQpG,IAAK,CACrC,MAAMoL,EAASL,EAAQ/K,GACnBoL,aAAkB,EAClBmoB,EAA0BnoB,EAAOL,QAASuoB,GAG1CA,EAAa3vB,KAAKyH,IAP9B,CAH8BL,EAASuoB,GAC5BA,EAHX,EA/SyD7C,EAAsB5vB,IAAIkM,IAAYib,IAC9EjZ,IAAIjN,GAAKA,EAAEmxB,kBACX7uB,OAAOtC,KAKGA,EACDiL,SADCjL,EACYiL,UAAYA,GAEjCE,EAAYikB,EAAarwB,IAAIkM,GAC7BG,EAAa8jB,EAAcnwB,IAAIkM,GAC/BC,EAAYJ,EAAmB1J,EAAaA,KAAKkkB,YAAara,EAASgmB,EAAoB/lB,UAAWC,EAAWC,GACjH9B,EAASlI,KAAKwkB,aAAaqL,EAAqB/lB,EAAW2E,GAMjE,GAHIohB,EAAoBnW,aAAekS,GACnCsE,EAAe7Z,IAAIxM,GAEnB0lB,EAAkB,CAClB,MAAMe,EAAgB,IAAI,GAA0BtL,EAAazZ,EAAa1B,GAC9EymB,EAAc1B,cAAc1mB,GAC5B8nB,EAAkBvvB,KAAK6vB,GAE3B,OAAOpoB,IAEX8nB,EAAkB7vB,QAAQ+H,IACtB0D,EAAgB5L,KAAK2oB,wBAAyBzgB,EAAO2B,QAAS,IAAIpJ,KAAKyH,GACvEA,EAAOC,OAAO,IA8H1B,SAA4B0D,EAAKxN,EAAKN,GAClC,IAAIwyB,EACJ,GAAI1kB,aAAelM,IAAAA,CAEf,GADA4wB,EAAgB1kB,EAAIlO,IAAIU,GACpBkyB,EAAe,CACf,GAAIA,EAAcrtB,OAAQ,CACtB,MAAMwhB,EAAQ6L,EAAcrkB,QAAQnO,GACpCwyB,EAAc9gB,OAAOiV,EAAO,GAEJ,GAAxB6L,EAAcrtB,QACd2I,EAAIiO,OAAOzb,SAMnB,GADAkyB,EAAgB1kB,EAAIxN,GAChBkyB,EAAe,CACf,GAAIA,EAAcrtB,OAAQ,CACtB,MAAMwhB,EAAQ6L,EAAcrkB,QAAQnO,GACpCwyB,EAAc9gB,OAAOiV,EAAO,GAEJ,GAAxB6L,EAAcrtB,eACP2I,EAAIxN,GAIvB,OAAOkyB,EA1BX,CA9HmDvwB,KAAK2oB,wBAAyBzgB,EAAO2B,QAAS3B,MAEzF+nB,EAAoB9vB,QAAQ0J,GAAWmc,GAASnc,EAprGzB,iBAqrGvB,MAAM3B,EAASuB,EAAoB0mB,GAUnC,OATAjoB,EAAOE,UAAU,KACb6nB,EAAoB9vB,QAAQ0J,GAAWyd,GAAYzd,EAvrGhC,iBAwrGnB0G,GAAU4J,EAAasB,EAAYiG,YAIvCwO,EAAe/vB,QAAQ0J,IACnB+B,EAAgBggB,EAAmB/hB,EAAS,IAAIpJ,KAAKyH,KAElDA,EAEX,aAAauT,EAAa3R,EAAW2E,GACjC,OAAI3E,EAAU5G,OAAS,EACZlD,KAAK2J,OAAOhE,QAAQ8V,EAAY5R,QAASC,EAAW2R,EAAYjV,SAAUiV,EAAYhV,MAAOgV,EAAYjN,OAAQC,GAIrH,IAAIlI,EAAoBkV,EAAYjV,SAAUiV,EAAYhV,QAGzE,MAAM,GACF,YAAYue,EAAazZ,EAAa1B,GAClC7J,KAAKglB,YAAcA,EACnBhlB,KAAKuL,YAAcA,EACnBvL,KAAK6J,QAAUA,EACf7J,KAAKwwB,QAAU,IAAIjqB,EACnBvG,KAAKywB,qBAAsB,EAC3BzwB,KAAK0wB,iBAAmB,GACxB1wB,KAAKmpB,WAAY,EACjBnpB,KAAKopB,kBAAmB,EACxBppB,KAAK0L,UAAW,EAChB1L,KAAKknB,QAAS,EACdlnB,KAAKiH,UAAY,EAErB,cAAciB,GACNlI,KAAKywB,sBAETzwB,KAAKwwB,QAAUtoB,EACf1K,OAAOgN,KAAKxK,KAAK0wB,kBAAkBvwB,QAAQ8lB,IACvCjmB,KAAK0wB,iBAAiBzK,GAAO9lB,QAAQgL,GAAYH,EAAe9C,EAAQ+d,OAAOvlB,EAAWyK,MAE9FnL,KAAK0wB,iBAAmB,GACxB1wB,KAAKywB,qBAAsB,EAC3BzwB,KAAKsuB,kBAAkBpmB,EAAOjB,WAC9BjH,KAAKknB,QAAS,GAElB,gBACI,OAAOlnB,KAAKwwB,QAEhB,kBAAkBvpB,GACdjH,KAAKiH,UAAYA,EAErB,iBAAiBiB,GACb,MAAMtJ,EAAIoB,KAAKwwB,QACX5xB,EAAE+xB,iBACFzoB,EAAOI,QAAQ,IAAM1J,EAAE+xB,gBAAgB,UAE3CzoB,EAAOC,OAAO,IAAMnI,KAAKuH,UACzBW,EAAOE,UAAU,IAAMpI,KAAK+I,WAEhC,YAAY1L,EAAM8N,GACdS,EAAgB5L,KAAK0wB,iBAAkBrzB,EAAM,IAAIoD,KAAK0K,GAE1D,OAAOjE,GACClH,KAAKknB,QACLlnB,KAAK4wB,YAAY,OAAQ1pB,GAE7BlH,KAAKwwB,QAAQroB,OAAOjB,GAExB,QAAQA,GACAlH,KAAKknB,QACLlnB,KAAK4wB,YAAY,QAAS1pB,GAE9BlH,KAAKwwB,QAAQloB,QAAQpB,GAEzB,UAAUA,GACFlH,KAAKknB,QACLlnB,KAAK4wB,YAAY,UAAW1pB,GAEhClH,KAAKwwB,QAAQpoB,UAAUlB,GAE3B,OACIlH,KAAKwwB,QAAQ7nB,OAEjB,aACI,OAAO3I,KAAKknB,QAAiBlnB,KAAKwwB,QAAQrpB,aAE9C,QACKnH,KAAKknB,QAAUlnB,KAAKwwB,QAAQ5nB,OAEjC,SACK5I,KAAKknB,QAAUlnB,KAAKwwB,QAAQ3nB,QAEjC,WACK7I,KAAKknB,QAAUlnB,KAAKwwB,QAAQ1nB,UAEjC,SACI9I,KAAKwwB,QAAQjpB,SAEjB,UACIvH,KAAKmpB,WAAY,EACjBnpB,KAAKwwB,QAAQznB,UAEjB,SACK/I,KAAKknB,QAAUlnB,KAAKwwB,QAAQxnB,QAEjC,YAAYpK,GACHoB,KAAKknB,QACNlnB,KAAKwwB,QAAQrnB,YAAYvK,GAGjC,cACI,OAAOoB,KAAKknB,OAAS,EAAIlnB,KAAKwwB,QAAQpnB,cAG1C,gBAAgB3B,GACZ,MAAM7I,EAAIoB,KAAKwwB,QACX5xB,EAAE+xB,iBACF/xB,EAAE+xB,gBAAgBlpB,IAsC9B,SAASijB,GAAc/X,GACnB,OAAOA,GAA6B,IAArBA,EAAe,SAKlC,SAASke,GAAahnB,EAAS9L,GAC3B,MAAM+yB,EAAWjnB,EAAQgE,MAAMkjB,QAE/B,OADAlnB,EAAQgE,MAAMkjB,QAAmB,MAAThzB,EAAgBA,EAAQ,OACzC+yB,EAEX,SAAS/C,GAAsBiD,EAAWrnB,EAAQ1K,EAAUgyB,EAAiBC,GACzE,MAAMC,EAAY,GAClBlyB,EAASkB,QAAQ0J,GAAWsnB,EAAU1wB,KAAKowB,GAAahnB,KACxD,MAAMunB,EAAiB,GACvBH,EAAgB9wB,QAAQ,CAACqf,EAAO3V,KAC5B,MAAMhE,EAAS,GACf2Z,EAAMrf,QAAQsK,IACV,MAAM1M,EAAQ8H,EAAO4E,GAAQd,EAAO6I,aAAa3I,EAASY,EAAMymB,GAG3DnzB,GAAyB,GAAhBA,EAAMmF,SAChB2G,EAAoB,aAAIwb,GACxB+L,EAAe3wB,KAAKoJ,MAG5BmnB,EAAU5uB,IAAIyH,EAAShE,KAI3B,IAAI/I,EAAI,EAER,OADAmC,EAASkB,QAAQ0J,GAAWgnB,GAAahnB,EAASsnB,EAAUr0B,OACrDs0B,EAYX,SAAS/E,GAAagF,EAAO9E,GACzB,MAAM+E,EAAU,IAAI3xB,IAEpB,GADA0xB,EAAMlxB,QAAQqsB,GAAQ8E,EAAQlvB,IAAIoqB,EAAM,KACpB,GAAhBD,EAAMrpB,OACN,OAAOouB,EACX,MACMC,EAAU,IAAIld,IAAIkY,GAClBiF,EAAe,IAAI7xB,IA0BzB,OANA4sB,EAAMpsB,QAAQwS,IACV,MAAM6Z,EApBV,SAASiF,EAAQ9e,GACb,IAAKA,EACD,OALU,EAMd,IAAI6Z,EAAOgF,EAAa7zB,IAAIgV,GAC5B,GAAI6Z,EACA,OAAOA,EACX,MAAM5D,EAASjW,EAAKkW,WAWpB,OATI2D,EADA8E,EAAQhvB,IAAIsmB,GACLA,EAEF2I,EAAQjvB,IAAIsmB,GAbP,EAiBH6I,EAAQ7I,GAEnB4I,EAAapvB,IAAIuQ,EAAM6Z,GAChBA,EAjBX,CAoByB7Z,GAvBP,IAwBV6Z,GACA8E,EAAQ3zB,IAAI6uB,GAAM/rB,KAAKkS,KAGxB2e,EAYX,SAAStL,GAASnc,EAAS4iB,GACvB,GAAI5iB,EAAQ6nB,UACR7nB,EAAQ6nB,UAAUrb,IAAIoW,OAErB,CACD,IAAIkF,EAAU9nB,EAAyB,UAClC8nB,IACDA,EAAU9nB,EAAyB,UAAI,IAE3C8nB,EAAQlF,IAAa,GAG7B,SAASnF,GAAYzd,EAAS4iB,GAC1B,GAAI5iB,EAAQ6nB,UACR7nB,EAAQ6nB,UAAUE,OAAOnF,OAExB,CACD,IAAIkF,EAAU9nB,EAAyB,UACnC8nB,UACOA,EAAQlF,IAI3B,SAAS4C,GAA8BhH,EAAQxe,EAAShC,GACpD4B,EAAoB5B,GAASM,OAAO,IAAMkgB,EAAOH,iBAAiBre,IA8BtE,SAASgkB,GAAuBhkB,EAASiiB,EAAqBC,GAC1D,MAAM8F,EAAY9F,EAAqBpuB,IAAIkM,GAC3C,IAAKgoB,EACD,OAAO,EACX,IAAIC,EAAWhG,EAAoBnuB,IAAIkM,GAQvC,OAPIioB,EACAD,EAAU1xB,QAAQwL,GAAQmmB,EAASzb,IAAI1K,IAGvCmgB,EAAoB1pB,IAAIyH,EAASgoB,GAErC9F,EAAqBjS,OAAOjQ,IACrB,EAGX,MAAMkoB,GACF,YAAY9N,EAAUhP,EAASrL,GAC3B5J,KAAKikB,SAAWA,EAChBjkB,KAAKiV,QAAUA,EACfjV,KAAKgyB,cAAgB,GAErBhyB,KAAKkqB,kBAAoB,CAACrgB,EAAS+I,OACnC5S,KAAKiyB,kBAAoB,IAAI,GAA0BhO,EAAUhP,EAASrL,GAC1E5J,KAAKkyB,gBAAkB,IAAI,GAAwBjO,EAAUhP,EAASrL,GACtE5J,KAAKiyB,kBAAkB/H,kBAAoB,CAACrgB,EAAS+I,IAAY5S,KAAKkqB,kBAAkBrgB,EAAS+I,GAErG,gBAAgBuf,EAAanN,EAAaU,EAAaroB,EAAM0X,GACzD,MAAMqd,EAAWD,EAAc,IAAM90B,EACrC,IAAIoI,EAAUzF,KAAKgyB,cAAcI,GACjC,IAAK3sB,EAAS,CACV,MAAMwE,EAAS,GACTkN,EAAMrC,GAAkB9U,KAAKiV,QAASF,EAAU9K,GACtD,GAAIA,EAAO/G,OACP,MAAM,IAAI9B,MAAM,0BAA0B/D,2DAA8D4M,EAAOc,KAAK,YAExHtF,EA/rDZ,SAAsBpI,EAAM8Z,GACxB,OAAO,IAAIsM,GAAiBpmB,EAAM8Z,GADtC,CA+rDmC9Z,EAAM8Z,GAC7BnX,KAAKgyB,cAAcI,GAAY3sB,EAEnCzF,KAAKiyB,kBAAkBI,gBAAgBrN,EAAa3nB,EAAMoI,GAE9D,SAASuf,EAAaU,GAClB1lB,KAAKiyB,kBAAkBpN,SAASG,EAAaU,GAEjD,QAAQV,EAAapS,GACjB5S,KAAKiyB,kBAAkBlpB,QAAQic,EAAapS,GAEhD,SAASoS,EAAanb,EAAS+e,EAAQ+B,GACnC3qB,KAAKiyB,kBAAkBpH,WAAW7F,EAAanb,EAAS+e,EAAQ+B,GAEpE,SAAS3F,EAAanb,EAAS+I,EAASkY,GACpC9qB,KAAKiyB,kBAAkBlH,WAAW/F,EAAanb,EAASihB,IAAiB,EAAOlY,GAEpF,kBAAkB/I,EAASyoB,GACvBtyB,KAAKiyB,kBAAkB1G,sBAAsB1hB,EAASyoB,GAE1D,QAAQtN,EAAanb,EAASpL,EAAUV,GACpC,GAA0B,KAAtBU,EAASsP,OAAO,GAAW,CAC3B,MAAOsW,EAAIkO,GAAUxmB,EAAqBtN,GAE1CuB,KAAKkyB,gBAAgBlmB,QAAQqY,EAAIxa,EAAS0oB,EAD7Bx0B,QAIbiC,KAAKiyB,kBAAkBxsB,QAAQuf,EAAanb,EAASpL,EAAUV,GAGvE,OAAOinB,EAAanb,EAASoB,EAAWunB,EAAYrnB,GAEhD,GAA2B,KAAvBF,EAAU8C,OAAO,GAAW,CAC5B,MAAOsW,EAAIkO,GAAUxmB,EAAqBd,GAC1C,OAAOjL,KAAKkyB,gBAAgBjH,OAAO5G,EAAIxa,EAAS0oB,EAAQpnB,GAE5D,OAAOnL,KAAKiyB,kBAAkBhH,OAAOjG,EAAanb,EAASoB,EAAWunB,EAAYrnB,GAEtF,MAAM+d,GAAc,GAChBlpB,KAAKiyB,kBAAkBQ,MAAMvJ,GAEjC,cACI,OAAOlpB,KAAKiyB,kBAAkBpqB,QACzB6qB,OAAO1yB,KAAKkyB,gBAAgBrqB,SAErC,oBACI,OAAO7H,KAAKiyB,kBAAkBU,qBAsBtC,SAASC,GAA2B/oB,EAAShE,GACzC,IAAIgtB,EAAc,KACdC,EAAY,KAUhB,OATIjiB,MAAMC,QAAQjL,IAAWA,EAAO3C,QAChC2vB,EAAcE,GAA0BltB,EAAO,IAC3CA,EAAO3C,OAAS,IAChB4vB,EAAYC,GAA0BltB,EAAOA,EAAO3C,OAAS,MAG5D2C,IACLgtB,EAAcE,GAA0BltB,IAEpCgtB,GAAeC,EAAa,IAAIE,GAAmBnpB,EAASgpB,EAAaC,GAC7E,wBAUFE,EACF,YAAYC,EAAUC,EAAcC,GAChCnzB,KAAKizB,SAAWA,EAChBjzB,KAAKkzB,aAAeA,EACpBlzB,KAAKmzB,WAAaA,EAClBnzB,KAAKozB,OAAS,EACd,IAAIC,EAAgBL,EAAmBM,uBAAuB31B,IAAIs1B,GAC7DI,GACDL,EAAmBM,uBAAuBlxB,IAAI6wB,EAAUI,EAAgB,IAE5ErzB,KAAKuzB,eAAiBF,EAE1B,QACQrzB,KAAKozB,OAAS,IACVpzB,KAAKkzB,cACL3iB,GAAUvQ,KAAKizB,SAAUjzB,KAAKkzB,aAAclzB,KAAKuzB,gBAErDvzB,KAAKozB,OAAS,GAGtB,SACIpzB,KAAKwzB,QACDxzB,KAAKozB,OAAS,IACd7iB,GAAUvQ,KAAKizB,SAAUjzB,KAAKuzB,gBAC1BvzB,KAAKmzB,aACL5iB,GAAUvQ,KAAKizB,SAAUjzB,KAAKmzB,YAC9BnzB,KAAKmzB,WAAa,MAEtBnzB,KAAKozB,OAAS,GAGtB,UACIpzB,KAAKuH,SACDvH,KAAKozB,OAAS,IACdJ,EAAmBM,uBAAuBxZ,OAAO9Z,KAAKizB,UAClDjzB,KAAKkzB,eACLviB,GAAY3Q,KAAKizB,SAAUjzB,KAAKkzB,cAChClzB,KAAKmzB,WAAa,MAElBnzB,KAAKmzB,aACLxiB,GAAY3Q,KAAKizB,SAAUjzB,KAAKmzB,YAChCnzB,KAAKmzB,WAAa,MAEtB5iB,GAAUvQ,KAAKizB,SAAUjzB,KAAKuzB,gBAC9BvzB,KAAKozB,OAAS,WAI1BJ,EAAmBM,uBAAyB,IAAIG,cAChD,SAASV,GAA0BltB,GAC/B,IAAIiI,EAAS,KACb,MAAM0R,EAAQhiB,OAAOgN,KAAK3E,GAC1B,IAAK,IAAI/I,EAAI,EAAGA,EAAI0iB,EAAMtc,OAAQpG,IAAK,CACnC,MAAM2N,EAAO+U,EAAM1iB,GACf42B,GAAqBjpB,KACrBqD,EAASA,GAAU,GACnBA,EAAOrD,GAAQ5E,EAAO4E,IAG9B,OAAOqD,EAEX,SAAS4lB,GAAqBjpB,GAC1B,MAAgB,YAATA,GAA+B,aAATA,EAcjC,MAAMkpB,GACF,YAAYV,EAAUW,EAAOC,EAAWC,EAAQC,EAASC,EAAWC,GAChEj0B,KAAKizB,SAAWA,EAChBjzB,KAAK4zB,MAAQA,EACb5zB,KAAK6zB,UAAYA,EACjB7zB,KAAK8zB,OAASA,EACd9zB,KAAK+zB,QAAUA,EACf/zB,KAAKg0B,UAAYA,EACjBh0B,KAAKi0B,UAAYA,EACjBj0B,KAAK+G,WAAY,EACjB/G,KAAK8G,YAAa,EAClB9G,KAAKk0B,WAAa,EAClBl0B,KAAKm0B,UAAY,EACjBn0B,KAAKo0B,SAAY/oB,GAAMrL,KAAKq0B,gBAAgBhpB,GAEhD,SA8CJ,SAAgCxB,EAAS9L,GACrC,MAAMu2B,EAAOC,GAAkB1qB,EAAS,IAAIuX,OAExCkT,EAAKpxB,SAoDb,SAAoBnF,EAAOy2B,GACvB,IAAIC,EAAQ,EACZ,IAAK,IAAI33B,EAAI,EAAGA,EAAIiB,EAAMmF,OAAQpG,IArDL,MAsDfiB,EAAMgQ,OAAOjR,IAEnB23B,IALZ,CAnD2BH,GACnBv2B,EAAQ,GAAGu2B,MAASv2B,KAExB22B,GAAkB7qB,EAAS,GAAI9L,GAPnC,CA7C+BiC,KAAKizB,SAAU,GAAGjzB,KAAK6zB,eAAe7zB,KAAK+zB,WAAW/zB,KAAK8zB,qBAAqB9zB,KAAKg0B,aAAah0B,KAAK4zB,SAC9He,GAAwB30B,KAAKizB,SAAUjzB,KAAKo0B,UAAU,GACtDp0B,KAAKk0B,WAAaU,KAAKC,MAE3B,QACIC,GAAmB90B,KAAKizB,SAAUjzB,KAAK4zB,MAAO,UAElD,SACIkB,GAAmB90B,KAAKizB,SAAUjzB,KAAK4zB,MAAO,WAElD,YAAYpsB,GACR,MAAMkd,EAAQqQ,GAAsB/0B,KAAKizB,SAAUjzB,KAAK4zB,OACxD5zB,KAAKm0B,UAAY3sB,EAAWxH,KAAK6zB,UACjCa,GAAkB10B,KAAKizB,SAAU,QAAS,IAAIjzB,KAAKm0B,cAAezP,GAEtE,cACI,OAAO1kB,KAAKm0B,UAEhB,gBAAgBjpB,GACZ,MAAM8pB,EAAY9pB,EAAM+pB,wBAA0BL,KAAKC,MACjDK,EArCO,IAqCOlmB,WAAW9D,EAAMgqB,YAAYC,QAxCjB,IAyC5BjqB,EAAMkqB,eAAiBp1B,KAAK4zB,OAC5BnrB,KAAKC,IAAIssB,EAAYh1B,KAAKk0B,WAAY,IAAMl0B,KAAK8zB,QAAUoB,GAAel1B,KAAK6zB,WAC/E7zB,KAAKuH,SAGb,SACQvH,KAAK+G,YAET/G,KAAK+G,WAAY,EACjB/G,KAAKi0B,YACLU,GAAwB30B,KAAKizB,SAAUjzB,KAAKo0B,UAAU,IAE1D,UACQp0B,KAAK8G,aAET9G,KAAK8G,YAAa,EAClB9G,KAAKuH,SAkBb,SAAiCsC,EAASxM,GACtC,MACM2I,EADOuuB,GAAkB1qB,EAAS,IACpBkK,MAAM,KACpB2Q,EAAQ2Q,GAAuBrvB,EAAQ3I,GACzCqnB,GAAS,IACT1e,EAAOyJ,OAAOiV,EAAO,GAErBgQ,GAAkB7qB,EAAS,GADV7D,EAAO+E,KAAK,OANrC,CAjBgC/K,KAAKizB,SAAUjzB,KAAK4zB,SAGpD,SAASkB,GAAmBjrB,EAASxM,EAAMi4B,GAEvCZ,GAAkB7qB,EAAS,YAAayrB,EAD1BP,GAAsBlrB,EAASxM,IAuBjD,SAAS03B,GAAsBlrB,EAAS9L,GACpC,MAAMu2B,EAAOC,GAAkB1qB,EAAS,IACxC,OAAIyqB,EAAKpoB,QAAQ,KAAO,EAEbmpB,GADQf,EAAKvgB,MAAM,KACYhW,GAEnCs3B,GAAuB,CAACf,GAAOv2B,GAE1C,SAASs3B,GAAuBrvB,EAAQuvB,GACpC,IAAK,IAAIz4B,EAAI,EAAGA,EAAIkJ,EAAO9C,OAAQpG,IAC/B,GAAIkJ,EAAOlJ,GAAGoP,QAAQqpB,IAAgB,EAClC,OAAOz4B,EAGf,OAAQ,EAEZ,SAAS63B,GAAwB9qB,EAAS3C,EAAIsuB,GAC1CA,EAAW3rB,EAAQ4rB,oBApGI,eAoGoCvuB,GACvD2C,EAAQ6rB,iBArGW,eAqG0BxuB,GAErD,SAASwtB,GAAkB7qB,EAASxM,EAAMU,EAAO2mB,GAC7C,MAAMja,EAzGa,YAyGWpN,EAC9B,GAAa,MAATqnB,EAAe,CACf,MAAMoM,EAAWjnB,EAAQgE,MAAMpD,GAC/B,GAAIqmB,EAAS5tB,OAAQ,CACjB,MAAM8C,EAAS8qB,EAAS/c,MAAM,KAC9B/N,EAAO0e,GAAS3mB,EAChBA,EAAQiI,EAAO+E,KAAK,MAG5BlB,EAAQgE,MAAMpD,GAAQ1M,EAE1B,SAASw2B,GAAkB1qB,EAASxM,GAChC,OAAOwM,EAAQgE,MArHI,YAqHmBxQ,GAc1C,MAAMs4B,GACF,YAAY9rB,EAASC,EAAWsrB,EAAevB,EAAWC,EAAQtlB,EAAQonB,EAAcC,GACpF71B,KAAK6J,QAAUA,EACf7J,KAAK8J,UAAYA,EACjB9J,KAAKo1B,cAAgBA,EACrBp1B,KAAK6zB,UAAYA,EACjB7zB,KAAK8zB,OAASA,EACd9zB,KAAK41B,aAAeA,EACpB51B,KAAK61B,eAAiBA,EACtB71B,KAAK0G,WAAa,GAClB1G,KAAK2G,YAAc,GACnB3G,KAAK4G,cAAgB,GACrB5G,KAAK6G,UAAW,EAChB7G,KAAK81B,gBAAkB,GACvB91B,KAAKozB,OAAS,EACdpzB,KAAKwO,OAASA,GAhBC,SAiBfxO,KAAKiH,UAAY4sB,EAAYC,EAC7B9zB,KAAK+1B,eAET,QAAQ7uB,GACJlH,KAAK2G,YAAYlG,KAAKyG,GAE1B,OAAOA,GACHlH,KAAK0G,WAAWjG,KAAKyG,GAEzB,UAAUA,GACNlH,KAAK4G,cAAcnG,KAAKyG,GAE5B,UACIlH,KAAK2I,OACD3I,KAAKozB,QAAU,IAEnBpzB,KAAKozB,OAAS,EACdpzB,KAAKg2B,QAAQjtB,UACb/I,KAAKi2B,iBACLj2B,KAAKk2B,gBACDl2B,KAAK61B,gBACL71B,KAAK61B,eAAe9sB,UAExB/I,KAAK4G,cAAczG,QAAQ+G,GAAMA,KACjClH,KAAK4G,cAAgB,IAEzB,gBACI5G,KAAK0G,WAAWvG,QAAQ+G,GAAMA,KAC9BlH,KAAK0G,WAAa,GAEtB,iBACI1G,KAAK2G,YAAYxG,QAAQ+G,GAAMA,KAC/BlH,KAAK2G,YAAc,GAEvB,SACI3G,KAAK2I,OACD3I,KAAKozB,QAAU,IAEnBpzB,KAAKozB,OAAS,EACdpzB,KAAKg2B,QAAQzuB,SACbvH,KAAKi2B,iBACDj2B,KAAK61B,gBACL71B,KAAK61B,eAAetuB,SAExBvH,KAAKk2B,iBAET,YAAYn4B,GACRiC,KAAKg2B,QAAQ7sB,YAAYpL,GAE7B,cACI,OAAOiC,KAAKg2B,QAAQ5sB,cAExB,aACI,OAAOpJ,KAAKozB,QAAU,EAE1B,OACQpzB,KAAKozB,QAAU,IAEnBpzB,KAAKozB,OAAS,EAEdpzB,KAAKg2B,QAAQ3oB,QACTrN,KAAK8zB,QACL9zB,KAAKg2B,QAAQntB,SAGrB,OACI7I,KAAK2I,OACA3I,KAAKmH,eACNnH,KAAKi2B,iBACLj2B,KAAKozB,OAAS,EACVpzB,KAAK61B,gBACL71B,KAAK61B,eAAerC,SAG5BxzB,KAAKg2B,QAAQG,SAEjB,QACIn2B,KAAK2I,OACL3I,KAAKg2B,QAAQntB,QAEjB,UACI7I,KAAKgJ,QACLhJ,KAAK4I,OAET,QACI5I,KAAKg2B,QAAQjtB,UACb/I,KAAK+1B,eACL/1B,KAAKg2B,QAAQ3oB,QAEjB,eACIrN,KAAKg2B,QAAU,IAAIrC,GAA6B3zB,KAAK6J,QAAS7J,KAAKo1B,cAAep1B,KAAK6zB,UAAW7zB,KAAK8zB,OAAQ9zB,KAAKwO,OA5GlG,WA4G6H,IAAMxO,KAAKuH,UAG9J,gBAAgBE,GACZ,MAAMC,EAAuB,SAAbD,EAAuBzH,KAAK2G,YAAc3G,KAAK0G,WAC/DgB,EAAQvH,QAAQ+G,GAAMA,KACtBQ,EAAQxE,OAAS,EAErB,gBACIlD,KAAK2I,OACL,MAAM9C,EAAS,GACf,GAAI7F,KAAKmH,aAAc,CACnB,MAAMivB,EAAWp2B,KAAKozB,QAAU,EAChC51B,OAAOgN,KAAKxK,KAAK41B,cAAcz1B,QAAQsK,IACvB,UAARA,IACA5E,EAAO4E,GAAQ2rB,EAAWp2B,KAAK41B,aAAanrB,GAAQ+H,GAAaxS,KAAK6J,QAASY,MAI3FzK,KAAK81B,gBAAkBjwB,GAW/B,MAAM,WAA0BU,EAC5B,YAAYsD,EAAShE,GACjBua,QACApgB,KAAK6J,QAAUA,EACf7J,KAAKq2B,gBAAkB,GACvBr2B,KAAKs2B,eAAgB,EACrBt2B,KAAKu2B,QAAUnoB,EAAoBvI,GAEvC,QACQ7F,KAAKs2B,eAAkBt2B,KAAKq2B,kBAEhCr2B,KAAKs2B,eAAgB,EACrB94B,OAAOgN,KAAKxK,KAAKu2B,SAASp2B,QAAQsK,IAC9BzK,KAAKq2B,gBAAgB5rB,GAAQzK,KAAK6J,QAAQgE,MAAMpD,KAEpD2V,MAAMzX,QAEV,OACS3I,KAAKq2B,kBAEVr2B,KAAK2I,OACLnL,OAAOgN,KAAKxK,KAAKu2B,SACZp2B,QAAQsK,GAAQzK,KAAK6J,QAAQgE,MAAM2oB,YAAY/rB,EAAMzK,KAAKu2B,QAAQ9rB,KACvE2V,MAAMxX,QAEV,UACS5I,KAAKq2B,kBAEV74B,OAAOgN,KAAKxK,KAAKq2B,iBAAiBl2B,QAAQsK,IACtC,MAAM1M,EAAQiC,KAAKq2B,gBAAgB5rB,GAC/B1M,EACAiC,KAAK6J,QAAQgE,MAAM2oB,YAAY/rB,EAAM1M,GAGrCiC,KAAK6J,QAAQgE,MAAM4oB,eAAehsB,KAG1CzK,KAAKq2B,gBAAkB,KACvBjW,MAAMrX,YAMd,MAAM2tB,GACF,cACI12B,KAAK22B,OAAS,EACd32B,KAAK42B,MAAQn1B,SAASgM,cAAc,QACpCzN,KAAK62B,gBAAiB,EAE1B,sBAAsBpsB,GAClB,OAAOmD,EAAsBnD,GAEjC,eAAeZ,EAAS4C,GACpB,OAAOwB,EAAepE,EAAS4C,GAEnC,gBAAgBH,EAAMC,GAClB,OAAO2B,EAAgB5B,EAAMC,GAEjC,MAAM1C,EAAS4C,EAAUxH,GACrB,OAAOkJ,EAAYtE,EAAS4C,EAAUxH,GAE1C,aAAa4E,EAASY,EAAMqB,GACxB,OAAO4H,OAAOC,iBAAiB9J,GAASY,GAE5C,qBAAqBZ,EAASxM,EAAMyM,GAChCA,EAAYA,EAAU+B,IAAIxB,GAAM+D,EAAoB/D,IACpD,IAAIysB,EAAc,cAAcz5B,QAC5B05B,EAAM,GACVjtB,EAAU3J,QAAQkK,IACd0sB,EA3BM,IA4BN,MAAM9wB,EAAS+I,WAAW3E,EAAW,QACrCysB,GAAe,GAAGC,IAAe,IAAT9wB,SACxB8wB,GA9BM,IA+BNv5B,OAAOgN,KAAKH,GAAIlK,QAAQsK,IACpB,MAAM1M,EAAQsM,EAAGI,GACjB,OAAQA,GACJ,IAAK,SACD,OACJ,IAAK,SAID,YAHI1M,IACA+4B,GAAe,GAAGC,+BAAiCh5B,SAG3D,QAEI,YADA+4B,GAAe,GAAGC,IAAMtsB,MAAS1M,WAI7C+4B,GAAkBC,EAAH,QAEnBD,GAAe,MACf,MAAME,EAAQv1B,SAASC,cAAc,SAErC,OADAs1B,EAAMC,UAAYH,EACXE,EAEX,QAAQntB,EAASC,EAAWtD,EAAUC,EAAO+H,EAAQC,EAAkB,GAAIC,GACnEA,GACA1O,KAAKk3B,wBAET,MAAMC,EAA6B1oB,EAAgBvN,OAAOgH,GAAUA,aAAkBytB,IAChFvjB,EAAiB,GACnBF,GAA+B1L,EAAUC,IACzC0wB,EAA2Bh3B,QAAQ+H,IAC/B,IAAIrC,EAASqC,EAAO4tB,gBACpBt4B,OAAOgN,KAAK3E,GAAQ1F,QAAQsK,GAAQ2H,EAAe3H,GAAQ5E,EAAO4E,MAI1E,MAAM8P,EAuBd,SAAoCzQ,GAChC,IAAIstB,EAAgB,GAWpB,OAVIttB,IACY+G,MAAMC,QAAQhH,GAAaA,EAAY,CAACA,IAChD3J,QAAQkK,IACR7M,OAAOgN,KAAKH,GAAIlK,QAAQsK,IACR,UAARA,GAA4B,UAARA,IAExB2sB,EAAc3sB,GAAQJ,EAAGI,QAI9B2sB,EAZX,CAxBQttB,EAAYqI,GAAmCtI,EAASC,EAAWsI,IAMnE,GAAgB,GAAZ5L,EACA,OAAO,IAAI,GAAkBqD,EAAS0Q,GAE1C,MAAM6a,EAAgB,cAA2Bp1B,KAAK22B,SAChDK,EAAQh3B,KAAKq3B,qBAAqBxtB,EAASurB,EAAetrB,GAChErI,SAASgM,cAAc,QAAQvL,YAAY80B,GAC3C,MAAMM,EAAgB1E,GAA2B/oB,EAASC,GACpD5B,EAAS,IAAIytB,GAAmB9rB,EAASC,EAAWsrB,EAAe5uB,EAAUC,EAAO+H,EAAQ+L,EAAa+c,GAE/G,OADApvB,EAAOE,UAAU,KAwBzB,IAAuBuK,GAAAA,EAxBsBqkB,GAyBpCnO,WAAW0O,YAAY5kB,KAxBjBzK,EAEX,wBACSlI,KAAK62B,iBACNt2B,QAAQC,KAAK,oGAAqG,yFAClHR,KAAK62B,gBAAiB,IAsBlC,MAAMW,GACF,YAAY3tB,EAASC,EAAW/J,EAAS81B,GACrC71B,KAAK6J,QAAUA,EACf7J,KAAK8J,UAAYA,EACjB9J,KAAKD,QAAUA,EACfC,KAAK61B,eAAiBA,EACtB71B,KAAK0G,WAAa,GAClB1G,KAAK2G,YAAc,GACnB3G,KAAK4G,cAAgB,GACrB5G,KAAKy3B,cAAe,EACpBz3B,KAAK+G,WAAY,EACjB/G,KAAK6G,UAAW,EAChB7G,KAAK8G,YAAa,EAClB9G,KAAKwI,KAAO,EACZxI,KAAKgH,aAAe,KACpBhH,KAAK81B,gBAAkB,GACvB91B,KAAK6zB,UAAY9zB,EAAkB,SACnCC,KAAK8zB,OAAS/zB,EAAe,OAAK,EAClCC,KAAKwI,KAAOxI,KAAK6zB,UAAY7zB,KAAK8zB,OAEtC,YACS9zB,KAAK+G,YACN/G,KAAK+G,WAAY,EACjB/G,KAAK0G,WAAWvG,QAAQ+G,GAAMA,KAC9BlH,KAAK0G,WAAa,IAG1B,OACI1G,KAAKwkB,eACLxkB,KAAK03B,4BAET,eACI,GAAI13B,KAAKy3B,aACL,OACJz3B,KAAKy3B,cAAe,EACpB,MAAM3tB,EAAY9J,KAAK8J,UACvB9J,KAAK23B,UACD33B,KAAK43B,qBAAqB53B,KAAK6J,QAASC,EAAW9J,KAAKD,SAC5DC,KAAK63B,eAAiB/tB,EAAU5G,OAAS4G,EAAUA,EAAU5G,OAAS,GAAK,GAC3ElD,KAAK23B,UAAUjC,iBAAiB,SAAU,IAAM11B,KAAKsH,aAEzD,4BAEQtH,KAAK8zB,OACL9zB,KAAK83B,uBAGL93B,KAAK23B,UAAU9uB,QAIvB,qBAAqBgB,EAASC,EAAW/J,GAGrC,OAAO8J,EAAiB,QAAEC,EAAW/J,GAEzC,QAAQmH,GACJlH,KAAK2G,YAAYlG,KAAKyG,GAE1B,OAAOA,GACHlH,KAAK0G,WAAWjG,KAAKyG,GAEzB,UAAUA,GACNlH,KAAK4G,cAAcnG,KAAKyG,GAE5B,OACIlH,KAAKwkB,eACAxkB,KAAKmH,eACNnH,KAAK2G,YAAYxG,QAAQ+G,GAAMA,KAC/BlH,KAAK2G,YAAc,GACnB3G,KAAK6G,UAAW,EACZ7G,KAAK61B,gBACL71B,KAAK61B,eAAerC,SAG5BxzB,KAAK23B,UAAU/uB,OAEnB,QACI5I,KAAK2I,OACL3I,KAAK23B,UAAU9uB,QAEnB,SACI7I,KAAK2I,OACD3I,KAAK61B,gBACL71B,KAAK61B,eAAetuB,SAExBvH,KAAKsH,YACLtH,KAAK23B,UAAUpwB,SAEnB,QACIvH,KAAK83B,uBACL93B,KAAK8G,YAAa,EAClB9G,KAAK+G,WAAY,EACjB/G,KAAK6G,UAAW,EAEpB,uBACQ7G,KAAK23B,WACL33B,KAAK23B,UAAUI,SAGvB,UACI/3B,KAAKgJ,QACLhJ,KAAK4I,OAET,aACI,OAAO5I,KAAK6G,SAEhB,UACS7G,KAAK8G,aACN9G,KAAK8G,YAAa,EAClB9G,KAAK83B,uBACL93B,KAAKsH,YACDtH,KAAK61B,gBACL71B,KAAK61B,eAAe9sB,UAExB/I,KAAK4G,cAAczG,QAAQ+G,GAAMA,KACjClH,KAAK4G,cAAgB,IAG7B,YAAYhI,GACRoB,KAAK23B,UAAUriB,YAAc1W,EAAIoB,KAAKwI,KAE1C,cACI,OAAOxI,KAAK23B,UAAUriB,YAActV,KAAKwI,KAE7C,gBACI,OAAOxI,KAAK8zB,OAAS9zB,KAAK6zB,UAE9B,gBACI,MAAMhuB,EAAS,GACX7F,KAAKmH,cACL3J,OAAOgN,KAAKxK,KAAK63B,gBAAgB13B,QAAQsK,IACzB,UAARA,IACA5E,EAAO4E,GACHzK,KAAK+G,UAAY/G,KAAK63B,eAAeptB,GAAQ+H,GAAaxS,KAAK6J,QAASY,MAIxFzK,KAAK81B,gBAAkBjwB,EAG3B,gBAAgB4B,GACZ,MAAMC,EAAuB,SAAbD,EAAuBzH,KAAK2G,YAAc3G,KAAK0G,WAC/DgB,EAAQvH,QAAQ+G,GAAMA,KACtBQ,EAAQxE,OAAS,GAIzB,MAAM80B,GACF,cACIh4B,KAAKi4B,cAAgB,8BAA8BC,KAAKC,KAAsB3uB,YAC9ExJ,KAAKo4B,oBAAsB,IAAI1B,GAEnC,sBAAsBjsB,GAClB,OAAOmD,EAAsBnD,GAEjC,eAAeZ,EAAS4C,GACpB,OAAOwB,EAAepE,EAAS4C,GAEnC,gBAAgBH,EAAMC,GAClB,OAAO2B,EAAgB5B,EAAMC,GAEjC,MAAM1C,EAAS4C,EAAUxH,GACrB,OAAOkJ,EAAYtE,EAAS4C,EAAUxH,GAE1C,aAAa4E,EAASY,EAAMqB,GACxB,OAAO4H,OAAOC,iBAAiB9J,GAASY,GAE5C,6BAA6B4tB,GACzBr4B,KAAKi4B,cAAgBI,EAEzB,QAAQxuB,EAASC,EAAWtD,EAAUC,EAAO+H,EAAQC,EAAkB,GAAIC,GAEvE,IADsBA,IAA4B1O,KAAKi4B,cAEnD,OAAOj4B,KAAKo4B,oBAAoBzyB,QAAQkE,EAASC,EAAWtD,EAAUC,EAAO+H,EAAQC,GAEzF,MACM6pB,EAAgB,CAAE9xB,SAAAA,EAAUC,MAAAA,EAAO8xB,KADnB,GAAT9xB,EAAa,OAAS,YAI/B+H,IACA8pB,EAAsB,OAAI9pB,GAE9B,MAAM4D,EAAiB,GACjBomB,EAA8B/pB,EAAgBvN,OAAOgH,GAAUA,aAAkBsvB,IACnFtlB,GAA+B1L,EAAUC,IACzC+xB,EAA4Br4B,QAAQ+H,IAChC,IAAIrC,EAASqC,EAAO4tB,gBACpBt4B,OAAOgN,KAAK3E,GAAQ1F,QAAQsK,GAAQ2H,EAAe3H,GAAQ5E,EAAO4E,MAK1E,MAAM6sB,EAAgB1E,GAA2B/oB,EADjDC,EAAYqI,GAAmCtI,EAD/CC,EAAYA,EAAU+B,IAAIhG,GAAUgK,EAAWhK,GAAQ,IACYuM,IAEnE,OAAO,IAAIolB,GAAoB3tB,EAASC,EAAWwuB,EAAehB,IAM1E,SAASa,KACL,MA/gJ0B,oBAAXzkB,aAAqD,IAApBA,OAAOjS,UA+gJhCmL,QAAQlO,UAAmB,SAAM,sBC5gJtD+5B,UAAgCjzB,EAClC,YAAYkzB,EAAcC,GACtBvY,QACApgB,KAAK44B,iBAAmB,EAExB54B,KAAK64B,UAAYH,EAAaI,eAAeH,EAAI12B,KADhC,CAAEoiB,GAAI,IAAK0U,cAAe,EAAA,kBAAkBC,KAAMnzB,OAAQ,GAAI8F,KAAM,CAAEvF,UAAW,MAGtG,MAAMA,GACF,MAAMie,EAAKrkB,KAAK44B,iBAAiBpvB,WACjCxJ,KAAK44B,mBACL,MAAMpR,EAAQ3W,MAAMC,QAAQ1K,GAAaN,EAASM,GAAaA,EAE/D,OADA6yB,GAAsBj5B,KAAK64B,UAAW,KAAMxU,EAAI,WAAY,CAACmD,IACtD,IAAI,GAAwBnD,EAAIrkB,KAAK64B,mBAGpDJ,EAAwBj2B,UAAO,SAAyCxE,GAAK,OAAO,IAAKA,GAAKy6B,GAAyB,EAAA,sBAAgB,EAAA,kBAA0B,EAAA,sBAAgB,EAAA,YACjLA,EAAwBh2B,WAAQ,EAAA,gCAA0B,CAAEC,MAAO+1B,EAAyB/4B,QAAS+4B,EAAwBj2B,kBAW7H,MAAM,WFWN,QEVI,YAAY02B,EAAKL,GACbzY,QACApgB,KAAKk5B,IAAMA,EACXl5B,KAAK64B,UAAYA,EAErB,OAAOhvB,EAAS9J,GACZ,OAAO,IAAIo5B,GAAwBn5B,KAAKk5B,IAAKrvB,EAAS9J,GAAW,GAAIC,KAAK64B,YAGlF,MAAMM,GACF,YAAY9U,EAAIxa,EAAS9J,EAAS84B,GAC9B74B,KAAKqkB,GAAKA,EACVrkB,KAAK6J,QAAUA,EACf7J,KAAK64B,UAAYA,EACjB74B,KAAKgH,aAAe,KACpBhH,KAAK6G,UAAW,EAChB7G,KAAKiH,UAAY,EACjBjH,KAAKo5B,SAAS,SAAUr5B,GAE5B,QAAQkL,EAAWE,GACf,OAAOnL,KAAK64B,UAAU5N,OAAOjrB,KAAK6J,QAAS,KAAK7J,KAAKqkB,MAAMpZ,IAAaE,GAE5E,SAASa,KAAY4Y,GACjB,OAAOqU,GAAsBj5B,KAAK64B,UAAW74B,KAAK6J,QAAS7J,KAAKqkB,GAAIrY,EAAS4Y,GAEjF,OAAO1d,GACHlH,KAAKq5B,QAAQ,OAAQnyB,GAEzB,QAAQA,GACJlH,KAAKq5B,QAAQ,QAASnyB,GAE1B,UAAUA,GACNlH,KAAKq5B,QAAQ,UAAWnyB,GAE5B,OACIlH,KAAKo5B,SAAS,QAElB,aACI,OAAOp5B,KAAK6G,SAEhB,OACI7G,KAAKo5B,SAAS,QACdp5B,KAAK6G,UAAW,EAEpB,QACI7G,KAAKo5B,SAAS,SAElB,UACIp5B,KAAKo5B,SAAS,WAElB,SACIp5B,KAAKo5B,SAAS,UAElB,UACIp5B,KAAKo5B,SAAS,WAElB,QACIp5B,KAAKo5B,SAAS,SAElB,YAAYx6B,GACRoB,KAAKo5B,SAAS,cAAex6B,GAEjC,cACI,OAAO,GAGf,SAASq6B,GAAsBr2B,EAAUiH,EAASwa,EAAIrY,EAAS4Y,GAC3D,OAAOhiB,EAAS4zB,YAAY3sB,EAAS,KAAKwa,KAAMrY,IAAW4Y,sBAKzD0U,EACF,YAAYC,EAAUlR,EAAQmR,GAC1Bx5B,KAAKu5B,SAAWA,EAChBv5B,KAAKqoB,OAASA,EACdroB,KAAKw5B,MAAQA,EACbx5B,KAAKy5B,WAAa,EAClBz5B,KAAK05B,aAAe,EACpB15B,KAAK25B,0BAA4B,GACjC35B,KAAK45B,eAAiB,IAAIj6B,IAC1BK,KAAK65B,cAAgB,EACrB75B,KAAK85B,QAAUz3B,QAAQP,QAAQ,GAC/BumB,EAAO6B,kBAAoB,CAACrgB,EAAS0vB,KAK7BA,GAAYA,EAAS1Q,WAAWhf,IAChC0vB,EAAShC,YAAY1tB,EAAQgf,WAAYhf,IAIrD,eAAe6b,EAAa/jB,GACxB,MAGM43B,EAAWv5B,KAAKu5B,SAAST,eAAepT,EAAa/jB,GAC3D,KAAK+jB,GAAgB/jB,GAASA,EAAKgK,MAAShK,EAAKgK,KAAgB,WAAG,CAChE,IAAI/I,EAAW5C,KAAK45B,eAAej8B,IAAI47B,GAMvC,OALK32B,IACDA,EAAW,IAAIm3B,GAPI,GAOsCR,EAAUv5B,KAAKqoB,QAExEroB,KAAK45B,eAAex3B,IAAIm3B,EAAU32B,IAE/BA,EAEX,MAAMuvB,EAAcxwB,EAAK0iB,GACnBW,EAAcrjB,EAAK0iB,GAAK,IAAMrkB,KAAKy5B,WACzCz5B,KAAKy5B,aACLz5B,KAAKqoB,OAAOxD,SAASG,EAAaU,GAClC,MAAM2M,EAAmB5sB,IACjBoL,MAAMC,QAAQrL,GACdA,EAAQtF,QAAQkyB,GAGhBryB,KAAKqoB,OAAOgK,gBAAgBF,EAAanN,EAAaU,EAAajgB,EAAQpI,KAAMoI,IAKzF,OAF0B9D,EAAKgK,KAAgB,UAC7BxL,QAAQkyB,GACnB,IAAI2H,GAAkBh6B,KAAMglB,EAAauU,EAAUv5B,KAAKqoB,QAEnE,QACIroB,KAAK65B,gBACD75B,KAAKu5B,SAASU,OACdj6B,KAAKu5B,SAASU,QAGtB,qBAEIj6B,KAAK85B,QAAQr2B,KAAK,KACdzD,KAAK05B,iBAIb,yBAAyBjF,EAAOvtB,EAAIyE,GAC5B8oB,GAAS,GAAKA,EAAQz0B,KAAK05B,aAC3B15B,KAAKw5B,MAAMU,IAAI,IAAMhzB,EAAGyE,KAGiB,GAAzC3L,KAAK25B,0BAA0Bz2B,QAC/Bb,QAAQP,QAAQ,MAAM2B,KAAK,KACvBzD,KAAKw5B,MAAMU,IAAI,KACXl6B,KAAK25B,0BAA0Bx5B,QAAQgY,IACnC,MAAOjR,EAAIyE,GAAQwM,EACnBjR,EAAGyE,KAEP3L,KAAK25B,0BAA4B,OAI7C35B,KAAK25B,0BAA0Bl5B,KAAK,CAACyG,EAAIyE,KAE7C,MACI3L,KAAK65B,gBAGqB,GAAtB75B,KAAK65B,eACL75B,KAAKw5B,MAAMW,kBAAkB,KACzBn6B,KAAKo6B,qBACLp6B,KAAKqoB,OAAOoK,MAAMzyB,KAAK05B,gBAG3B15B,KAAKu5B,SAASc,KACdr6B,KAAKu5B,SAASc,MAGtB,oBACI,OAAOr6B,KAAKqoB,OAAOsK,4BAG3B2G,EAAyB92B,UAAO,SAA0CxE,GAAK,OAAO,IAAKA,GAAKs7B,GAA0B,EAAA,sBAAgB,EAAA,kBAA0B,EAAA,sBAAgB,IAA0B,EAAA,sBAAgB,EAAA,UAC9NA,EAAyB72B,WAAQ,EAAA,gCAA0B,CAAEC,MAAO42B,EAA0B55B,QAAS45B,EAAyB92B,kBAShI,MAAMu3B,GACF,YAAY/U,EAAauU,EAAUlR,GAC/BroB,KAAKglB,YAAcA,EACnBhlB,KAAKu5B,SAAWA,EAChBv5B,KAAKqoB,OAASA,EACdroB,KAAKs6B,YAAct6B,KAAKu5B,SAASe,YAAe/7B,GAAMg7B,EAASe,YAAY/7B,GAAK,KAEpF,WACI,OAAOyB,KAAKu5B,SAAS5tB,KAEzB,UACI3L,KAAKqoB,OAAOtf,QAAQ/I,KAAKglB,YAAahlB,KAAKu5B,UAC3Cv5B,KAAKu5B,SAASxwB,UAElB,cAAc1L,EAAMuG,GAChB,OAAO5D,KAAKu5B,SAAS73B,cAAcrE,EAAMuG,GAE7C,cAAc7F,GACV,OAAOiC,KAAKu5B,SAASgB,cAAcx8B,GAEvC,WAAWA,GACP,OAAOiC,KAAKu5B,SAASiB,WAAWz8B,GAEpC,YAAY6qB,EAAQ6R,GAChBz6B,KAAKu5B,SAASr3B,YAAY0mB,EAAQ6R,GAClCz6B,KAAKqoB,OAAOqS,SAAS16B,KAAKglB,YAAayV,EAAU7R,GAAQ,GAE7D,aAAaA,EAAQ6R,EAAUE,GAC3B36B,KAAKu5B,SAAS5O,aAAa/B,EAAQ6R,EAAUE,GAC7C36B,KAAKqoB,OAAOqS,SAAS16B,KAAKglB,YAAayV,EAAU7R,GAAQ,GAE7D,YAAYA,EAAQgS,EAAU9P,GAC1B9qB,KAAKqoB,OAAOwS,SAAS76B,KAAKglB,YAAa4V,EAAU56B,KAAKu5B,SAAUzO,GAEpE,kBAAkBgQ,EAAgBC,GAC9B,OAAO/6B,KAAKu5B,SAASyB,kBAAkBF,EAAgBC,GAE3D,WAAWpoB,GACP,OAAO3S,KAAKu5B,SAAS1Q,WAAWlW,GAEpC,YAAYA,GACR,OAAO3S,KAAKu5B,SAAS0B,YAAYtoB,GAErC,aAAauoB,EAAI79B,EAAMU,EAAO6F,GAC1B5D,KAAKu5B,SAASjpB,aAAa4qB,EAAI79B,EAAMU,EAAO6F,GAEhD,gBAAgBs3B,EAAI79B,EAAMuG,GACtB5D,KAAKu5B,SAAS4B,gBAAgBD,EAAI79B,EAAMuG,GAE5C,SAASs3B,EAAI79B,GACT2C,KAAKu5B,SAASvT,SAASkV,EAAI79B,GAE/B,YAAY69B,EAAI79B,GACZ2C,KAAKu5B,SAASjS,YAAY4T,EAAI79B,GAElC,SAAS69B,EAAIrtB,EAAO9P,EAAOq9B,GACvBp7B,KAAKu5B,SAAS8B,SAASH,EAAIrtB,EAAO9P,EAAOq9B,GAE7C,YAAYF,EAAIrtB,EAAOutB,GACnBp7B,KAAKu5B,SAAS+B,YAAYJ,EAAIrtB,EAAOutB,GAEzC,YAAYF,EAAI79B,EAAMU,GA7KD,KA8KbV,EAAK0Q,OAAO,IA7KQ,cA6KkB1Q,EACtC2C,KAAKu7B,kBAAkBL,IAAMn9B,GAG7BiC,KAAKu5B,SAAS/C,YAAY0E,EAAI79B,EAAMU,GAG5C,SAAS4U,EAAM5U,GACXiC,KAAKu5B,SAASiC,SAAS7oB,EAAM5U,GAEjC,OAAOggB,EAAQ9S,EAAWE,GACtB,OAAOnL,KAAKu5B,SAAStO,OAAOlN,EAAQ9S,EAAWE,GAEnD,kBAAkBtB,EAAS9L,GACvBiC,KAAKqoB,OAAOkT,kBAAkB1xB,EAAS9L,IAG/C,MAAMi8B,WAA0BD,GAC5B,YAAYr6B,EAASslB,EAAauU,EAAUlR,GACxCjI,MAAM4E,EAAauU,EAAUlR,GAC7BroB,KAAKN,QAAUA,EACfM,KAAKglB,YAAcA,EAEvB,YAAYkW,EAAI79B,EAAMU,GArMD,KAsMbV,EAAK0Q,OAAO,GACU,KAAlB1Q,EAAK0Q,OAAO,IAtMI,cAsMS1Q,EAEzB2C,KAAKu7B,kBAAkBL,EADvBn9B,OAAkB2C,IAAV3C,KAA+BA,GAIvCiC,KAAKqoB,OAAO9e,QAAQvJ,KAAKglB,YAAakW,EAAI79B,EAAK+O,OAAO,GAAIrO,GAI9DiC,KAAKu5B,SAAS/C,YAAY0E,EAAI79B,EAAMU,GAG5C,OAAOggB,EAAQ9S,EAAWE,GACtB,GApNiB,KAoNbF,EAAU8C,OAAO,GAAwB,CACzC,MAAMlE,EAgBlB,SAAkCkU,GAC9B,OAAQA,GACJ,IAAK,OACD,OAAOtc,SAASQ,KACpB,IAAK,WACD,OAAOR,SACX,IAAK,SACD,OAAOiS,OACX,QACI,OAAOqK,GATnB,CAhBqDA,GACzC,IAAI1gB,EAAO4N,EAAUmB,OAAO,GACxB6Z,EAAQ,GAMZ,MA7Na,KA0NT5oB,EAAK0Q,OAAO,MACX1Q,EAAM4oB,GAsBvB,SAAkC1a,GAC9B,MAAMkwB,EAAWlwB,EAAYW,QAAQ,KAGrC,MAAO,CAFSX,EAAYY,UAAU,EAAGsvB,GAC3BlwB,EAAYa,OAAOqvB,EAAW,IAHhD,CAtByDp+B,IAEtC2C,KAAKqoB,OAAO4C,OAAOjrB,KAAKglB,YAAanb,EAASxM,EAAM4oB,EAAO/a,IAE9DlL,KAAKN,QAAQg8B,yBADGxwB,EAAa,QAAM,EACYC,EAAUD,KAGjE,OAAOlL,KAAKu5B,SAAStO,OAAOlN,EAAQ9S,EAAWE,uBA6BjDwwB,UAAkC,GACpC,YAAYhD,EAAKhvB,EAAQC,GACrBwW,MAAMuY,EAAI12B,KAAM0H,EAAQC,WAGhC+xB,EAA0Bn5B,UAAO,SAA2CxE,GAAK,OAAO,IAAKA,GAAK29B,GAA2B,EAAA,sBAAgB,EAAA,UAAW,EAAA,sBAAgB,GAAyB,EAAA,sBAAgB,MACjNA,EAA0Bl5B,WAAQ,EAAA,gCAA0B,CAAEC,MAAOi5B,EAA2Bj8B,QAASi8B,EAA0Bn5B,kBAwBnI,MAAMo5B,GAAwB,IAAI,EAAA,eAAe,uBAc3CC,GAA+B,CACjC,CAAE/2B,QAAS6J,EAAiBxJ,WA3BhC,WACI,MDqpIwC,mBAA1BgzB,KCrpIoB,IAAI,GAAyB,IAAI,KA2BnE,CAAErzB,QAAS82B,GAAuB72B,SAAU,qBAd5C,CAAED,QAASU,EAAkBs2B,SAAU,IACvC,CAAEh3B,QAAS,GAA2BK,WAZ1C,WACI,OAAO,IAAI,KAYX,CAAEL,QAAS,GAAkBg3B,SAAU,IAA6B,CAChEh3B,QAAS,EAAA,iBACTK,WAZR,SAAoCvC,EAAUylB,EAAQ0T,GAClD,OAAO,IAAI,GAAyBn5B,EAAUylB,EAAQ0T,IAYlD32B,KAAM,CAAC,EAAA,6BAAsB,GAAkB,EAAA,6BAgCjD42B,UAENA,EAAwB32B,UAAO,EAAA,8BAAwB,CAAE1D,KAAMq6B,IAC/DA,EAAwB12B,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAyC1B,GAAK,OAAO,IAAKA,GAAKg+B,IAA+Bn3B,UAAWg3B,GAA8Bt2B,QAAS,CAAC,EAAA,uBCpbnN,IAAY02B,GAAZ,SAAYA,UACX,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,MAAA,GAAA,QAJWA,EAAZ,CAKC,IAQM,MAAMC,GAAqB,CACjCC,UAAMz7B,EACN07B,WAAO17B,EACP27B,YAAaJ,GAAYK,MC1BnB,SAASC,GAAWC,GACvB,MAAoB,mBAANA,ECDlB,IAAIC,IAAsD,EACnD,MAAM,GAAS,CAClBp6B,aAAS3B,EACT,0CAA0C3C,GACtC,GAAIA,EAAO,CACP,MAAMgG,EAAQ,IAAI3C,MAClBb,QAAQC,KAAK,gGAAkGuD,EAAM24B,YAEhHD,IACLl8B,QAAQo8B,IAAI,wDAEhBF,GAAsD1+B,GAE1D,4CACI,OAAO0+B,KCdR,SAASG,GAAgBC,GAC5BC,WAAW,KAAQ,MAAMD,GAAQ,GCC9B,MAAME,GAAQ,CACjBC,QAAQ,EACR,KAAKj/B,KACL,MAAM8+B,GACF,GAAI,GAAOI,sCACP,MAAMJ,EAGND,GAAgBC,IAGxB,cCbS/rB,GAAU,KAAOD,MAAMC,SAAW,CAAE0rB,GAAMA,GAAyB,iBAAbA,EAAEt5B,QAA9C,GCAhB,SAAS,GAASs5B,GACrB,OAAa,OAANA,GAA2B,iBAANA,ECDhC,MAaaU,GAbmB,MAC5B,SAASC,EAAwBlzB,GAO7B,OANA7I,MAAMnE,KAAK+C,MACXA,KAAKo9B,QAAUnzB,EACX,GAAGA,EAAO/G,kDACpB+G,EAAO4B,IAAI,CAACgxB,EAAK//B,IAAM,GAAGA,EAAI,MAAM+/B,EAAIrzB,cAAcuB,KAAK,UAAY,GACjE/K,KAAK3C,KAAO,sBACZ2C,KAAKiK,OAASA,EACPjK,KAGX,OADAm9B,EAAwBz+B,UAAYlB,OAAOY,OAAOgD,MAAM1C,WACjDy+B,GAXqB,GCIzB,IAAA,GAAA,YAAME,EACT,YAAYC,GACRt9B,KAAKg9B,QAAS,EACdh9B,KAAKu9B,iBAAmB,KACxBv9B,KAAKw9B,eAAiB,KAClBF,IACAt9B,KAAKy9B,aAAeH,GAG5B,cACI,IAAIrzB,EACJ,GAAIjK,KAAKg9B,OACL,OAEJ,IAAI,iBAAEO,EAAgB,aAAEE,EAAY,eAAED,GAAmBx9B,KAIzD,GAHAA,KAAKg9B,QAAS,EACdh9B,KAAKu9B,iBAAmB,KACxBv9B,KAAKw9B,eAAiB,KAClBD,aAA4BF,EAC5BE,EAAiB3L,OAAO5xB,WAEvB,GAAyB,OAArBu9B,EACL,IAAK,IAAI7Y,EAAQ,EAAGA,EAAQ6Y,EAAiBr6B,SAAUwhB,EACpC6Y,EAAiB7Y,GACzBkN,OAAO5xB,MAGtB,GAAIu8B,GAAWkB,GACX,IACIA,EAAaxgC,KAAK+C,MAEtB,MAAOqL,GACHpB,EAASoB,aAAa6xB,GAAsBQ,GAA4BryB,EAAEpB,QAAU,CAACoB,GAG7F,GAAIyF,GAAQ0sB,GAAiB,CACzB,IAAI9Y,GAAS,EACTiZ,EAAMH,EAAet6B,OACzB,OAASwhB,EAAQiZ,GAAK,CAClB,MAAMvnB,EAAMonB,EAAe9Y,GAC3B,GAAI,GAAStO,GACT,IACIA,EAAIknB,cAER,MAAOjyB,GACHpB,EAASA,GAAU,GACfoB,aAAa6xB,GACbjzB,EAASA,EAAOyoB,OAAOgL,GAA4BryB,EAAEpB,SAGrDA,EAAOxJ,KAAK4K,KAMhC,GAAIpB,EACA,MAAM,IAAIizB,GAAoBjzB,GAGtC,IAAI2zB,GACA,IAAIC,EAAeD,EACnB,IAAKA,EACD,OAAOP,EAAaS,MAExB,cAAeF,GACX,IAAK,WACDC,EAAe,IAAIR,EAAaO,GACpC,IAAK,SACD,GAAIC,IAAiB79B,MAAQ69B,EAAab,QAA8C,mBAA7Ba,EAAaP,YACpE,OAAOO,EAEN,GAAI79B,KAAKg9B,OAEV,OADAa,EAAaP,cACNO,EAEN,KAAMA,aAAwBR,GAAe,CAC9C,MAAMU,EAAMF,EACZA,EAAe,IAAIR,EACnBQ,EAAaL,eAAiB,CAACO,GAEnC,MACJ,QACI,MAAM,IAAI38B,MAAM,yBAA2Bw8B,EAAW,2BAG9D,IAAI,iBAAEL,GAAqBM,EAC3B,GAAyB,OAArBN,EACAM,EAAaN,iBAAmBv9B,UAE/B,GAAIu9B,aAA4BF,EAAc,CAC/C,GAAIE,IAAqBv9B,KACrB,OAAO69B,EAEXA,EAAaN,iBAAmB,CAACA,EAAkBv9B,UAElD,CAAA,IAAwC,IAApCu9B,EAAiBrxB,QAAQlM,MAI9B,OAAO69B,EAHPN,EAAiB98B,KAAKT,MAK1B,MAAMg+B,EAAgBh+B,KAAKw9B,eAO3B,OANsB,OAAlBQ,EACAh+B,KAAKw9B,eAAiB,CAACK,GAGvBG,EAAcv9B,KAAKo9B,GAEhBA,EAEX,OAAOA,GACH,MAAMG,EAAgBh+B,KAAKw9B,eAC3B,GAAIQ,EAAe,CACf,MAAMC,EAAoBD,EAAc9xB,QAAQ2xB,IACrB,IAAvBI,GACAD,EAAcvuB,OAAOwuB,EAAmB,YAKxDZ,EAAaS,MAAS,SAAUf,GAE5B,OADAA,EAAMC,QAAS,EACRD,EAFW,CAGpB,IAAIM,MA5HC,GA6HP,SAASK,GAA4BzzB,GACjC,OAAOA,EAAO1B,OAAO,CAAC21B,EAAMrB,IAAQqB,EAAKxL,OAAQmK,aAAeK,GAAuBL,EAAI5yB,OAAS4yB,GAAM,IClIvG,MAAMsB,GAAe,KAAyB,mBAAXtgC,OACpCA,OAAO,gBACP,kBAAoB4K,KAAK21B,SAFH,GCMrB,MAAM,WAAmB,GAC5B,YAAYC,EAAmBt6B,EAAOu6B,GAMlC,OALAle,QACApgB,KAAKu+B,eAAiB,KACtBv+B,KAAKw+B,iBAAkB,EACvBx+B,KAAKy+B,oBAAqB,EAC1Bz+B,KAAK0+B,WAAY,EACTC,UAAUz7B,QACd,KAAK,EACDlD,KAAK4P,YAAcmtB,GACnB,MACJ,KAAK,EACD,IAAKsB,EAAmB,CACpBr+B,KAAK4P,YAAcmtB,GACnB,MAEJ,GAAiC,iBAAtBsB,EAAgC,CACnCA,aAA6B,IAC7Br+B,KAAKy+B,mBAAqBJ,EAAkBI,mBAC5Cz+B,KAAK4P,YAAcyuB,EACnBA,EAAkBhoB,IAAIrW,QAGtBA,KAAKy+B,oBAAqB,EAC1Bz+B,KAAK4P,YAAc,IAAI,GAAe5P,KAAMq+B,IAEhD,MAER,QACIr+B,KAAKy+B,oBAAqB,EAC1Bz+B,KAAK4P,YAAc,IAAI,GAAe5P,KAAMq+B,EAAmBt6B,EAAOu6B,IAIlF,CAACH,MAAwB,OAAOn+B,KAChC,cAAc8R,EAAM/N,EAAOu6B,GACvB,MAAMM,EAAa,IAAI,GAAW9sB,EAAM/N,EAAOu6B,GAE/C,OADAM,EAAWH,oBAAqB,EACzBG,EAEX,KAAK7gC,GACIiC,KAAK0+B,WACN1+B,KAAK6+B,MAAM9gC,GAGnB,MAAM8+B,GACG78B,KAAK0+B,YACN1+B,KAAK0+B,WAAY,EACjB1+B,KAAK8+B,OAAOjC,IAGpB,WACS78B,KAAK0+B,YACN1+B,KAAK0+B,WAAY,EACjB1+B,KAAK++B,aAGb,cACQ/+B,KAAKg9B,SAGTh9B,KAAK0+B,WAAY,EACjBte,MAAMkd,eAEV,MAAMv/B,GACFiC,KAAK4P,YAAYkC,KAAK/T,GAE1B,OAAO8+B,GACH78B,KAAK4P,YAAY7L,MAAM84B,GACvB78B,KAAKs9B,cAET,YACIt9B,KAAK4P,YAAY0uB,WACjBt+B,KAAKs9B,cAET,yBACI,MAAM,iBAAEC,GAAqBv9B,KAM7B,OALAA,KAAKu9B,iBAAmB,KACxBv9B,KAAKs9B,cACLt9B,KAAKg9B,QAAS,EACdh9B,KAAK0+B,WAAY,EACjB1+B,KAAKu9B,iBAAmBA,EACjBv9B,MAGR,MAAM,WAAuB,GAChC,YAAYg/B,EAAmBC,EAAgBl7B,EAAOu6B,GAGlD,IAAIxsB,EAFJsO,QACApgB,KAAKg/B,kBAAoBA,EAEzB,IAAIpsB,EAAU5S,KACVu8B,GAAW0C,GACXntB,EAAOmtB,EAEFA,IACLntB,EAAOmtB,EAAentB,KACtB/N,EAAQk7B,EAAel7B,MACvBu6B,EAAWW,EAAeX,SACtBW,IAAmBlC,KACnBnqB,EAAUpV,OAAOY,OAAO6gC,GACpB1C,GAAW3pB,EAAQ0qB,cACnBt9B,KAAKqW,IAAIzD,EAAQ0qB,YAAYh/B,KAAKsU,IAEtCA,EAAQ0qB,YAAct9B,KAAKs9B,YAAYh/B,KAAK0B,QAGpDA,KAAKk/B,SAAWtsB,EAChB5S,KAAK6+B,MAAQ/sB,EACb9R,KAAK8+B,OAAS/6B,EACd/D,KAAK++B,UAAYT,EAErB,KAAKvgC,GACD,IAAKiC,KAAK0+B,WAAa1+B,KAAK6+B,MAAO,CAC/B,MAAM,kBAAEG,GAAsBh/B,KACzB,GAAOi9B,uCAA0C+B,EAAkBP,mBAG/Dz+B,KAAKm/B,gBAAgBH,EAAmBh/B,KAAK6+B,MAAO9gC,IACzDiC,KAAKs9B,cAHLt9B,KAAKo/B,aAAap/B,KAAK6+B,MAAO9gC,IAO1C,MAAM8+B,GACF,IAAK78B,KAAK0+B,UAAW,CACjB,MAAM,kBAAEM,GAAsBh/B,MACxB,sCAAEi9B,GAA0C,GAClD,GAAIj9B,KAAK8+B,OACA7B,GAA0C+B,EAAkBP,oBAK7Dz+B,KAAKm/B,gBAAgBH,EAAmBh/B,KAAK8+B,OAAQjC,GACrD78B,KAAKs9B,gBALLt9B,KAAKo/B,aAAap/B,KAAK8+B,OAAQjC,GAC/B78B,KAAKs9B,oBAOR,GAAK0B,EAAkBP,mBAQpBxB,GACA+B,EAAkBT,eAAiB1B,EACnCmC,EAAkBR,iBAAkB,GAGpC5B,GAAgBC,GAEpB78B,KAAKs9B,kBAfuC,CAE5C,GADAt9B,KAAKs9B,cACDL,EACA,MAAMJ,EAEVD,GAAgBC,KAc5B,WACI,IAAK78B,KAAK0+B,UAAW,CACjB,MAAM,kBAAEM,GAAsBh/B,KAC9B,GAAIA,KAAK++B,UAAW,CAChB,MAAMM,EAAkB,IAAMr/B,KAAK++B,UAAU9hC,KAAK+C,KAAKk/B,UAClD,GAAOjC,uCAA0C+B,EAAkBP,oBAKpEz+B,KAAKm/B,gBAAgBH,EAAmBK,GACxCr/B,KAAKs9B,gBALLt9B,KAAKo/B,aAAaC,GAClBr/B,KAAKs9B,oBAQTt9B,KAAKs9B,eAIjB,aAAap2B,EAAInJ,GACb,IACImJ,EAAGjK,KAAK+C,KAAKk/B,SAAUnhC,GAE3B,MAAO8+B,GAEH,GADA78B,KAAKs9B,cACD,GAAOL,sCACP,MAAMJ,EAGND,GAAgBC,IAI5B,gBAAgBjU,EAAQ1hB,EAAInJ,GACxB,IAAK,GAAOk/B,sCACR,MAAM,IAAI77B,MAAM,YAEpB,IACI8F,EAAGjK,KAAK+C,KAAKk/B,SAAUnhC,GAE3B,MAAO8+B,GACH,OAAI,GAAOI,uCACPrU,EAAO2V,eAAiB1B,EACxBjU,EAAO4V,iBAAkB,GAClB,IAGP5B,GAAgBC,IACT,GAGf,OAAO,EAEX,eACI,MAAM,kBAAEmC,GAAsBh/B,KAC9BA,KAAKk/B,SAAW,KAChBl/B,KAAKg/B,kBAAoB,KACzBA,EAAkB1B,eCzNnB,SAASzxB,GAAIyzB,EAASC,GACzB,OAAO,SAAsBC,GACzB,GAAuB,mBAAZF,EACP,MAAM,IAAIh7B,UAAU,8DAExB,OAAOk7B,EAAOC,KAAK,IAAIC,GAAYJ,EAASC,KAG7C,MAAMG,GACT,YAAYJ,EAASC,GACjBv/B,KAAKs/B,QAAUA,EACft/B,KAAKu/B,QAAUA,EAEnB,KAAKX,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAcf,EAAY5+B,KAAKs/B,QAASt/B,KAAKu/B,WAGjF,MAAM,WAAsB,GACxB,YAAY3vB,EAAa0vB,EAASC,GAC9Bnf,MAAMxQ,GACN5P,KAAKs/B,QAAUA,EACft/B,KAAKy0B,MAAQ,EACbz0B,KAAKu/B,QAAUA,GAAWv/B,KAE9B,MAAMjC,GACF,IAAI+P,EACJ,IACIA,EAAS9N,KAAKs/B,QAAQriC,KAAK+C,KAAKu/B,QAASxhC,EAAOiC,KAAKy0B,SAEzD,MAAOoI,GAEH,YADA78B,KAAK4P,YAAY7L,MAAM84B,GAG3B78B,KAAK4P,YAAYkC,KAAKhE,kCCjCvB,SAAS5M,GAAO0+B,EAAWL,GAC9B,OAAO,SAAgCC,GACnC,OAAOA,EAAOC,KAAK,IAAII,GAAeD,EAAWL,KAGzD,MAAMM,GACF,YAAYD,EAAWL,GACnBv/B,KAAK4/B,UAAYA,EACjB5/B,KAAKu/B,QAAUA,EAEnB,KAAKX,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAiBf,EAAY5+B,KAAK4/B,UAAW5/B,KAAKu/B,WAGtF,MAAM,WAAyB,GAC3B,YAAY3vB,EAAagwB,EAAWL,GAChCnf,MAAMxQ,GACN5P,KAAK4/B,UAAYA,EACjB5/B,KAAKu/B,QAAUA,EACfv/B,KAAKy0B,MAAQ,EAEjB,MAAM12B,GACF,IAAI+P,EACJ,IACIA,EAAS9N,KAAK4/B,UAAU3iC,KAAK+C,KAAKu/B,QAASxhC,EAAOiC,KAAKy0B,SAE3D,MAAOoI,GAEH,YADA78B,KAAK4P,YAAY7L,MAAM84B,GAGvB/uB,GACA9N,KAAK4P,YAAYkC,KAAK/T,IC/B3B,MAAM,WAAwB,GACjC,YAAY6qB,EAAQkX,EAAYC,GAC5B3f,QACApgB,KAAK4oB,OAASA,EACd5oB,KAAK8/B,WAAaA,EAClB9/B,KAAK+/B,WAAaA,EAClB//B,KAAK0kB,MAAQ,EAEjB,MAAM3mB,GACFiC,KAAK4oB,OAAOoX,WAAWhgC,KAAK8/B,WAAY/hC,EAAOiC,KAAK+/B,WAAY//B,KAAK0kB,QAAS1kB,MAElF,OAAO+D,GACH/D,KAAK4oB,OAAOqX,YAAYl8B,EAAO/D,MAC/BA,KAAKs9B,cAET,YACIt9B,KAAK4oB,OAAOsX,eAAelgC,MAC3BA,KAAKs9B,eClBN,MAAM6C,GAAoBC,GAAWxB,IACxC,IAAK,IAAI9hC,EAAI,EAAG6gC,EAAMyC,EAAMl9B,OAAQpG,EAAI6gC,IAAQiB,EAAW5B,OAAQlgC,IAC/D8hC,EAAW9sB,KAAKsuB,EAAMtjC,IAE1B8hC,EAAWN,YCJR,SAAS+B,KACZ,MAAsB,mBAAXxiC,QAA0BA,OAAO+T,SAGrC/T,OAAO+T,SAFH,aAIR,MAAM,GAAWyuB,KCNX,GAAa,KAAyB,mBAAXxiC,QAAyBA,OAAOyiC,YAAc,eAA5D,GCAbC,GAAgB/D,GAAMA,GAAyB,iBAAbA,EAAEt5B,QAAoC,mBAANs5B,ECAxE,SAASgE,GAAUziC,GACtB,QAASA,GAAoC,mBAApBA,EAAM4hC,WAAkD,mBAAf5hC,EAAM0F,KCQrE,MAAMg9B,GAAe3yB,IACxB,GAAMA,GAA+C,mBAA9BA,EAAO,IAC1B,OCV8B6B,EDUD7B,ECVU8wB,IAC3C,MAAM8B,EAAM/wB,EAAI,MAChB,GAA6B,mBAAlB+wB,EAAIf,UACX,MAAM,IAAIr7B,UAAU,kEAGpB,OAAOo8B,EAAIf,UAAUf,IDMpB,GAAI2B,GAAYzyB,GACjB,OAAOqyB,GAAiBryB,GAEvB,GAAI0yB,GAAU1yB,GACf,OEhB2BgsB,EFgBDhsB,EEhBc8wB,IAC5C9E,EAAQr2B,KAAM1F,IACL6gC,EAAW5B,SACZ4B,EAAW9sB,KAAK/T,GAChB6gC,EAAWN,aAEfzB,GAAQ+B,EAAW76B,MAAM84B,IACxBp5B,KAAK,KAAMm5B,IACTgC,GFUF,GAAM9wB,GAA6C,mBAA5BA,EAAO,IAC/B,OGnB4B6yB,EHmBD7yB,EGnBe8wB,IAC9C,MAAMhtB,EAAW+uB,EAAS,MAC1B,OAAG,CACC,MAAMzwB,EAAO0B,EAASE,OACtB,GAAI5B,EAAK6B,KAAM,CACX6sB,EAAWN,WACX,MAGJ,GADAM,EAAW9sB,KAAK5B,EAAKnS,OACjB6gC,EAAW5B,OACX,MAUR,MAP+B,mBAApBprB,EAASgvB,QAChBhC,EAAWvoB,IAAI,KACPzE,EAASgvB,QACThvB,EAASgvB,WAIdhC,GHCF,CACD,MAAM7gC,EAAQ,GAAS+P,GAAU,oBAAsB,IAAIA,KAG3D,MAAM,IAAIxJ,UAFE,gBAAgBvG,8FGvBD,IAAC4iC,EDAD7G,EDAGnqB,GGD/B,SAASkxB,MCKT,IAAA,GAAA,YAAMC,EACT,YAAYnB,GACR3/B,KAAK+gC,WAAY,EACbpB,IACA3/B,KAAKghC,WAAarB,GAG1B,KAAKsB,GACD,MAAMX,EAAa,IAAIQ,EAGvB,OAFAR,EAAWd,OAASx/B,KACpBsgC,EAAWW,SAAWA,EACfX,EAEX,UAAUrB,EAAgBl7B,EAAOu6B,GAC7B,MAAM,SAAE2C,GAAajhC,KACfkhC,ECjBP,SAAsBC,EAAgBp9B,EAAOu6B,GAChD,GAAI6C,EAAgB,CAChB,GAAIA,aAA0B,GAC1B,OAAOA,EAEX,GAAIA,EAAehD,IACf,OAAOgD,EAAehD,MAG9B,OAAKgD,GAAmBp9B,GAAUu6B,EAG3B,IAAI,GAAW6C,EAAgBp9B,EAAOu6B,GAFlC,IAAI,GAAWvB,IAVvB,CDiB2BkC,EAAgBl7B,EAAOu6B,GASjD,GAPI4C,EAAK7qB,IADL4qB,EACSA,EAAShkC,KAAKikC,EAAMlhC,KAAKw/B,QAGzBx/B,KAAKw/B,QAAW,GAAOvC,wCAA0CiE,EAAKzC,mBAC3Ez+B,KAAKghC,WAAWE,GAChBlhC,KAAKohC,cAAcF,IAEvB,GAAOjE,uCACHiE,EAAKzC,qBACLyC,EAAKzC,oBAAqB,EACtByC,EAAK1C,iBACL,MAAM0C,EAAK3C,eAIvB,OAAO2C,EAEX,cAAcA,GACV,IACI,OAAOlhC,KAAKghC,WAAWE,GAE3B,MAAOrE,GACC,GAAOI,wCACPiE,EAAK1C,iBAAkB,EACvB0C,EAAK3C,eAAiB1B,GE7C/B,SAAwBwE,GAC3B,KAAOA,GAAU,CACb,MAAM,OAAErE,EAAM,YAAEptB,EAAW,UAAE8uB,GAAc2C,EAC3C,GAAIrE,GAAU0B,EACV,OAAO,EAGP2C,EADKzxB,GAAeA,aAAuB,GAChCA,EAGA,KAGnB,OAAO,EAbJ,CF+CwBsxB,GACfA,EAAKn9B,MAAM84B,GAGXt8B,QAAQC,KAAKq8B,IAIzB,QAAQ/qB,EAAMwvB,GAEV,OAAO,IADPA,EAAcC,GAAeD,IACN,CAACx/B,EAASE,KAC7B,IAAI67B,EACJA,EAAe79B,KAAK2/B,UAAW5hC,IAC3B,IACI+T,EAAK/T,GAET,MAAO8+B,GACH76B,EAAO66B,GACHgB,GACAA,EAAaP,gBAGtBt7B,EAAQF,KAGnB,WAAW88B,GACP,MAAM,OAAEY,GAAWx/B,KACnB,OAAOw/B,GAAUA,EAAOG,UAAUf,GAEtC,CAAC,MACG,OAAO5+B,KAEX,QAAQwhC,GACJ,OAA0B,IAAtBA,EAAWt+B,OACJlD,OG9EWyhC,EHgFDD,GG5EN,IAAfC,EAAIv+B,OACGu+B,EAAI,GAER,SAAexvB,GAClB,OAAOwvB,EAAIl5B,OAAO,CAACm5B,EAAMx6B,IAAOA,EAAGw6B,GAAOzvB,IANnC4uB,IH8E0B7gC,MGhFlC,IAAuByhC,EHkF1B,UAAUH,GAEN,OAAO,IADPA,EAAcC,GAAeD,IACN,CAACx/B,EAASE,KAC7B,IAAIjE,EACJiC,KAAK2/B,UAAWnD,GAAMz+B,EAAQy+B,EAAIK,GAAQ76B,EAAO66B,GAAM,IAAM/6B,EAAQ/D,cAIjF+iC,EAAW1iC,OAAUuhC,GACV,IAAImB,EAAWnB,MA1FnB,GA4FP,SAAS4B,GAAeD,GAIpB,GAHKA,IACDA,EAAc,GAAOj/B,SAAWA,UAE/Bi/B,EACD,MAAM,IAAIlgC,MAAM,yBAEpB,OAAOkgC,EIrGJ,SAASK,GAAkBC,EAAiB9zB,EAAQgyB,EAAYC,EAAY8B,EAAkB,IAAI,GAAgBD,EAAiB9B,EAAYC,IAClJ,IAAI8B,EAAgB7E,OAGpB,OAAIlvB,aAAkB,GACXA,EAAO6xB,UAAUkC,GAErBpB,GAAY3yB,EAAZ2yB,CAAoBoB,GCTxB,MAAM,WAAwB,GACjC,WAAW/B,EAAYgC,EAAY/B,EAAYgC,EAAYC,GACvDhiC,KAAK4P,YAAYkC,KAAKgwB,GAE1B,YAAY/9B,EAAOi+B,GACfhiC,KAAK4P,YAAY7L,MAAMA,GAE3B,eAAei+B,GACXhiC,KAAK4P,YAAY0uB,YCPlB,SAAS2D,GAAchwB,EAAOiwB,GACjC,OAAO,IAAI,GAAWtD,IAClB,MAAMxoB,EAAM,IAAI,GAChB,IAAItZ,EAAI,EAWR,OAVAsZ,EAAIC,IAAI6rB,EAAUC,UAAAA,WACVrlC,IAAMmV,EAAM/O,QAIhB07B,EAAW9sB,KAAKG,EAAMnV,MACjB8hC,EAAW5B,QACZ5mB,EAAIC,IAAIrW,KAAKmiC,aALbvD,EAAWN,eAQZloB,ICbR,SAAS,GAAKnE,EAAOiwB,GACxB,OAAKA,ECIF,SAAmBjwB,EAAOiwB,GAC7B,GAAa,MAATjwB,EAAe,CACf,GCTD,SAA6BA,GAChC,OAAOA,GAA6C,mBAA7BA,EAAM,IAD1B,CDSyBA,GACpB,OERL,SAA4BA,EAAOiwB,GACtC,OAAO,IAAI,GAAWtD,IAClB,MAAMxoB,EAAM,IAAI,GAShB,OARAA,EAAIC,IAAI6rB,EAAUC,SAAS,KACvB,MAAM7B,EAAaruB,EAAM,MACzBmE,EAAIC,IAAIiqB,EAAWX,UAAU,CACzB,KAAK5hC,GAASqY,EAAIC,IAAI6rB,EAAUC,SAAS,IAAMvD,EAAW9sB,KAAK/T,MAC/D,MAAM8+B,GAAOzmB,EAAIC,IAAI6rB,EAAUC,SAAS,IAAMvD,EAAW76B,MAAM84B,MAC/D,WAAazmB,EAAIC,IAAI6rB,EAAUC,SAAS,IAAMvD,EAAWN,oBAG1DloB,IAXR,CFQ+BnE,EAAOiwB,GAEhC,GAAI1B,GAAUvuB,GACf,OGZL,SAAyBA,EAAOiwB,GACnC,OAAO,IAAI,GAAWtD,IAClB,MAAMxoB,EAAM,IAAI,GAShB,OARAA,EAAIC,IAAI6rB,EAAUC,SAAS,IAAMlwB,EAAMxO,KAAK1F,IACxCqY,EAAIC,IAAI6rB,EAAUC,SAAS,KACvBvD,EAAW9sB,KAAK/T,GAChBqY,EAAIC,IAAI6rB,EAAUC,SAAS,IAAMvD,EAAWN,iBAEjDzB,IACCzmB,EAAIC,IAAI6rB,EAAUC,SAAS,IAAMvD,EAAW76B,MAAM84B,SAE/CzmB,IAXR,CHY4BnE,EAAOiwB,GAE7B,GAAI3B,GAAYtuB,GACjB,OAAOgwB,GAAchwB,EAAOiwB,GAE3B,GIlBN,SAAoBjwB,GACvB,OAAOA,GAA2C,mBAA3BA,EAAM,IAD1B,CJkBqBA,IAA2B,iBAAVA,EACjC,OKjBL,SAA0BA,EAAOiwB,GACpC,IAAKjwB,EACD,MAAM,IAAI7Q,MAAM,2BAEpB,OAAO,IAAI,GAAWw9B,IAClB,MAAMxoB,EAAM,IAAI,GAChB,IAAIxE,EAgCJ,OA/BAwE,EAAIC,IAAI,KACAzE,GAAuC,mBAApBA,EAASgvB,QAC5BhvB,EAASgvB,WAGjBxqB,EAAIC,IAAI6rB,EAAUC,SAAS,KACvBvwB,EAAWK,EAAM,MACjBmE,EAAIC,IAAI6rB,EAAUC,UAAAA,WACd,GAAIvD,EAAW5B,OACX,OAEJ,IAAIj/B,EACAgU,EACJ,IACI,MAAMjE,EAAS8D,EAASE,OACxB/T,EAAQ+P,EAAO/P,MACfgU,EAAOjE,EAAOiE,KAElB,MAAO8qB,GAEH,YADA+B,EAAW76B,MAAM84B,GAGjB9qB,EACA6sB,EAAWN,YAGXM,EAAW9sB,KAAK/T,GAChBiC,KAAKmiC,mBAIV/rB,IAtCR,CLiB6BnE,EAAOiwB,GAGvC,MAAM,IAAI59B,WAAqB,OAAV2N,UAAyBA,GAASA,GAAS,sBAf7D,CDGkBA,EAAOiwB,GANpBjwB,aAAiB,GACVA,EAEJ,IAAI,GAAWwuB,GAAYxuB,IOHnC,SAASmwB,GAAS9C,EAAS+C,EAAgBC,EAAaC,OAAOC,mBAClE,MAA8B,mBAAnBH,EACC7C,GAAWA,EAAOiD,KAAKL,GAAS,CAAC1b,EAAG5pB,IAAM,GAAKwiC,EAAQ5Y,EAAG5pB,IAAI2lC,KAAK52B,GAAI,CAAC8a,EAAG+b,IAAOL,EAAe3b,EAAGC,EAAG7pB,EAAG4lC,KAAOJ,KAE1F,iBAAnBD,IACZC,EAAaD,GAET7C,GAAWA,EAAOC,KAAK,IAAIkD,GAAiBrD,EAASgD,KAE1D,MAAMK,GACT,YAAYrD,EAASgD,EAAaC,OAAOC,mBACrCxiC,KAAKs/B,QAAUA,EACft/B,KAAKsiC,WAAaA,EAEtB,KAAKjB,EAAU7B,GACX,OAAOA,EAAOG,UAAU,IAAI,GAAmB0B,EAAUrhC,KAAKs/B,QAASt/B,KAAKsiC,cAG7E,MAAM,WAA2B,GACpC,YAAY1yB,EAAa0vB,EAASgD,EAAaC,OAAOC,mBAClDpiB,MAAMxQ,GACN5P,KAAKs/B,QAAUA,EACft/B,KAAKsiC,WAAaA,EAClBtiC,KAAK4iC,cAAe,EACpB5iC,KAAK6iC,OAAS,GACd7iC,KAAK8iC,OAAS,EACd9iC,KAAK0kB,MAAQ,EAEjB,MAAM3mB,GACEiC,KAAK8iC,OAAS9iC,KAAKsiC,WACnBtiC,KAAK+iC,SAAShlC,GAGdiC,KAAK6iC,OAAOpiC,KAAK1C,GAGzB,SAASA,GACL,IAAI+P,EACJ,MAAM4W,EAAQ1kB,KAAK0kB,QACnB,IACI5W,EAAS9N,KAAKs/B,QAAQvhC,EAAO2mB,GAEjC,MAAOmY,GAEH,YADA78B,KAAK4P,YAAY7L,MAAM84B,GAG3B78B,KAAK8iC,SACL9iC,KAAKgjC,UAAUl1B,EAAQ/P,EAAO2mB,GAElC,UAAUue,EAAKllC,EAAO2mB,GAClB,MAAMmd,EAAkB,IAAI,GAAgB7hC,KAAMjC,EAAO2mB,GACnD9U,EAAc5P,KAAK4P,YACzBA,EAAYyG,IAAIwrB,GAChB,MAAMqB,EAAoBvB,GAAkB3hC,KAAMijC,OAAKviC,OAAWA,EAAWmhC,GACzEqB,IAAsBrB,GACtBjyB,EAAYyG,IAAI6sB,GAGxB,YACIljC,KAAK4iC,cAAe,EACA,IAAhB5iC,KAAK8iC,QAAuC,IAAvB9iC,KAAK6iC,OAAO3/B,QACjClD,KAAK4P,YAAY0uB,WAErBt+B,KAAKs9B,cAET,WAAWwC,EAAYgC,EAAY/B,EAAYgC,EAAYC,GACvDhiC,KAAK4P,YAAYkC,KAAKgwB,GAE1B,eAAeE,GACX,MAAMa,EAAS7iC,KAAK6iC,OACpB7iC,KAAK4xB,OAAOoQ,GACZhiC,KAAK8iC,SACDD,EAAO3/B,OAAS,EAChBlD,KAAK6+B,MAAMgE,EAAOM,SAEG,IAAhBnjC,KAAK8iC,QAAgB9iC,KAAK4iC,cAC/B5iC,KAAK4P,YAAY0uB,YCjFtB,SAAS8E,GAAS5G,GACrB,OAAOA,ECCJ,SAAS6G,GAASf,EAAaC,OAAOC,mBACzC,OAAOJ,GAASgB,GAAUd,GCFvB,SAASgB,KACZ,OAAOD,GAAS,GCFpB,MAUaE,GAVU,MACnB,SAASC,IAIL,OAHApiC,MAAMnE,KAAK+C,MACXA,KAAKo9B,QAAU,0BACfp9B,KAAK3C,KAAO,aACL2C,KAGX,OADAwjC,EAAe9kC,UAAYlB,OAAOY,OAAOgD,MAAM1C,WACxC8kC,GARY,GCUVC,GAVuB,MAChC,SAASC,IAIL,OAHAtiC,MAAMnE,KAAK+C,MACXA,KAAKo9B,QAAU,wBACfp9B,KAAK3C,KAAO,0BACL2C,KAGX,OADA0jC,EAA4BhlC,UAAYlB,OAAOY,OAAOgD,MAAM1C,WACrDglC,GARyB,GCCvB5F,GAAQ,IAAI,GAAWc,GAAcA,EAAWN,YACtD,SAAS,GAAM4D,GAClB,OAAOA,EAEX,SAAwBA,GACpB,OAAO,IAAI,GAAWtD,GAAcsD,EAAUC,SAAS,IAAMvD,EAAWN,aAD5E,CAFsC4D,GAAapE,GCA5C,SAAS6F,GAASlP,GACrB,OAAO,SAAkC+K,GACrC,OAAc,IAAV/K,EACO,KAGA+K,EAAOC,KAAK,IAAI,GAAiBhL,KAIpD,MAAM,GACF,YAAYxsB,GAER,GADAjI,KAAKiI,MAAQA,EACTjI,KAAKiI,MAAQ,EACb,MAAM,IAAIw7B,GAGlB,KAAK7E,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAmBf,EAAY5+B,KAAKiI,SAGxE,MAAM,WAA2B,GAC7B,YAAY2H,EAAa3H,GACrBmY,MAAMxQ,GACN5P,KAAKiI,MAAQA,EACbjI,KAAK4jC,KAAO,IAAI/yB,MAChB7Q,KAAKy0B,MAAQ,EAEjB,MAAM12B,GACF,MAAM6lC,EAAO5jC,KAAK4jC,KACZ37B,EAAQjI,KAAKiI,MACbwsB,EAAQz0B,KAAKy0B,QACfmP,EAAK1gC,OAAS+E,EACd27B,EAAKnjC,KAAK1C,GAIV6lC,EADcnP,EAAQxsB,GACRlK,EAGtB,YACI,MAAM6R,EAAc5P,KAAK4P,YACzB,IAAI6kB,EAAQz0B,KAAKy0B,MACjB,GAAIA,EAAQ,EAAG,CACX,MAAMxsB,EAAQjI,KAAKy0B,OAASz0B,KAAKiI,MAAQjI,KAAKiI,MAAQjI,KAAKy0B,MACrDmP,EAAO5jC,KAAK4jC,KAClB,IAAK,IAAI9mC,EAAI,EAAGA,EAAImL,EAAOnL,IAAK,CAC5B,MAAM+mC,EAAOpP,IAAWxsB,EACxB2H,EAAYkC,KAAK8xB,EAAKC,KAG9Bj0B,EAAY0uB,YCpDb,SAASwF,GAAaC,EAAeC,IACxC,OAAQxE,GACGA,EAAOC,KAAK,IAAIwE,GAAqBF,IAGpD,MAAME,GACF,YAAYF,GACR/jC,KAAK+jC,aAAeA,EAExB,KAAKnF,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAuBf,EAAY5+B,KAAK+jC,gBAG5E,MAAM,WAA+B,GACjC,YAAYn0B,EAAam0B,GACrB3jB,MAAMxQ,GACN5P,KAAK+jC,aAAeA,EACpB/jC,KAAKkkC,UAAW,EAEpB,MAAMnmC,GACFiC,KAAKkkC,UAAW,EAChBlkC,KAAK4P,YAAYkC,KAAK/T,GAE1B,YACI,GAAKiC,KAAKkkC,SAWN,OAAOlkC,KAAK4P,YAAY0uB,WAXR,CAChB,IAAIzB,EACJ,IACIA,EAAM78B,KAAK+jC,eAEf,MAAO14B,GACHwxB,EAAMxxB,EAEVrL,KAAK4P,YAAY7L,MAAM84B,KAOnC,SAASmH,KACL,OAAO,IAAIT,GCzCR,SAASY,GAAer4B,EAAe,MAC1C,OAAQ0zB,GAAWA,EAAOC,KAAK,IAAI2E,GAAuBt4B,IAE9D,MAAMs4B,GACF,YAAYt4B,GACR9L,KAAK8L,aAAeA,EAExB,KAAK8yB,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAyBf,EAAY5+B,KAAK8L,gBAG9E,MAAM,WAAiC,GACnC,YAAY8D,EAAa9D,GACrBsU,MAAMxQ,GACN5P,KAAK8L,aAAeA,EACpB9L,KAAKuX,SAAU,EAEnB,MAAMxZ,GACFiC,KAAKuX,SAAU,EACfvX,KAAK4P,YAAYkC,KAAK/T,GAE1B,YACQiC,KAAKuX,SACLvX,KAAK4P,YAAYkC,KAAK9R,KAAK8L,cAE/B9L,KAAK4P,YAAY0uB,YCvBlB,SAAS+F,GAAW53B,GACvB,OAAO,SAAoC+yB,GACvC,MAAMyB,EAAW,IAAIqD,GAAc73B,GAC7B83B,EAAS/E,EAAOC,KAAKwB,GAC3B,OAAQA,EAASsD,OAASA,GAGlC,MAAMD,GACF,YAAY73B,GACRzM,KAAKyM,SAAWA,EAEpB,KAAKmyB,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAgBf,EAAY5+B,KAAKyM,SAAUzM,KAAKukC,UAGpF,MAAM,WAAwB,GAC1B,YAAY30B,EAAanD,EAAU83B,GAC/BnkB,MAAMxQ,GACN5P,KAAKyM,SAAWA,EAChBzM,KAAKukC,OAASA,EAElB,MAAM1H,GACF,IAAK78B,KAAK0+B,UAAW,CACjB,IAAI5wB,EACJ,IACIA,EAAS9N,KAAKyM,SAASowB,EAAK78B,KAAKukC,QAErC,MAAOC,GAEH,YADApkB,MAAMrc,MAAMygC,GAGhBxkC,KAAKykC,yBACL,MAAM5C,EAAkB,IAAI,GAAgB7hC,UAAMU,OAAWA,GAC7DV,KAAKqW,IAAIwrB,GACT,MAAMqB,EAAoBvB,GAAkB3hC,KAAM8N,OAAQpN,OAAWA,EAAWmhC,GAC5EqB,IAAsBrB,GACtB7hC,KAAKqW,IAAI6sB,KCpClB,SAASwB,GAAKjQ,GACjB,OAAQ+K,GACU,IAAV/K,EACO,KAGA+K,EAAOC,KAAK,IAAI,GAAahL,IAIhD,MAAM,GACF,YAAYxsB,GAER,GADAjI,KAAKiI,MAAQA,EACTjI,KAAKiI,MAAQ,EACb,MAAM,IAAIw7B,GAGlB,KAAK7E,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAef,EAAY5+B,KAAKiI,SAGpE,MAAM,WAAuB,GACzB,YAAY2H,EAAa3H,GACrBmY,MAAMxQ,GACN5P,KAAKiI,MAAQA,EACbjI,KAAKy0B,MAAQ,EAEjB,MAAM12B,GACF,MAAMkK,EAAQjI,KAAKiI,MACbwsB,IAAUz0B,KAAKy0B,MACjBA,GAASxsB,IACTjI,KAAK4P,YAAYkC,KAAK/T,GAClB02B,IAAUxsB,IACVjI,KAAK4P,YAAY0uB,WACjBt+B,KAAKs9B,iBC/Bd,SAASqH,GAAM/E,EAAW9zB,GAC7B,MAAM84B,EAAkBjG,UAAUz7B,QAAU,EAC5C,OAAQs8B,GAAWA,EAAOiD,KAAK7C,EAAY1+B,GAAO,CAACgW,EAAGpa,IAAM8iC,EAAU1oB,EAAGpa,EAAG0iC,IAAW4D,GAAUsB,GAAK,GAAIE,EAAkBT,GAAer4B,GAAgBg4B,GAAa,IAAM,IAAIP,KCL/K,SAASsB,GAAI1D,EAAgBp9B,EAAOu6B,GACvC,OAAO,SAA6BkB,GAChC,OAAOA,EAAOC,KAAK,IAAIqF,GAAW3D,EAAgBp9B,EAAOu6B,KAGjE,MAAMwG,GACF,YAAY3D,EAAgBp9B,EAAOu6B,GAC/Bt+B,KAAKmhC,eAAiBA,EACtBnhC,KAAK+D,MAAQA,EACb/D,KAAKs+B,SAAWA,EAEpB,KAAKM,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAcf,EAAY5+B,KAAKmhC,eAAgBnhC,KAAK+D,MAAO/D,KAAKs+B,YAGpG,MAAM,WAAsB,GACxB,YAAY1uB,EAAaqvB,EAAgBl7B,EAAOu6B,GAC5Cle,MAAMxQ,GACN5P,KAAK+kC,SAAWlE,GAChB7gC,KAAKglC,UAAYnE,GACjB7gC,KAAKilC,aAAepE,GACpB7gC,KAAKglC,UAAYjhC,GAAS88B,GAC1B7gC,KAAKilC,aAAe3G,GAAYuC,GAC5BtE,GAAW0C,IACXj/B,KAAKk/B,SAAWl/B,KAChBA,KAAK+kC,SAAW9F,GAEXA,IACLj/B,KAAKk/B,SAAWD,EAChBj/B,KAAK+kC,SAAW9F,EAAentB,MAAQ+uB,GACvC7gC,KAAKglC,UAAY/F,EAAel7B,OAAS88B,GACzC7gC,KAAKilC,aAAehG,EAAeX,UAAYuC,IAGvD,MAAM9iC,GACF,IACIiC,KAAK+kC,SAAS9nC,KAAK+C,KAAKk/B,SAAUnhC,GAEtC,MAAO8+B,GAEH,YADA78B,KAAK4P,YAAY7L,MAAM84B,GAG3B78B,KAAK4P,YAAYkC,KAAK/T,GAE1B,OAAO8+B,GACH,IACI78B,KAAKglC,UAAU/nC,KAAK+C,KAAKk/B,SAAUrC,GAEvC,MAAOA,GAEH,YADA78B,KAAK4P,YAAY7L,MAAM84B,GAG3B78B,KAAK4P,YAAY7L,MAAM84B,GAE3B,YACI,IACI78B,KAAKilC,aAAahoC,KAAK+C,KAAKk/B,UAEhC,MAAOrC,GAEH,YADA78B,KAAK4P,YAAY7L,MAAM84B,GAG3B,OAAO78B,KAAK4P,YAAY0uB,YC7DhC,MAAM4G,GACF,YAAYtF,EAAWL,EAASC,GAC5Bx/B,KAAK4/B,UAAYA,EACjB5/B,KAAKu/B,QAAUA,EACfv/B,KAAKw/B,OAASA,EAElB,KAAK6B,EAAU7B,GACX,OAAOA,EAAOG,UAAU,IAAI,GAAgB0B,EAAUrhC,KAAK4/B,UAAW5/B,KAAKu/B,QAASv/B,KAAKw/B,UAGjG,MAAM,WAAwB,GAC1B,YAAY5vB,EAAagwB,EAAWL,EAASC,GACzCpf,MAAMxQ,GACN5P,KAAK4/B,UAAYA,EACjB5/B,KAAKu/B,QAAUA,EACfv/B,KAAKw/B,OAASA,EACdx/B,KAAK0kB,MAAQ,EACb1kB,KAAKu/B,QAAUA,GAAWv/B,KAE9B,eAAemlC,GACXnlC,KAAK4P,YAAYkC,KAAKqzB,GACtBnlC,KAAK4P,YAAY0uB,WAErB,MAAMvgC,GACF,IAAI+P,GAAS,EACb,IACIA,EAAS9N,KAAK4/B,UAAU3iC,KAAK+C,KAAKu/B,QAASxhC,EAAOiC,KAAK0kB,QAAS1kB,KAAKw/B,QAEzE,MAAO3C,GAEH,YADA78B,KAAK4P,YAAY7L,MAAM84B,GAGtB/uB,GACD9N,KAAKkgC,gBAAe,GAG5B,YACIlgC,KAAKkgC,gBAAe,ICpCrB,SAASkF,GAAU9F,EAAS+C,GAC/B,MAA8B,mBAAnBA,EACC7C,GAAWA,EAAOiD,KAAK2C,GAAU,CAAC1e,EAAG5pB,IAAM,GAAKwiC,EAAQ5Y,EAAG5pB,IAAI2lC,KAAK52B,GAAI,CAAC8a,EAAG+b,IAAOL,EAAe3b,EAAGC,EAAG7pB,EAAG4lC,OAE/GlD,GAAWA,EAAOC,KAAK,IAAI4F,GAAkB/F,IAEzD,MAAM+F,GACF,YAAY/F,GACRt/B,KAAKs/B,QAAUA,EAEnB,KAAKV,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAoBf,EAAY5+B,KAAKs/B,WAGzE,MAAM,WAA4B,GAC9B,YAAY1vB,EAAa0vB,GACrBlf,MAAMxQ,GACN5P,KAAKs/B,QAAUA,EACft/B,KAAK0kB,MAAQ,EAEjB,MAAM3mB,GACF,IAAI+P,EACJ,MAAM4W,EAAQ1kB,KAAK0kB,QACnB,IACI5W,EAAS9N,KAAKs/B,QAAQvhC,EAAO2mB,GAEjC,MAAO3gB,GAEH,YADA/D,KAAK4P,YAAY7L,MAAMA,GAG3B/D,KAAKgjC,UAAUl1B,EAAQ/P,EAAO2mB,GAElC,UAAU5W,EAAQ/P,EAAO2mB,GACrB,MAAMwe,EAAoBljC,KAAKkjC,kBAC3BA,GACAA,EAAkB5F,cAEtB,MAAMuE,EAAkB,IAAI,GAAgB7hC,KAAMjC,EAAO2mB,GACnD9U,EAAc5P,KAAK4P,YACzBA,EAAYyG,IAAIwrB,GAChB7hC,KAAKkjC,kBAAoBvB,GAAkB3hC,KAAM8N,OAAQpN,OAAWA,EAAWmhC,GAC3E7hC,KAAKkjC,oBAAsBrB,GAC3BjyB,EAAYyG,IAAIrW,KAAKkjC,mBAG7B,YACI,MAAM,kBAAEA,GAAsBljC,KACzBkjC,IAAqBA,EAAkBlG,QACxC5c,MAAM2e,YAEV/+B,KAAKs9B,cAET,eACIt9B,KAAKkjC,kBAAoB,KAE7B,eAAelB,GACShiC,KAAK4P,YACbgiB,OAAOoQ,GACnBhiC,KAAKkjC,kBAAoB,KACrBljC,KAAK0+B,WACLte,MAAM2e,YAGd,WAAWe,EAAYgC,EAAY/B,EAAYgC,EAAYC,GACvDhiC,KAAK4P,YAAYkC,KAAKgwB,ICrEvB,SAASwD,GAAYvnC,GACxB,OAAOA,GAAmC,mBAAnBA,EAAMokC,SCC1B,SAASzP,MAAU6S,GACtB,OAAOjC,IAAAA,CCAJ,YAAe1e,GAClB,IAAIsd,EAAYtd,EAAKA,EAAK1hB,OAAS,GACnC,OAAIoiC,GAAYpD,IACZtd,EAAK4gB,MACEvD,GAAcrd,EAAMsd,ICFpB,IAAI,GAAW/B,GDKLvb,IAPlB,IDAsB2gB,IGDtB,SAASE,MAAarF,GACzB,MAAM8B,EAAY9B,EAAMA,EAAMl9B,OAAS,GACvC,OAAIoiC,GAAYpD,IACZ9B,EAAMoF,MACEhG,GAAW9M,GAAO0N,EAAOZ,EAAQ0C,IAGjC1C,GAAW9M,GAAO0N,EAAOZ,GCCzC,MAAMkG,GACF,YAAYC,EAAaC,EAAMC,GAAU,GACrC7lC,KAAK2lC,YAAcA,EACnB3lC,KAAK4lC,KAAOA,EACZ5lC,KAAK6lC,QAAUA,EAEnB,KAAKjH,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAef,EAAY5+B,KAAK2lC,YAAa3lC,KAAK4lC,KAAM5lC,KAAK6lC,WAGjG,MAAM,WAAuB,GACzB,YAAYj2B,EAAa+1B,EAAaG,EAAOD,GACzCzlB,MAAMxQ,GACN5P,KAAK2lC,YAAcA,EACnB3lC,KAAK8lC,MAAQA,EACb9lC,KAAK6lC,QAAUA,EACf7lC,KAAK0kB,MAAQ,EAEjB,WACI,OAAO1kB,KAAK8lC,MAEhB,SAAS/nC,GACLiC,KAAK6lC,SAAU,EACf7lC,KAAK8lC,MAAQ/nC,EAEjB,MAAMA,GACF,GAAKiC,KAAK6lC,QAKN,OAAO7lC,KAAK+iC,SAAShlC,GAJrBiC,KAAK4lC,KAAO7nC,EACZiC,KAAK4P,YAAYkC,KAAK/T,GAM9B,SAASA,GACL,MAAM2mB,EAAQ1kB,KAAK0kB,QACnB,IAAI5W,EACJ,IACIA,EAAS9N,KAAK2lC,YAAY3lC,KAAK4lC,KAAM7nC,EAAO2mB,GAEhD,MAAOmY,GACH78B,KAAK4P,YAAY7L,MAAM84B,GAE3B78B,KAAK4lC,KAAO93B,EACZ9N,KAAK4P,YAAYkC,KAAKhE,ICrDvB,SAASi4B,GAAUzG,EAAS+C,GAC/B,OAAOD,GAAS9C,EAAS+C,EAAgB,GCAtC,SAAS2D,GAAS76B,GACrB,OAAQq0B,GAAWA,EAAOC,KAAK,IAAIwG,GAAgB96B,IAEvD,MAAM86B,GACF,YAAY96B,GACRnL,KAAKmL,SAAWA,EAEpB,KAAKyzB,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAkBf,EAAY5+B,KAAKmL,YAGvE,MAAM,WAA0B,GAC5B,YAAYyE,EAAazE,GACrBiV,MAAMxQ,GACN5P,KAAKqW,IAAI,IAAI,GAAalL,KCyBlC,MAAM+6B,GACF,YAEA7hB,EAEAxjB,GACIb,KAAKqkB,GAAKA,EACVrkB,KAAKa,IAAMA,GAQnB,MAAMslC,WAAwBD,GAC1B,YAEA7hB,EAEAxjB,EAEAulC,EAAoB,aAEpBC,EAAgB,MACZjmB,MAAMiE,EAAIxjB,GACVb,KAAKomC,kBAAoBA,EACzBpmC,KAAKqmC,cAAgBA,EAGzB,WACI,MAAO,uBAAuBrmC,KAAKqkB,aAAarkB,KAAKa,SAQ7D,MAAMylC,WAAsBJ,GACxB,YAEA7hB,EAEAxjB,EAEA0lC,GACInmB,MAAMiE,EAAIxjB,GACVb,KAAKumC,kBAAoBA,EAG7B,WACI,MAAO,qBAAqBvmC,KAAKqkB,aAAarkB,KAAKa,6BAA6Bb,KAAKumC,uBAW7F,MAAMC,WAAyBN,GAC3B,YAEA7hB,EAEAxjB,EAEA4lC,GACIrmB,MAAMiE,EAAIxjB,GACVb,KAAKymC,OAASA,EAGlB,WACI,MAAO,wBAAwBzmC,KAAKqkB,aAAarkB,KAAKa,SAQ9D,MAAM6lC,WAAwBR,GAC1B,YAEA7hB,EAEAxjB,EAEAkD,GACIqc,MAAMiE,EAAIxjB,GACVb,KAAK+D,MAAQA,EAGjB,WACI,MAAO,uBAAuB/D,KAAKqkB,aAAarkB,KAAKa,gBAAgBb,KAAK+D,UAQlF,MAAM4iC,WAAyBT,GAC3B,YAEA7hB,EAEAxjB,EAEA0lC,EAEAK,GACIxmB,MAAMiE,EAAIxjB,GACVb,KAAKumC,kBAAoBA,EACzBvmC,KAAK4mC,MAAQA,EAGjB,WACI,MAAO,wBAAwB5mC,KAAKqkB,aAAarkB,KAAKa,6BAA6Bb,KAAKumC,8BAA8BvmC,KAAK4mC,UAQnI,MAAMC,WAAyBX,GAC3B,YAEA7hB,EAEAxjB,EAEA0lC,EAEAK,GACIxmB,MAAMiE,EAAIxjB,GACVb,KAAKumC,kBAAoBA,EACzBvmC,KAAK4mC,MAAQA,EAEjB,WACI,MAAO,wBAAwB5mC,KAAKqkB,aAAarkB,KAAKa,6BAA6Bb,KAAKumC,8BAA8BvmC,KAAK4mC,UAQnI,MAAME,WAAuBZ,GACzB,YAEA7hB,EAEAxjB,EAEA0lC,EAEAK,EAEAG,GACI3mB,MAAMiE,EAAIxjB,GACVb,KAAKumC,kBAAoBA,EACzBvmC,KAAK4mC,MAAQA,EACb5mC,KAAK+mC,eAAiBA,EAE1B,WACI,MAAO,sBAAsB/mC,KAAKqkB,aAAarkB,KAAKa,6BAA6Bb,KAAKumC,8BAA8BvmC,KAAK4mC,0BAA0B5mC,KAAK+mC,mBAWhK,MAAMC,WAAqBd,GACvB,YAEA7hB,EAEAxjB,EAEA0lC,EAEAK,GACIxmB,MAAMiE,EAAIxjB,GACVb,KAAKumC,kBAAoBA,EACzBvmC,KAAK4mC,MAAQA,EAEjB,WACI,MAAO,oBAAoB5mC,KAAKqkB,aAAarkB,KAAKa,6BAA6Bb,KAAKumC,8BAA8BvmC,KAAK4mC,UAS/H,MAAMK,WAAmBf,GACrB,YAEA7hB,EAEAxjB,EAEA0lC,EAEAK,GACIxmB,MAAMiE,EAAIxjB,GACVb,KAAKumC,kBAAoBA,EACzBvmC,KAAK4mC,MAAQA,EAEjB,WACI,MAAO,kBAAkB5mC,KAAKqkB,aAAarkB,KAAKa,6BAA6Bb,KAAKumC,8BAA8BvmC,KAAK4mC,UAQ7H,MAAMM,GACF,YAEAC,GACInnC,KAAKmnC,MAAQA,EAEjB,WACI,MAAO,8BAA8BnnC,KAAKmnC,MAAMC,SAQxD,MAAMC,GACF,YAEAF,GACInnC,KAAKmnC,MAAQA,EAEjB,WACI,MAAO,4BAA4BnnC,KAAKmnC,MAAMC,SAWtD,MAAME,GACF,YAEAC,GACIvnC,KAAKunC,SAAWA,EAEpB,WAEI,MAAO,+BADMvnC,KAAKunC,SAASC,aAAexnC,KAAKunC,SAASC,YAAYJ,MAAQ,QAWpF,MAAMK,GACF,YAEAF,GACIvnC,KAAKunC,SAAWA,EAEpB,WAEI,MAAO,6BADMvnC,KAAKunC,SAASC,aAAexnC,KAAKunC,SAASC,YAAYJ,MAAQ,QAYpF,MAAMM,GACF,YAEAH,GACIvnC,KAAKunC,SAAWA,EAEpB,WAEI,MAAO,0BADMvnC,KAAKunC,SAASC,aAAexnC,KAAKunC,SAASC,YAAYJ,MAAQ,QAYpF,MAAMO,GACF,YAEAJ,GACIvnC,KAAKunC,SAAWA,EAEpB,WAEI,MAAO,wBADMvnC,KAAKunC,SAASC,aAAexnC,KAAKunC,SAASC,YAAYJ,MAAQ,QASpF,MAAMQ,GACF,YAEAC,EAEArgC,EAEAsgC,GACI9nC,KAAK6nC,YAAcA,EACnB7nC,KAAKwH,SAAWA,EAChBxH,KAAK8nC,OAASA,EAElB,WAEI,MAAO,mBAAmB9nC,KAAK8nC,uBADnB9nC,KAAKwH,SAAW,GAAGxH,KAAKwH,SAAS,OAAOxH,KAAKwH,SAAS,KAAO,6BAqB3EugC,UAENA,EAAsBvlC,UAAO,SAAuCxE,GAAK,OAAO,IAAKA,GAAK+pC,IAC1FA,EAAsBC,UAAO,EAAA,+BAAyB,CAAErmC,KAAMomC,EAAuB5jC,UAAW,CAAC,CAAC,iBAAkB8jC,MAAO,EAAGC,KAAM,EAAGllC,SAAU,SAAwCmlC,EAAIrsB,GAAgB,EAALqsB,GAChM,EAAA,uBAAiB,EAAG,kBACnBC,WAAY,WAAc,MAAO,CAAC,KAAkBrP,cAAe,UAmB5E,MAAMsP,GACF,YAAYn3B,GACRlR,KAAKkR,OAASA,GAAU,GAE5B,IAAI7T,GACA,OAAOG,OAAOkB,UAAUC,eAAe1B,KAAK+C,KAAKkR,OAAQ7T,GAE7D,IAAIA,GACA,GAAI2C,KAAKsC,IAAIjF,GAAO,CAChB,MAAM6Z,EAAIlX,KAAKkR,OAAO7T,GACtB,OAAOwT,MAAMC,QAAQoG,GAAKA,EAAE,GAAKA,EAErC,OAAO,KAEX,OAAO7Z,GACH,GAAI2C,KAAKsC,IAAIjF,GAAO,CAChB,MAAM6Z,EAAIlX,KAAKkR,OAAO7T,GACtB,OAAOwT,MAAMC,QAAQoG,GAAKA,EAAI,CAACA,GAEnC,MAAO,GAEX,WACI,OAAO1Z,OAAOgN,KAAKxK,KAAKkR,SAUhC,SAASo3B,GAAkBp3B,GACvB,OAAO,IAAIm3B,GAAYn3B,GAG3B,SAASq3B,GAAyBnL,GAC9B,MAAMr5B,EAAQ3C,MAAM,6BAA+Bg8B,GAEnD,OADAr5B,EAAgC,4BAAI,EAC7BA,EAMX,SAASykC,GAAkBC,EAAUC,EAAcvB,GAC/C,MAAMwB,EAAQxB,EAAMC,KAAKrzB,MAAM,KAC/B,GAAI40B,EAAMzlC,OAASulC,EAASvlC,OAExB,OAAO,KAEX,GAAwB,SAApBikC,EAAMyB,YACLF,EAAaG,eAAiBF,EAAMzlC,OAASulC,EAASvlC,QAEvD,OAAO,KAEX,MAAM4lC,EAAY,GAElB,IAAK,IAAIpkB,EAAQ,EAAGA,EAAQikB,EAAMzlC,OAAQwhB,IAAS,CAC/C,MAAMqkB,EAAOJ,EAAMjkB,GACbskB,EAAUP,EAAS/jB,GAEzB,GADoBqkB,EAAK34B,WAAW,KAEhC04B,EAAUC,EAAK58B,UAAU,IAAM68B,OAE9B,GAAID,IAASC,EAAQ5B,KAEtB,OAAO,KAGf,MAAO,CAAE6B,SAAUR,EAASlqB,MAAM,EAAGoqB,EAAMzlC,QAAS4lC,UAAAA,GAUxD,MAAMI,GACF,YAAYC,EAAQtsC,GAChBmD,KAAKmpC,OAASA,EACdnpC,KAAKnD,OAASA,GAGtB,SAASusC,GAAepoC,EAAQqoC,EAAa,IAEzC,IAAK,IAAIvsC,EAAI,EAAGA,EAAIkE,EAAOkC,OAAQpG,IAAK,CACpC,MAAMqqC,EAAQnmC,EAAOlE,GAErBwsC,GAAanC,EADIoC,GAAYF,EAAYlC,KAIjD,SAASmC,GAAanC,EAAOqC,GACzB,IAAKrC,EACD,MAAM,IAAI/lC,MAAM,2CACgBooC,oWAWpC,GAAI34B,MAAMC,QAAQq2B,GACd,MAAM,IAAI/lC,MAAM,mCAAmCooC,iCAEvD,IAAKrC,EAAMsC,YAActC,EAAMuC,WAAavC,EAAMwC,cAC7CxC,EAAMyC,QAjHQ,YAiHEzC,EAAMyC,OACvB,MAAM,IAAIxoC,MAAM,mCAAmCooC,6FAEvD,GAAIrC,EAAM0C,YAAc1C,EAAMuC,SAC1B,MAAM,IAAItoC,MAAM,mCAAmCooC,uDAEvD,GAAIrC,EAAM0C,YAAc1C,EAAMwC,aAC1B,MAAM,IAAIvoC,MAAM,mCAAmCooC,2DAEvD,GAAIrC,EAAMuC,UAAYvC,EAAMwC,aACxB,MAAM,IAAIvoC,MAAM,mCAAmCooC,yDAEvD,GAAIrC,EAAM0C,YAAc1C,EAAMsC,UAC1B,MAAM,IAAIroC,MAAM,mCAAmCooC,wDAEvD,GAAIrC,EAAMC,MAAQD,EAAM2C,QACpB,MAAM,IAAI1oC,MAAM,mCAAmCooC,gDAEvD,QAAyB,IAArBrC,EAAM0C,aAA0B1C,EAAMsC,YAActC,EAAMuC,WAAavC,EAAMwC,aAC7E,MAAM,IAAIvoC,MAAM,mCAAmCooC,8FAEvD,QAAmB,IAAfrC,EAAMC,WAAqC,IAAlBD,EAAM2C,QAC/B,MAAM,IAAI1oC,MAAM,mCAAmCooC,6DAEvD,GAA0B,iBAAfrC,EAAMC,MAA8C,MAAzBD,EAAMC,KAAKr5B,OAAO,GACpD,MAAM,IAAI3M,MAAM,mCAAmCooC,sCAEvD,GAAmB,KAAfrC,EAAMC,WAAoC,IAArBD,EAAM0C,iBAA6C,IAApB1C,EAAMyB,UAE1D,MAAM,IAAIxnC,MAAM,2CAA2CooC,oBAA2BrC,EAAM0C,mIAEhG,QAAwB,IAApB1C,EAAMyB,WAA4C,SAApBzB,EAAMyB,WAA4C,WAApBzB,EAAMyB,UAClE,MAAM,IAAIxnC,MAAM,mCAAmCooC,uDAEnDrC,EAAMuC,UACNN,GAAejC,EAAMuC,SAAUF,GAGvC,SAASD,GAAYF,EAAYU,GAC7B,OAAKA,EAGAV,GAAeU,EAAa3C,KAGxBiC,IAAeU,EAAa3C,KACvBiC,EAAH,KAEDA,GAAcU,EAAa3C,KAC1B2C,EAAa3C,KAGb,GAAGiC,KAAcU,EAAa3C,OAT9B,GAHAiC,EAkBf,SAASW,GAAkBpsC,GACvB,MAAM8rC,EAAW9rC,EAAE8rC,UAAY9rC,EAAE8rC,SAAS79B,IAAIm+B,IACxC7sC,EAAIusC,EAAWlsC,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIvlB,GAAI,CAAE8rC,SAAAA,IAAclsC,OAAO2lB,OAAO,GAAIvlB,GAI3F,OAHKT,EAAEssC,YAAcC,GAAYvsC,EAAEwsC,eAAkBxsC,EAAEysC,QA9KpC,YA8K8CzsC,EAAEysC,SAC/DzsC,EAAEssC,UAAY,IAEXtsC,EAmBX,SAAS8sC,GAAavjB,EAAGC,GAKrB,MAAMC,EAAKppB,OAAOgN,KAAKkc,GACjBG,EAAKrpB,OAAOgN,KAAKmc,GACvB,IAAKC,IAAOC,GAAMD,EAAG1jB,QAAU2jB,EAAG3jB,OAC9B,OAAO,EAEX,IAAI7E,EACJ,IAAK,IAAIvB,EAAI,EAAGA,EAAI8pB,EAAG1jB,OAAQpG,IAE3B,GADAuB,EAAMuoB,EAAG9pB,IACJotC,GAAoBxjB,EAAEroB,GAAMsoB,EAAEtoB,IAC/B,OAAO,EAGf,OAAO,EAKX,SAAS6rC,GAAoBxjB,EAAGC,GAC5B,OAAI9V,MAAMC,QAAQ4V,IAAM7V,MAAMC,QAAQ6V,GAC9BD,EAAExjB,QAAUyjB,EAAEzjB,QAEXwjB,EAAEyjB,MAAMC,GAASzjB,EAAEza,QAAQk+B,IAAU,GAGrC1jB,IAAMC,EAMrB,SAAS0jB,GAAQx4B,GACb,OAAOhB,MAAMnS,UAAUg0B,OAAOrlB,MAAM,GAAIwE,GAK5C,SAAS,GAAK6U,GACV,OAAOA,EAAExjB,OAAS,EAAIwjB,EAAEA,EAAExjB,OAAS,GAAK,KAQ5C,SAAS/C,GAAQ0L,EAAKV,GAClB,IAAK,MAAMV,KAAQoB,EACXA,EAAIlN,eAAe8L,IACnBU,EAASU,EAAIpB,GAAOA,GA0BhC,SAAS6/B,GAAmBvsC,GACxB,OAAI,OAAA,EAAA,sBAAA,CAAcA,GACPA,EAEP,OAAA,EAAA,mBAAA,CAAWA,GAIJ,OAAA,GAAA,KAAA,CAAKsE,QAAQP,QAAQ/D,IAEzB,OAAA,GAAA,GAAA,CAAGA,GAad,SAASwsC,GAAaC,EAAWC,EAAWC,GACxC,OAAIA,EAOR,SAA0BF,EAAWC,GAEjC,OAAOR,GAAaO,EAAWC,GAFnC,CANgCD,EAAUG,YAAaF,EAAUE,cAUjE,SAASC,EAAmBJ,EAAWC,GACnC,IAAKI,GAAUL,EAAU/B,SAAUgC,EAAUhC,UACzC,OAAO,EACX,GAAI+B,EAAUM,mBAAqBL,EAAUK,iBACzC,OAAO,EACX,IAAK,MAAM3tC,KAAKstC,EAAUf,SAAU,CAChC,IAAKc,EAAUd,SAASvsC,GACpB,OAAO,EACX,IAAKytC,EAAmBJ,EAAUd,SAASvsC,GAAIstC,EAAUf,SAASvsC,IAC9D,OAAO,EAEf,OAAO,EAXX,CAT+BqtC,EAAUhe,KAAMie,EAAUje,MAsBzD,SAA6Bge,EAAWC,GAEpC,OAAOjtC,OAAOgN,KAAKigC,GAAWvnC,QAAU1F,OAAOgN,KAAKggC,GAAWtnC,QAC3D1F,OAAOgN,KAAKigC,GAAWN,MAAM9rC,GAAO6rC,GAAoBM,EAAUnsC,GAAMosC,EAAUpsC,KAH1F,CApB+BmsC,EAAUG,YAAaF,EAAUE,cAyBhE,SAASI,EAAqBP,EAAWC,GACrC,OAEJ,SAASO,EAA2BR,EAAWC,EAAWQ,GACtD,GAAIT,EAAU/B,SAASvlC,OAAS+nC,EAAe/nC,OAE3C,QAAK2nC,GADWL,EAAU/B,SAASlqB,MAAM,EAAG0sB,EAAe/nC,QACnC+nC,KAEpBR,EAAU5B,cAIb,GAAI2B,EAAU/B,SAASvlC,SAAW+nC,EAAe/nC,OAAQ,CAC1D,IAAK2nC,GAAUL,EAAU/B,SAAUwC,GAC/B,OAAO,EACX,IAAK,MAAM9tC,KAAKstC,EAAUf,SAAU,CAChC,IAAKc,EAAUd,SAASvsC,GACpB,OAAO,EACX,IAAK4tC,EAAqBP,EAAUd,SAASvsC,GAAIstC,EAAUf,SAASvsC,IAChE,OAAO,EAEf,OAAO,EAEN,CACD,MAAM+tC,EAAUD,EAAe1sB,MAAM,EAAGisB,EAAU/B,SAASvlC,QACrD4O,EAAOm5B,EAAe1sB,MAAMisB,EAAU/B,SAASvlC,QACrD,QAAK2nC,GAAUL,EAAU/B,SAAUyC,MAE9BV,EAAUd,SAAuB,SAE/BsB,EAA2BR,EAAUd,SAAuB,QAAGe,EAAW34B,IA3BzF,CAFsC04B,EAAWC,EAAWA,EAAUhC,UADtE,CAxB6B+B,EAAUhe,KAAMie,EAAUje,MAuFvD,MAAM2e,GAEF,YAEA3e,EAEAme,EAEAS,GACIprC,KAAKwsB,KAAOA,EACZxsB,KAAK2qC,YAAcA,EACnB3qC,KAAKorC,SAAWA,EAEpB,oBAII,OAHKprC,KAAKqrC,iBACNrrC,KAAKqrC,eAAiB/C,GAAkBtoC,KAAK2qC,cAE1C3qC,KAAKqrC,eAGhB,WACI,OAAOC,GAAmBC,UAAUvrC,OAY5C,MAAMwrC,GACF,YAEA/C,EAEAiB,GACI1pC,KAAKyoC,SAAWA,EAChBzoC,KAAK0pC,SAAWA,EAEhB1pC,KAAK4oB,OAAS,KACdzoB,GAAQupC,EAAU,CAACxyB,EAAGu0B,IAAMv0B,EAAE0R,OAAS5oB,MAG3C,cACI,OAAOA,KAAK8qC,iBAAmB,EAGnC,uBACI,OAAOttC,OAAOgN,KAAKxK,KAAK0pC,UAAUxmC,OAGtC,WACI,OAAOwoC,GAAe1rC,OA6B9B,MAAM2rC,GACF,YAEAvE,EAEAwE,GACI5rC,KAAKonC,KAAOA,EACZpnC,KAAK4rC,WAAaA,EAEtB,mBAII,OAHK5rC,KAAK6rC,gBACN7rC,KAAK6rC,cAAgBvD,GAAkBtoC,KAAK4rC,aAEzC5rC,KAAK6rC,cAGhB,WACI,OAAOC,GAAc9rC,OAM7B,SAAS6qC,GAAUkB,EAAIC,GACnB,OAAID,EAAG7oC,SAAW8oC,EAAG9oC,QAEd6oC,EAAG5B,MAAM,CAACzjB,EAAG5pB,IAAM4pB,EAAE0gB,OAAS4E,EAAGlvC,GAAGsqC,MAE/C,SAAS6E,GAAqBjD,EAAS9hC,GACnC,IAAIglC,EAAM,GAWV,OAVA/rC,GAAQ6oC,EAAQU,SAAU,CAACyC,EAAOC,KAzff,YA0fXA,IACAF,EAAMA,EAAIxZ,OAAOxrB,EAAGilC,EAAOC,OAGnCjsC,GAAQ6oC,EAAQU,SAAU,CAACyC,EAAOC,KA9ff,YA+fXA,IACAF,EAAMA,EAAIxZ,OAAOxrB,EAAGilC,EAAOC,OAG5BF,EAcX,MAAMG,IAoBN,MAAMC,GAEF,MAAMzrC,GACF,MAAMjC,EAAI,IAAI2tC,GAAU1rC,GACxB,OAAO,IAAIsqC,GAAQvsC,EAAE4tC,mBAAoB5tC,EAAE6tC,mBAAoB7tC,EAAE8tC,iBAGrE,UAAUC,GAIN,MAAO,GAHS,IAUxB,SAASC,EAAiB5D,EAASxc,GAC/B,IAAKwc,EAAQH,cACT,OAAO6C,GAAe1C,GAE1B,GAAIxc,EAAM,CACN,MAAMqgB,EAAU7D,EAAQU,SAAuB,QAC3CkD,EAAiB5D,EAAQU,SAAuB,SAAG,GACnD,GACEA,EAAW,GAMjB,OALAvpC,GAAQ6oC,EAAQU,SAAU,CAACxyB,EAAGu0B,KAhkBf,YAikBPA,GACA/B,EAASjpC,KAAK,GAAGgrC,KAAKmB,EAAiB11B,GAAG,QAG3CwyB,EAASxmC,OAAS,EAAI,GAAG2pC,KAAWnD,EAAS3+B,KAAK,SAAW8hC,EAEnE,CACD,MAAMnD,EAAWuC,GAAqBjD,EAAS,CAAC9xB,EAAGu0B,IAxkBpC,YAykBPA,EACO,CAACmB,EAAiB5D,EAAQU,SAAuB,SAAG,IAExD,CAAC,GAAG+B,KAAKmB,EAAiB11B,GAAG,OAExC,MAAO,GAAGw0B,GAAe1C,OAAaU,EAAS3+B,KAAK,UAvB5D,CAV6C4hC,EAAKngB,MAAM,KA6FxD,SAA8Btb,GAC1B,MAAM47B,EAAYtvC,OAAOgN,KAAK0G,GAAQrF,IAAKxO,IACvC,MAAMU,EAAQmT,EAAO7T,GACrB,OAAOwT,MAAMC,QAAQ/S,GACjBA,EAAM8N,IAAIqL,GAAK,GAAG61B,GAAe1vC,MAAS0vC,GAAe71B,MAAMnM,KAAK,KACpE,GAAGgiC,GAAe1vC,MAAS0vC,GAAehvC,OAElD,OAAO+uC,EAAU5pC,OAAS,IAAI4pC,EAAU/hC,KAAK,KAAS,GAP1D,CA5F2C4hC,EAAKhC,eACE,iBAAlBgC,EAAKvB,SAAwB,IA+DlD4B,UA/DwEL,EAAKvB,UAAc,MAItG,MAAME,GAAqB,IAAIgB,GAC/B,SAASZ,GAAe1C,GACpB,OAAOA,EAAQP,SAAS58B,IAAIjN,GAAKktC,GAAcltC,IAAImM,KAAK,KAkC5D,SAASkiC,GAAgBpuC,GACrB,OAAOquC,mBAAmBruC,GACrB0D,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KAQ1B,SAASwqC,GAAeluC,GACpB,OAAOouC,GAAgBpuC,GAAG0D,QAAQ,QAAS,KAkB/C,SAAS4qC,GAAiBtuC,GACtB,OAAOouC,GAAgBpuC,GAAG0D,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,QAAS,KAE3F,SAAS6qC,GAAOvuC,GACZ,OAAOwuC,mBAAmBxuC,GAI9B,SAASyuC,GAAYzuC,GACjB,OAAOuuC,GAAOvuC,EAAE0D,QAAQ,MAAO,QAEnC,SAASupC,GAAc1E,GACnB,MAAO,GAAG+F,GAAiB/F,EAAKA,QAELl2B,EAFmCk2B,EAAKwE,WAG5DpuC,OAAOgN,KAAK0G,GACdrF,IAAIxN,GAAO,IAAI8uC,GAAiB9uC,MAAQ8uC,GAAiBj8B,EAAO7S,OAChE0M,KAAK,MAHd,IAA+BmG,EAc/B,MAAMq8B,GAAa,gBACnB,SAASC,GAAcj8B,GACnB,MAAMzC,EAAQyC,EAAIzC,MAAMy+B,IACxB,OAAOz+B,EAAQA,EAAM,GAAK,GAE9B,MAAM2+B,GAAiB,YAMjBC,GAAuB,WAM7B,MAAMnB,GACF,YAAY1rC,GACRb,KAAKa,IAAMA,EACXb,KAAK2tC,UAAY9sC,EAErB,mBAEI,OADAb,KAAK4tC,gBAAgB,KACE,KAAnB5tC,KAAK2tC,WAAoB3tC,KAAK6tC,eAAe,MAAQ7tC,KAAK6tC,eAAe,KAClE,IAAIrC,GAAgB,GAAI,IAG5B,IAAIA,GAAgB,GAAIxrC,KAAK8tC,iBAExC,mBACI,MAAM58B,EAAS,GACf,GAAIlR,KAAK4tC,gBAAgB,KACrB,EAAA,CACI5tC,KAAK+tC,gBAAgB78B,SAChBlR,KAAK4tC,gBAAgB,MAElC,OAAO18B,EAEX,gBACI,OAAOlR,KAAK4tC,gBAAgB,KAAOP,mBAAmBrtC,KAAK2tC,WAAa,KAE5E,gBACI,GAAuB,KAAnB3tC,KAAK2tC,UACL,MAAO,GAEX3tC,KAAK4tC,gBAAgB,KACrB,MAAMnF,EAAW,GAIjB,IAHKzoC,KAAK6tC,eAAe,MACrBpF,EAAShoC,KAAKT,KAAKguC,gBAEhBhuC,KAAK6tC,eAAe,OAAS7tC,KAAK6tC,eAAe,QAAU7tC,KAAK6tC,eAAe,OAClF7tC,KAAKiuC,QAAQ,KACbxF,EAAShoC,KAAKT,KAAKguC,gBAEvB,IAAItE,EAAW,GACX1pC,KAAK6tC,eAAe,QACpB7tC,KAAKiuC,QAAQ,KACbvE,EAAW1pC,KAAKkuC,aAAY,IAEhC,IAAIhC,EAAM,GAOV,OANIlsC,KAAK6tC,eAAe,OACpB3B,EAAMlsC,KAAKkuC,aAAY,KAEvBzF,EAASvlC,OAAS,GAAK1F,OAAOgN,KAAKk/B,GAAUxmC,OAAS,KACtDgpC,EAAkB,QAAI,IAAIV,GAAgB/C,EAAUiB,IAEjDwC,EAIX,eACI,MAAM9E,EAAOoG,GAAcxtC,KAAK2tC,WAChC,GAAa,KAATvG,GAAepnC,KAAK6tC,eAAe,KACnC,MAAM,IAAIzsC,MAAM,mDAAmDpB,KAAK2tC,eAG5E,OADA3tC,KAAKiuC,QAAQ7G,GACN,IAAIuE,GAAWyB,GAAOhG,GAAOpnC,KAAKmuC,qBAE7C,oBACI,MAAMj9B,EAAS,GACf,KAAOlR,KAAK4tC,gBAAgB,MACxB5tC,KAAKouC,WAAWl9B,GAEpB,OAAOA,EAEX,WAAWA,GACP,MAAM7S,EAAMmvC,GAAcxtC,KAAK2tC,WAC/B,IAAKtvC,EACD,OAEJ2B,KAAKiuC,QAAQ5vC,GACb,IAAIN,EAAQ,GACZ,GAAIiC,KAAK4tC,gBAAgB,KAAM,CAC3B,MAAMS,EAAab,GAAcxtC,KAAK2tC,WAClCU,IACAtwC,EAAQswC,EACRruC,KAAKiuC,QAAQlwC,IAGrBmT,EAAOk8B,GAAO/uC,IAAQ+uC,GAAOrvC,GAGjC,gBAAgBmT,GACZ,MAAM7S,EAjGd,SAA0BkT,GACtB,MAAMzC,EAAQyC,EAAIzC,MAAM2+B,IACxB,OAAO3+B,EAAQA,EAAM,GAAK,GAF9B,CAiGqC9O,KAAK2tC,WAClC,IAAKtvC,EACD,OAEJ2B,KAAKiuC,QAAQ5vC,GACb,IAAIN,EAAQ,GACZ,GAAIiC,KAAK4tC,gBAAgB,KAAM,CAC3B,MAAMS,EAlGlB,SAAiC98B,GAC7B,MAAMzC,EAAQyC,EAAIzC,MAAM4+B,IACxB,OAAO5+B,EAAQA,EAAM,GAAK,GAF9B,CAkGuD9O,KAAK2tC,WAC5CU,IACAtwC,EAAQswC,EACRruC,KAAKiuC,QAAQlwC,IAGrB,MAAMuwC,EAAahB,GAAYjvC,GACzBkwC,EAAajB,GAAYvvC,GAC/B,GAAImT,EAAOvS,eAAe2vC,GAAa,CAEnC,IAAIE,EAAat9B,EAAOo9B,GACnBz9B,MAAMC,QAAQ09B,KACfA,EAAa,CAACA,GACdt9B,EAAOo9B,GAAcE,GAEzBA,EAAW/tC,KAAK8tC,QAIhBr9B,EAAOo9B,GAAcC,EAI7B,YAAYE,GACR,MAAMhG,EAAW,GAEjB,IADAzoC,KAAKiuC,QAAQ,MACLjuC,KAAK4tC,gBAAgB,MAAQ5tC,KAAK2tC,UAAUzqC,OAAS,GAAG,CAC5D,MAAMkkC,EAAOoG,GAAcxtC,KAAK2tC,WAC1B77B,EAAO9R,KAAK2tC,UAAUvG,EAAKlkC,QAGjC,GAAa,MAAT4O,GAAyB,MAATA,GAAyB,MAATA,EAChC,MAAM,IAAI1Q,MAAM,qBAAqBpB,KAAKa,QAE9C,IAAI6tC,OAAahuC,EACb0mC,EAAKl7B,QAAQ,MAAQ,GACrBwiC,EAAatH,EAAKh7B,OAAO,EAAGg7B,EAAKl7B,QAAQ,MACzClM,KAAKiuC,QAAQS,GACb1uC,KAAKiuC,QAAQ,MAERQ,IACLC,EA3yBO,WA6yBX,MAAMhF,EAAW1pC,KAAK8tC,gBACtBrF,EAASiG,GAA+C,IAAjClxC,OAAOgN,KAAKk/B,GAAUxmC,OAAewmC,EAAuB,QAC/E,IAAI8B,GAAgB,GAAI9B,GAC5B1pC,KAAK4tC,gBAAgB,MAEzB,OAAOnF,EAEX,eAAel3B,GACX,OAAOvR,KAAK2tC,UAAUv9B,WAAWmB,GAGrC,gBAAgBA,GACZ,QAAIvR,KAAK6tC,eAAet8B,KACpBvR,KAAK2tC,UAAY3tC,KAAK2tC,UAAUxhC,UAAUoF,EAAIrO,SACvC,GAIf,QAAQqO,GACJ,IAAKvR,KAAK4tC,gBAAgBr8B,GACtB,MAAM,IAAInQ,MAAM,aAAamQ,QAYzC,MAAMo9B,GACF,YAAYniB,GACRxsB,KAAK4uC,MAAQpiB,EAEjB,WACI,OAAOxsB,KAAK4uC,MAAM7wC,MAKtB,OAAOC,GACH,MAAMY,EAAIoB,KAAK6uC,aAAa7wC,GAC5B,OAAOY,EAAEsE,OAAS,EAAItE,EAAEA,EAAEsE,OAAS,GAAK,KAK5C,SAASlF,GACL,MAAMO,EAAIuwC,GAAS9wC,EAAGgC,KAAK4uC,OAC3B,OAAOrwC,EAAIA,EAAEmrC,SAAS79B,IAAI7N,GAAKA,EAAED,OAAS,GAK9C,WAAWC,GACP,MAAMO,EAAIuwC,GAAS9wC,EAAGgC,KAAK4uC,OAC3B,OAAOrwC,GAAKA,EAAEmrC,SAASxmC,OAAS,EAAI3E,EAAEmrC,SAAS,GAAG3rC,MAAQ,KAK9D,SAASC,GACL,MAAMY,EAAImwC,GAAS/wC,EAAGgC,KAAK4uC,OAC3B,OAAIhwC,EAAEsE,OAAS,EACJ,GACDtE,EAAEA,EAAEsE,OAAS,GAAGwmC,SAAS79B,IAAI1O,GAAKA,EAAEY,OACrCmD,OAAO8tC,GAAMA,IAAOhxC,GAKjC,aAAaA,GACT,OAAO+wC,GAAS/wC,EAAGgC,KAAK4uC,OAAO/iC,IAAIhN,GAAKA,EAAEd,QAIlD,SAAS+wC,GAAS/wC,EAAO4U,GACrB,GAAI5U,IAAU4U,EAAK5U,MACf,OAAO4U,EACX,IAAK,MAAMw5B,KAASx5B,EAAK+2B,SAAU,CAC/B,MAAM/2B,EAAOm8B,GAAS/wC,EAAOouC,GAC7B,GAAIx5B,EACA,OAAOA,EAEf,OAAO,KAGX,SAASo8B,GAAShxC,EAAO4U,GACrB,GAAI5U,IAAU4U,EAAK5U,MACf,MAAO,CAAC4U,GACZ,IAAK,MAAMw5B,KAASx5B,EAAK+2B,SAAU,CAC/B,MAAMtC,EAAO2H,GAAShxC,EAAOouC,GAC7B,GAAI/E,EAAKlkC,OAEL,OADAkkC,EAAK6H,QAAQt8B,GACNy0B,EAGf,MAAO,GAEX,MAAM8H,GACF,YAAYnxC,EAAO2rC,GACf1pC,KAAKjC,MAAQA,EACbiC,KAAK0pC,SAAWA,EAEpB,WACI,MAAO,YAAY1pC,KAAKjC,UAIhC,SAASoxC,GAAkBx8B,GACvB,MAAM9G,EAAM,GAIZ,OAHI8G,GACAA,EAAK+2B,SAASvpC,QAAQgsC,GAAStgC,EAAIsgC,EAAMpuC,MAAM6rC,QAAUuC,GAEtDtgC,EAuCX,MAAMujC,WAAoBT,GAEtB,YAAYniB,EAEZ+a,GACInnB,MAAMoM,GACNxsB,KAAKunC,SAAWA,EAChB8H,GAAervC,KAAMwsB,GAEzB,WACI,OAAOxsB,KAAKunC,SAAS/9B,YAG7B,SAAS8lC,GAAiBC,EAASC,GAC/B,MAAMjI,EAUV,SAAkCgI,EAASC,GACvC,MAIMC,EAAY,IAAIC,GAAuB,GAJzB,GAEK,GACR,GAFC,GAl+BC,UAq+BkGF,EAAe,KAAMD,EAAQ/iB,MAAO,EAAG,IAC5J,OAAO,IAAImjB,GAAoB,GAAI,IAAIT,GAASO,EAAW,KAN/D,CAV8CF,EAASC,GAC7CI,EAAW,IAAI,GAAA,gBAAgB,CAAC,IAAIjE,GAAW,GAAI,MACnDkE,EAAc,IAAI,GAAA,gBAAgB,IAClCC,EAAY,IAAI,GAAA,gBAAgB,IAChCC,EAAmB,IAAI,GAAA,gBAAgB,IACvC3E,EAAW,IAAI,GAAA,gBAAgB,IAC/BqE,EAAY,IAAI,GAAeG,EAAUC,EAAaE,EAAkB3E,EAAU0E,EA59BrE,UA49BgGN,EAAejI,EAAS/a,MAE3I,OADAijB,EAAUlI,SAAWA,EAAS/a,KACvB,IAAI4iB,GAAY,IAAIF,GAASO,EAAW,IAAKlI,GAoBxD,MAAM,GAEF,YAEA1mC,EAEAqQ,EAEAy5B,EAEAS,EAEAz/B,EAEAi+B,EAGAH,EAAWuG,GACPhwC,KAAKa,IAAMA,EACXb,KAAKkR,OAASA,EACdlR,KAAK2qC,YAAcA,EACnB3qC,KAAKorC,SAAWA,EAChBprC,KAAK2L,KAAOA,EACZ3L,KAAK4pC,OAASA,EACd5pC,KAAKypC,UAAYA,EACjBzpC,KAAKiwC,gBAAkBD,EAG3B,kBACI,OAAOhwC,KAAKiwC,gBAAgBzI,YAGhC,WACI,OAAOxnC,KAAKkwC,aAAa1jB,KAG7B,aACI,OAAOxsB,KAAKkwC,aAAatnB,OAAO5oB,MAGpC,iBACI,OAAOA,KAAKkwC,aAAaC,WAAWnwC,MAGxC,eACI,OAAOA,KAAKkwC,aAAaxG,SAAS1pC,MAGtC,mBACI,OAAOA,KAAKkwC,aAAarB,aAAa7uC,MAO1C,eAII,OAHKA,KAAKowC,YACNpwC,KAAKowC,UAAYpwC,KAAKkR,OAAOuxB,KAAK52B,GAAKjN,GAAM0pC,GAAkB1pC,MAE5DoB,KAAKowC,UAMhB,oBAKI,OAJKpwC,KAAKqrC,iBACNrrC,KAAKqrC,eACDrrC,KAAK2qC,YAAYlI,KAAK52B,GAAKjN,GAAM0pC,GAAkB1pC,MAEpDoB,KAAKqrC,eAEhB,WACI,OAAOrrC,KAAKunC,SAAWvnC,KAAKunC,SAAS/9B,WAAa,UAAUxJ,KAAKiwC,oBAQzE,SAASI,GAA2BlJ,EAAOmJ,EAA4B,aACnE,MAAMzB,EAAe1H,EAAM0H,aAC3B,IAAI0B,EAAyB,EAC7B,GAAkC,WAA9BD,EAEA,IADAC,EAAyB1B,EAAa3rC,OAAS,EACxCqtC,GAA0B,GAAG,CAChC,MAAMrF,EAAU2D,EAAa0B,GACvB3nB,EAASimB,EAAa0B,EAAyB,GAErD,GAAIrF,EAAQ1D,aAA4C,KAA7B0D,EAAQ1D,YAAYJ,KAC3CmJ,QAGC,CAAA,GAAK3nB,EAAO6gB,UAIb,MAHA8G,KAOZ,OAGJ,SAA0B1B,GACtB,OAAOA,EAAatmC,OAAO,CAAC2jC,EAAKsE,KAAAA,CAIpBt/B,OAHM1T,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI+oB,EAAIh7B,QAASs/B,EAAKt/B,QAGhDvF,KAFJnO,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI+oB,EAAIvgC,MAAO6kC,EAAK7kC,MAEtC7J,QADPtE,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI+oB,EAAIpqC,SAAU0uC,EAAKC,iBAEpE,CAAEv/B,OAAQ,GAAIvF,KAAM,GAAI7J,QAAS,KANxC,CAH4B+sC,EAAatwB,MAAMgyB,IA+B/C,MAAMb,GAEF,YAEA7uC,EAEAqQ,EAEAy5B,EAEAS,EAEAz/B,EAEAi+B,EAEAH,EAAWjC,EAAakJ,EAAYC,EAAe7uC,GAC/C9B,KAAKa,IAAMA,EACXb,KAAKkR,OAASA,EACdlR,KAAK2qC,YAAcA,EACnB3qC,KAAKorC,SAAWA,EAChBprC,KAAK2L,KAAOA,EACZ3L,KAAK4pC,OAASA,EACd5pC,KAAKypC,UAAYA,EACjBzpC,KAAKwnC,YAAcA,EACnBxnC,KAAK4wC,YAAcF,EACnB1wC,KAAK6wC,eAAiBF,EACtB3wC,KAAK8wC,SAAWhvC,EAGpB,WACI,OAAO9B,KAAKkwC,aAAa1jB,KAG7B,aACI,OAAOxsB,KAAKkwC,aAAatnB,OAAO5oB,MAGpC,iBACI,OAAOA,KAAKkwC,aAAaC,WAAWnwC,MAGxC,eACI,OAAOA,KAAKkwC,aAAaxG,SAAS1pC,MAGtC,mBACI,OAAOA,KAAKkwC,aAAarB,aAAa7uC,MAE1C,eAII,OAHKA,KAAKowC,YACNpwC,KAAKowC,UAAY9H,GAAkBtoC,KAAKkR,SAErClR,KAAKowC,UAEhB,oBAII,OAHKpwC,KAAKqrC,iBACNrrC,KAAKqrC,eAAiB/C,GAAkBtoC,KAAK2qC,cAE1C3qC,KAAKqrC,eAEhB,WAGI,MAAO,cAFKrrC,KAAKa,IAAIgL,IAAIm9B,GAAWA,EAAQx/B,YAAYuB,KAAK,gBAC7C/K,KAAKwnC,YAAcxnC,KAAKwnC,YAAYJ,KAAO,QA+BnE,MAAMuI,WAA4BhB,GAE9B,YAEA9tC,EAAK2rB,GACDpM,MAAMoM,GACNxsB,KAAKa,IAAMA,EACXwuC,GAAervC,KAAMwsB,GAEzB,WACI,OAAOukB,GAAc/wC,KAAK4uC,QAGlC,SAASS,GAAezI,EAAOj0B,GAC3BA,EAAK5U,MAAMmyC,aAAetJ,EAC1Bj0B,EAAK+2B,SAASvpC,QAAQhD,GAAKkyC,GAAezI,EAAOzpC,IAErD,SAAS4zC,GAAcp+B,GACnB,MAAMxV,EAAIwV,EAAK+2B,SAASxmC,OAAS,EAAI,MAAMyP,EAAK+2B,SAAS79B,IAAIklC,IAAehmC,KAAK,WAAa,GAC9F,MAAO,GAAG4H,EAAK5U,QAAQZ,IAO3B,SAAS6zC,GAAsB7J,GAC3B,GAAIA,EAAMI,SAAU,CAChB,MAAMzR,EAAkBqR,EAAMI,SACxB0J,EAAe9J,EAAM8I,gBAC3B9I,EAAMI,SAAW0J,EACZhH,GAAanU,EAAgB6U,YAAasG,EAAatG,cACxDxD,EAAMwD,YAAY74B,KAAKm/B,EAAatG,aAEpC7U,EAAgBsV,WAAa6F,EAAa7F,UAC1CjE,EAAMiE,SAASt5B,KAAKm/B,EAAa7F,UAEhCnB,GAAanU,EAAgB5kB,OAAQ+/B,EAAa//B,SACnDi2B,EAAMj2B,OAAOY,KAAKm/B,EAAa//B,QAjkC3C,SAA4BwV,EAAGC,GAC3B,GAAID,EAAExjB,SAAWyjB,EAAEzjB,OACf,OAAO,EACX,IAAK,IAAIpG,EAAI,EAAGA,EAAI4pB,EAAExjB,SAAUpG,EAC5B,IAAKmtC,GAAavjB,EAAE5pB,GAAI6pB,EAAE7pB,IACtB,OAAO,EAEf,OAAO,EAPX,CAmkCgCg5B,EAAgBj1B,IAAKowC,EAAapwC,MACtDsmC,EAAMtmC,IAAIiR,KAAKm/B,EAAapwC,KAE3BopC,GAAanU,EAAgBnqB,KAAMslC,EAAatlC,OACjDw7B,EAAMx7B,KAAKmG,KAAKm/B,EAAatlC,WAIjCw7B,EAAMI,SAAWJ,EAAM8I,gBAEvB9I,EAAMx7B,KAAKmG,KAAKq1B,EAAM8I,gBAAgBtkC,MAG9C,SAASulC,GAA0BxqB,EAAGC,GA5xBtC,IAAuBolB,EAAIC,EA+xBvB,OAFuB/B,GAAavjB,EAAExV,OAAQyV,EAAEzV,SA5xBzC25B,GADYkB,EA6xBsDrlB,EAAE7lB,IA7xBpDmrC,EA6xByDrlB,EAAE9lB,MA5xBtDkrC,EAAG5B,MAAM,CAACzjB,EAAG5pB,IAAMmtC,GAAavjB,EAAEklB,WAAYI,EAAGlvC,GAAG8uC,iBA6xBvDllB,EAAEkC,SAAYjC,EAAEiC,WAEnClC,EAAEkC,QAAUsoB,GAA0BxqB,EAAEkC,OAAQjC,EAAEiC,SAoF5D,SAASuoB,GAAenlC,GACpB,MAA0B,iBAAZA,GAAmC,MAAXA,IAAoBA,EAAQolC,UAAYplC,EAAQqlC,YAE1F,SAAS,GAAKC,EAAiBC,EAAiBhC,EAAS5E,EAAaS,GAClE,IAAIoG,EAAK,GAMT,OALI7G,GACAxqC,GAAQwqC,EAAa,CAAC5sC,EAAOV,KACzBm0C,EAAGn0C,GAAQwT,MAAMC,QAAQ/S,GAASA,EAAM8N,IAAKqL,GAAM,GAAGA,GAAO,GAAGnZ,IAI7D,IAAIotC,GADXoE,EAAQ/iB,OAAS8kB,EACEC,EAI3B,SAASE,EAAevG,EAASwG,EAAYC,GACzC,MAAMjI,EAAW,GASjB,OARAvpC,GAAQ+qC,EAAQxB,SAAU,CAACvsC,EAAGuxC,KAEtBhF,EAASgF,GADTvxC,IAAMu0C,EACiBC,EAGAF,EAAet0C,EAAGu0C,EAAYC,KAGtD,IAAInG,GAAgBN,EAAQzC,SAAUiB,GAVjD,CAFsC6F,EAAQ/iB,KAAM8kB,EAAiBC,GAFzBC,EAAIpG,GAgBhD,MAAMwG,GACF,YAAYC,EAAYC,EAAoBC,GAIxC,GAHA/xC,KAAK6xC,WAAaA,EAClB7xC,KAAK8xC,mBAAqBA,EAC1B9xC,KAAK+xC,SAAWA,EACZF,GAAcE,EAAS7uC,OAAS,GAAKiuC,GAAeY,EAAS,IAC7D,MAAM,IAAI3wC,MAAM,8CAEpB,MAAM4wC,EAAgBD,EAAShxC,KAAK5D,GAAkB,iBAANA,GAAuB,MAALA,GAAaA,EAAEi0C,SACjF,GAAIY,GAAiBA,IAAkB,GAAKD,GACxC,MAAM,IAAI3wC,MAAM,2CAGxB,SACI,OAAOpB,KAAK6xC,YAAuC,IAAzB7xC,KAAK+xC,SAAS7uC,QAAoC,KAApBlD,KAAK+xC,SAAS,IA+C9E,MAAME,GACF,YAAYvJ,EAAcwJ,EAAiBxtB,GACvC1kB,KAAK0oC,aAAeA,EACpB1oC,KAAKkyC,gBAAkBA,EACvBlyC,KAAK0kB,MAAQA,GAiCrB,SAASytB,GAAQnmC,GACb,MAAuB,iBAAZA,GAAmC,MAAXA,GAAmBA,EAAQolC,QACnDplC,EAAQolC,QAAsB,QAElC,GAAGplC,EAQd,SAASomC,GAAmB1J,EAAcl5B,EAAYuiC,GAIlD,GAHKrJ,IACDA,EAAe,IAAI8C,GAAgB,GAAI,KAEN,IAAjC9C,EAAaD,SAASvlC,QAAgBwlC,EAAaG,cACnD,OAAOwJ,GAA2B3J,EAAcl5B,EAAYuiC,GAEhE,MAAM70C,EAyCV,SAAsBwrC,EAAcl5B,EAAYuiC,GAC5C,IAAIO,EAAsB,EACtBC,EAAmB/iC,EACvB,MAAMgjC,EAAU,CAAE1jC,OAAO,EAAO2jC,UAAW,EAAGC,aAAc,GAC5D,KAAOH,EAAmB7J,EAAaD,SAASvlC,QAAQ,CACpD,GAAIovC,GAAuBP,EAAS7uC,OAChC,OAAOsvC,EACX,MAAMpL,EAAOsB,EAAaD,SAAS8J,GAC7B/B,EAAO2B,GAAQJ,EAASO,IACxBxgC,EAAOwgC,EAAsBP,EAAS7uC,OAAS,EAAI6uC,EAASO,EAAsB,GAAK,KAC7F,GAAIC,EAAmB,QAAc7xC,IAAT8vC,EACxB,MACJ,GAAIA,GAAQ1+B,GAAyB,iBAATA,QAAuCpR,IAAjBoR,EAAKs/B,QAAuB,CAC1E,IAAKuB,GAAQnC,EAAM1+B,EAAMs1B,GACrB,OAAOoL,EACXF,GAAuB,MAEtB,CACD,IAAKK,GAAQnC,EAAM,GAAIpJ,GACnB,OAAOoL,EACXF,IAEJC,IAEJ,MAAO,CAAEzjC,OAAO,EAAM2jC,UAAWF,EAAkBG,aAAcJ,GAxBrE,CAzC2B5J,EAAcl5B,EAAYuiC,GAC3Ca,EAAiBb,EAASxzB,MAAMrhB,EAAEw1C,cACxC,GAAIx1C,EAAE4R,OAAS5R,EAAEu1C,UAAY/J,EAAaD,SAASvlC,OAAQ,CACvD,MAAM2vC,EAAI,IAAIrH,GAAgB9C,EAAaD,SAASlqB,MAAM,EAAGrhB,EAAEu1C,WAAY,IAG3E,OAFAI,EAAEnJ,SAAuB,QACrB,IAAI8B,GAAgB9C,EAAaD,SAASlqB,MAAMrhB,EAAEu1C,WAAY/J,EAAagB,UACxE2I,GAA2BQ,EAAG,EAAGD,GAEvC,OAAI11C,EAAE4R,OAAmC,IAA1B8jC,EAAe1vC,OACxB,IAAIsoC,GAAgB9C,EAAaD,SAAU,IAE7CvrC,EAAE4R,QAAU45B,EAAaG,cACvBiK,GAAsBpK,EAAcl5B,EAAYuiC,GAElD70C,EAAE4R,MACAujC,GAA2B3J,EAAc,EAAGkK,GAG5CE,GAAsBpK,EAAcl5B,EAAYuiC,GAG/D,SAASM,GAA2B3J,EAAcl5B,EAAYuiC,GAC1D,GAAwB,IAApBA,EAAS7uC,OACT,OAAO,IAAIsoC,GAAgB9C,EAAaD,SAAU,IAEjD,CACD,MAAM2I,EAvCd,SAAoBW,GAChB,MAA2B,iBAAhBA,EAAS,IAAmC,OAAhBA,EAAS,IAAeA,EAAS,GAAGX,QAChEW,EAAS,GAAGX,QAEhB,CAAE,QAAkBW,GAJ/B,CAuCmCA,GACrBrI,EAAW,GAWjB,OAVAvpC,GAAQixC,EAAS,CAACW,EAAUnI,KACP,OAAbmI,IACArI,EAASE,GAAUwI,GAAmB1J,EAAagB,SAASE,GAASp6B,EAAYuiC,MAGzF5xC,GAAQuoC,EAAagB,SAAU,CAACyC,EAAOC,UACN1rC,IAAzB0wC,EAAQhF,KACR1C,EAAS0C,GAAeD,KAGzB,IAAIX,GAAgB9C,EAAaD,SAAUiB,IA6B1D,SAASoJ,GAAsBpK,EAAcl5B,EAAYuiC,GACrD,MAAMgB,EAAQrK,EAAaD,SAASlqB,MAAM,EAAG/O,GAC7C,IAAI1S,EAAI,EACR,KAAOA,EAAIi1C,EAAS7uC,QAAQ,CACxB,GAA2B,iBAAhB6uC,EAASj1C,IAAmC,OAAhBi1C,EAASj1C,SACpB4D,IAAxBqxC,EAASj1C,GAAGs0C,QAAuB,CACnC,MAAM1H,EAAWsJ,GAAyBjB,EAASj1C,GAAGs0C,SACtD,OAAO,IAAI5F,GAAgBuH,EAAOrJ,GAGtC,GAAU,IAAN5sC,GAAWq0C,GAAeY,EAAS,IAAK,CAExCgB,EAAMtyC,KAAK,IAAIkrC,GADLjD,EAAaD,SAASj5B,GACJ43B,KAAM2K,EAAS,KAC3Cj1C,IACA,SAEJ,MAAM0zC,EAAO2B,GAAQJ,EAASj1C,IACxBgV,EAAQhV,EAAIi1C,EAAS7uC,OAAS,EAAK6uC,EAASj1C,EAAI,GAAK,KACvD0zC,GAAQ1+B,GAAQq/B,GAAer/B,IAC/BihC,EAAMtyC,KAAK,IAAIkrC,GAAW6E,EAAMyC,GAAUnhC,KAC1ChV,GAAK,IAGLi2C,EAAMtyC,KAAK,IAAIkrC,GAAW6E,EAAM,KAChC1zC,KAGR,OAAO,IAAI0uC,GAAgBuH,EAAO,IAEtC,SAASC,GAAyB5B,GAC9B,MAAM1H,EAAW,GAMjB,OALAvpC,GAAQixC,EAAS,CAACW,EAAUnI,KACP,OAAbmI,IACArI,EAASE,GAAUkJ,GAAsB,IAAItH,GAAgB,GAAI,IAAK,EAAGuG,MAG1ErI,EAEX,SAASuJ,GAAU/hC,GACf,MAAMg7B,EAAM,GAEZ,OADA/rC,GAAQ+Q,EAAQ,CAACgG,EAAGu0B,IAAMS,EAAIT,GAAK,GAAGv0B,GAC/Bg1B,EAEX,SAASyG,GAAQvL,EAAMl2B,EAAQ83B,GAC3B,OAAO5B,GAAQ4B,EAAQ5B,MAAQ6C,GAAa/4B,EAAQ83B,EAAQ4C,YAehE,MAAMsH,GACF,YAAYC,EAAoBC,EAAaC,EAAWC,GACpDtzC,KAAKmzC,mBAAqBA,EAC1BnzC,KAAKozC,YAAcA,EACnBpzC,KAAKqzC,UAAYA,EACjBrzC,KAAKszC,aAAeA,EAExB,SAASC,GACL,MAAMC,EAAaxzC,KAAKozC,YAAYxE,MAC9B6E,EAAWzzC,KAAKqzC,UAAYrzC,KAAKqzC,UAAUzE,MAAQ,KACzD5uC,KAAK0zC,sBAAsBF,EAAYC,EAAUF,GACjDvC,GAAsBhxC,KAAKozC,YAAY5mB,MACvCxsB,KAAK2zC,oBAAoBH,EAAYC,EAAUF,GAGnD,sBAAsBK,EAAYC,EAAUC,GACxC,MAAMpK,EAAWyF,GAAkB0E,GAEnCD,EAAWlK,SAASvpC,QAAQ4zC,IACxB,MAAMC,EAAkBD,EAAYh2C,MAAM6rC,OAC1C5pC,KAAKi0C,iBAAiBF,EAAarK,EAASsK,GAAkBF,UACvDpK,EAASsK,KAGpB7zC,GAAQupC,EAAU,CAACxyB,EAAGg9B,KAClBl0C,KAAKm0C,8BAA8Bj9B,EAAG48B,KAG9C,iBAAiBF,EAAYC,EAAU72B,GACnC,MAAMo3B,EAASR,EAAW71C,MACpByyC,EAAOqD,EAAWA,EAAS91C,MAAQ,KACzC,GAAIq2C,IAAW5D,EAEX,GAAI4D,EAAO3K,UAAW,CAElB,MAAM72B,EAAUoK,EAAcq3B,WAAWD,EAAOxK,QAC5Ch3B,GACA5S,KAAK0zC,sBAAsBE,EAAYC,EAAUjhC,EAAQ82B,eAK7D1pC,KAAK0zC,sBAAsBE,EAAYC,EAAU72B,QAIjDwzB,GAEAxwC,KAAKm0C,8BAA8BN,EAAU72B,GAIzD,8BAA8BmqB,EAAOoM,GAC7BvzC,KAAKmzC,mBAAmBmB,aAAanN,EAAMppC,MAAMwpC,UACjDvnC,KAAKu0C,2BAA2BpN,EAAOoM,GAGvCvzC,KAAKw0C,yBAAyBrN,EAAOoM,GAG7C,2BAA2BpM,EAAOoM,GAC9B,MAAM3gC,EAAU2gC,EAAec,WAAWlN,EAAMppC,MAAM6rC,QACtD,GAAIh3B,GAAWA,EAAQg3B,OAAQ,CAC3B,MAAM6K,EAAe7hC,EAAQg3B,OAAO8K,SAC9BZ,EAAWlhC,EAAQ82B,SAASiL,sBAClC30C,KAAKmzC,mBAAmByB,MAAMzN,EAAMppC,MAAMwpC,SAAU,CAAEkN,aAAAA,EAActN,MAAAA,EAAO2M,SAAAA,KAGnF,yBAAyB3M,EAAOoM,GAC5B,MAAM3gC,EAAU2gC,EAAec,WAAWlN,EAAMppC,MAAM6rC,QACtD,GAAIh3B,EAAS,CACT,MAAM82B,EAAWyF,GAAkBhI,GAC7B2M,EAAW3M,EAAMppC,MAAM0rC,UAAY72B,EAAQ82B,SAAW6J,EAC5DpzC,GAAQupC,EAAU,CAACxyB,EAAGu0B,IAAMzrC,KAAKm0C,8BAA8Bj9B,EAAG48B,IAC9DlhC,EAAQg3B,SAERh3B,EAAQg3B,OAAOiL,aAEfjiC,EAAQ82B,SAASiL,wBAI7B,oBAAoBf,EAAYC,EAAUC,GACtC,MAAMpK,EAAWyF,GAAkB0E,GACnCD,EAAWlK,SAASvpC,QAAQhD,IACxB6C,KAAK80C,eAAe33C,EAAGusC,EAASvsC,EAAEY,MAAM6rC,QAASkK,GACjD9zC,KAAKszC,aAAa,IAAI3L,GAAcxqC,EAAEY,MAAMwpC,aAE5CqM,EAAWlK,SAASxmC,QACpBlD,KAAKszC,aAAa,IAAI7L,GAAmBmM,EAAW71C,MAAMwpC,WAGlE,eAAeqM,EAAYC,EAAUN,GACjC,MAAMa,EAASR,EAAW71C,MACpByyC,EAAOqD,EAAWA,EAAS91C,MAAQ,KAGzC,GAFAizC,GAAsBoD,GAElBA,IAAW5D,EACX,GAAI4D,EAAO3K,UAAW,CAElB,MAAM72B,EAAU2gC,EAAewB,mBAAmBX,EAAOxK,QACzD5pC,KAAK2zC,oBAAoBC,EAAYC,EAAUjhC,EAAQ82B,eAIvD1pC,KAAK2zC,oBAAoBC,EAAYC,EAAUN,QAInD,GAAIa,EAAO3K,UAAW,CAElB,MAAM72B,EAAU2gC,EAAewB,mBAAmBX,EAAOxK,QACzD,GAAI5pC,KAAKmzC,mBAAmB6B,aAAaZ,EAAO7M,UAAW,CACvD,MAAM0N,EAASj1C,KAAKmzC,mBAAmB+B,SAASd,EAAO7M,UACvDvnC,KAAKmzC,mBAAmByB,MAAMR,EAAO7M,SAAU,MAC/C30B,EAAQ82B,SAASyL,mBAAmBF,EAAOnB,UAC3ClhC,EAAQwiC,UAAYH,EAAOR,aAC3B7hC,EAAQu0B,MAAQ8N,EAAO9N,MAAMppC,MACzB6U,EAAQg3B,QAGRh3B,EAAQg3B,OAAOyL,OAAOJ,EAAOR,aAAcQ,EAAO9N,MAAMppC,OAE5Du3C,GAAwCL,EAAO9N,WAE9C,CACD,MAAMnmC,EAwB1B,SAA4BumC,GACxB,IAAK,IAAI1oC,EAAI0oC,EAAS3e,OAAQ/pB,EAAGA,EAAIA,EAAE+pB,OAAQ,CAC3C,MAAMue,EAAQtoC,EAAE2oC,YAChB,GAAIL,GAASA,EAAMoO,cACf,OAAOpO,EAAMoO,cACjB,GAAIpO,GAASA,EAAMsC,UACf,OAAO,KAEf,OAAO,KARX,CAxBsD2K,EAAO7M,UACnCiO,EAAqBx0C,EAASA,EAAOnE,OAAO44C,yBAA2B,KAC7E7iC,EAAQwiC,UAAY,KACpBxiC,EAAQu0B,MAAQiN,EAChBxhC,EAAQ8iC,SAAWF,EACf5iC,EAAQg3B,QAGRh3B,EAAQg3B,OAAO+L,aAAavB,EAAQoB,GAExCx1C,KAAK2zC,oBAAoBC,EAAY,KAAMhhC,EAAQ82B,gBAKvD1pC,KAAK2zC,oBAAoBC,EAAY,KAAML,IAK3D,SAAS+B,GAAwC3iC,GAC7Cq+B,GAAsBr+B,EAAK5U,OAC3B4U,EAAK+2B,SAASvpC,QAAQm1C,IAiC1B,SAAS,GAAWp+B,GAChB,MAAoB,mBAANA,EAKlB,SAAS0+B,GAAU1+B,GACf,OAAOA,aAAai0B,GAsBxB,MAAM0K,GACF,YAAYnN,GACR1oC,KAAK0oC,aAAeA,GAAgB,MAG5C,MAAMoN,GACF,YAAYvG,GACRvvC,KAAKuvC,QAAUA,GAGvB,SAASiD,GAAQ9J,GACb,OAAO,IAAI,GAAA,WAAYhI,GAAQA,EAAI38B,MAAM,IAAI8xC,GAAQnN,KAEzD,SAASqN,GAAiBC,GACtB,OAAO,IAAI,GAAA,WAAYtV,GAAQA,EAAI38B,MAAM,IAAI+xC,GAAiBE,KAElE,SAASC,GAAqBpM,GAC1B,OAAO,IAAI,GAAA,WAAYnJ,GAAQA,EAAI38B,MAAM,IAAI3C,MAAM,gEAAgEyoC,QAavH,MAAM,GACF,YAAYqM,EAAgBC,EAAcC,EAAe7G,EAASvuC,GAC9DhB,KAAKm2C,aAAeA,EACpBn2C,KAAKo2C,cAAgBA,EACrBp2C,KAAKuvC,QAAUA,EACfvvC,KAAKgB,OAASA,EACdhB,KAAKq2C,gBAAiB,EACtBr2C,KAAK4E,SAAWsxC,EAAev4C,IAAI,EAAA,aAEvC,QAGI,OAFkBqC,KAAKs2C,mBAAmBt2C,KAAK4E,SAAU5E,KAAKgB,OAAQhB,KAAKuvC,QAAQ/iB,KA32DpE,WA42DaiW,KAAK52B,GAAK0qC,GAAqBv2C,KAAKw2C,cAAcD,EAAkBv2C,KAAKuvC,QAAQ5E,YAAa3qC,KAAKuvC,QAAQnE,YACtH3I,KAAK4B,GAAYh5B,IAC9B,GAAIA,aAAayqC,GAIb,OAFA91C,KAAKq2C,gBAAiB,EAEfr2C,KAAK8O,MAAMzD,EAAEkkC,SAExB,GAAIlkC,aAAawqC,GACb,MAAM71C,KAAKy2C,aAAaprC,GAE5B,MAAMA,KAGd,MAAMshC,GAGF,OAFkB3sC,KAAKs2C,mBAAmBt2C,KAAK4E,SAAU5E,KAAKgB,OAAQ2rC,EAAKngB,KA33D5D,WA43DWiW,KAAK52B,GAAK0qC,GAAqBv2C,KAAKw2C,cAAcD,EAAkB5J,EAAKhC,YAAagC,EAAKvB,YACtG3I,KAAK4B,GAAYh5B,IAC5B,GAAIA,aAAawqC,GACb,MAAM71C,KAAKy2C,aAAaprC,GAE5B,MAAMA,KAGd,aAAaA,GACT,OAAO,IAAIjK,MAAM,0CAA0CiK,EAAEq9B,iBAEjE,cAAcgO,EAAe/L,EAAaS,GACtC,MAAM5e,EAAOkqB,EAAcjO,SAASvlC,OAAS,EACzC,IAAIsoC,GAAgB,GAAI,CAAE,QAAkBkL,IAC5CA,EACJ,OAAO,IAAIvL,GAAQ3e,EAAMme,EAAaS,GAE1C,mBAAmBxmC,EAAUukC,EAAQT,EAAckB,GAC/C,OAAqC,IAAjClB,EAAaD,SAASvlC,QAAgBwlC,EAAaG,cAC5C7oC,KAAK22C,eAAe/xC,EAAUukC,EAAQT,GACxCjG,KAAK52B,GAAK69B,GAAa,IAAI8B,GAAgB,GAAI9B,KAEjD1pC,KAAK42C,cAAchyC,EAAU8jC,EAAcS,EAAQT,EAAaD,SAAUmB,GAAQ,GAG7F,eAAehlC,EAAUukC,EAAQT,GAC7B,OAzpDR,SAAoB/4B,EAAKzI,GACrB,GAAgC,IAA5B1J,OAAOgN,KAAKmF,GAAKzM,OACjB,OAAO,OAAA,GAAA,GAAA,CAAG,IAEd,MAAM2zC,EAAW,GACXC,EAAW,GACX5K,EAAM,GAaZ,OAZA/rC,GAAQwP,EAAK,CAAC+W,EAAG+kB,KACb,MAAMsL,EAAS7vC,EAAGukC,EAAG/kB,GAAG+b,KAAK52B,GAAKjO,GAAMsuC,EAAIT,GAAK7tC,IArQlC,YAsQX6tC,EACAoL,EAASp2C,KAAKs2C,GAGdD,EAASr2C,KAAKs2C,KAMf,GAAA,GAAG1pC,MAAM,KAAMwpC,EAASnkB,OAAOokB,IACjCrU,KAAKa,KC1rBP,SAAc1D,EAAW9zB,GAC5B,MAAM84B,EAAkBjG,UAAUz7B,QAAU,EAC5C,OAAQs8B,GAAWA,EAAOiD,KAAK7C,EAAY1+B,GAAO,CAACgW,EAAGpa,IAAM8iC,EAAU1oB,EAAGpa,EAAG0iC,IAAW4D,GAAUO,GAAS,GAAIiB,EAAkBT,GAAer4B,GAAgBg4B,GAAa,IAAM,IAAIP,KAFnL,GD0rB8B13B,GAAI,IAAMqgC,IApB/C,CAypD0BxD,EAAagB,SAAU,CAAC0C,EAAaD,IAAUnsC,KAAKs2C,mBAAmB1xC,EAAUukC,EAAQgD,EAAOC,IAEtH,cAAcxnC,EAAU8jC,EAAcS,EAAQV,EAAUmB,EAAQyM,GAC5D,OAAO,OAAA,GAAA,GAAA,IAAMlN,GAAQ1G,KAAK52B,GAAKjO,GACToC,KAAKg3C,0BAA0BpyC,EAAU8jC,EAAcS,EAAQvrC,EAAG6qC,EAAUmB,EAAQyM,GACrF5T,KAAK4B,GAAYh5B,IAC9B,GAAIA,aAAawqC,GAGb,OAAO,OAAA,GAAA,GAAA,CAAG,MAEd,MAAMxqC,MAEVi4B,KAAaqB,GAAO9lC,KAAQA,GAAIwlC,GAAW,CAACh5B,EAAGmG,KAC/C,GAAInG,aAAa,GAAA,YAAyB,eAAXA,EAAEhO,KAAuB,CACpD,GAAI2C,KAAKi3C,iBAAiBvO,EAAcD,EAAUmB,GAC9C,OAAO,OAAA,GAAA,GAAA,CAAG,IAAI4B,GAAgB,GAAI,KAEtC,MAAM,IAAIqK,GAAQnN,GAEtB,MAAMr9B,KAGd,iBAAiBq9B,EAAcD,EAAUmB,GACrC,OAA2B,IAApBnB,EAASvlC,SAAiBwlC,EAAagB,SAASE,GAE3D,0BAA0BhlC,EAAU8jC,EAAcS,EAAQhC,EAAO4L,EAAOnJ,EAAQyM,GAC5E,OAAIa,GAAU/P,KAAWyC,EACd4I,GAAQ9J,QAEMhoC,IAArBymC,EAAM0C,WACC7pC,KAAKm3C,yBAAyBvyC,EAAU8jC,EAAcvB,EAAO4L,GAEpEsD,GAAkBr2C,KAAKq2C,eAChBr2C,KAAKo3C,uCAAuCxyC,EAAU8jC,EAAcS,EAAQhC,EAAO4L,EAAOnJ,GAE9F4I,GAAQ9J,GAEnB,uCAAuC9jC,EAAU8jC,EAAcS,EAAQhC,EAAOsB,EAAUmB,GACpF,MAAmB,OAAfzC,EAAMC,KACCpnC,KAAKq3C,kDAAkDzyC,EAAUukC,EAAQhC,EAAOyC,GAEpF5pC,KAAKs3C,8CAA8C1yC,EAAU8jC,EAAcS,EAAQhC,EAAOsB,EAAUmB,GAE/G,kDAAkDhlC,EAAUukC,EAAQhC,EAAOyC,GACvE,MAAMoM,EAAUh2C,KAAKu3C,sBAAsB,GAAIpQ,EAAM0C,WAAY,IACjE,OAAI1C,EAAM0C,WAAWz5B,WAAW,KACrB2lC,GAAiBC,GAErBh2C,KAAKw3C,mBAAmBrQ,EAAO6O,GAASvT,KAAKL,GAAUqV,IAC1D,MAAMC,EAAQ,IAAIlM,GAAgBiM,EAAa,IAC/C,OAAOz3C,KAAK42C,cAAchyC,EAAU8yC,EAAOvO,EAAQsO,EAAa7N,GAAQ,MAGhF,8CAA8ChlC,EAAU8jC,EAAcS,EAAQhC,EAAOsB,EAAUmB,GAC3F,MAAM,QAAE+N,EAAO,iBAAEC,EAAgB,UAAEC,EAAS,wBAAEC,GAA4BhpC,GAAM45B,EAAcvB,EAAOsB,GACrG,IAAKkP,EACD,OAAOnF,GAAQ9J,GACnB,MAAMsN,EAAUh2C,KAAKu3C,sBAAsBK,EAAkBzQ,EAAM0C,WAAYiO,GAC/E,OAAI3Q,EAAM0C,WAAWz5B,WAAW,KACrB2lC,GAAiBC,GAErBh2C,KAAKw3C,mBAAmBrQ,EAAO6O,GAASvT,KAAKL,GAAUqV,GACnDz3C,KAAK42C,cAAchyC,EAAU8jC,EAAcS,EAAQsO,EAAY/kB,OAAO+V,EAASlqB,MAAMs5B,IAAajO,GAAQ,KAGzH,yBAAyBhlC,EAAUmzC,EAAiB5Q,EAAOsB,GACvD,GAAmB,OAAftB,EAAMC,KACN,OAAID,EAAMwC,aACC3pC,KAAKm2C,aAAa6B,KAAKpzC,EAASqzC,SAAU9Q,GAC5C1E,KAAK52B,GAAKqsC,IACX/Q,EAAMoO,cAAgB2C,EACf,IAAI1M,GAAgB/C,EAAU,OAGtC,OAAA,GAAA,GAAA,CAAG,IAAI+C,GAAgB/C,EAAU,KAE5C,MAAM,QAAEkP,EAAO,iBAAEC,EAAgB,UAAEC,GAAc/oC,GAAMipC,EAAiB5Q,EAAOsB,GAC/E,IAAKkP,EACD,OAAOnF,GAAQuF,GACnB,MAAMI,EAAoB1P,EAASlqB,MAAMs5B,GAEzC,OADqB73C,KAAKo4C,eAAexzC,EAAUuiC,EAAOsB,GACtChG,KAAKL,GAAUiW,IAC/B,MAAMC,EAAcD,EAAax7C,OAC3B07C,EAAcF,EAAalP,QAC3B,aAAET,EAAY,eAAE8P,GAuJlC,SAAe9P,EAAckP,EAAkBY,EAAgBx3C,GAC3D,OAAIw3C,EAAet1C,OAAS,GAsChC,SAAoDwlC,EAAcD,EAAUU,GACxE,OAAOA,EAAOlyB,KAAKrZ,GAAK66C,GAAoB/P,EAAcD,EAAU7qC,IA1qEjD,YA0qEuDs5C,GAAUt5C,IADxF,CArCmD8qC,EAAc8P,EAAgBx3C,GAElE,CAAE0nC,aAAcgQ,GADb,IAAIlN,GAAgBoM,EA0BtC,SAAwCzO,EAAQwP,GAC5C,MAAMzM,EAAM,GACZA,EAAkB,QAAIyM,EACtB,IAAK,MAAM/6C,KAAKurC,EACG,KAAXvrC,EAAEwpC,MAnqES,YAmqEM8P,GAAUt5C,KAC3BsuC,EAAIgL,GAAUt5C,IAAM,IAAI4tC,GAAgB,GAAI,KAGpD,OAAOU,EARX,CA1BuFlrC,EAAQ,IAAIwqC,GAAgBgN,EAAgB9P,EAAagB,aACxF8O,eAAgB,IAEtC,IAA1BA,EAAet1C,QAoCvB,SAAoCwlC,EAAcD,EAAUU,GACxD,OAAOA,EAAOlyB,KAAKrZ,GAAK66C,GAAoB/P,EAAcD,EAAU7qC,IADxE,CAnCmC8qC,EAAc8P,EAAgBx3C,GAElD,CAAE0nC,aAAcgQ,GADb,IAAIlN,GAAgB9C,EAAaD,SAYnD,SAA4CC,EAAc8P,EAAgBrP,EAAQO,GAC9E,MAAMwC,EAAM,GACZ,IAAK,MAAMtuC,KAAKurC,EACRsP,GAAoB/P,EAAc8P,EAAgB56C,KAAO8rC,EAASwN,GAAUt5C,MAC5EsuC,EAAIgL,GAAUt5C,IAAM,IAAI4tC,GAAgB,GAAI,KAGpD,OAAOhuC,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIumB,GAAWwC,GAPtD,CAZgGxD,EAAc8P,EAAgBx3C,EAAQ0nC,EAAagB,YAC3F8O,eAAAA,GAE7C,CAAE9P,aAAAA,EAAc8P,eAAAA,GAX3B,CAvJ2DT,EAAiBH,EAAkBO,EAAmBI,GACrG,OAA8B,IAA1BC,EAAet1C,QAAgBwlC,EAAaG,cAC1B7oC,KAAK22C,eAAe2B,EAAaC,EAAa7P,GAC/CjG,KAAK52B,GAAK69B,GAAa,IAAI8B,GAAgBoM,EAAkBlO,KAEvD,IAAvB6O,EAAYr1C,QAA0C,IAA1Bs1C,EAAet1C,OACpC,OAAA,GAAA,GAAA,CAAG,IAAIsoC,GAAgBoM,EAAkB,KAElC53C,KAAK42C,cAAc0B,EAAa5P,EAAc6P,EAAaC,EAn/DlE,WAm/DkG,GAC5F/V,KAAK52B,GAAK+sC,GAAO,IAAIpN,GAAgBoM,EAAiBllB,OAAOkmB,EAAGnQ,UAAWmQ,EAAGlP,eAGvG,eAAe9kC,EAAUuiC,EAAOsB,GAC5B,OAAItB,EAAMuC,SAEC,OAAA,GAAA,GAAA,CAAG,IAAIR,GAAmB/B,EAAMuC,SAAU9kC,IAEjDuiC,EAAMwC,kBAEsBjpC,IAAxBymC,EAAMoO,cACC,OAAA,GAAA,GAAA,CAAGpO,EAAMoO,eAEbv1C,KAAK64C,iBAAiBj0C,EAASqzC,SAAU9Q,EAAOsB,GAClDhG,KAAKL,GAAU0W,GACZA,EACO94C,KAAKm2C,aAAa6B,KAAKpzC,EAASqzC,SAAU9Q,GAC5C1E,KAAK52B,GAAKqsC,IACX/Q,EAAMoO,cAAgB2C,EACfA,KAjL/B,SAAsB/Q,GAClB,OAAO,IAAI,GAAA,WAAYzG,GAAQA,EAAI38B,MAAMwkC,GAAyB,+DAA+DpB,EAAMC,2BAD3I,CAoLoCD,KAGrB,OAAA,GAAA,GAAA,CAAG,IAAI+B,GAAmB,GAAItkC,IAEzC,iBAAiBsxC,EAAgB/O,EAAOsB,GACpC,MAAMsQ,EAAU5R,EAAM4R,QACtB,OAAKA,GAA8B,IAAnBA,EAAQ71C,OAEZ,OAAA,GAAA,KAAA,CAAK61C,GAAStW,KAAK52B,GAAKmtC,IAChC,MAAMt0C,EAAQwxC,EAAev4C,IAAIq7C,GACjC,IAAIC,EACJ,GAvOZ,SAAmBv0C,GACf,OAAOA,GAAS,GAAWA,EAAMq0C,SADrC,CAuO0Br0C,GACVu0C,EAAWv0C,EAAMq0C,QAAQ5R,EAAOsB,OAE/B,CAAA,IAAI,GAAW/jC,GAIhB,MAAM,IAAItD,MAAM,yBAHhB63C,EAAWv0C,EAAMyiC,EAAOsB,GAK5B,OAAO6B,GAAmB2O,MAEnBxW,KAAKa,KAAauB,GAAK/2B,IAC9B,IAAK8nC,GAAU9nC,GACX,OACJ,MAAM/J,EAAQwkC,GAAyB,mBAAmBvoC,KAAKo2C,cAAc7K,UAAUz9B,OAEvF,MADA/J,EAAMlD,IAAMiN,EACN/J,KVp9EI67B,EUq9EJ9xB,IAAqB,IAAXA,EVp9EhB0xB,GAAWA,EAAOC,KAAK,IAAIyF,GAActF,OADpBL,EACwCC,MU+7EtD,OAAA,GAAA,GAAA,EAAG,GVh8Ef,IAAeI,EUu9ElB,mBAAmBuH,EAAOoI,GACtB,IAAIrD,EAAM,GACN/uC,EAAIoyC,EAAQ/iB,KAChB,OAAa,CAET,GADA0f,EAAMA,EAAIxZ,OAAOv1B,EAAEsrC,UACQ,IAAvBtrC,EAAE2tC,iBACF,OAAO,OAAA,GAAA,GAAA,CAAGoB,GAEd,GAAI/uC,EAAE2tC,iBAAmB,IAAM3tC,EAAEusC,SAAuB,QACpD,OAAOuM,GAAqB9O,EAAM0C,YAEtC1sC,EAAIA,EAAEusC,SAAuB,SAGrC,sBAAsBjB,EAAUoB,EAAYf,GACxC,OAAO9oC,KAAKk5C,4BAA4BrP,EAAY7pC,KAAKo2C,cAAc+C,MAAMtP,GAAapB,EAAUK,GAExG,4BAA4Be,EAAY0F,EAAS9G,EAAUK,GACvD,MAAMsQ,EAAUp5C,KAAKq5C,mBAAmBxP,EAAY0F,EAAQ/iB,KAAMic,EAAUK,GAC5E,OAAO,IAAIqC,GAAQiO,EAASp5C,KAAKs5C,kBAAkB/J,EAAQ5E,YAAa3qC,KAAKuvC,QAAQ5E,aAAc4E,EAAQnE,UAE/G,kBAAkBmO,EAAkBC,GAChC,MAAMtN,EAAM,GAWZ,OAVA/rC,GAAQo5C,EAAkB,CAACriC,EAAGu0B,KAE1B,GADqC,iBAANv0B,GAAkBA,EAAE9G,WAAW,KACzC,CACjB,MAAMqpC,EAAaviC,EAAE/K,UAAU,GAC/B+/B,EAAIT,GAAK+N,EAAaC,QAGtBvN,EAAIT,GAAKv0B,IAGVg1B,EAEX,mBAAmBrC,EAAY6N,EAAOjP,EAAUK,GAC5C,MAAM4Q,EAAkB15C,KAAK25C,eAAe9P,EAAY6N,EAAMjP,SAAUA,EAAUK,GAClF,IAAIY,EAAW,GAIf,OAHAvpC,GAAQu3C,EAAMhO,SAAU,CAACyC,EAAO9uC,KAC5BqsC,EAASrsC,GAAQ2C,KAAKq5C,mBAAmBxP,EAAYsC,EAAO1D,EAAUK,KAEnE,IAAI0C,GAAgBkO,EAAiBhQ,GAEhD,eAAeG,EAAY+P,EAAoBC,EAAgB/Q,GAC3D,OAAO8Q,EAAmB/tC,IAAIhN,GAAKA,EAAEuoC,KAAKh3B,WAAW,KAAOpQ,KAAK85C,aAAajQ,EAAYhrC,EAAGiqC,GACzF9oC,KAAK+5C,aAAal7C,EAAGg7C,IAE7B,aAAahQ,EAAYmQ,EAAsBlR,GAC3C,MAAMmR,EAAMnR,EAAUkR,EAAqB5S,KAAKj7B,UAAU,IAC1D,IAAK8tC,EACD,MAAM,IAAI74C,MAAM,uBAAuByoC,oBAA6BmQ,EAAqB5S,UAC7F,OAAO6S,EAEX,aAAaD,EAAsBH,GAC/B,IAAIhW,EAAM,EACV,IAAK,MAAMhlC,KAAKg7C,EAAgB,CAC5B,GAAIh7C,EAAEuoC,OAAS4S,EAAqB5S,KAEhC,OADAyS,EAAepqC,OAAOo0B,GACfhlC,EAEXglC,IAEJ,OAAOmW,GAGf,SAASlrC,GAAM45B,EAAcvB,EAAOsB,GAChC,GAAmB,KAAftB,EAAMC,KACN,MAAyB,SAApBD,EAAMyB,YAA0BF,EAAaG,eAAiBJ,EAASvlC,OAAS,GAC1E,CAAEy0C,SAAS,EAAOC,iBAAkB,GAAIC,UAAW,EAAGC,wBAAyB,IAEnF,CAAEH,SAAS,EAAMC,iBAAkB,GAAIC,UAAW,EAAGC,wBAAyB,IAEzF,MACM5L,GADU/E,EAAM2C,SAAWtB,IACbC,EAAUC,EAAcvB,GAC5C,OAAK+E,EAQE,CACHyL,SAAS,EACTC,iBAAkB1L,EAAIjD,SACtB4O,UAAW3L,EAAIjD,SAAS/lC,OACxB40C,wBAAyB5L,EAAIpD,WAXtB,CACH6O,SAAS,EACTC,iBAAkB,GAClBC,UAAW,EACXC,wBAAyB,IAuBrC,SAASY,GAAqB75C,GAC1B,GAA2B,IAAvBA,EAAEisC,kBAA0BjsC,EAAE6qC,SAAuB,QAAG,CACxD,MAAMvsC,EAAI0B,EAAE6qC,SAAuB,QACnC,OAAO,IAAI8B,GAAgB3sC,EAAE4pC,SAAS/V,OAAOv1B,EAAEsrC,UAAWtrC,EAAEusC,UAEhE,OAAO7qC,EA2BX,SAAS45C,GAAoB/P,EAAcD,EAAU7qC,GACjD,SAAK8qC,EAAaG,eAAiBJ,EAASvlC,OAAS,IAAsB,SAAhBtF,EAAEgrC,YAG3C,KAAXhrC,EAAEwpC,WAAgC1mC,IAAjB9C,EAAEisC,WAE9B,SAASqN,GAAU/P,GACf,OAAOA,EAAMyC,QAtrEM,UA8sEvB,MAAMsQ,GACF,YAAY9S,GACRpnC,KAAKonC,KAAOA,EACZpnC,KAAKmnC,MAAQnnC,KAAKonC,KAAKpnC,KAAKonC,KAAKlkC,OAAS,IAGlD,MAAMi3C,GACF,YAAY1Q,EAAWtC,GACnBnnC,KAAKypC,UAAYA,EACjBzpC,KAAKmnC,MAAQA,GAGrB,SAASiT,GAAkBhG,EAAQ5D,EAAM+C,GACrC,MAAMC,EAAaY,EAAOxF,MAE1B,OAuBJ,SAASyL,EAAoBzG,EAAYC,EAAUC,EAAUwG,EAAYC,EAAS,CAC9EC,oBAAqB,GACrBC,kBAAmB,KAEnB,MAAMC,EAAevL,GAAkB0E,GAQvC,OANAD,EAAWlK,SAASvpC,QAAQhD,KAQhC,SAAwBy2C,EAAYC,EAAUN,EAAgB+G,EAAYC,EAAS,CAC/EC,oBAAqB,GACrBC,kBAAmB,KAEnB,MAAMrG,EAASR,EAAW71C,MACpByyC,EAAOqD,EAAWA,EAAS91C,MAAQ,KACnC6U,EAAU2gC,EAAiBA,EAAec,WAAWT,EAAW71C,MAAM6rC,QAAU,KAEtF,GAAI4G,GAAQ4D,EAAO5M,cAAgBgJ,EAAKhJ,YAAa,CACjD,MAAMmT,EAsCd,SAAqCnK,EAAM4D,EAAQn2C,GAC/C,GAAoB,mBAATA,EACP,OAAOA,EAAKuyC,EAAM4D,GAEtB,OAAQn2C,GACJ,IAAK,mBACD,OAAQ4sC,GAAU2F,EAAK3vC,IAAKuzC,EAAOvzC,KACvC,IAAK,gCACD,OAAQgqC,GAAU2F,EAAK3vC,IAAKuzC,EAAOvzC,OAC9BopC,GAAauG,EAAK7F,YAAayJ,EAAOzJ,aAC/C,IAAK,SACD,OAAO,EACX,IAAK,4BACD,OAAQuG,GAA0BV,EAAM4D,KACnCnK,GAAauG,EAAK7F,YAAayJ,EAAOzJ,aAC/C,IAAK,eACL,QACI,OAAQuG,GAA0BV,EAAM4D,IAjBpD,CAtCsD5D,EAAM4D,EAAQA,EAAO5M,YAAYoT,uBAC3ED,EACAJ,EAAOE,kBAAkBh6C,KAAK,IAAIy5C,GAAYI,KAI9ClG,EAAOzoC,KAAO6kC,EAAK7kC,KACnByoC,EAAO3D,cAAgBD,EAAKC,eAI5B4J,EAAoBzG,EAAYC,EADhCO,EAAO3K,UACmC72B,EAAUA,EAAQ82B,SAAW,KAI7B6J,EAJmC+G,EAAYC,GAMzFI,GAEAJ,EAAOC,oBAAoB/5C,KAAK,IAAI05C,GADlBvnC,GAAWA,EAAQg3B,QAAUh3B,EAAQg3B,OAAOH,WAAa,KACd+G,SAI7DA,GACA2D,GAA8BN,EAAUjhC,EAAS2nC,GAErDA,EAAOE,kBAAkBh6C,KAAK,IAAIy5C,GAAYI,IAG1CD,EAAoBzG,EAAY,KADhCQ,EAAO3K,UAC+B72B,EAAUA,EAAQ82B,SAAW,KAI7B6J,EAJmC+G,EAAYC,GAtCjG,CAPuBp9C,EAAGu9C,EAAav9C,EAAEY,MAAM6rC,QAASkK,EAAUwG,EAAW5nB,OAAO,CAACv1B,EAAEY,QAASw8C,UACjFG,EAAav9C,EAAEY,MAAM6rC,UAGhCzpC,GAAQu6C,EAAc,CAACxjC,EAAGu0B,IAAM0I,GAA8Bj9B,EAAG48B,EAASO,WAAW5I,GAAI8O,IAClFA,EAZX,CAvB+B/G,EADVhD,EAAOA,EAAK5B,MAAQ,KACY2E,EAAgB,CAACC,EAAWz1C,QAQjF,SAAS88C,GAASn4C,EAAO6kC,EAAU2O,GAC/B,MAAMl1C,EAIV,SAAgCumC,GAC5B,IAAKA,EACD,OAAO,KACX,IAAK,IAAI1oC,EAAI0oC,EAAS3e,OAAQ/pB,EAAGA,EAAIA,EAAE+pB,OAAQ,CAC3C,MAAMue,EAAQtoC,EAAE2oC,YAChB,GAAIL,GAASA,EAAMoO,cACf,OAAOpO,EAAMoO,cAErB,OAAO,KARX,CAJ0ChO,GAEtC,OADiBvmC,EAASA,EAAOnE,OAAOo7C,SAAW/B,GACnCv4C,IAAI+E,GA6FxB,SAASyxC,GAA8BhN,EAAOv0B,EAAS2nC,GACnD,MAAM7Q,EAAWyF,GAAkBhI,GAC7BvpC,EAAIupC,EAAMppC,MAChBoC,GAAQupC,EAAU,CAAC/2B,EAAMuhC,KAKjBC,GAA8BxhC,EAJ7B/U,EAAE6rC,UAGE72B,EAC+BA,EAAQ82B,SAAS2K,WAAWH,GAG5B,KANAthC,EAGwC2nC,KAUhFA,EAAOC,oBAAoB/5C,KAAK,IAAI05C,GAJnCv8C,EAAE6rC,WAGE72B,GAAWA,EAAQg3B,QAAUh3B,EAAQg3B,OAAOkR,YACCloC,EAAQg3B,OAAOH,UAHf,KAG0B7rC,IAcpF,MAAMm9C,GAAgBl9C,OAAO,iBAC7B,SAASm9C,KACL,OAAO5V,GAAU1E,GACN,OAAA,GAAA,cAAA,IAAiBA,EAAI70B,IAAItO,GAAKA,EAAEklC,KAAKiC,GAAK,GAAIe,GAAUsV,OAC1DtY,KHvxFN,SAAckD,EAAaC,GAC9B,IAAIC,GAAU,EAId,OAHIlH,UAAUz7B,QAAU,IACpB2iC,GAAU,GAEP,SAA8BrG,GACjC,OAAOA,EAAOC,KAAK,IAAIiG,GAAaC,EAAaC,EAAMC,KANxD,CGuxFgB,CAACoV,EAAKC,KACjB,IAAIC,GAAY,EAChB,OAAOD,EAAK3yC,OAAO,CAAC6yC,EAAU97B,EAAKxiB,KAC/B,GAAIs+C,IAAaL,GACb,OAAOK,EAQX,GANI97B,IAAQy7B,KACRI,GAAY,IAKXA,EAAW,CAGZ,IAAY,IAAR77B,EACA,OAAOA,EACX,GAAIxiB,IAAMo+C,EAAKh4C,OAAS,GAAK0yC,GAAUt2B,GACnC,OAAOA,EAGf,OAAO87B,GACRH,IACJF,IAAgB75C,GAAOgP,GAAQA,IAAS6qC,IAAgBlvC,GAAIqE,GAAQ0lC,GAAU1lC,GAAQA,GAAgB,IAATA,GAChGw0B,GAAK,KAuDb,SAAS2W,GAAoB9T,EAAU+L,GAInC,OAHiB,OAAb/L,GAAqB+L,GACrBA,EAAa,IAAI5L,GAAgBH,IAE9B,OAAA,GAAA,GAAA,EAAG,GAUd,SAAS+T,GAAyB/T,EAAU+L,GAIxC,OAHiB,OAAb/L,GAAqB+L,GACrBA,EAAa,IAAIhM,GAAqBC,IAEnC,OAAA,GAAA,GAAA,EAAG,GAEd,SAASgU,GAAeC,EAAWC,EAAWvF,GAC1C,MAAMwF,EAAcD,EAAUjU,YAAciU,EAAUjU,YAAYkU,YAAc,KAChF,IAAKA,GAAsC,IAAvBA,EAAYx4C,OAC5B,OAAO,OAAA,GAAA,GAAA,EAAG,GACd,MAAMy4C,EAAyBD,EAAY7vC,IAAK1O,GACrC,OAAA,GAAA,MAAA,CAAM,KACT,MAAMuH,EAAQm2C,GAAS19C,EAAGs+C,EAAWvF,GACrC,IAAI5V,EACJ,GAlqBZ,SAAuB57B,GACnB,OAAOA,GAAS,GAAWA,EAAMg3C,aADrC,CAkqB8Bh3C,GACd47B,EAAagK,GAAmB5lC,EAAMg3C,YAAYD,EAAWD,QAE5D,CAAA,IAAI,GAAW92C,GAIhB,MAAM,IAAItD,MAAM,6BAHhBk/B,EAAagK,GAAmB5lC,EAAM+2C,EAAWD,IAKrD,OAAOlb,EAAWmC,KAAKkC,SAG/B,OAAO,OAAA,GAAA,GAAA,CAAGgX,GAAwBlZ,KAAKuY,MAE3C,SAASY,GAAoBJ,EAAWpU,EAAM8O,GAC1C,MAAMuF,EAAYrU,EAAKA,EAAKlkC,OAAS,GAK/B24C,EAJyBzU,EAAK7oB,MAAM,EAAG6oB,EAAKlkC,OAAS,GACtD44C,UACAjwC,IAAIjN,GAvQb,SAA6BA,GACzB,MAAMm9C,EAAmBn9C,EAAE4oC,YAAc5oC,EAAE4oC,YAAYuU,iBAAmB,KAC1E,OAAKA,GAAgD,IAA5BA,EAAiB74C,OAEnC,CAAEyP,KAAM/T,EAAGo9C,OAAQD,GADf,KAHf,CAuQsCn9C,IAC7BsC,OAAOsQ,GAAW,OAANA,GAC2C3F,IAAKzO,GACtD,OAAA,GAAA,MAAA,CAAM,KACT,MAAM6+C,EAAe7+C,EAAE4+C,OAAOnwC,IAAK1O,IAC/B,MAAMuH,EAAQm2C,GAAS19C,EAAGC,EAAEuV,KAAMujC,GAClC,IAAI5V,EACJ,GAxrBhB,SAA4B57B,GACxB,OAAOA,GAAS,GAAWA,EAAMq3C,kBADrC,CAwrBuCr3C,GACnB47B,EAAagK,GAAmB5lC,EAAMq3C,iBAAiBN,EAAWD,QAEjE,CAAA,IAAI,GAAW92C,GAIhB,MAAM,IAAItD,MAAM,kCAHhBk/B,EAAagK,GAAmB5lC,EAAM+2C,EAAWD,IAKrD,OAAOlb,EAAWmC,KAAKkC,QAE3B,OAAO,OAAA,GAAA,GAAA,CAAGsX,GAAcxZ,KAAKuY,SAGrC,OAAO,OAAA,GAAA,GAAA,CAAGa,GAA8BpZ,KAAKuY,MA8BjD,MAAMkB,IAMN,MAAM,GACF,YAAYC,EAAmBn7C,EAAQuuC,EAAS1uC,EAAKyvC,EAA2B8L,GAC5Ep8C,KAAKm8C,kBAAoBA,EACzBn8C,KAAKgB,OAASA,EACdhB,KAAKuvC,QAAUA,EACfvvC,KAAKa,IAAMA,EACXb,KAAKswC,0BAA4BA,EACjCtwC,KAAKo8C,uBAAyBA,EAElC,YACI,IACI,MAAM7F,EAAmB8F,GAAQr8C,KAAKuvC,QAAQ/iB,KAAM,GAAI,GAAIxsB,KAAKgB,OAAQhB,KAAKo8C,wBAAwB1T,aAChGgB,EAAW1pC,KAAKs8C,oBAAoBt8C,KAAKgB,OAAQu1C,EA3iF5C,WA4iFL/pB,EAAO,IAAIkjB,GAAuB,GAAIlyC,OAAO++C,OAAO,IAAK/+C,OAAO++C,OAAO/+C,OAAO2lB,OAAO,GAAInjB,KAAKuvC,QAAQ5E,cAAe3qC,KAAKuvC,QAAQnE,SAAU,GA5iFvI,UA4iF2JprC,KAAKm8C,kBAAmB,KAAMn8C,KAAKuvC,QAAQ/iB,MAAO,EAAG,IACrNgwB,EAAW,IAAItN,GAAS1iB,EAAMkd,GAC9B+S,EAAa,IAAI9M,GAAoB3vC,KAAKa,IAAK27C,GAErD,OADAx8C,KAAK08C,qBAAqBD,EAAW7N,OAC9B,OAAA,GAAA,GAAA,CAAG6N,GAEd,MAAOpxC,GACH,OAAO,IAAI,GAAA,WAAYq1B,GAAQA,EAAI38B,MAAMsH,KAGjD,qBAAqBsxC,GACjB,MAAMxV,EAAQwV,EAAU5+C,MAClBjB,EAAIuzC,GAA2BlJ,EAAOnnC,KAAKswC,2BACjDnJ,EAAMj2B,OAAS1T,OAAO++C,OAAOz/C,EAAEoU,QAC/Bi2B,EAAMx7B,KAAOnO,OAAO++C,OAAOz/C,EAAE6O,MAC7BgxC,EAAUjT,SAASvpC,QAAQ5B,GAAKyB,KAAK08C,qBAAqBn+C,IAE9D,oBAAoByC,EAAQ0nC,EAAckB,GACtC,OAAqC,IAAjClB,EAAaD,SAASvlC,QAAgBwlC,EAAaG,cAC5C7oC,KAAKkyC,gBAAgBlxC,EAAQ0nC,GAEjC1oC,KAAK48C,eAAe57C,EAAQ0nC,EAAcA,EAAaD,SAAUmB,GAE5E,gBAAgB5oC,EAAQ0nC,GACpB,MAAMgB,EAAWuC,GAAqBvD,EAAc,CAACyD,EAAOC,IAAgBpsC,KAAKs8C,oBAAoBt7C,EAAQmrC,EAAOC,IAGpH,OAwFR,SAAmC7f,GAC/B,MAAMswB,EAAQ,GACdtwB,EAAMpsB,QAAQ5B,IACV,MAAMu+C,EAA0BD,EAAMt+C,EAAER,MAAM6rC,QAC9C,GAAIkT,EAAyB,CACzB,MAAMl+C,EAAIk+C,EAAwBj8C,IAAIgL,IAAIhN,GAAKA,EAAE2K,YAAYuB,KAAK,KAC5D5N,EAAIoB,EAAER,MAAM8C,IAAIgL,IAAIhN,GAAKA,EAAE2K,YAAYuB,KAAK,KAClD,MAAM,IAAI3J,MAAM,mDAAmDxC,WAAWzB,OAElF0/C,EAAMt+C,EAAER,MAAM6rC,QAAUrrC,EAAER,QATlC,CA1FkC2rC,GACEA,EAqD1BrgB,KAAK,CAAC3C,EAAGC,IA3nFI,YA4nFXD,EAAE3oB,MAAM6rC,QACA,EA7nFG,YA8nFXjjB,EAAE5oB,MAAM6rC,OACD,EACJljB,EAAE3oB,MAAM6rC,OAAOmT,cAAcp2B,EAAE5oB,MAAM6rC,SAzDrCF,EAEX,eAAe1oC,EAAQ0nC,EAAcD,EAAUmB,GAC3C,IAAK,MAAMhsC,KAAKoD,EACZ,IACI,OAAOhB,KAAKg9C,2BAA2Bp/C,EAAG8qC,EAAcD,EAAUmB,GAEtE,MAAOv+B,GACH,KAAMA,aAAa6wC,IACf,MAAM7wC,EAGlB,GAAIrL,KAAKi3C,iBAAiBvO,EAAcD,EAAUmB,GAC9C,MAAO,GAEX,MAAM,IAAIsS,GAEd,iBAAiBxT,EAAcD,EAAUmB,GACrC,OAA2B,IAApBnB,EAASvlC,SAAiBwlC,EAAagB,SAASE,GAE3D,2BAA2BzC,EAAO8V,EAAYxU,EAAUmB,GACpD,GAAIzC,EAAM0C,WACN,MAAM,IAAIqS,GACd,IAAK/U,EAAMyC,QA9lFI,aA8lF0BA,EACrC,MAAM,IAAIsS,GACd,IAAI3U,EACAqQ,EAAmB,GACnBO,EAAoB,GACxB,GAAmB,OAAfhR,EAAMC,KAAe,CACrB,MAAMl2B,EAASu3B,EAASvlC,OAAS,EAAI,GAAKulC,GAAUmD,WAAa,GACjErE,EAAW,IAAImI,GAAuBjH,EAAUv3B,EAAQ1T,OAAO++C,OAAO/+C,OAAO2lB,OAAO,GAAInjB,KAAKuvC,QAAQ5E,cAAe3qC,KAAKuvC,QAAQnE,SAAU8R,GAAQ/V,GAAQyC,EAAQzC,EAAMsC,UAAWtC,EAAOgW,GAAsBF,GAAaG,GAAkBH,GAAcxU,EAASvlC,OAAQm6C,GAAWlW,QAEzR,CACD,MAAMr5B,EAoClB,SAAiB46B,EAAcvB,EAAOsB,GAClC,GAAmB,KAAftB,EAAMC,KAAa,CACnB,GAAwB,SAApBD,EAAMyB,YAAyBF,EAAaG,eAAiBJ,EAASvlC,OAAS,GAC/E,MAAM,IAAIg5C,GAEd,MAAO,CAAEtE,iBAAkB,GAAIC,UAAW,EAAGjM,WAAY,IAE7D,MACMM,GADU/E,EAAM2C,SAAWtB,IACbC,EAAUC,EAAcvB,GAC5C,IAAK+E,EACD,MAAM,IAAIgQ,GACd,MAAMpT,EAAY,GAClB3oC,GAAQ+rC,EAAIpD,UAAW,CAAC5xB,EAAGu0B,KACvB3C,EAAU2C,GAAKv0B,EAAEkwB,OAErB,MAAMwE,EAAaM,EAAIjD,SAAS/lC,OAAS,EAAI1F,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI2lB,GAAYoD,EAAIjD,SAASiD,EAAIjD,SAAS/lC,OAAS,GAAG0oC,YAC3H9C,EACJ,MAAO,CAAE8O,iBAAkB1L,EAAIjD,SAAU4O,UAAW3L,EAAIjD,SAAS/lC,OAAQ0oC,WAAAA,GAjB7E,CApCmCqR,EAAY9V,EAAOsB,GAC1CmP,EAAmB9pC,EAAO8pC,iBAC1BO,EAAoB1P,EAASlqB,MAAMzQ,EAAO+pC,WAC1CtQ,EAAW,IAAImI,GAAuBkI,EAAkB9pC,EAAO89B,WAAYpuC,OAAO++C,OAAO/+C,OAAO2lB,OAAO,GAAInjB,KAAKuvC,QAAQ5E,cAAe3qC,KAAKuvC,QAAQnE,SAAU8R,GAAQ/V,GAAQyC,EAAQzC,EAAMsC,UAAWtC,EAAOgW,GAAsBF,GAAaG,GAAkBH,GAAcrF,EAAiB10C,OAAQm6C,GAAWlW,IAEzT,MAAMoR,EAsBd,SAAwBpR,GACpB,OAAIA,EAAMuC,SACCvC,EAAMuC,SAEbvC,EAAMwC,aACCxC,EAAMoO,cAAcpM,OAExB,GAPX,CAtB2ChC,IAC7B,aAAEuB,EAAY,eAAE8P,GAAmB6D,GAAQY,EAAYrF,EAAkBO,EAAmBI,EAAav4C,KAAKo8C,wBACpH,GAA8B,IAA1B5D,EAAet1C,QAAgBwlC,EAAaG,cAAe,CAC3D,MAAMa,EAAW1pC,KAAKkyC,gBAAgBqG,EAAa7P,GACnD,MAAO,CAAC,IAAIwG,GAAS3H,EAAUmC,IAEnC,GAA2B,IAAvB6O,EAAYr1C,QAA0C,IAA1Bs1C,EAAet1C,OAC3C,MAAO,CAAC,IAAIgsC,GAAS3H,EAAU,KAEnC,MAAMmC,EAAW1pC,KAAK48C,eAAerE,EAAa7P,EAAc8P,EAtnFjD,WAunFf,MAAO,CAAC,IAAItJ,GAAS3H,EAAUmC,KAoDvC,SAASyT,GAAsBzU,GAC3B,IAAI7pC,EAAI6pC,EACR,KAAO7pC,EAAEy+C,gBACLz+C,EAAIA,EAAEy+C,eAEV,OAAOz+C,EAEX,SAASu+C,GAAkB1U,GACvB,IAAI7pC,EAAI6pC,EACJwD,EAAOrtC,EAAE0+C,mBAAqB1+C,EAAE0+C,mBAAqB,EACzD,KAAO1+C,EAAEy+C,gBACLz+C,EAAIA,EAAEy+C,eACNpR,GAAQrtC,EAAE0+C,mBAAqB1+C,EAAE0+C,mBAAqB,EAE1D,OAAOrR,EAAM,EAEjB,SAASmQ,GAAQ3T,EAAckP,EAAkBY,EAAgBx3C,EAAQo7C,GACrE,GAAI5D,EAAet1C,OAAS,GAmDhC,SAAkDwlC,EAAc8P,EAAgBrP,GAC5E,OAAOA,EAAOlyB,KAAKrZ,GAAK4/C,GAAe9U,EAAc8P,EAAgB56C,IAhvFlD,YAgvFwD6/C,GAAY7/C,IAD3F,CAlDiD8qC,EAAc8P,EAAgBx3C,GAAS,CAChF,MAAMnC,EAAI,IAAI2sC,GAAgBoM,EAkCtC,SAAqClP,EAAckP,EAAkBzO,EAAQuU,GACzE,MAAMxR,EAAM,GACZA,EAAkB,QAAIwR,EACtBA,EAAeJ,eAAiB5U,EAChCgV,EAAeH,mBAAqB3F,EAAiB10C,OACrD,IAAK,MAAMtF,KAAKurC,EACZ,GAAe,KAAXvrC,EAAEwpC,MAtuFS,YAsuFMqW,GAAY7/C,GAAuB,CACpD,MAAMiB,EAAI,IAAI2sC,GAAgB,GAAI,IAClC3sC,EAAEy+C,eAAiB5U,EACnB7pC,EAAE0+C,mBAAqB3F,EAAiB10C,OACxCgpC,EAAIuR,GAAY7/C,IAAMiB,EAG9B,OAAOqtC,EAbX,CAlCoFxD,EAAckP,EAAkB52C,EAAQ,IAAIwqC,GAAgBgN,EAAgB9P,EAAagB,YAGrK,OAFA7qC,EAAEy+C,eAAiB5U,EACnB7pC,EAAE0+C,mBAAqB3F,EAAiB10C,OACjC,CAAEwlC,aAAc7pC,EAAG25C,eAAgB,IAE9C,GAA8B,IAA1BA,EAAet1C,QA+CvB,SAAkCwlC,EAAc8P,EAAgBrP,GAC5D,OAAOA,EAAOlyB,KAAKrZ,GAAK4/C,GAAe9U,EAAc8P,EAAgB56C,IADzE,CA9CiC8qC,EAAc8P,EAAgBx3C,GAAS,CAChE,MAAMnC,EAAI,IAAI2sC,GAAgB9C,EAAaD,SAUnD,SAAyCC,EAAckP,EAAkBY,EAAgBrP,EAAQO,EAAU0S,GACvG,MAAMlQ,EAAM,GACZ,IAAK,MAAMtuC,KAAKurC,EACZ,GAAIqU,GAAe9U,EAAc8P,EAAgB56C,KAAO8rC,EAAS+T,GAAY7/C,IAAK,CAC9E,MAAMiB,EAAI,IAAI2sC,GAAgB,GAAI,IAClC3sC,EAAEy+C,eAAiB5U,EAEf7pC,EAAE0+C,mBADyB,WAA3BnB,EACuB1T,EAAaD,SAASvlC,OAGtB00C,EAAiB10C,OAE5CgpC,EAAIuR,GAAY7/C,IAAMiB,EAG9B,OAAOrB,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIumB,GAAWwC,GAftD,CAV6FxD,EAAckP,EAAkBY,EAAgBx3C,EAAQ0nC,EAAagB,SAAU0S,IAGpK,OAFAv9C,EAAEy+C,eAAiB5U,EACnB7pC,EAAE0+C,mBAAqB3F,EAAiB10C,OACjC,CAAEwlC,aAAc7pC,EAAG25C,eAAAA,GAE9B,MAAM35C,EAAI,IAAI2sC,GAAgB9C,EAAaD,SAAUC,EAAagB,UAGlE,OAFA7qC,EAAEy+C,eAAiB5U,EACnB7pC,EAAE0+C,mBAAqB3F,EAAiB10C,OACjC,CAAEwlC,aAAc7pC,EAAG25C,eAAAA,GAwC9B,SAASgF,GAAe9U,EAAc8P,EAAgB56C,GAClD,SAAK8qC,EAAaG,eAAiB2P,EAAet1C,OAAS,IAAsB,SAAhBtF,EAAEgrC,YAGjD,KAAXhrC,EAAEwpC,WAAgC1mC,IAAjB9C,EAAEisC,WAE9B,SAAS4T,GAAYtW,GACjB,OAAOA,EAAMyC,QA5vFM,UA8vFvB,SAASsT,GAAQ/V,GACb,OAAOA,EAAMx7B,MAAQ,GAEzB,SAAS0xC,GAAWlW,GAChB,OAAOA,EAAMrlC,SAAW,GAmF5B,SAAS67C,GAAU7rC,GACf,OAAO,SAAU0tB,GACb,OAAOA,EAAOiD,KAAK2C,GAAUluB,IACzB,MAAM0mC,EAAa9rC,EAAKoF,GACxB,OAAI0mC,EACO,OAAA,GAAA,KAAA,CAAKA,GAAYnb,KAAK52B,GAAI,IAAMqL,IAEpC,OAAA,GAAA,KAAA,CAAK,CAACA,QAwBzB,MAAM2mC,GACF,aAAa1W,GACT,OAAO,EAEX,MAAMA,EAAO2W,IACb,aAAa3W,GACT,OAAO,EAEX,SAASA,GACL,OAAO,KAEX,iBAAiBiN,EAAQ5D,GACrB,OAAO4D,EAAO5M,cAAgBgJ,EAAKhJ,aAgB3C,MAAMuW,GAAS,IAAI,EAAA,eAAe,UAClC,MAAM,GACF,YAAYC,EAAQC,EAAUC,EAAqBC,GAC/Cn+C,KAAKg+C,OAASA,EACdh+C,KAAKi+C,SAAWA,EAChBj+C,KAAKk+C,oBAAsBA,EAC3Bl+C,KAAKm+C,kBAAoBA,EAE7B,KAAKC,EAAgBjX,GAKjB,OAJInnC,KAAKk+C,qBACLl+C,KAAKk+C,oBAAoB/W,GAENnnC,KAAKq+C,kBAAkBlX,EAAMwC,cAC9BlH,KAAK52B,GAAKnM,IACxBM,KAAKm+C,mBACLn+C,KAAKm+C,kBAAkBhX,GAE3B,MAAMtqC,EAAS6C,EAAQtB,OAAOggD,GAC9B,OAAO,IAAIlV,GAAmBmB,GAAQxtC,EAAOo7C,SAASt6C,IAAIogD,KAASlyC,IAAIm+B,IAAoBntC,MAGnG,kBAAkB8sC,GACd,MAA4B,iBAAjBA,EACA,OAAA,GAAA,KAAA,CAAK3pC,KAAKg+C,OAAOhG,KAAKrO,IAGtBW,GAAmBX,KAAgBlH,KAAKL,GAAUpkC,GACjDA,aAAa,EAAA,gBACN,OAAA,GAAA,GAAA,CAAGA,GAGH,OAAA,GAAA,KAAA,CAAKgC,KAAKi+C,SAASK,mBAAmBtgD,OAmBjE,MAAMugD,GACF,cACIv+C,KAAK4pC,OAAS,KACd5pC,KAAKmnC,MAAQ,KACbnnC,KAAK01C,SAAW,KAChB11C,KAAK0pC,SAAW,IAAI8U,GACpBx+C,KAAKo1C,UAAY,MAQzB,MAAMoJ,GACF,cAEIx+C,KAAK8zC,SAAW,IAAIn0C,IAGxB,qBAAqBu0C,EAAWtK,GAC5B,MAAMh3B,EAAU5S,KAAK+0C,mBAAmBb,GACxCthC,EAAQg3B,OAASA,EACjB5pC,KAAK8zC,SAAS1xC,IAAI8xC,EAAWthC,GAOjC,uBAAuBshC,GACnB,MAAMthC,EAAU5S,KAAKq0C,WAAWH,GAC5BthC,IACAA,EAAQg3B,OAAS,MAOzB,sBACI,MAAMkK,EAAW9zC,KAAK8zC,SAEtB,OADA9zC,KAAK8zC,SAAW,IAAIn0C,IACbm0C,EAEX,mBAAmBA,GACf9zC,KAAK8zC,SAAWA,EAEpB,mBAAmBI,GACf,IAAIthC,EAAU5S,KAAKq0C,WAAWH,GAK9B,OAJKthC,IACDA,EAAU,IAAI2rC,GACdv+C,KAAK8zC,SAAS1xC,IAAI8xC,EAAWthC,IAE1BA,EAEX,WAAWshC,GACP,OAAOl0C,KAAK8zC,SAASn2C,IAAIu2C,IAAc,MAuB/C,MAAMuK,GACF,iBAAiB59C,GACb,OAAO,EAEX,QAAQA,GACJ,OAAOA,EAEX,MAAM69C,EAAYC,GACd,OAAOD,GAWf,SAASE,GAAoB76C,GACzB,MAAMA,EAEV,SAAS86C,GAAgC96C,EAAOqyC,EAAev1C,GAC3D,OAAOu1C,EAAc+C,MAAM,KAK/B,SAAS2F,GAAkBvX,EAAUwX,GACjC,OAAO,OAAA,GAAA,GAAA,CAAG,yBAcRC,EAKF,YAAY7C,EAAmB/F,EAAe6I,EAAcC,EAAUjH,EAAU+F,EAAQC,EAAUj9C,GAC9FhB,KAAKm8C,kBAAoBA,EACzBn8C,KAAKo2C,cAAgBA,EACrBp2C,KAAKi/C,aAAeA,EACpBj/C,KAAKk/C,SAAWA,EAChBl/C,KAAKgB,OAASA,EACdhB,KAAKm/C,yBAA2B,KAChCn/C,KAAKo/C,kBAAoB,KACzBp/C,KAAKq/C,aAAe,EACpBr/C,KAAKs/C,iBAAkB,EAIvBt/C,KAAKu/C,OAAS,IAAI,GAAA,QAIlBv/C,KAAKw/C,aAAeZ,GAOpB5+C,KAAKy/C,yBAA2BZ,GAKhC7+C,KAAK0/C,WAAY,EACjB1/C,KAAK2/C,kBAAoB,EAQzB3/C,KAAK4/C,MAAQ,CAAEC,oBAAqBf,GAAmBgB,mBAAoBhB,IAK3E9+C,KAAK+/C,oBAAsB,IAAItB,GAI/Bz+C,KAAKmzC,mBAAqB,IAAI0K,GAM9B79C,KAAKggD,oBAAsB,SAU3BhgD,KAAKswC,0BAA4B,YAQjCtwC,KAAKigD,kBAAoB,WAKzBjgD,KAAKo8C,uBAAyB,SAG9Bp8C,KAAK4E,SAAWqzC,EAASt6C,IAAI,EAAA,aAC7BqC,KAAKO,QAAU03C,EAASt6C,IAAI,EAAA,kBAC5B,MAAMuiD,EAASjI,EAASt6C,IAAI,EAAA,QAC5BqC,KAAKs/C,gBAAkBY,aAAkB,EAAA,OACzClgD,KAAKmgD,YAAYn/C,GACjBhB,KAAKogD,eA92FF,IAAIjV,GAAQ,IAAIK,GAAgB,GAAI,IAAK,GAAI,MA+2FhDxrC,KAAKqgD,WAAargD,KAAKogD,eACvBpgD,KAAKsgD,eAAiBtgD,KAAKogD,eAC3BpgD,KAAKm2C,aAAe,IAAI,GAAmB6H,EAAQC,EAV9BrgD,GAAMoC,KAAKugD,aAAa,IAAIrZ,GAAqBtpC,IACnDA,GAAMoC,KAAKugD,aAAa,IAAIlZ,GAAmBzpC,KAUlEoC,KAAKwgD,YAAclR,GAAiBtvC,KAAKogD,eAAgBpgD,KAAKm8C,mBAC9Dn8C,KAAK0V,YAAc,IAAI,GAAA,gBAAgB,CACnC2O,GAAI,EACJ+7B,eAAgBpgD,KAAKogD,eACrBK,cAAezgD,KAAKogD,eACpBM,aAAc1gD,KAAK+/C,oBAAoBY,QAAQ3gD,KAAKogD,gBACpD7Z,kBAAmBvmC,KAAK+/C,oBAAoBY,QAAQ3gD,KAAKogD,gBACzDQ,OAAQ5gD,KAAKogD,eACbS,OAAQ,GACR/+C,QAAS,KACTE,OAAQ,KACR83B,QAASz3B,QAAQP,SAAQ,GACzB09B,OAAQ,aACR6G,cAAe,KACfvQ,gBAAiB91B,KAAKwgD,YAAYjZ,SAClCuZ,eAAgB,KAChBC,mBAAoB/gD,KAAKwgD,YACzBQ,kBAAmB,KACnBhF,OAAQ,CAAEvB,kBAAmB,GAAID,oBAAqB,IACtDyG,aAAc,OAElBjhD,KAAKkhD,YAAclhD,KAAKmhD,iBAAiBnhD,KAAK0V,aAC9C1V,KAAKohD,qBAET,iBAAiB1rC,GACb,MAAM2rC,EAAgBrhD,KAAKu/C,OAC3B,OAAO7pC,EAAY+sB,KAAKvhC,GAAOlD,GAAc,IAATA,EAAEqmB,IAEtCxY,GAAI7N,GAAMR,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAE0iD,aAAc1gD,KAAK+/C,oBAAoBY,QAAQ3iD,EAAE4iD,WAEjGxb,GAAUpnC,IACN,IAAIsjD,GAAY,EACZC,GAAU,EACd,OAAO,OAAA,GAAA,GAAA,CAAGvjD,GAAGykC,KAEboC,GAAI7mC,IACAgC,KAAKo/C,kBAAoB,CACrB/6B,GAAIrmB,EAAEqmB,GACNm9B,WAAYxjD,EAAEyiD,cACdC,aAAc1iD,EAAE0iD,aAChBj7C,QAASzH,EAAEwhC,OACXqhB,OAAQ7iD,EAAE6iD,OACVY,mBAAoBzhD,KAAKm/C,yBAA2B3hD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKm/C,0BAA2B,CAAEsC,mBAAoB,OACtI,QAERrc,GAAUpnC,IACV,MAAM0jD,GAAiB1hD,KAAK0/C,WACxB1hD,EAAE0iD,aAAal3C,aAAexJ,KAAKsgD,eAAe92C,WAGtD,IAFwD,WAA7BxJ,KAAKggD,qBAA0C0B,IACtE1hD,KAAK+/C,oBAAoB4B,iBAAiB3jD,EAAE4iD,QAE5C,OAAO,OAAA,GAAA,GAAA,CAAG5iD,GAAGykC,KAEb2C,GAAUpnC,IACN,MAAM6X,EAAa7V,KAAK0V,YAAYksC,WAEpC,OADAP,EAAcvvC,KAAK,IAAIq0B,GAAgBnoC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe1iD,EAAEwhC,OAAQxhC,EAAEqoC,gBACxFxwB,IAAe7V,KAAK0V,YAAYksC,WACzB,GAAA,MAEJ,CAAC5jD,KAIZonC,GAAUpnC,GAAKqE,QAAQP,QAAQ9D,KAzhCzBk4C,EA2hCWl2C,KAAK4E,SAASqzC,SA3hCT9B,EA2hCmBn2C,KAAKm2C,aA3hCVC,EA2hCwBp2C,KAAKo2C,cA3hCdp1C,EA2hC6BhB,KAAKgB,OA1hC9F,SAAUw+B,GACb,OAAOA,EAAOiD,KAAK2C,GAAUpnC,GApWrC,SAAwBk4C,EAAgBC,EAAcC,EAAe7G,EAASvuC,GAC1E,OAAO,IAAI,GAAek1C,EAAgBC,EAAcC,EAAe7G,EAASvuC,GAAQqM,QAD5F,CAoWyD6oC,EAAgBC,EAAcC,EAAep4C,EAAE0iD,aAAc1/C,GACzGyhC,KAAK52B,GAAI06B,GAAsB/oC,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAEuoC,kBAAAA,UA0hC9D1B,GAAI7mC,IACAgC,KAAKo/C,kBAAoB5hD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKo/C,mBAAoB,CAAE0C,SAAU9jD,EAAEuoC,sBAldxH,SAAqB4V,EAAmBn7C,EAAQ+gD,EAAYzR,EAA2B8L,GACnF,OAAO,SAAU5c,GACb,OAAOA,EAAOiD,KAAKL,GAASpkC,GAnPpC,SAAmBm+C,EAAmBn7C,EAAQuuC,EAAS1uC,EAAKyvC,EAA4B,YAAa8L,EAAyB,UAC1H,OAAO,IAAI,GAAWD,EAAmBn7C,EAAQuuC,EAAS1uC,EAAKyvC,EAA2B8L,GACrF4F,YAFT,CAmPmD7F,EAAmBn7C,EAAQhD,EAAEuoC,kBAAmBwb,EAAW/jD,EAAEuoC,mBAAoB+J,EAA2B8L,GAClJ3Z,KAAK52B,GAAIi1C,GAAmBtjD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAE8iD,eAAAA,SAH/E,CAqdgC9gD,KAAKm8C,kBAAmBn8C,KAAKgB,OAASH,GAAQb,KAAK6hD,aAAahhD,GAAMb,KAAKswC,0BAA2BtwC,KAAKo8C,wBAEvHvX,GAAI7mC,IAC+B,UAA3BgC,KAAKigD,oBACAjiD,EAAE6iD,OAAOoB,oBACVjiD,KAAKkiD,cAAclkD,EAAEuoC,oBAAqBvoC,EAAE6iD,OAAOsB,WAAYnkD,EAAEqmB,GAAIrmB,EAAE6iD,OAAOja,OAElF5mC,KAAKsgD,eAAiBtiD,EAAEuoC,qBAIhC1B,GAAI7mC,IACA,MAAMokD,EAAmB,IAAIzb,GAAiB3oC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe1gD,KAAK6hD,aAAa7jD,EAAEuoC,mBAAoBvoC,EAAE8iD,gBACjIO,EAAcvvC,KAAKswC,MA9iC3C,IAA0BlM,EAAgBC,EAAcC,EAAep1C,EAujCnD,GAL2B0gD,GAAiB1hD,KAAKqgD,YAC7CrgD,KAAK+/C,oBAAoB4B,iBAAiB3hD,KAAKqgD,YAI3B,CACpB,MAAM,GAAEh8B,EAAE,aAAEq8B,EAAY,OAAElhB,EAAM,cAAE6G,EAAa,OAAEwa,GAAW7iD,EACtDqkD,EAAW,IAAIlc,GAAgB9hB,EAAIrkB,KAAK6hD,aAAanB,GAAelhB,EAAQ6G,GAClFgb,EAAcvvC,KAAKuwC,GACnB,MAAMvB,EAAiBxR,GAAiBoR,EAAc1gD,KAAKm8C,mBAAmB5U,SAC9E,OAAO,OAAA,GAAA,GAAA,CAAG/pC,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAE8iD,eAAAA,EAAgBva,kBAAmBma,EAAcG,OAAQrjD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI09B,GAAS,CAAEoB,oBAAoB,EAAOE,YAAY,OAW3L,OAHAniD,KAAKqgD,WAAariD,EAAE4iD,OACpB5gD,KAAKsgD,eAAiBtiD,EAAEuoC,kBACxBvoC,EAAE8D,QAAQ,MACH,GAAA,QAKnB67C,GAAU3/C,IACN,MAAM,eAAE8iD,EAAgBz8B,GAAIg7B,EAAcqB,aAAc4B,EAAgB1B,OAAQP,EAAYQ,QAAQ,mBAAEoB,EAAkB,WAAEE,IAAiBnkD,EAC3I,OAAOgC,KAAK4/C,MAAMC,oBAAoBiB,EAAgB,CAClDzB,aAAAA,EACAiD,eAAAA,EACAjC,WAAAA,EACA4B,qBAAsBA,EACtBE,aAAcA,MAItBtd,GAAI7mC,IACA,MAAMukD,EAAc,IAAI1b,GAAiB7oC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe1gD,KAAK6hD,aAAa7jD,EAAEuoC,mBAAoBvoC,EAAE8iD,gBAC5H9gD,KAAKugD,aAAagC,KAClB12C,GAAI7N,GAAMR,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAEg+C,OAAQ5B,GAAkBp8C,EAAE8iD,eAAgB9iD,EAAE83B,gBAAiB91B,KAAKi/C,iBA94BpI,SAAqB/I,EAAgB5C,GACjC,OAAO,SAAU9T,GACb,OAAOA,EAAOiD,KAAKL,GAASpkC,IACxB,MAAM,eAAE8iD,EAAc,gBAAEhrB,EAAiBkmB,QAAQ,kBAAEvB,EAAiB,oBAAED,IAA0Bx8C,EAChG,OAAmC,IAA/Bw8C,EAAoBt3C,QAA6C,IAA7Bu3C,EAAkBv3C,OAC/C,OAAA,GAAA,GAAA,CAAG1F,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAEijD,cAAc,KAW9E,SAAgC1G,EAAQiB,EAAWgH,EAAStM,GACxD,OAAO,OAAA,GAAA,KAAA,CAAKqE,GAAQ9X,KAAKL,GAASqgB,GAgGtC,SAA0BhZ,EAAWiZ,EAASF,EAAShH,EAAWtF,GAC9D,MAAMyM,EAAgBD,GAAWA,EAAQlb,YAAckb,EAAQlb,YAAYmb,cAAgB,KAC3F,IAAKA,GAA0C,IAAzBA,EAAcz/C,OAChC,OAAO,OAAA,GAAA,GAAA,EAAG,GACd,MAAM0/C,EAA2BD,EAAc92C,IAAK1O,IAChD,MAAMuH,EAAQm2C,GAAS19C,EAAGulD,EAASxM,GACnC,IAAI5V,EACJ,GA5sBR,SAAyB57B,GACrB,OAAOA,GAAS,GAAWA,EAAMi+C,eADrC,CA4sB4Bj+C,GAChB47B,EAAagK,GAAmB5lC,EAAMi+C,cAAclZ,EAAWiZ,EAASF,EAAShH,QAEhF,CAAA,IAAI,GAAW92C,GAIhB,MAAM,IAAItD,MAAM,+BAHhBk/B,EAAagK,GAAmB5lC,EAAM+kC,EAAWiZ,EAASF,EAAShH,IAKvE,OAAOlb,EAAWmC,KAAKkC,QAE3B,OAAO,OAAA,GAAA,GAAA,CAAGie,GAA0BngB,KAAKuY,MAlB7C,CAhGgEyH,EAAMhZ,UAAWgZ,EAAMtb,MAAOqb,EAAShH,EAAWtF,IAAkBvR,GAAM72B,IAChH,IAAXA,GACR,IAHP,CAT0C0sC,EAAqBsG,EAAgBhrB,EAAiBogB,GAC/EzT,KAAKL,GAASugB,GACRA,GA3mBC,kBA2mB0BA,EAYlD,SAA8B3S,EAAgBuK,EAAQrE,EAAgB5C,GAClE,OAAO,OAAA,GAAA,KAAA,CAAKiH,GAAQ9X,KAAKsD,GAAW0c,GACzB,OAAA,GAAA,KAAA,CAAK,CACRnH,GAAyBmH,EAAMtb,MAAMve,OAAQ0qB,GAC7C+H,GAAoBoH,EAAMtb,MAAOmM,GACjCsI,GAAoB5L,EAAgByS,EAAMrb,KAAM8O,GAChDqF,GAAevL,EAAgByS,EAAMtb,MAAO+O,KAE3CzT,KAAKa,KAAaqB,GAAM72B,IACP,IAAXA,GACR,KACH62B,GAAM72B,IACY,IAAXA,GACR,IAbP,CAXyCgzC,EAAgBrG,EAAmBvE,EAAgB5C,GACxE,OAAA,GAAA,GAAA,CAAGqP,IACP92C,GAAIo1C,GAAiBzjD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAEijD,aAAAA,UAZ3E,CA84BoKjhD,KAAK4E,SAASqzC,SAAW4K,GAAQ7iD,KAAKugD,aAAasC,IAAOhe,GAAI7mC,IAClN,GAAI43C,GAAU53C,EAAEijD,cAAe,CAC3B,MAAMl9C,EAAQwkC,GAAyB,mBAAmBvoC,KAAK6hD,aAAa7jD,EAAEijD,kBAE9E,MADAl9C,EAAMlD,IAAM7C,EAAEijD,aACRl9C,KAEV8gC,GAAI7mC,IACJ,MAAM8kD,EAAY,IAAIhc,GAAe9oC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe1gD,KAAK6hD,aAAa7jD,EAAEuoC,mBAAoBvoC,EAAE8iD,iBAAkB9iD,EAAEijD,cAC5IjhD,KAAKugD,aAAauC,KAClB5hD,GAAOlD,IACP,IAAKA,EAAEijD,aAAc,CACjBjhD,KAAK+iD,2BACL,MAAMC,EAAY,IAAIxc,GAAiBxoC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe,IAGhF,OAFAW,EAAcvvC,KAAKkxC,GACnBhlD,EAAE8D,SAAQ,IACH,EAEX,OAAO,IAGX67C,GAAU3/C,IACN,GAAIA,EAAEg+C,OAAOvB,kBAAkBv3C,OAC3B,OAAO,OAAA,GAAA,GAAA,CAAGlF,GAAGykC,KAAKoC,GAAI7mC,IAClB,MAAMilD,EAAe,IAAIjc,GAAahpC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe1gD,KAAK6hD,aAAa7jD,EAAEuoC,mBAAoBvoC,EAAE8iD,gBACzH9gD,KAAKugD,aAAa0C,KAClB7d,GAAUpnC,IACV,IAAIklD,GAAe,EACnB,OAAO,OAAA,GAAA,GAAA,CAAGllD,GAAGykC,MA3hBhB6N,EA2hBiCtwC,KAAKswC,0BA3hBX4F,EA2hBsCl2C,KAAK4E,SAASqzC,SA1hBzF,SAAUzY,GACb,OAAOA,EAAOiD,KAAKL,GAASpkC,IACxB,MAAM,eAAE8iD,EAAgB9E,QAAQ,kBAAEvB,IAAwBz8C,EAC1D,IAAKy8C,EAAkBv3C,OACnB,OAAO,OAAA,GAAA,GAAA,CAAGlF,GAEd,IAAImlD,EAA4B,EAChC,OAAO,OAAA,GAAA,KAAA,CAAK1I,GACPhY,KAAKsD,GAAU0c,GAIhC,SAAoBhH,EAAWD,EAAWlL,EAA2B4F,GAEjE,OAOJ,SAAqBp0C,EAAS25C,EAAWD,EAAWtF,GAChD,MAAM1rC,EAAOhN,OAAOgN,KAAK1I,GACzB,GAAoB,IAAhB0I,EAAKtH,OACL,OAAO,OAAA,GAAA,GAAA,CAAG,IAEd,MAAMyI,EAAO,GACb,OAAO,OAAA,GAAA,KAAA,CAAKnB,GAAMi4B,KAAKL,GAAU/jC,GAYrC,SAAqB26C,EAAgByC,EAAWD,EAAWtF,GACvD,MAAMR,EAAWmF,GAAS7B,EAAgByC,EAAWvF,GACrD,OAA0B5L,GAAnBoL,EAAS5zC,QAA6B4zC,EAAS5zC,QAAQ25C,EAAWD,GAClD9F,EAAS+F,EAAWD,IAH/C,CAZyD15C,EAAQzD,GAAMo9C,EAAWD,EAAWtF,GACpFzT,KAAKoC,GAAK9mC,IACX4N,EAAKtN,GAAON,MACV4lC,GAAS,GAAIvB,GAAS,IAGpB5kC,OAAOgN,KAAKmB,GAAMzI,SAAWsH,EAAKtH,OAC3B,OAAA,GAAA,GAAA,CAAGyI,GAEP,GAAA,QAff,CARoB8vC,EAAU3K,SACE2K,EAAWD,EAAWtF,GAC7CzT,KAAK52B,GAAKu3C,IACX3H,EAAUhL,cAAgB2S,EAC1B3H,EAAU9vC,KAAOnO,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIs4B,EAAU9vC,MAAO0kC,GAA2BoL,EAAWnL,GAA2BxuC,SAC5H,QANf,CAJoD2gD,EAAMtb,MAAO2Z,EAAgBxQ,EAA2B4F,IAAkBrR,GAAI,IAAMse,KAA8Bxf,GAAS,GAAIvB,GAAS5wB,GAAK2xC,IAA8B1I,EAAkBv3C,OAAS,OAAA,GAAA,GAAA,CAAGlF,GAAK,GAAA,aAkhBnJ6mC,GAAI,CACvF/yB,KAAM,IAAMoxC,GAAe,EAC3B5kB,SAAU,KACN,IAAK4kB,EAAc,CACf,MAAMF,EAAY,IAAIxc,GAAiBxoC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe,sDAChFW,EAAcvvC,KAAKkxC,GACnBhlD,EAAE8D,SAAQ,QAjiB9C,IAAqBwuC,EAA2B4F,IAqiBxBrR,GAAI7mC,IACJ,MAAMqlD,EAAa,IAAIpc,GAAWjpC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe1gD,KAAK6hD,aAAa7jD,EAAEuoC,mBAAoBvoC,EAAE8iD,gBACrH9gD,KAAKugD,aAAa8C,QAM9B1F,GAAW3/C,IACP,MAAM,eAAE8iD,EAAgBz8B,GAAIg7B,EAAcqB,aAAc4B,EAAgB1B,OAAQP,EAAYQ,QAAQ,mBAAEoB,EAAkB,WAAEE,IAAiBnkD,EAC3I,OAAOgC,KAAK4/C,MAAME,mBAAmBgB,EAAgB,CACjDzB,aAAAA,EACAiD,eAAAA,EACAjC,WAAAA,EACA4B,qBAAsBA,EACtBE,aAAcA,MAElBt2C,GAAK7N,IACL,MAAMgjD,EAxjEtB,SAA2B7N,EAAoB3C,EAAM8S,GACjD,MAAM92B,EAGV,SAAS+2B,EAAWpQ,EAAoB3C,EAAM8S,GAE1C,GAAIA,GAAanQ,EAAmBqQ,iBAAiBhT,EAAKzyC,MAAOulD,EAAUvlD,MAAMwpC,UAAW,CACxF,MAAMxpC,EAAQulD,EAAUvlD,MACxBA,EAAMkyC,gBAAkBO,EAAKzyC,MAC7B,MAAM2rC,EA8Bd,SAA+ByJ,EAAoB3C,EAAM8S,GACrD,OAAO9S,EAAK9G,SAAS79B,IAAIsgC,IACrB,IAAK,MAAMvtC,KAAK0kD,EAAU5Z,SACtB,GAAIyJ,EAAmBqQ,iBAAiB5kD,EAAEb,MAAMwpC,SAAU4E,EAAMpuC,OAC5D,OAAOwlD,EAAWpQ,EAAoBhH,EAAOvtC,GAGrD,OAAO2kD,EAAWpQ,EAAoBhH,KAP9C,CA9B+CgH,EAAoB3C,EAAM8S,GACjE,OAAO,IAAIpU,GAASnxC,EAAO2rC,GAG1B,CACD,MAAM+Z,EAAsBtQ,EAAmB+B,SAAS1E,EAAKzyC,OAC7D,GAAI0lD,EAAqB,CACrB,MAAM9W,EAAO8W,EAAoBtc,MAEjC,OASZ,SAASuc,EAAoClT,EAAM1iC,GAC/C,GAAI0iC,EAAKzyC,MAAMypC,cAAgB15B,EAAO/P,MAAMypC,YACxC,MAAM,IAAIpmC,MAAM,yEAEpB,GAAIovC,EAAK9G,SAASxmC,SAAW4K,EAAO47B,SAASxmC,OACzC,MAAM,IAAI9B,MAAM,8EAEpB0M,EAAO/P,MAAMkyC,gBAAkBO,EAAKzyC,MACpC,IAAK,IAAIjB,EAAI,EAAGA,EAAI0zC,EAAK9G,SAASxmC,SAAUpG,EACxC4mD,EAAoClT,EAAK9G,SAAS5sC,GAAIgR,EAAO47B,SAAS5sC,IAT9E,CAVgD0zC,EAAM7D,GACnCA,EAEN,CACD,MAAM5uC,EA6BP,IAAI,GAAe,IAAI,GAAA,iBADJZ,EA5BiBqzC,EAAKzyC,OA6BA8C,KAAM,IAAI,GAAA,gBAAgB1D,EAAE+T,QAAS,IAAI,GAAA,gBAAgB/T,EAAEwtC,aAAc,IAAI,GAAA,gBAAgBxtC,EAAEiuC,UAAW,IAAI,GAAA,gBAAgBjuC,EAAEwO,MAAOxO,EAAEysC,OAAQzsC,EAAEssC,UAAWtsC,GA5BhMusC,EAAW8G,EAAK9G,SAAS79B,IAAI1O,GAAKomD,EAAWpQ,EAAoBh2C,IACvE,OAAO,IAAI+xC,GAASnxC,EAAO2rC,IA0BvC,IAA8BvsC,EA7C9B,CAH4Bg2C,EAAoB3C,EAAK5B,MAAO0U,EAAYA,EAAU1U,WAAQluC,GACtF,OAAO,IAAI0uC,GAAY5iB,EAAMgkB,GAFjC,CAwjE4DxwC,KAAKmzC,mBAAoBn1C,EAAE8iD,eAAgB9iD,EAAE+iD,oBACzF,OAAQvjD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInlB,GAAI,CAAEgjD,kBAAAA,MAOlDnc,GAAK7mC,IACDgC,KAAKogD,eAAiBpiD,EAAEuoC,kBACxBvmC,KAAKqgD,WACDrgD,KAAK+/C,oBAAoB4D,MAAM3jD,KAAKogD,eAAgBpiD,EAAE4iD,QAC1D5gD,KAAKwgD,YAAcxiD,EAAEgjD,kBACU,aAA3BhhD,KAAKigD,oBACAjiD,EAAE6iD,OAAOoB,oBACVjiD,KAAKkiD,cAAcliD,KAAKqgD,aAAcriD,EAAE6iD,OAAOsB,WAAYnkD,EAAEqmB,GAAIrmB,EAAE6iD,OAAOja,OAE9E5mC,KAAKsgD,eAAiBtiD,EAAEuoC,sBAtvDpB0Y,EAwvDOj/C,KAAKi/C,aAxvDE9L,EAwvDYnzC,KAAKmzC,mBAxvDGG,EAwvDkBuP,GAAQ7iD,KAAKugD,aAAasC,GAxvD3Bh3C,GAAI7N,IAC3E,IAAIk1C,GAAeC,EAAoBn1C,EAAEgjD,kBAAmBhjD,EAAE+iD,mBAAoBzN,GAC7EsQ,SAAS3E,GACPjhD,KAqvDkG6mC,GAAI,CACjG,OACIyc,GAAY,GAEhB,WACIA,GAAY,KAEhBtb,GAAS,KAQT,IAAKsb,IAAcC,EAAS,CAQxBvhD,KAAK+iD,2BACL,MAAMC,EAAY,IAAIxc,GAAiBxoC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe,iBAAiB1iD,EAAEqmB,gDAAgDrkB,KAAKq/C,gBACxJgC,EAAcvvC,KAAKkxC,GACnBhlD,EAAE8D,SAAQ,GAKd9B,KAAKo/C,kBAAoB,OACzB/a,GAAYh5B,IAIZ,GAHAk2C,GAAU,GA31GUx9C,EA81GWsH,IA71G3BtH,EAAgC,2BA61GD,CAC/B,MAAM8/C,EAAcjO,GAAUvqC,EAAExK,KAC3BgjD,IAMD7jD,KAAK0/C,WAAY,EACjB1/C,KAAK8jD,iBAAiB9lD,EAAE+iD,mBAAoB/iD,EAAEoiD,eAAgBpiD,EAAE4iD,SAEpE,MAAMoC,EAAY,IAAIxc,GAAiBxoC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAer1C,EAAE+xB,SAClFikB,EAAcvvC,KAAKkxC,GAGda,EAQD/mB,WAAW,KACP,MAAMinB,EAAa/jD,KAAK+/C,oBAAoB4D,MAAMt4C,EAAExK,IAAKb,KAAKqgD,YAK9D,OAAOrgD,KAAKgkD,mBAAmBD,EAAY,aAAc,KAJ1C,CACX9B,mBAAoBjkD,EAAE6iD,OAAOoB,mBAC7BE,WAAuC,UAA3BniD,KAAKigD,mBAEkD,CAAEn+C,QAAS9D,EAAE8D,QAASE,OAAQhE,EAAEgE,OAAQ83B,QAAS97B,EAAE87B,WAC3H,GAdH97B,EAAE8D,SAAQ,OAmBb,CACD9B,KAAK8jD,iBAAiB9lD,EAAE+iD,mBAAoB/iD,EAAEoiD,eAAgBpiD,EAAE4iD,QAChE,MAAMqD,EAAW,IAAIvd,GAAgB1oC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAer1C,GAC9Eg2C,EAAcvvC,KAAKmyC,GACnB,IACIjmD,EAAE8D,QAAQ9B,KAAKw/C,aAAan0C,IAEhC,MAAO64C,GACHlmD,EAAEgE,OAAOkiD,IAz4GjC,IAAoCngD,EA44GpB,OAAO,GAAA,SA10DA,IAACk7C,EAAc9L,EAAoBG,KAm1DtD,uBAAuB6I,GACnBn8C,KAAKm8C,kBAAoBA,EAGzBn8C,KAAKwgD,YAAYh0B,KAAKid,UAAYzpC,KAAKm8C,kBAE3C,gBACI,MAAMtmC,EAAa7V,KAAK0V,YAAY3X,MAKpC,OADA8X,EAAW0wB,kBAAoBvmC,KAAKsgD,eAC7BzqC,EAEX,cAAc7X,GACVgC,KAAK0V,YAAY5D,KAAKtU,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKmkD,iBAAkBnmD,IAKjF,oBACIgC,KAAKokD,8BACqB,IAAtBpkD,KAAKq/C,cACLr/C,KAAKqkD,cAAcrkD,KAAKk/C,SAAS9X,MAAK,GAAO,CAAE+a,YAAY,IAMnE,8BAISniD,KAAKskD,uBACNtkD,KAAKskD,qBAAuBtkD,KAAKk/C,SAASvf,UAAW4kB,IACjD,IAAIlE,EAAargD,KAAKwkD,SAASD,EAAY,KAC3C,MAAM/kB,EAA4B,aAAnB+kB,EAAa,KAAmB,WAAa,aAGtD3d,EAAQ2d,EAAO3d,OAAS2d,EAAO3d,MAAMyY,aAAekF,EAAO3d,MAAQ,KACzE9J,WAAW,KACP98B,KAAKgkD,mBAAmB3D,EAAY7gB,EAAQoH,EAAO,CAAEub,YAAY,KAClE,MAKf,UACI,OAAOniD,KAAK6hD,aAAa7hD,KAAKogD,gBAGlC,uBACI,OAAOpgD,KAAKo/C,kBAGhB,aAAal0C,GACTlL,KAAKu/C,OAAOztC,KAAK5G,GAkBrB,YAAYlK,GACRooC,GAAepoC,GACfhB,KAAKgB,OAASA,EAAO6K,IAAIm+B,IACzBhqC,KAAK0/C,WAAY,EACjB1/C,KAAK2/C,kBAAoB,EAG7B,cACI3/C,KAAKykD,UAGT,UACQzkD,KAAKskD,uBACLtkD,KAAKskD,qBAAqBhnB,cAC1Bt9B,KAAKskD,qBAAuB,MAgDpC,cAAcvS,EAAU2S,EAAmB,IACvC,MAAM,WAAEC,EAAU,YAAEha,EAAW,SAAES,EAAQ,oBAAEwZ,EAAmB,oBAAEC,EAAmB,iBAAEC,GAAqBJ,EACtG,OAAA,EAAA,UAAA,IAAeE,GAAuBrkD,SAAWA,QAAQC,MACzDD,QAAQC,KAAK,uEAEjB,MAAMkmB,EAAIi+B,GAAc3kD,KAAKwgD,YAAYh0B,KACnC3I,EAAIihC,EAAmB9kD,KAAKogD,eAAehV,SAAWA,EAC5D,IAAI2Z,EAAI,KACR,GAAIF,EACA,OAAQA,GACJ,IAAK,QACDE,EAAIvnD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKogD,eAAezV,aAAcA,GACtE,MACJ,IAAK,WACDoa,EAAI/kD,KAAKogD,eAAezV,YACxB,MACJ,QACIoa,EAAIpa,GAAe,UAI3Boa,EAAIH,EAAsB5kD,KAAKogD,eAAezV,YAAcA,GAAe,KAK/E,OAHU,OAANoa,IACAA,EAAI/kD,KAAKglD,iBAAiBD,IA1wEtC,SAAuB5d,EAAOoI,EAASwC,EAAUpH,EAAaS,GAC1D,GAAwB,IAApB2G,EAAS7uC,OACT,OAAO,GAAKqsC,EAAQ/iB,KAAM+iB,EAAQ/iB,KAAM+iB,EAAS5E,EAAaS,GAElE,MAAM6Z,EAuDV,SAA2BlT,GACvB,GAA4B,iBAAhBA,EAAS,IAAwC,IAApBA,EAAS7uC,QAAgC,MAAhB6uC,EAAS,GACvE,OAAO,IAAIH,IAAW,EAAM,EAAGG,GAEnC,IAAID,EAAqB,EACrBD,GAAa,EACjB,MAAM3F,EAAM6F,EAASxpC,OAAO,CAAC2jC,EAAKgZ,EAAKC,KACnC,GAAmB,iBAARD,GAA2B,MAAPA,EAAa,CACxC,GAAIA,EAAI9T,QAAS,CACb,MAAMA,EAAU,GAIhB,OAHAjxC,GAAQ+kD,EAAI9T,QAAS,CAACW,EAAU10C,KAC5B+zC,EAAQ/zC,GAA4B,iBAAb00C,EAAwBA,EAASh+B,MAAM,KAAOg+B,IAElE,IAAI7F,EAAK,CAAEkF,QAAAA,IAEtB,GAAI8T,EAAI7T,YACJ,MAAO,IAAInF,EAAKgZ,EAAI7T,aAG5B,MAAqB,iBAAR6T,EACF,IAAIhZ,EAAKgZ,GAEL,IAAXC,GACAD,EAAInxC,MAAM,KAAK5T,QAAQ,CAACilD,EAASC,KACZ,GAAbA,GAA8B,MAAZD,IAGA,GAAbC,GAA8B,KAAZD,EACvBvT,GAAa,EAEI,OAAZuT,EACLtT,IAEgB,IAAXsT,GACLlZ,EAAIzrC,KAAK2kD,MAGVlZ,GAEJ,IAAIA,EAAKgZ,IACjB,IACH,OAAO,IAAItT,GAAWC,EAAYC,EAAoB5F,GAzC1D,CAvDkC6F,GAC9B,GAAIkT,EAAIK,SACJ,OAAO,GAAK/V,EAAQ/iB,KAAM,IAAIgf,GAAgB,GAAI,IAAK+D,EAAS5E,EAAaS,GAEjF,MAAMma,EAqGV,SAA8BN,EAAKtY,EAAMxF,GACrC,GAAI8d,EAAIpT,WACJ,OAAO,IAAII,GAAStF,EAAKngB,MAAM,EAAM,GAEzC,IAAuC,IAAnC2a,EAAMI,SAASsJ,eAAuB,CACtC,MAAMnI,EAAevB,EAAMI,SAASqJ,YAKpC,OAAO,IAAIqB,GAASvJ,EADIA,IAAiBiE,EAAKngB,KACK,GAEvD,MAAMg5B,EAAWrU,GAAe8T,EAAIlT,SAAS,IAAM,EAAI,EAEvD,OAEJ,SAA0C2F,EAAOhzB,EAAOotB,GACpD,IAAIe,EAAI6E,EACJ+N,EAAK/gC,EACLghC,EAAK5T,EACT,KAAO4T,EAAKD,GAAI,CAGZ,GAFAC,GAAMD,EACN5S,EAAIA,EAAEjqB,QACDiqB,EACD,MAAM,IAAIzxC,MAAM,2BAEpBqkD,EAAK5S,EAAEpK,SAASvlC,OAEpB,OAAO,IAAI+uC,GAASY,GAAG,EAAO4S,EAAKC,GAZvC,CAF4Cve,EAAMI,SAASqJ,YADzCzJ,EAAMI,SAASsJ,eAAiB2U,EAC6BP,EAAInT,oBAdnF,CArGkDmT,EAAK1V,EAASpI,GACtDuB,EAAe6c,EAAiBrT,gBAClCG,GAA2BkT,EAAiB7c,aAAc6c,EAAiB7gC,MAAOugC,EAAIlT,UACtFK,GAAmBmT,EAAiB7c,aAAc6c,EAAiB7gC,MAAOugC,EAAIlT,UAClF,OAAO,GAAKwT,EAAiB7c,aAAcA,EAAc6G,EAAS5E,EAAaS,GAZnF,CA4wE6B1kB,EAAG1mB,KAAKogD,eAAgBrO,EAAUgT,EAAGlhC,GAuB9D,cAAchjB,EAAKggD,EAAS,CAAEoB,oBAAoB,IAC1C,OAAA,EAAA,UAAA,IAAejiD,KAAKs/C,kBAAoB,EAAA,OAAOqG,mBAC/C3lD,KAAKO,QAAQC,KAAK,qFAEtB,MAAM+uC,EAAUqG,GAAU/0C,GAAOA,EAAMb,KAAKwkD,SAAS3jD,GAC/CkjD,EAAa/jD,KAAK+/C,oBAAoB4D,MAAMpU,EAASvvC,KAAKqgD,YAChE,OAAOrgD,KAAKgkD,mBAAmBD,EAAY,aAAc,KAAMlD,GA6BnE,SAAS9O,EAAU8O,EAAS,CAAEoB,oBAAoB,IAE9C,OA6IR,SAA0BlQ,GACtB,IAAK,IAAIj1C,EAAI,EAAGA,EAAIi1C,EAAS7uC,OAAQpG,IAAK,CACtC,MAAMooD,EAAMnT,EAASj1C,GACrB,GAAW,MAAPooD,EACA,MAAM,IAAI9jD,MAAM,+BAA+B8jD,sBAAwBpoD,MAJnF,CA9IyBi1C,GACV/xC,KAAKqkD,cAAcrkD,KAAKw2C,cAAczE,EAAU8O,GAASA,GAGpE,aAAahgD,GACT,OAAOb,KAAKo2C,cAAc7K,UAAU1qC,GAGxC,SAASA,GACL,IAAI0uC,EACJ,IACIA,EAAUvvC,KAAKo2C,cAAc+C,MAAMt4C,GAEvC,MAAOwK,GACHkkC,EAAUvvC,KAAKy/C,yBAAyBp0C,EAAGrL,KAAKo2C,cAAev1C,GAEnE,OAAO0uC,EAGX,SAAS1uC,EAAK6pC,GACV,GAAIkL,GAAU/0C,GACV,OAAO0pC,GAAavqC,KAAKogD,eAAgBv/C,EAAK6pC,GAElD,MAAM6E,EAAUvvC,KAAKwkD,SAAS3jD,GAC9B,OAAO0pC,GAAavqC,KAAKogD,eAAgB7Q,EAAS7E,GAEtD,iBAAiBx5B,GACb,OAAO1T,OAAOgN,KAAK0G,GAAQ3I,OAAO,CAACuF,EAAQzP,KACvC,MAAMN,EAAQmT,EAAO7S,GAIrB,OAHIN,MAAAA,IACA+P,EAAOzP,GAAON,GAEX+P,GACR,IAEP,qBACI9N,KAAKkhD,YAAYvhB,UAAU3hC,IACvBgC,KAAK0/C,WAAY,EACjB1/C,KAAK2/C,iBAAmB3hD,EAAEqmB,GAC1BrkB,KAAKu/C,OACAztC,KAAK,IAAIw0B,GAActoC,EAAEqmB,GAAIrkB,KAAK6hD,aAAa7jD,EAAE0iD,cAAe1gD,KAAK6hD,aAAa7hD,KAAKogD,kBAC5FpgD,KAAKm/C,yBAA2Bn/C,KAAKo/C,kBACrCp/C,KAAKo/C,kBAAoB,KACzBphD,EAAE8D,SAAQ,IACXuJ,IACCrL,KAAKO,QAAQC,KAAK,kCAG1B,mBAAmBogD,EAAQphB,EAAQ6G,EAAewa,EAAQ+E,GACtD,MAAMC,EAAiB7lD,KAAKmkD,gBAI5B,GAAI0B,GAA6B,eAAXrmB,GAAqD,eAA1BqmB,EAAermB,QAC5DqmB,EAAejF,OAAOp3C,aAAeo3C,EAAOp3C,WAC5C,OAAOnH,QAAQP,SAAQ,GAK3B,GAAI+jD,GAA4B,cAAVrmB,GAAoD,aAA1BqmB,EAAermB,QAC3DqmB,EAAejF,OAAOp3C,aAAeo3C,EAAOp3C,WAC5C,OAAOnH,QAAQP,SAAQ,GAK3B,GAAI+jD,GAA4B,YAAVrmB,GAAkD,eAA1BqmB,EAAermB,QACzDqmB,EAAejF,OAAOp3C,aAAeo3C,EAAOp3C,WAC5C,OAAOnH,QAAQP,SAAQ,GAE3B,IAAIA,EACAE,EACA83B,EACA8rB,GACA9jD,EAAU8jD,EAAa9jD,QACvBE,EAAS4jD,EAAa5jD,OACtB83B,EAAU8rB,EAAa9rB,SAGvBA,EAAU,IAAIz3B,QAAQ,CAAC6pC,EAAK4Z,KACxBhkD,EAAUoqC,EACVlqC,EAAS8jD,IAGjB,MAAMzhC,IAAOrkB,KAAKq/C,aAiBlB,OAhBAr/C,KAAK+lD,cAAc,CACf1hC,GAAAA,EACAmb,OAAAA,EACA6G,cAAAA,EACA+Z,eAAgBpgD,KAAKogD,eACrBK,cAAezgD,KAAKqgD,WACpBO,OAAAA,EACAC,OAAAA,EACA/+C,QAAAA,EACAE,OAAAA,EACA83B,QAAAA,EACAhE,gBAAiB91B,KAAKwgD,YAAYjZ,SAClCwZ,mBAAoB/gD,KAAKwgD,cAItB1mB,EAAQh2B,MAAOuH,GACXhJ,QAAQL,OAAOqJ,IAG9B,cAAcxK,EAAKshD,EAAY99B,EAAIuiB,GAC/B,MAAMQ,EAAOpnC,KAAKo2C,cAAc7K,UAAU1qC,GAC1C+lC,EAAQA,GAAS,GACb5mC,KAAKk/C,SAAS8G,qBAAqB5e,IAAS+a,EAE5CniD,KAAKk/C,SAAS+G,aAAa7e,EAAM,GAAI5pC,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIyjB,GAAQ,CAAEyY,aAAch7B,KAG7FrkB,KAAKk/C,SAASgH,GAAG9e,EAAM,GAAI5pC,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIyjB,GAAQ,CAAEyY,aAAch7B,KAG3F,iBAAiB8hC,EAAaC,EAAWxF,GACrC5gD,KAAKwgD,YAAc2F,EACnBnmD,KAAKogD,eAAiBgG,EACtBpmD,KAAKqgD,WAAargD,KAAK+/C,oBAAoB4D,MAAM3jD,KAAKogD,eAAgBQ,GACtE5gD,KAAK+iD,2BAET,2BACI/iD,KAAKk/C,SAAS+G,aAAajmD,KAAKo2C,cAAc7K,UAAUvrC,KAAKqgD,YAAa,GAAI,CAAEhB,aAAcr/C,KAAK2/C,2BAG3GX,EAAOx8C,UAAO,SAAwBxE,GAAK,OAAO,IAAKA,GAAKghD,GAAQ,EAAA,sBAAgB,EAAA,MAAc,EAAA,sBAAgB3S,IAAgB,EAAA,sBAAgBmS,IAAyB,EAAA,sBAAgB,EAAA,UAAkB,EAAA,sBAAgB,EAAA,UAAkB,EAAA,sBAAgB,EAAA,uBAA+B,EAAA,sBAAgB,EAAA,UAAkB,EAAA,2BAAgB99C,KAChVs+C,EAAOv8C,WAAQ,EAAA,gCAA0B,CAAEC,MAAOs8C,EAAQt/C,QAASs/C,EAAOx8C,iCA4HpE6jD,EACF,YAAYC,EAAQnf,EAAOof,EAAU3jD,EAAUs4B,GAC3Cl7B,KAAKsmD,OAASA,EACdtmD,KAAKmnC,MAAQA,EACbnnC,KAAK+xC,SAAW,GACA,MAAZwU,GACA3jD,EAAS0N,aAAa4qB,EAAGsrB,cAAe,WAAY,KAW5D,eAAezU,GAEP/xC,KAAK+xC,SADO,MAAZA,EACgBlhC,MAAMC,QAAQihC,GAAYA,EAAW,CAACA,GAGtC,GAMxB,wBAAwBh0C,GAChB,OAAA,EAAA,UAAA,IAAewC,SAAWA,QAAQC,MAClCD,QAAQC,KAAK,wEAEjBR,KAAKymD,SAAW1oD,EAEpB,UACI,MAAM8iD,EAAS,CACXoB,mBAAoByE,GAAc1mD,KAAKiiD,oBACvCE,WAAYuE,GAAc1mD,KAAKmiD,YAC/Bvb,MAAO5mC,KAAK4mC,OAGhB,OADA5mC,KAAKsmD,OAAOjC,cAAcrkD,KAAKuvC,QAASsR,IACjC,EAEX,cACI,OAAO7gD,KAAKsmD,OAAO9P,cAAcx2C,KAAK+xC,SAAU,CAC5C4S,WAAY3kD,KAAKmnC,MACjBwD,YAAa3qC,KAAK2qC,YAClBS,SAAUprC,KAAKorC,SACfwZ,oBAAqB8B,GAAc1mD,KAAKymD,UACxC5B,oBAAqB7kD,KAAK6kD,oBAC1BC,iBAAkB4B,GAAc1mD,KAAK8kD,4BAIjDuB,EAAW7jD,UAAO,SAA4BxE,GAAK,OAAO,IAAKA,GAAKqoD,GAAY,EAAA,+BAAyB,IAAS,EAAA,+BAAyB,IAAiB,EAAA,+BAAyB,YAAa,EAAA,+BAAyB,EAAA,WAAmB,EAAA,+BAAyB,EAAA,cACvQA,EAAWniD,UAAO,EAAA,+BAAyB,CAAEvC,KAAM0kD,EAAYliD,UAAW,CAAC,CAAC,GAAI,aAAc,GAAI,EAAG,IAAK,EAAG,SAAUwiD,aAAc,SAAiCxe,EAAIrsB,GAAgB,EAALqsB,GAC7K,EAAA,wBAAkB,SAAA,WAA0D,OAAOrsB,EAAI8qC,cACtFxiD,OAAQ,CAAEyiD,WAAY,aAAcjC,oBAAqB,sBAAuBja,YAAa,cAAeS,SAAU,WAAYyZ,oBAAqB,sBAAuBC,iBAAkB,mBAAoB7C,mBAAoB,qBAAsBE,WAAY,aAAcvb,MAAO,gCA2DlSkgB,EACF,YAAYR,EAAQnf,EAAO4f,GACvB/mD,KAAKsmD,OAASA,EACdtmD,KAAKmnC,MAAQA,EACbnnC,KAAK+mD,iBAAmBA,EACxB/mD,KAAK+xC,SAAW,GAChB/xC,KAAK69B,aAAeyoB,EAAO/G,OAAO5f,UAAW9gC,IACrCA,aAAaynC,IACbtmC,KAAKgnD,2BAYjB,eAAejV,GAEP/xC,KAAK+xC,SADO,MAAZA,EACgBlhC,MAAMC,QAAQihC,GAAYA,EAAW,CAACA,GAGtC,GAMxB,wBAAwBh0C,GAChB,OAAA,EAAA,UAAA,IAAewC,SAAWA,QAAQC,MAClCD,QAAQC,KAAK,uEAEjBR,KAAKymD,SAAW1oD,EAEpB,YAAYkpD,GACRjnD,KAAKgnD,yBAET,cACIhnD,KAAK69B,aAAaP,cAEtB,QAAQ4pB,EAAQC,EAASC,EAASC,GAC9B,GAAe,IAAXH,GAAgBC,GAAWC,GAAWC,EACtC,OAAO,EAEX,GAA2B,iBAAhBrnD,KAAK+d,QAAsC,SAAf/d,KAAK+d,OACxC,OAAO,EAEX,MAAM8iC,EAAS,CACXoB,mBAAoByE,GAAc1mD,KAAKiiD,oBACvCE,WAAYuE,GAAc1mD,KAAKmiD,YAC/Bvb,MAAO5mC,KAAK4mC,OAGhB,OADA5mC,KAAKsmD,OAAOjC,cAAcrkD,KAAKuvC,QAASsR,IACjC,EAEX,yBACI7gD,KAAKsnD,KAAOtnD,KAAK+mD,iBAAiBQ,mBAAmBvnD,KAAKsmD,OAAOzE,aAAa7hD,KAAKuvC,UAEvF,cACI,OAAOvvC,KAAKsmD,OAAO9P,cAAcx2C,KAAK+xC,SAAU,CAC5C4S,WAAY3kD,KAAKmnC,MACjBwD,YAAa3qC,KAAK2qC,YAClBS,SAAUprC,KAAKorC,SACfwZ,oBAAqB8B,GAAc1mD,KAAKymD,UACxC5B,oBAAqB7kD,KAAK6kD,oBAC1BC,iBAAkB4B,GAAc1mD,KAAK8kD,4BAIjDgC,EAAmBtkD,UAAO,SAAoCxE,GAAK,OAAO,IAAKA,GAAK8oD,GAAoB,EAAA,+BAAyB,IAAS,EAAA,+BAAyB,IAAiB,EAAA,+BAAyB,EAAA,oBAC7MA,EAAmB5iD,UAAO,EAAA,+BAAyB,CAAEvC,KAAMmlD,EAAoB3iD,UAAW,CAAC,CAAC,IAAK,aAAc,IAAK,CAAC,OAAQ,aAAc,KAAMqjD,SAAU,EAAGb,aAAc,SAAyCxe,EAAIrsB,GAAgB,EAALqsB,GAC5N,EAAA,wBAAkB,SAAA,SAA8Dsf,GAAU,OAAO3rC,EAAI8qC,QAAQa,EAAOP,OAAQO,EAAON,QAASM,EAAOL,QAASK,EAAOJ,aAC5J,EAALlf,IACF,EAAA,4BAAsB,OAAQrsB,EAAIwrC,KAAM,EAAA,4BACxC,EAAA,yBAAmB,SAAUxrC,EAAIiC,UAChC3Z,OAAQ,CAAEyiD,WAAY,aAAcjC,oBAAqB,sBAAuB7mC,OAAQ,SAAU4sB,YAAa,cAAeS,SAAU,WAAYyZ,oBAAqB,sBAAuBC,iBAAkB,mBAAoB7C,mBAAoB,qBAAsBE,WAAY,aAAcvb,MAAO,SAAW8gB,SAAU,CAAC,EAAA,2CAoDhV,SAAShB,GAAc7nD,GACnB,MAAa,KAANA,KAAcA,qBAmEnB8oD,EACF,YAAYrB,EAAQz8C,EAASjH,EAAUG,EAAK6kD,EAAMC,GAC9C7nD,KAAKsmD,OAASA,EACdtmD,KAAK6J,QAAUA,EACf7J,KAAK4C,SAAWA,EAChB5C,KAAK+C,IAAMA,EACX/C,KAAK4nD,KAAOA,EACZ5nD,KAAK6nD,aAAeA,EACpB7nD,KAAK2xB,QAAU,GACf3xB,KAAK8nD,UAAW,EAChB9nD,KAAK+nD,wBAA0B,CAAErd,OAAO,GACxC1qC,KAAK69B,aAAeyoB,EAAO/G,OAAO5f,UAAW9gC,IACrCA,aAAaynC,IACbtmC,KAAKgoD,WAIjB,qBACIhoD,KAAKioD,MAAMhB,QAAQtnB,UAAUnuB,GAAKxR,KAAKgoD,UACvChoD,KAAKkoD,eAAejB,QAAQtnB,UAAUnuB,GAAKxR,KAAKgoD,UAChDhoD,KAAKgoD,SAET,qBAAqBr8C,GACjB,MAAMgmB,EAAU9gB,MAAMC,QAAQnF,GAAQA,EAAOA,EAAKoI,MAAM,KACxD/T,KAAK2xB,QAAUA,EAAQzwB,OAAO/D,KAAOA,GAEzC,YAAY8pD,GACRjnD,KAAKgoD,SAET,cACIhoD,KAAK69B,aAAaP,cAEtB,SACSt9B,KAAKioD,OAAUjoD,KAAKkoD,gBAAmBloD,KAAKsmD,OAAO5G,WAExDr9C,QAAQP,UAAU2B,KAAK,KACnB,MAAM0kD,EAAiBnoD,KAAKmoD,iBACxBnoD,KAAK8nD,WAAaK,IAClBnoD,KAAK8nD,SAAWK,EAChBnoD,KAAK+C,IAAIc,eACT7D,KAAK2xB,QAAQxxB,QAAShD,IACdgrD,EACAnoD,KAAK4C,SAASojB,SAAShmB,KAAK6J,QAAQ28C,cAAerpD,GAGnD6C,KAAK4C,SAAS0kB,YAAYtnB,KAAK6J,QAAQ28C,cAAerpD,QAM1E,aAAampD,GACT,OAAQsB,GAAStB,EAAOwB,SAASF,EAAKrY,QAASvvC,KAAK+nD,wBAAwBrd,OAEhF,iBACI,MAAM0d,EAAkBpoD,KAAKqoD,aAAaroD,KAAKsmD,QAC/C,OAAOtmD,KAAK4nD,MAAQQ,EAAgBpoD,KAAK4nD,OACrC5nD,KAAK6nD,cAAgBO,EAAgBpoD,KAAK6nD,eAC1C7nD,KAAKioD,MAAMhxC,KAAKmxC,IAAoBpoD,KAAKkoD,eAAejxC,KAAKmxC,WAGzET,EAAiBnlD,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAK2pD,GAAkB,EAAA,+BAAyB,IAAS,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,WAAmB,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyB,GAAY,GAAI,EAAA,+BAAyB,GAAoB,KACvWA,EAAiBzjD,UAAO,EAAA,+BAAyB,CAAEvC,KAAMgmD,EAAkBxjD,UAAW,CAAC,CAAC,GAAI,mBAAoB,KAAMmkD,eAAgB,SAAyCngB,EAAIrsB,EAAKysC,GAIhL,IAAIC,EAJiM,EAALrgB,IAChM,EAAA,4BAAsBogB,EAAU,IAAY,GAC5C,EAAA,4BAAsBA,EAAU,IAAoB,IAC7C,EAALpgB,IAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAImsC,MAAQO,GACjE,EAAA,4BAAsBA,EAAK,EAAA,8BAA0B1sC,EAAIosC,eAAiBM,KACzEpkD,OAAQ,CAAE2jD,wBAAyB,0BAA2BU,iBAAkB,oBAAsBC,SAAU,CAAC,oBAAqBhB,SAAU,CAAC,EAAA,0DAsEpJiB,EACF,YAAYpV,EAAgB2L,EAAUxJ,EAAUr4C,EAAMurD,GAClD5oD,KAAKuzC,eAAiBA,EACtBvzC,KAAKk/C,SAAWA,EAChBl/C,KAAK01C,SAAWA,EAChB11C,KAAK4oD,eAAiBA,EACtB5oD,KAAKyvC,UAAY,KACjBzvC,KAAK6oD,gBAAkB,KACvB7oD,KAAK8oD,eAAiB,IAAI,EAAA,aAC1B9oD,KAAK+oD,iBAAmB,IAAI,EAAA,aAC5B/oD,KAAK3C,KAAOA,GAv2IG,UAw2Ifk2C,EAAeyV,qBAAqBhpD,KAAK3C,KAAM2C,MAEnD,cACIA,KAAKuzC,eAAe0V,uBAAuBjpD,KAAK3C,MAEpD,WACI,IAAK2C,KAAKyvC,UAAW,CAGjB,MAAM78B,EAAU5S,KAAKuzC,eAAec,WAAWr0C,KAAK3C,MAChDuV,GAAWA,EAAQu0B,QACfv0B,EAAQwiC,UAERp1C,KAAKq1C,OAAOziC,EAAQwiC,UAAWxiC,EAAQu0B,OAIvCnnC,KAAK21C,aAAa/iC,EAAQu0B,MAAOv0B,EAAQ8iC,UAAY,QAKrE,kBACI,QAAS11C,KAAKyvC,UAElB,gBACI,IAAKzvC,KAAKyvC,UACN,MAAM,IAAIruC,MAAM,2BACpB,OAAOpB,KAAKyvC,UAAUyZ,SAE1B,qBACI,IAAKlpD,KAAKyvC,UACN,MAAM,IAAIruC,MAAM,2BACpB,OAAOpB,KAAK6oD,gBAEhB,yBACI,OAAI7oD,KAAK6oD,gBACE7oD,KAAK6oD,gBAAgBthB,SAAS57B,KAElC,GAKX,SACI,IAAK3L,KAAKyvC,UACN,MAAM,IAAIruC,MAAM,2BACpBpB,KAAKk/C,SAASxK,SACd,MAAMyU,EAAMnpD,KAAKyvC,UAGjB,OAFAzvC,KAAKyvC,UAAY,KACjBzvC,KAAK6oD,gBAAkB,KAChBM,EAKX,OAAOC,EAAKC,GACRrpD,KAAKyvC,UAAY2Z,EACjBppD,KAAK6oD,gBAAkBQ,EACvBrpD,KAAKk/C,SAASoK,OAAOF,EAAIG,UAE7B,aACI,GAAIvpD,KAAKyvC,UAAW,CAChB,MAAMtyC,EAAI6C,KAAKypC,UACfzpC,KAAKyvC,UAAU1mC,UACf/I,KAAKyvC,UAAY,KACjBzvC,KAAK6oD,gBAAkB,KACvB7oD,KAAK+oD,iBAAiBS,KAAKrsD,IAGnC,aAAaksD,EAAgB3T,GACzB,GAAI11C,KAAK86C,YACL,MAAM,IAAI15C,MAAM,+CAEpBpB,KAAK6oD,gBAAkBQ,EACvB,MAGM3pD,GADNg2C,EAAWA,GAAY11C,KAAK01C,UACHnyC,wBAHR8lD,EAAepZ,gBACLzI,YAAYiC,WAGjCggB,EAAgBzpD,KAAKuzC,eAAewB,mBAAmB/0C,KAAK3C,MAAMqsC,SAClEuO,EAAW,IAAIyR,GAAeL,EAAgBI,EAAezpD,KAAKk/C,SAASjH,UACjFj4C,KAAKyvC,UAAYzvC,KAAKk/C,SAAS17C,gBAAgB9D,EAASM,KAAKk/C,SAASh8C,OAAQ+0C,GAG9Ej4C,KAAK4oD,eAAe/kD,eACpB7D,KAAK8oD,eAAeU,KAAKxpD,KAAKyvC,UAAUyZ,kBAGhDP,EAAanmD,UAAO,SAA8BxE,GAAK,OAAO,IAAKA,GAAK2qD,GAAc,EAAA,+BAAyBnK,IAAyB,EAAA,+BAAyB,EAAA,kBAA0B,EAAA,+BAAyB,EAAA,0BAAkC,EAAA,+BAAyB,QAAS,EAAA,+BAAyB,EAAA,qBACjTmK,EAAazkD,UAAO,EAAA,+BAAyB,CAAEvC,KAAMgnD,EAAcxkD,UAAW,CAAC,CAAC,kBAAmBwlD,QAAS,CAAEb,eAAgB,WAAYC,iBAAkB,cAAgBL,SAAU,CAAC,kBAyBvL,MAAMgB,GACF,YAAYviB,EAAOsiB,EAAe7gC,GAC9B5oB,KAAKmnC,MAAQA,EACbnnC,KAAKypD,cAAgBA,EACrBzpD,KAAK4oB,OAASA,EAElB,IAAIlmB,EAAOknD,GACP,OAAIlnD,IAAU,GACH1C,KAAKmnC,MAEZzkC,IAAU87C,GACHx+C,KAAKypD,cAETzpD,KAAK4oB,OAAOjrB,IAAI+E,EAAOknD,IAkBtC,MAAMC,IA2BN,MAAM,GACF,QAAQ1iB,EAAOjgC,GACX,OAAO,OAAA,GAAA,GAAA,CAAG,0BAeZ4iD,EACF,YAAYxD,EAAQyD,EAAc9L,EAAUhG,EAAU+R,GAClDhqD,KAAKsmD,OAASA,EACdtmD,KAAKi4C,SAAWA,EAChBj4C,KAAKgqD,mBAAqBA,EAG1BhqD,KAAKg+C,OAAS,IAAI,GAAmB+L,EAAc9L,EAF9BrgD,GAAM0oD,EAAO/F,aAAa,IAAIrZ,GAAqBtpC,IACrDA,GAAM0oD,EAAO/F,aAAa,IAAIlZ,GAAmBzpC,KAGxE,kBACIoC,KAAK69B,aACD79B,KAAKsmD,OAAO/G,OACP9c,KAAKvhC,GAAQmK,GAAMA,aAAai7B,IAAgBP,GAAU,IAAM/lC,KAAKW,YACrEg/B,UAAU,QAEvB,UACI,MAAM/6B,EAAW5E,KAAKi4C,SAASt6C,IAAI,EAAA,aACnC,OAAOqC,KAAKiqD,cAAcrlD,EAAU5E,KAAKsmD,OAAOtlD,QAKpD,cACIhB,KAAK69B,aAAaP,cAEtB,cAAc14B,EAAUukC,GACpB,MAAM+C,EAAM,GACZ,IAAK,MAAM/E,KAASgC,EAEhB,GAAIhC,EAAMwC,eAAiBxC,EAAM4R,SAAW5R,EAAMoO,cAAe,CAC7D,MAAMgD,EAAcpR,EAAMoO,cAC1BrJ,EAAIzrC,KAAKT,KAAKiqD,cAAc1R,EAAY17C,OAAQ07C,EAAYpP,cAGvDhC,EAAMwC,eAAiBxC,EAAM4R,QAClC7M,EAAIzrC,KAAKT,KAAKkqD,cAActlD,EAAUuiC,IAGjCA,EAAMuC,UACXwC,EAAIzrC,KAAKT,KAAKiqD,cAAcrlD,EAAUuiC,EAAMuC,WAGpD,OAAO,OAAA,GAAA,KAAA,CAAKwC,GAAKzJ,KAAKY,KAAYx3B,GAAK2F,QAE3C,cAAc5M,EAAUuiC,GACpB,OAAOnnC,KAAKgqD,mBAAmBrpD,QAAQwmC,EAAO,IAC1BnnC,KAAKg+C,OAAOhG,KAAKpzC,EAASqzC,SAAU9Q,GACrC1E,KAAKL,GAAUphC,IAC1BmmC,EAAMoO,cAAgBv0C,EACfhB,KAAKiqD,cAAcjpD,EAAOnE,OAAQmE,EAAOmoC,oBAKhE2gB,EAAgBtnD,UAAO,SAAiCxE,GAAK,OAAO,IAAKA,GAAK8rD,GAAiB,EAAA,sBAAgB,IAAS,EAAA,sBAAgB,EAAA,uBAA+B,EAAA,sBAAgB,EAAA,UAAkB,EAAA,sBAAgB,EAAA,UAAkB,EAAA,sBAAgBD,MAC3PC,EAAgBrnD,WAAQ,EAAA,gCAA0B,CAAEC,MAAOonD,EAAiBpqD,QAASoqD,EAAgBtnD,iCAmB/F2nD,EACF,YAAY7D,EACY8D,EAAkBrqD,EAAU,IAChDC,KAAKsmD,OAASA,EACdtmD,KAAKoqD,iBAAmBA,EACxBpqD,KAAKD,QAAUA,EACfC,KAAKqqD,OAAS,EACdrqD,KAAKsqD,WAAa,aAClBtqD,KAAKuqD,WAAa,EAClBvqD,KAAK40C,MAAQ,GAEb70C,EAAQyqD,0BAA4BzqD,EAAQyqD,2BAA6B,WACzEzqD,EAAQ0qD,gBAAkB1qD,EAAQ0qD,iBAAmB,WAEzD,OAImD,aAA3CzqD,KAAKD,QAAQyqD,2BACbxqD,KAAKoqD,iBAAiBM,4BAA4B,UAEtD1qD,KAAK2qD,yBAA2B3qD,KAAK4qD,qBACrC5qD,KAAK6qD,yBAA2B7qD,KAAK8qD,sBAEzC,qBACI,OAAO9qD,KAAKsmD,OAAO/G,OAAO5f,UAAUt0B,IAC5BA,aAAa86B,IAEbnmC,KAAK40C,MAAM50C,KAAKqqD,QAAUrqD,KAAKoqD,iBAAiBW,oBAChD/qD,KAAKsqD,WAAaj/C,EAAE+6B,kBACpBpmC,KAAKuqD,WAAal/C,EAAEg7B,cAAgBh7B,EAAEg7B,cAAcgZ,aAAe,GAE9Dh0C,aAAai7B,KAClBtmC,KAAKqqD,OAASh/C,EAAEgZ,GAChBrkB,KAAKgrD,oBAAoB3/C,EAAGrL,KAAKsmD,OAAO9B,SAASn5C,EAAEk7B,mBAAmB6E,aAIlF,sBACI,OAAOprC,KAAKsmD,OAAO/G,OAAO5f,UAAUt0B,IAC1BA,aAAau8B,KAGfv8B,EAAE7D,SAC6C,QAA3CxH,KAAKD,QAAQyqD,0BACbxqD,KAAKoqD,iBAAiBa,iBAAiB,CAAC,EAAG,IAEK,YAA3CjrD,KAAKD,QAAQyqD,2BAClBxqD,KAAKoqD,iBAAiBa,iBAAiB5/C,EAAE7D,UAKzC6D,EAAEy8B,QAA2C,YAAjC9nC,KAAKD,QAAQ0qD,gBACzBzqD,KAAKoqD,iBAAiBc,eAAe7/C,EAAEy8B,QAES,aAA3C9nC,KAAKD,QAAQyqD,2BAClBxqD,KAAKoqD,iBAAiBa,iBAAiB,CAAC,EAAG,OAK3D,oBAAoBpjB,EAAaC,GAC7B9nC,KAAKsmD,OAAO/F,aAAa,IAAI3Y,GAAOC,EAAiC,aAApB7nC,KAAKsqD,WAA4BtqD,KAAK40C,MAAM50C,KAAKuqD,YAAc,KAAMziB,IAE1H,cACQ9nC,KAAK2qD,0BACL3qD,KAAK2qD,yBAAyBrtB,cAE9Bt9B,KAAK6qD,0BACL7qD,KAAK6qD,yBAAyBvtB,sBAI1C6sB,EAAe3nD,UAAO,SAAgCxE,GAAK,OAAO,IAAKA,GAAKmsD,GAAgB,EAAA,sBAAgB,IAAS,EAAA,sBAAgB,EAAA,kBAA0B,EAAA,2BAAgBzpD,KAC/KypD,EAAe1nD,WAAQ,EAAA,gCAA0B,CAAEC,MAAOynD,EAAgBzqD,QAASyqD,EAAe3nD,kBAoBlG,MAMM2oD,GAAuB,IAAI,EAAA,eAAe,wBAI1CC,GAAuB,IAAI,EAAA,eAAe,wBAE1CC,GAAmB,CACrB,EAAA,SACA,CAAEvmD,QAASunC,GAAevQ,SAAUwQ,IACpC,CACIxnC,QAAS,GACTK,WAmLR,SAAqBixC,EAAetC,EAAUoL,EAAUjH,EAAU+F,EAAQC,EAAUj9C,EAAQsqD,EAAO,GAAIvL,EAAqB5M,GACxH,MAAMmT,EAAS,IAAI,GAAO,KAAMlQ,EAAetC,EAAUoL,EAAUjH,EAAU+F,EAAQC,EAAU5T,GAAQrpC,IAavG,GAZI++C,IACAuG,EAAOvG,oBAAsBA,GAE7B5M,IACAmT,EAAOnT,mBAAqBA,GAE5BmY,EAAK9L,eACL8G,EAAO9G,aAAe8L,EAAK9L,cAE3B8L,EAAK7L,2BACL6G,EAAO7G,yBAA2B6L,EAAK7L,0BAEvC6L,EAAKC,cAAe,CACpB,MAAMC,EAAM,OAAA,EAAA,gBAAA,GACZlF,EAAO/G,OAAO5f,UAAWt0B,IACrBmgD,EAAIC,SAAS,iBAAiBpgD,EAAEqgD,YAAYruD,MAC5CmuD,EAAI7uB,IAAItxB,EAAE7B,YACVgiD,EAAI7uB,IAAItxB,GACRmgD,EAAIG,gBAeZ,OAZIL,EAAKtL,sBACLsG,EAAOtG,oBAAsBsL,EAAKtL,qBAElCsL,EAAKhb,4BACLgW,EAAOhW,0BAA4Bgb,EAAKhb,2BAExCgb,EAAKrL,oBACLqG,EAAOrG,kBAAoBqL,EAAKrL,mBAEhCqL,EAAKlP,yBACLkK,EAAOlK,uBAAyBkP,EAAKlP,wBAElCkK,GArNHlhD,KAAM,CACFinC,GAAemS,GAAwB,EAAA,SAAU,EAAA,SAAU,EAAA,sBAAuB,EAAA,SAClFT,GAAQoN,GAAsB,CArtD1C,QAqtDgE,IAAI,EAAA,UACxD,CAp3DZ,QAo3DiC,IAAI,EAAA,YAGjC3M,GACA,CAAE15C,QAAS,GAAgBK,WAgN/B,SAAmBmhD,GACf,OAAOA,EAAO9F,YAAYh0B,MAjNwBpnB,KAAM,CAAC,KACzD,CAAEN,QAAS,EAAA,sBAAuBg3B,SAAU,EAAA,wBAC5C,GACA,GApOJ,MACI,QAAQqL,EAAOjgC,GACX,OAAOA,IAAKu7B,KAAK4B,GAAW,IAAM,OAAA,GAAA,GAAA,CAAG,UAoOzC,CAAEv/B,QAASqmD,GAAsBpmD,SAnB1B,CAAEwmD,eAAe,KAqB5B,SAASK,KACL,OAAO,IAAI,EAAA,aAAa,SAAU,uBAqDhCC,EAEF,YAAYnnD,EAAO4hD,IASnB,eAAend,EAAQnoC,GACnB,MAAO,CACH4D,SAAUinD,EACVhnD,UAAW,CACPwmD,GACAS,GAAc3iB,GACd,CACIrkC,QAASsmD,GACTjmD,WAAY4mD,GACZ3mD,KAAM,CAAC,CAAC,GAAQ,IAAI,EAAA,SAAY,IAAI,EAAA,YAExC,CAAEN,QAASqmD,GAAsBpmD,SAAU/D,GAAkB,IAC7D,CACI8D,QAAS,EAAA,iBACTK,WAAY6mD,GACZ5mD,KAAM,CAAC,EAAA,iBAAkB,CAAC,IAAI,EAAA,OAAO,EAAA,eAAgB,IAAI,EAAA,UAAa+lD,KAE1E,CACIrmD,QAAS,GACTK,WAAY8mD,GACZ7mD,KAAM,CAAC,GAAQ,EAAA,iBAAkB+lD,KAErC,CACIrmD,QAAS+kD,GACTqC,YAAalrD,GAAUA,EAAOgpD,mBAAqBhpD,EAAOgpD,mBACtD,IAER,CAAEllD,QAAS,EAAA,aAAcG,OAAO,EAAME,WAAYymD,IAuNvD,CACH,GACA,CACI9mD,QAAS,EAAA,gBACTG,OAAO,EACPE,WAAYgnD,GACZ/mD,KAAM,CAAC,KAEX,CAAEN,QAASsnD,GAAoBjnD,WAAYknD,GAAsBjnD,KAAM,CAAC,KACxE,CAAEN,QAAS,EAAA,uBAAwBG,OAAO,EAAMinD,YAAaE,OAxNjE,gBAAgBjjB,GACZ,MAAO,CAAEvkC,SAAUinD,EAAchnD,UAAW,CAACinD,GAAc3iB,aAGnE0iB,EAAaxmD,UAAO,EAAA,8BAAwB,CAAE1D,KAAMkqD,IACpDA,EAAavmD,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA8B1B,GAAK,OAAO,IAAKA,GAAK6tD,GAAc,EAAA,sBAAgBT,GAAsB,GAAI,EAAA,sBAAgB,GAAQ,aAqB3L,SAASa,GAAqB3F,EAAQ8D,EAAkBppD,GAIpD,OAHIA,EAAOsrD,cACPlC,EAAiBmC,UAAUvrD,EAAOsrD,cAE/B,IAAI,GAAehG,EAAQ8D,EAAkBppD,GAExD,SAASgrD,GAAwBQ,EAA0BC,EAAU1sD,EAAU,IAC3E,OAAOA,EAAQ2sD,QAAU,IAAI,EAAA,qBAAqBF,EAA0BC,GACxE,IAAI,EAAA,qBAAqBD,EAA0BC,GAE3D,SAASV,GAAoBzF,GACzB,GAAIA,EACA,MAAM,IAAIllD,MAAM,wGAEpB,MAAO,UAkBX,SAAS0qD,GAAc3iB,GACnB,MAAO,CACH,CAAErkC,QAAS,EAAA,6BAA8BG,OAAO,EAAMF,SAAUokC,GAChE,CAAErkC,QAASi5C,GAAQ94C,OAAO,EAAMF,SAAUokC,uBAsD5CwjB,EACF,YAAY1U,GACRj4C,KAAKi4C,SAAWA,EAChBj4C,KAAK4sD,gBAAiB,EACtB5sD,KAAK6sD,0BAA4B,IAAI,GAAA,QAEzC,iBAEI,OADU7sD,KAAKi4C,SAASt6C,IAAI,EAAA,qBAAsB0E,QAAQP,QAAQ,OACzD2B,KAAK,KACV,IAAI3B,EAAU,KACd,MAAMoqC,EAAM,IAAI7pC,QAAQzE,GAAKkE,EAAUlE,GACjC0oD,EAAStmD,KAAKi4C,SAASt6C,IAAI,IAC3B2tD,EAAOtrD,KAAKi4C,SAASt6C,IAAIwtD,IAC/B,GAAInrD,KAAK8sD,iBAAiBxB,IAAStrD,KAAK+sD,gBAAgBzB,GACpDxpD,GAAQ,QAEP,GAA+B,aAA3BwpD,EAAK0B,kBACV1G,EAAOlC,8BACPtiD,GAAQ,OAEP,CAAA,GAA+B,YAA3BwpD,EAAK0B,kBAgBV,MAAM,IAAI5rD,MAAM,uCAAuCkqD,EAAK0B,sBAf5D1G,EAAO1G,MAAME,mBAAqB,IAEzB9/C,KAAK4sD,eAOC,OAAA,GAAA,GAAA,CAAG,OANV5sD,KAAK4sD,gBAAiB,EACtB9qD,GAAQ,GACD9B,KAAK6sD,2BAOpBvG,EAAO0G,oBAKX,OAAO9gB,IAGf,kBAAkB+gB,GACd,MAAM3B,EAAOtrD,KAAKi4C,SAASt6C,IAAIwtD,IACzB+B,EAAYltD,KAAKi4C,SAASt6C,IAAI,IAC9BwvD,EAAiBntD,KAAKi4C,SAASt6C,IAAI,IACnC2oD,EAAStmD,KAAKi4C,SAASt6C,IAAI,IAC3ByrD,EAAMppD,KAAKi4C,SAASt6C,IAAI,EAAA,gBAC1BsvD,IAA6B7D,EAAIgE,WAAW,KAG5CptD,KAAK+sD,gBAAgBzB,GACrBhF,EAAO0G,oBAEFhtD,KAAK8sD,iBAAiBxB,IAC3BhF,EAAOlC,8BAEX8I,EAAUG,kBACVF,EAAexkD,OACf29C,EAAOgH,uBAAuBlE,EAAImE,eAAe,IACjDvtD,KAAK6sD,0BAA0B/6C,KAAK,MACpC9R,KAAK6sD,0BAA0BvuB,YAEnC,gBAAgBgtB,GACZ,MAAkC,mBAA3BA,EAAK0B,oBAAqE,IAA3B1B,EAAK0B,wBAC5BtsD,IAA3B4qD,EAAK0B,kBAEb,iBAAiB1B,GACb,MAAkC,oBAA3BA,EAAK0B,oBAAsE,IAA3B1B,EAAK0B,0BAGpEL,EAAkBnqD,UAAO,SAAmCxE,GAAK,OAAO,IAAKA,GAAK2uD,GAAmB,EAAA,sBAAgB,EAAA,YACrHA,EAAkBlqD,WAAQ,EAAA,gCAA0B,CAAEC,MAAOiqD,EAAmBjtD,QAASitD,EAAkBnqD,kBAO3G,SAAS2pD,GAAkBvuD,GACvB,OAAOA,EAAE4vD,eAAelvD,KAAKV,GAEjC,SAASyuD,GAAqBzuD,GAC1B,OAAOA,EAAE6vD,kBAAkBnvD,KAAKV,GAQpC,MAAMwuD,GAAqB,IAAI,EAAA,eAAe,sBEr0K9C,SAASsB,GAAexiD,KAAUyiD,GAC9B,OAAIA,EAAUzqD,OACHyqD,EAAU12C,KAAKuuC,GAAYt6C,EAAMs6C,IAErCt6C,EAAM0iD,QAAU1iD,EAAMm8C,UAAYn8C,EAAMi8C,SAAWj8C,EAAMk8C,QC5I7D,MAAM,WAAe,GACxB,YAAYllB,EAAW2rB,GACnBztC,QAEJ,SAASwmB,EAAOngC,EAAQ,GACpB,OAAOzG,MCLR,MAAM,WAAoB,GAC7B,YAAYkiC,EAAW2rB,GACnBztC,MAAM8hB,EAAW2rB,GACjB7tD,KAAKkiC,UAAYA,EACjBliC,KAAK6tD,KAAOA,EACZ7tD,KAAK8tD,SAAU,EAEnB,SAASlnB,EAAOngC,EAAQ,GACpB,GAAIzG,KAAKg9B,OACL,OAAOh9B,KAEXA,KAAK4mC,MAAQA,EACb,MAAMviB,EAAKrkB,KAAKqkB,GACV6d,EAAYliC,KAAKkiC,UAOvB,OANU,MAAN7d,IACArkB,KAAKqkB,GAAKrkB,KAAK+tD,eAAe7rB,EAAW7d,EAAI5d,IAEjDzG,KAAK8tD,SAAU,EACf9tD,KAAKyG,MAAQA,EACbzG,KAAKqkB,GAAKrkB,KAAKqkB,IAAMrkB,KAAKguD,eAAe9rB,EAAWliC,KAAKqkB,GAAI5d,GACtDzG,KAEX,eAAekiC,EAAW7d,EAAI5d,EAAQ,GAClC,OAAOwnD,YAAY/rB,EAAUzP,MAAMn0B,KAAK4jC,EAAWliC,MAAOyG,GAE9D,eAAey7B,EAAW7d,EAAI5d,EAAQ,GAClC,GAAc,OAAVA,GAAkBzG,KAAKyG,QAAUA,IAA0B,IAAjBzG,KAAK8tD,QAC/C,OAAOzpC,EAEX6pC,cAAc7pC,GAGlB,QAAQuiB,EAAOngC,GACX,GAAIzG,KAAKg9B,OACL,OAAO,IAAI57B,MAAM,gCAErBpB,KAAK8tD,SAAU,EACf,MAAM/pD,EAAQ/D,KAAKmuD,SAASvnB,EAAOngC,GACnC,GAAI1C,EACA,OAAOA,GAEe,IAAjB/D,KAAK8tD,SAAgC,MAAX9tD,KAAKqkB,KACpCrkB,KAAKqkB,GAAKrkB,KAAK+tD,eAAe/tD,KAAKkiC,UAAWliC,KAAKqkB,GAAI,OAG/D,SAASuiB,EAAOngC,GACZ,IAAI86C,GAAU,EACV6M,OAAa1tD,EACjB,IACIV,KAAK6tD,KAAKjnB,GAEd,MAAOv7B,GACHk2C,GAAU,EACV6M,IAAe/iD,GAAKA,GAAK,IAAIjK,MAAMiK,GAEvC,GAAIk2C,EAEA,OADAvhD,KAAKs9B,cACE8wB,EAGf,eACI,MAAM/pC,EAAKrkB,KAAKqkB,GACV6d,EAAYliC,KAAKkiC,UACjBmsB,EAAUnsB,EAAUmsB,QACpB3pC,EAAQ2pC,EAAQniD,QAAQlM,MAC9BA,KAAK6tD,KAAO,KACZ7tD,KAAK4mC,MAAQ,KACb5mC,KAAK8tD,SAAU,EACf9tD,KAAKkiC,UAAY,MACF,IAAXxd,GACA2pC,EAAQ5+C,OAAOiV,EAAO,GAEhB,MAANL,IACArkB,KAAKqkB,GAAKrkB,KAAK+tD,eAAe7rB,EAAW7d,EAAI,OAEjDrkB,KAAKyG,MAAQ,MC5Ed,IAAA,GAAA,YAAM6nD,EACT,YAAYC,EAAiB15B,EAAMy5B,EAAUz5B,KACzC70B,KAAKuuD,gBAAkBA,EACvBvuD,KAAK60B,IAAMA,EAEf,SAASg5B,EAAMpnD,EAAQ,EAAGmgC,GACtB,OAAO,IAAI5mC,KAAKuuD,gBAAgBvuD,KAAM6tD,GAAM1rB,SAASyE,EAAOngC,WAGpE6nD,EAAUz5B,IAAM,IAAMD,KAAKC,SATpB,GCCA,MAAM,WAAuBy5B,GAChC,YAAYC,EAAiB15B,EAAMy5B,GAAUz5B,KACzCzU,MAAMmuC,EAAiB,IACf,GAAeh1B,UAAY,GAAeA,WAAav5B,KAChD,GAAeu5B,SAAS1E,MAGxBA,KAGf70B,KAAKquD,QAAU,GACfruD,KAAK8iC,QAAS,EACd9iC,KAAKwuD,eAAY9tD,EAErB,SAASmtD,EAAMpnD,EAAQ,EAAGmgC,GACtB,OAAI,GAAerN,UAAY,GAAeA,WAAav5B,KAChD,GAAeu5B,SAAS4I,SAAS0rB,EAAMpnD,EAAOmgC,GAG9CxmB,MAAM+hB,SAAS0rB,EAAMpnD,EAAOmgC,GAG3C,MAAMrU,GACF,MAAM,QAAE87B,GAAYruD,KACpB,GAAIA,KAAK8iC,OAEL,YADAurB,EAAQ5tD,KAAK8xB,GAGjB,IAAIxuB,EACJ/D,KAAK8iC,QAAS,EACd,EAAA,CACI,GAAI/+B,EAAQwuB,EAAOk8B,QAAQl8B,EAAOqU,MAAOrU,EAAO9rB,OAC5C,YAEC8rB,EAAS87B,EAAQlrB,SAE1B,GADAnjC,KAAK8iC,QAAS,EACV/+B,EAAO,CACP,KAAOwuB,EAAS87B,EAAQlrB,SACpB5Q,EAAO+K,cAEX,MAAMv5B,ICvCX,MAAM,GAAQ,IAAI,GAAe,ICAjC,SAAS2qD,GAAaC,EAASzsB,EAAY,IAC9C,OAAQ1C,GAAWA,EAAOC,KAAK,IAAImvB,GAAqBD,EAASzsB,IAErE,MAAM0sB,GACF,YAAYD,EAASzsB,GACjBliC,KAAK2uD,QAAUA,EACf3uD,KAAKkiC,UAAYA,EAErB,KAAKtD,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAuBf,EAAY5+B,KAAK2uD,QAAS3uD,KAAKkiC,aAG1F,MAAM,WAA+B,GACjC,YAAYtyB,EAAa++C,EAASzsB,GAC9B9hB,MAAMxQ,GACN5P,KAAK2uD,QAAUA,EACf3uD,KAAKkiC,UAAYA,EACjBliC,KAAK6uD,sBAAwB,KAC7B7uD,KAAK8uD,UAAY,KACjB9uD,KAAKkkC,UAAW,EAEpB,MAAMnmC,GACFiC,KAAK+uD,gBACL/uD,KAAK8uD,UAAY/wD,EACjBiC,KAAKkkC,UAAW,EAChBlkC,KAAKqW,IAAIrW,KAAK6uD,sBAAwB7uD,KAAKkiC,UAAUC,SAAS6sB,GAAchvD,KAAK2uD,QAAS3uD,OAE9F,YACIA,KAAKivD,gBACLjvD,KAAK4P,YAAY0uB,WAErB,gBAEI,GADAt+B,KAAK+uD,gBACD/uD,KAAKkkC,SAAU,CACf,MAAM,UAAE4qB,GAAc9uD,KACtBA,KAAK8uD,UAAY,KACjB9uD,KAAKkkC,UAAW,EAChBlkC,KAAK4P,YAAYkC,KAAKg9C,IAG9B,gBACI,MAAMD,EAAwB7uD,KAAK6uD,sBACL,OAA1BA,IACA7uD,KAAK4xB,OAAOi9B,GACZA,EAAsBvxB,cACtBt9B,KAAK6uD,sBAAwB,OAIzC,SAASG,GAAapwB,GAClBA,EAAWqwB,gBC1Cf,SAASC,GAAsBnxD,GAC3B,OAAgB,MAATA,GAAiB,GAAGA,GAAY,QAU3C,SAASoxD,GAAqBpxD,EAAOqxD,EAAgB,GACjD,OAMJ,SAAwBrxD,GAIpB,OAAQsxD,MAAMrgD,WAAWjR,MAAYsxD,MAAM9sB,OAAOxkC,IAJtD,CAN0BA,GAASwkC,OAAOxkC,GAASqxD,EAoBnD,SAASE,GAAYvxD,GACjB,OAAO8S,MAAMC,QAAQ/S,GAASA,EAAQ,CAACA,GAW3C,SAASwxD,GAAoBxxD,GACzB,OAAa,MAATA,EACO,GAEa,iBAAVA,EAAqBA,EAAWA,EAAH,KAc/C,SAASyxD,GAAcC,GACnB,OAAOA,aAAwB,EAAA,WAAaA,EAAajJ,cAAgBiJ,EC5D7E,IAAIC,GAMJ,IACIA,GAAsC,oBAATC,MAAwBA,KAAKC,gBAE9D,MAAOC,IACHH,IAAqB,EAMzB,IA+III,GA4FAC,GA3OA,GAAyB,MACzB,MAAMC,EACF,YAAYC,GACRjwD,KAAKiwD,YAAcA,EAKnBjwD,KAAKkwD,UAAYlwD,KAAKiwD,YAClB,OAAA,EAAA,kBAAA,CAAkBjwD,KAAKiwD,aAAmC,iBAAbxuD,YAA2BA,SAE5EzB,KAAKmwD,KAAOnwD,KAAKkwD,WAAa,UAAUh4B,KAAKk4B,UAAUC,WAEvDrwD,KAAKswD,QAAUtwD,KAAKkwD,WAAa,kBAAkBh4B,KAAKk4B,UAAUC,WAGlErwD,KAAKuwD,MAAQvwD,KAAKkwD,cAAiBx8C,OAAO88C,SAAUd,KACjC,oBAARe,MAAwBzwD,KAAKmwD,OAASnwD,KAAKswD,QAItDtwD,KAAK0wD,OAAS1wD,KAAKkwD,WACf,eAAeh4B,KAAKk4B,UAAUC,aAAerwD,KAAKuwD,QAAUvwD,KAAKmwD,OAASnwD,KAAKswD,QAEnFtwD,KAAK2wD,IAAM3wD,KAAKkwD,WAAa,mBAAmBh4B,KAAKk4B,UAAUC,cACzD,aAAc38C,QAMpB1T,KAAK4wD,QAAU5wD,KAAKkwD,WAAa,uBAAuBh4B,KAAKk4B,UAAUC,WAGvErwD,KAAK6wD,QAAU7wD,KAAKkwD,WAAa,WAAWh4B,KAAKk4B,UAAUC,aAAerwD,KAAKswD,QAK/EtwD,KAAK8wD,OAAS9wD,KAAKkwD,WAAa,UAAUh4B,KAAKk4B,UAAUC,YAAcrwD,KAAK0wD,QAepF,OAZJV,EAASxtD,UAAO,SAA0BxE,GAAK,OAAO,IAAKA,GAAKgyD,GAAU,EAAA,sBAAgB,EAAA,eACtFA,EAASvtD,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA8B,OAAO,IAAIswD,EAAS,OAAA,EAAA,sBAAA,CAAS,EAAA,eAAkBttD,MAAOstD,EAAUvwD,WAAY,SAWlJuwD,GAtDkB,GAgEzB,GAA+B,MAC/B,MAAMe,GAQN,OANJA,EAAe1rD,UAAO,EAAA,8BAAwB,CAAE1D,KAAMovD,IACtDA,EAAezrD,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAK+yD,MAKpGA,GATwB,GAuGnC,SAASC,GAAgCjxD,GACrC,OApBJ,WACI,GAA6B,MAAzB+vD,IAAmD,oBAAXp8C,OACxC,IACIA,OAAOgiB,iBAAiB,OAAQ,KAAMl4B,OAAOC,eAAe,GAAI,UAAW,CACvEE,IAAK,IAAMmyD,IAAwB,aAIvCA,GAAwBA,KAAyB,EAGzD,OAAOA,GAXX,GAoB6C/vD,IAAYA,EAAQkuC,QA6EjE,SAASgjB,GAAepnD,GACpB,GATJ,WACI,GAA4B,MAAxBkmD,GAA8B,CAC9B,MAAMmB,EAA2B,oBAAbzvD,SAA2BA,SAASyvD,KAAO,KAC/DnB,MAA0BmB,IAASA,EAAKC,mBAAoBD,EAAKE,cAErE,OAAOrB,GALX,GAS8B,CACtB,MAAMvT,EAAW3yC,EAAQwnD,YAAcxnD,EAAQwnD,cAAgB,KAG/D,GAA0B,oBAAfC,YAA8BA,YAAc9U,aAAoB8U,WACvE,OAAO9U,EAGf,OAAO,KC1QX,IAAI,GAAwC,MACxC,MAAM+U,EACF,OAAOpmD,GACH,MAAmC,oBAArBqmD,iBAAmC,KAAO,IAAIA,iBAAiBrmD,IASrF,OANJomD,EAAwB/uD,UAAO,SAAyCxE,GAAK,OAAO,IAAKA,GAAKuzD,IAC1FA,EAAwB9uD,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA6C,OAAO,IAAI6xD,GAA8B7uD,MAAO6uD,EAAyB9xD,WAAY,SAKzL8xD,GAZiC,GAexC,GAAgC,MAChC,MAAME,EACF,YAAYC,GACR1xD,KAAK0xD,yBAA2BA,EAEhC1xD,KAAK2xD,kBAAoB,IAAIhyD,IAEjC,cACIK,KAAK2xD,kBAAkBxxD,QAAQ,CAACqR,EAAG3H,IAAY7J,KAAK4xD,iBAAiB/nD,IAEzE,QAAQ4lD,GACJ,MAAM5lD,EAAU2lD,GAAcC,GAC9B,OAAO,IAAI,GAAA,WAAYpuB,IACnB,MACMxD,EADS79B,KAAK6xD,gBAAgBhoD,GACR81B,UAAU0B,GACtC,MAAO,KACHxD,EAAaP,cACbt9B,KAAK8xD,kBAAkBjoD,MAQnC,gBAAgBA,GACZ,GAAK7J,KAAK2xD,kBAAkBrvD,IAAIuH,GAa5B7J,KAAK2xD,kBAAkBh0D,IAAIkM,GAAS4qB,YAbE,CACtC,MAAMs9B,EAAS,IAAI,GAAA,QACb1wB,EAAWrhC,KAAK0xD,yBAAyBtzD,OAAO4zD,GAAaD,EAAOjgD,KAAKkgD,IAC3E3wB,GACAA,EAAS4wB,QAAQpoD,EAAS,CACtBqoD,eAAe,EACfC,WAAW,EACXC,SAAS,IAGjBpyD,KAAK2xD,kBAAkBvvD,IAAIyH,EAAS,CAAEw3B,SAAAA,EAAU0wB,OAAAA,EAAQt9B,MAAO,IAKnE,OAAOz0B,KAAK2xD,kBAAkBh0D,IAAIkM,GAASkoD,OAM/C,kBAAkBloD,GACV7J,KAAK2xD,kBAAkBrvD,IAAIuH,KAC3B7J,KAAK2xD,kBAAkBh0D,IAAIkM,GAAS4qB,QAC/Bz0B,KAAK2xD,kBAAkBh0D,IAAIkM,GAAS4qB,OACrCz0B,KAAK4xD,iBAAiB/nD,IAKlC,iBAAiBA,GACb,GAAI7J,KAAK2xD,kBAAkBrvD,IAAIuH,GAAU,CACrC,MAAM,SAAEw3B,EAAQ,OAAE0wB,GAAW/xD,KAAK2xD,kBAAkBh0D,IAAIkM,GACpDw3B,GACAA,EAASgxB,aAEbN,EAAOzzB,WACPt+B,KAAK2xD,kBAAkB73C,OAAOjQ,KAa1C,OATJ4nD,EAAgBjvD,UAAO,SAAiCxE,GAAK,OAAO,IAAKA,GAAKyzD,GAAiB,EAAA,sBAAgB,MAC3GA,EAAgBhvD,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAqC,OAAO,IAAI+xD,EAAgB,OAAA,EAAA,sBAAA,CAAS,MAA8B/uD,MAAO+uD,EAAiBhyD,WAAY,SAQ1LgyD,GA5EyB,GAkFhC,GAAkC,MAClC,MAAMa,EACF,YAAYC,EAAkBC,EAAaC,GACvCzyD,KAAKuyD,iBAAmBA,EACxBvyD,KAAKwyD,YAAcA,EACnBxyD,KAAKyyD,QAAUA,EAEfzyD,KAAKkL,MAAQ,IAAI,EAAA,aACjBlL,KAAK0yD,WAAY,EACjB1yD,KAAK2yD,qBAAuB,KAMhC,eAAiB,OAAO3yD,KAAK0yD,UAC7B,aAAa30D,GACTiC,KAAK0yD,UAAYxD,GAAsBnxD,GACvCiC,KAAK0yD,UAAY1yD,KAAKy9B,eAAiBz9B,KAAKghC,aAGhD,eAAiB,OAAOhhC,KAAK4yD,UAC7B,aAAa70D,GACTiC,KAAK4yD,UAAYzD,GAAqBpxD,GACtCiC,KAAKghC,aAET,qBACShhC,KAAK2yD,sBAAyB3yD,KAAK0L,UACpC1L,KAAKghC,aAGb,cACIhhC,KAAKy9B,eAET,aACIz9B,KAAKy9B,eACL,MAAMs0B,EAAS/xD,KAAKuyD,iBAAiBN,QAAQjyD,KAAKwyD,aAKlDxyD,KAAKyyD,QAAQt4B,kBAAkB,KAC3Bn6B,KAAK2yD,sBACA3yD,KAAK6yD,SAAWd,EAAOtvB,KAAKisB,GAAa1uD,KAAK6yD,WAAad,GAAQpyB,UAAU3/B,KAAKkL,SAG/F,eACQlL,KAAK2yD,sBACL3yD,KAAK2yD,qBAAqBr1B,eA+BtC,OA3BJg1B,EAAkB9vD,UAAO,SAAmCxE,GAAK,OAAO,IAAKA,GAAKs0D,GAAmB,EAAA,+BAAyB,IAAkB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,UACtNA,EAAkBpuD,UAAO,EAAA,+BAAyB,CAAEvC,KAAM2wD,EAAmBnuD,UAAW,CAAC,CAAC,GAAI,oBAAqB,KAAMC,OAAQ,CAAEsH,SAAU,CAAC,4BAA6B,YAAamnD,SAAU,YAAclJ,QAAS,CAAEz+C,MAAO,qBAAuBw9C,SAAU,CAAC,uBA0BzP4J,GA/E2B,GAiFlC,GAAgC,MAChC,MAAMQ,GAaN,OAXJA,EAAgBztD,UAAO,EAAA,8BAAwB,CAAE1D,KAAMmxD,IACvDA,EAAgBxtD,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAK80D,IAAuBjuD,UAAW,CAAC,MAUzIiuD,GAdyB,GC4XpC,MAAMC,WA7SN,MACI,YAAYC,GACRhzD,KAAKgzD,OAASA,EACdhzD,KAAKizD,kBAAoB,EACzBjzD,KAAKkzD,YAAc,KACnBlzD,KAAKmzD,OAAQ,EACbnzD,KAAKozD,iBAAmB,IAAI,GAAA,QAC5BpzD,KAAKqzD,uBAAyB,GAAA,aAAav1B,MAC3C99B,KAAKszD,WAAY,EACjBtzD,KAAKuzD,qBAAuB,GAK5BvzD,KAAKwzD,iBAAoBtjD,GAASA,EAAKxE,SAEvC1L,KAAKyzD,gBAAkB,GAKvBzzD,KAAK0zD,OAAS,IAAI,GAAA,QAElB1zD,KAAKukD,OAAS,IAAI,GAAA,QAIdyO,aAAkB,EAAA,WAClBA,EAAO/L,QAAQtnB,UAAWg0B,IACtB,GAAI3zD,KAAKkzD,YAAa,CAClB,MACMU,EADYD,EAASE,UACA3nD,QAAQlM,KAAKkzD,aACpCU,GAAY,GAAKA,IAAa5zD,KAAKizD,mBACnCjzD,KAAKizD,iBAAmBW,MAW5C,cAAch0B,GAEV,OADA5/B,KAAKwzD,iBAAmB5zB,EACjB5/B,KAOX,SAAS8zD,GAAa,GAElB,OADA9zD,KAAKmzD,MAAQW,EACN9zD,KAMX,wBAAwB+zD,GAAU,GAE9B,OADA/zD,KAAKszD,UAAYS,EACV/zD,KAOX,0BAA0Bg0D,GAEtB,OADAh0D,KAAKi0D,YAAcD,EACZh0D,KAMX,wBAAwBwK,GAEpB,OADAxK,KAAKuzD,qBAAuB/oD,EACrBxK,KAMX,cAAck0D,EAAmB,KAC7B,GAAIl0D,KAAKgzD,OAAO9vD,QAAUlD,KAAKgzD,OAAO/7C,KAAK/G,GAAiC,mBAAlBA,EAAKikD,UAC3D,MAAM/yD,MAAM,gFAqBhB,OAnBApB,KAAKqzD,uBAAuB/1B,cAI5Bt9B,KAAKqzD,uBAAyBrzD,KAAKozD,iBAAiB3wB,KAAKoC,GAAIuvB,GAAUp0D,KAAKyzD,gBAAgBhzD,KAAK2zD,IAAU1F,GAAawF,GAAmBhzD,GAAO,IAAMlB,KAAKyzD,gBAAgBvwD,OAAS,GAAI2I,GAAI,IAAM7L,KAAKyzD,gBAAgB1oD,KAAK,MAAM40B,UAAU00B,IAC1O,MAAMC,EAAQt0D,KAAKu0D,iBAGnB,IAAK,IAAIz3D,EAAI,EAAGA,EAAIw3D,EAAMpxD,OAAS,EAAGpG,IAAK,CACvC,MAAM4nB,GAAS1kB,KAAKizD,iBAAmBn2D,GAAKw3D,EAAMpxD,OAC5CgN,EAAOokD,EAAM5vC,GACnB,IAAK1kB,KAAKwzD,iBAAiBtjD,IACuC,IAA9DA,EAAKikD,WAAWnmD,cAAcoT,OAAOlV,QAAQmoD,GAAoB,CACjEr0D,KAAKw0D,cAAc9vC,GACnB,OAGR1kB,KAAKyzD,gBAAkB,KAEpBzzD,KAEX,cAAckQ,GACV,MAAMukD,EAAqBz0D,KAAKkzD,YAChClzD,KAAK00D,iBAAiBxkD,GAClBlQ,KAAKkzD,cAAgBuB,GACrBz0D,KAAKukD,OAAOzyC,KAAK9R,KAAKizD,kBAO9B,UAAU/nD,GACN,MAAMypD,EAAUzpD,EAAMypD,QAEhBC,EADY,CAAC,SAAU,UAAW,UAAW,YACfzqB,MAAMqb,IAC9Bt6C,EAAMs6C,IAAaxlD,KAAKuzD,qBAAqBrnD,QAAQs5C,IAAa,GAE9E,OAAQmP,GACJ,KV1YA,EU4YI,YADA30D,KAAK0zD,OAAO5hD,OAEhB,KV5XO,GU6XH,GAAI9R,KAAKszD,WAAasB,EAAmB,CACrC50D,KAAK60D,oBACL,MAGA,OAER,KVtYK,GUuYD,GAAI70D,KAAKszD,WAAasB,EAAmB,CACrC50D,KAAK80D,wBACL,MAGA,OAER,KV7YQ,GU8YJ,GAAI90D,KAAKi0D,aAAeW,EAAmB,CAClB,QAArB50D,KAAKi0D,YAAwBj0D,KAAK80D,wBAA0B90D,KAAK60D,oBACjE,MAGA,OAER,KVvZO,GUwZH,GAAI70D,KAAKi0D,aAAeW,EAAmB,CAClB,QAArB50D,KAAKi0D,YAAwBj0D,KAAK60D,oBAAsB70D,KAAK80D,wBAC7D,MAGA,OAER,QAaI,aAZIF,GAAqBlH,GAAexiD,EAAO,eAGvCA,EAAM7M,KAA4B,IAArB6M,EAAM7M,IAAI6E,OACvBlD,KAAKozD,iBAAiBthD,KAAK5G,EAAM7M,IAAI02D,sBAE/BJ,GVhZpB,IUgZoCA,GVvXpC,IUuXsDA,GV9ZnD,IU8ZsEA,GVrZtE,KUsZW30D,KAAKozD,iBAAiBthD,KAAKkjD,OAAOC,aAAaN,MAO/D30D,KAAKyzD,gBAAkB,GACvBvoD,EAAMgqD,iBAGV,sBACI,OAAOl1D,KAAKizD,iBAGhB,iBACI,OAAOjzD,KAAKkzD,YAGhB,WACI,OAAOlzD,KAAKyzD,gBAAgBvwD,OAAS,EAGzC,qBACIlD,KAAKm1D,sBAAsB,EAAG,GAGlC,oBACIn1D,KAAKm1D,sBAAsBn1D,KAAKgzD,OAAO9vD,OAAS,GAAI,GAGxD,oBACIlD,KAAKizD,iBAAmB,EAAIjzD,KAAKo1D,qBAAuBp1D,KAAKq1D,sBAAsB,GAGvF,wBACIr1D,KAAKizD,iBAAmB,GAAKjzD,KAAKmzD,MAAQnzD,KAAKs1D,oBACzCt1D,KAAKq1D,uBAAuB,GAEtC,iBAAiBnlD,GACb,MAAMqlD,EAAYv1D,KAAKu0D,iBACjB7vC,EAAwB,iBAATxU,EAAoBA,EAAOqlD,EAAUrpD,QAAQgE,GAC5DslD,EAAaD,EAAU7wC,GAE7B1kB,KAAKkzD,YAA4B,MAAdsC,EAAqB,KAAOA,EAC/Cx1D,KAAKizD,iBAAmBvuC,EAO5B,sBAAsB+wC,GAClBz1D,KAAKmzD,MAAQnzD,KAAK01D,qBAAqBD,GAASz1D,KAAK21D,wBAAwBF,GAOjF,qBAAqBA,GACjB,MAAMnB,EAAQt0D,KAAKu0D,iBACnB,IAAK,IAAIz3D,EAAI,EAAGA,GAAKw3D,EAAMpxD,OAAQpG,IAAK,CACpC,MAAM4nB,GAAS1kB,KAAKizD,iBAAoBwC,EAAQ34D,EAAKw3D,EAAMpxD,QAAUoxD,EAAMpxD,OAE3E,IAAKlD,KAAKwzD,iBADGc,EAAM5vC,IAGf,YADA1kB,KAAKw0D,cAAc9vC,IAU/B,wBAAwB+wC,GACpBz1D,KAAKm1D,sBAAsBn1D,KAAKizD,iBAAmBwC,EAAOA,GAO9D,sBAAsB/wC,EAAOkxC,GACzB,MAAMtB,EAAQt0D,KAAKu0D,iBACnB,GAAKD,EAAM5vC,GAAX,CAGA,KAAO1kB,KAAKwzD,iBAAiBc,EAAM5vC,KAE/B,IAAK4vC,EADL5vC,GAASkxC,GAEL,OAGR51D,KAAKw0D,cAAc9vC,IAGvB,iBACI,OAAO1kB,KAAKgzD,kBAAkB,EAAA,UAAYhzD,KAAKgzD,OAAOa,UAAY7zD,KAAKgzD,SA+B3E,cACI5yC,SAASue,WACT3+B,KAAK61D,QAAU,UAMnB,eAAeC,GAEX,OADA91D,KAAK61D,QAAUC,EACR91D,KAEX,cAAckQ,GACVkQ,MAAMo0C,cAActkD,GAChBlQ,KAAKw1D,YACLx1D,KAAKw1D,WAAWO,MAAM/1D,KAAK61D,UAmBvC,IAAI,GAAqC,MACrC,MAAMG,EACF,YAAYC,GACRj2D,KAAKi2D,UAAYA,EAQrB,WAAWpsD,GAGP,OAAOA,EAAQqsD,aAAa,YAUhC,UAAUrsD,GACN,OA2GZ,SAAqBA,GAGjB,SAAUA,EAAQssD,aAAetsD,EAAQusD,cACF,mBAA3BvsD,EAAQwsD,gBAAiCxsD,EAAQwsD,iBAAiBnzD,QAJlF,CA3G+B2G,IAAqD,YAAzC8J,iBAAiB9J,GAASysD,WAS7D,WAAWzsD,GAEP,IAAK7J,KAAKi2D,UAAU/F,UAChB,OAAO,EAEX,MAAMqG,EAoFlB,SAAyB7iD,GACrB,IACI,OAAOA,EAAO6iD,aAElB,MAAO1G,IACH,OAAO,MALf,EAuFmBl9C,EA3KwC9I,GA6K3C2sD,eAAiB7jD,EAAK6jD,cAAcC,aAAe/iD,QAFnE,IAAmBf,EA1KP,GAAI4jD,EAAc,CACd,MAAMG,EAAYH,GAAgBA,EAAaI,SAAStmD,cAExD,IAAwC,IAApCumD,GAAiBL,GACjB,OAAO,EAGX,IAAKv2D,KAAKi2D,UAAU1F,OAASvwD,KAAKi2D,UAAUvF,SAAyB,WAAdgG,EACnD,OAAO,EAGX,IAAK12D,KAAKi2D,UAAU1F,OAASvwD,KAAKi2D,UAAUvF,UAAY1wD,KAAK62D,UAAUN,GACnE,OAAO,EAGf,IAAII,EAAW9sD,EAAQ8sD,SAAStmD,cAC5BymD,EAAgBF,GAAiB/sD,GACrC,GAAIA,EAAQqsD,aAAa,mBACrB,OAA0B,IAAnBY,EAEX,GAAiB,WAAbH,EAGA,OAAO,EAEX,GAAiB,UAAbA,EAAsB,CACtB,IAAK9sD,EAAQqsD,aAAa,YAEtB,OAAO,EAEN,GAAIl2D,KAAKi2D,UAAU1F,MAEpB,OAAO,EAGf,GAAiB,UAAboG,EAAsB,CACtB,IAAK9sD,EAAQqsD,aAAa,aAAel2D,KAAKi2D,UAAU3F,QAEpD,OAAO,EAEN,GAAItwD,KAAKi2D,UAAU1F,OAASvwD,KAAKi2D,UAAUrF,QAE5C,OAAO,EAGf,OAAiB,WAAb+F,IAA0B32D,KAAKi2D,UAAU1F,QAASvwD,KAAKi2D,UAAUvF,WAKjE1wD,KAAKi2D,UAAUvF,QAAU1wD,KAAKi2D,UAAUtF,MAiGxD,SAAkC9mD,GAC9B,IAAI8sD,EAAW9sD,EAAQ8sD,SAAStmD,cAC5B0mD,EAAyB,UAAbJ,GAAwB9sD,EAAQlI,KAChD,MAAqB,SAAdo1D,GACc,aAAdA,GACa,WAAbJ,GACa,aAAbA,EANX,CAjGyF9sD,KAGtEA,EAAQ08C,UAAY,EAQ/B,YAAY18C,GAGR,OA+FZ,SAAgCA,GAE5B,OAtDJ,SAAuBA,GACnB,OAOJ,SAAwBA,GACpB,MAAyC,SAAlCA,EAAQ8sD,SAAStmD,cAD5B,CAP0BxG,IAA4B,UAAhBA,EAAQlI,KAD9C,CAsDsBkI,KA9DtB,SAA6BA,GACzB,IAAI8sD,EAAW9sD,EAAQ8sD,SAAStmD,cAChC,MAAoB,UAAbsmD,GACU,WAAbA,GACa,WAAbA,GACa,aAAbA,EALR,CAiE+B9sD,IArD/B,SAA0BA,GACtB,OAOJ,SAAyBA,GACrB,MAAyC,KAAlCA,EAAQ8sD,SAAStmD,cAD5B,CAP2BxG,IAAYA,EAAQqsD,aAAa,QAD5D,CAsDyBrsD,IACjBA,EAAQqsD,aAAa,oBACrBc,GAAiBntD,IARzB,CA/F0CA,KAAa7J,KAAKi3D,WAAWptD,IAAY7J,KAAK62D,UAAUhtD,IAY9F,OATJmsD,EAAqBxzD,UAAO,SAAsCxE,GAAK,OAAO,IAAKA,GAAKg4D,GAAsB,EAAA,sBAAgB,MAC1HA,EAAqBvzD,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA0C,OAAO,IAAIs2D,EAAqB,OAAA,EAAA,sBAAA,CAAS,MAAetzD,MAAOszD,EAAsBv2D,WAAY,SAQ/Lu2D,GApH8B,GAmKzC,SAASgB,GAAiBntD,GACtB,IAAKA,EAAQqsD,aAAa,kBAAoCx1D,IAArBmJ,EAAQ08C,SAC7C,OAAO,EAEX,IAAIA,EAAW18C,EAAQqtD,aAAa,YAEpC,MAAgB,UAAZ3Q,MAGMA,GAAa8I,MAAM8H,SAAS5Q,EAAU,MAMpD,SAASqQ,GAAiB/sD,GACtB,IAAKmtD,GAAiBntD,GAClB,OAAO,KAGX,MAAM08C,EAAW4Q,SAASttD,EAAQqtD,aAAa,aAAe,GAAI,IAClE,OAAO7H,MAAM9I,IAAa,EAAIA,EAgDlC,MAAM,GACF,YAAYtzB,EAAUmkC,EAAU3E,EAAS4E,EAAWC,GAAe,GAC/Dt3D,KAAKizB,SAAWA,EAChBjzB,KAAKo3D,SAAWA,EAChBp3D,KAAKyyD,QAAUA,EACfzyD,KAAKq3D,UAAYA,EACjBr3D,KAAKu3D,cAAe,EAEpBv3D,KAAKw3D,oBAAsB,IAAMx3D,KAAKy3D,2BACtCz3D,KAAK03D,kBAAoB,IAAM13D,KAAK23D,4BACpC33D,KAAK43D,UAAW,EACXN,GACDt3D,KAAK63D,gBAIb,cAAgB,OAAO73D,KAAK43D,SAC5B,YAAY75D,GACRiC,KAAK43D,SAAW75D,EACZiC,KAAK83D,cAAgB93D,KAAK+3D,aAC1B/3D,KAAKg4D,sBAAsBj6D,EAAOiC,KAAK83D,cACvC93D,KAAKg4D,sBAAsBj6D,EAAOiC,KAAK+3D,aAI/C,UACI,MAAME,EAAcj4D,KAAK83D,aACnBI,EAAYl4D,KAAK+3D,WACnBE,IACAA,EAAYxiC,oBAAoB,QAASz1B,KAAKw3D,qBAC1CS,EAAYpvC,YACZovC,EAAYpvC,WAAW0O,YAAY0gC,IAGvCC,IACAA,EAAUziC,oBAAoB,QAASz1B,KAAK03D,mBACxCQ,EAAUrvC,YACVqvC,EAAUrvC,WAAW0O,YAAY2gC,IAGzCl4D,KAAK83D,aAAe93D,KAAK+3D,WAAa,KACtC/3D,KAAKu3D,cAAe,EAQxB,gBAEI,QAAIv3D,KAAKu3D,eAGTv3D,KAAKyyD,QAAQt4B,kBAAkB,KACtBn6B,KAAK83D,eACN93D,KAAK83D,aAAe93D,KAAKm4D,gBACzBn4D,KAAK83D,aAAapiC,iBAAiB,QAAS11B,KAAKw3D,sBAEhDx3D,KAAK+3D,aACN/3D,KAAK+3D,WAAa/3D,KAAKm4D,gBACvBn4D,KAAK+3D,WAAWriC,iBAAiB,QAAS11B,KAAK03D,sBAGnD13D,KAAKizB,SAASpK,aACd7oB,KAAKizB,SAASpK,WAAW8B,aAAa3qB,KAAK83D,aAAc93D,KAAKizB,UAC9DjzB,KAAKizB,SAASpK,WAAW8B,aAAa3qB,KAAK+3D,WAAY/3D,KAAKizB,SAASgI,aACrEj7B,KAAKu3D,cAAe,GAEjBv3D,KAAKu3D,cAQhB,+BACI,OAAO,IAAIl1D,QAAQP,IACf9B,KAAKo4D,iBAAiB,IAAMt2D,EAAQ9B,KAAKq4D,0BASjD,qCACI,OAAO,IAAIh2D,QAAQP,IACf9B,KAAKo4D,iBAAiB,IAAMt2D,EAAQ9B,KAAK23D,gCASjD,oCACI,OAAO,IAAIt1D,QAAQP,IACf9B,KAAKo4D,iBAAiB,IAAMt2D,EAAQ9B,KAAKy3D,+BAQjD,mBAAmBa,GAEf,IAAIC,EAAUv4D,KAAKizB,SAAS1lB,iBAAiB,qBAAqB+qD,sBAC5CA,kBACJA,MAClB,IAAK,IAAIx7D,EAAI,EAAGA,EAAIy7D,EAAQr1D,OAAQpG,IAE5By7D,EAAQz7D,GAAGo5D,aAAa,aAAaoC,GACrC/3D,QAAQC,KAAK,gDAAgD83D,0BACnCA,iEACiBC,EAAQz7D,IAE9Cy7D,EAAQz7D,GAAGo5D,aAAa,oBAAoBoC,IACjD/3D,QAAQC,KAAK,uDAAuD83D,0BAC1CA,iEACOC,EAAQz7D,IAGjD,MAAa,SAATw7D,EACOC,EAAQr1D,OAASq1D,EAAQ,GAAKv4D,KAAKw4D,yBAAyBx4D,KAAKizB,UAErEslC,EAAQr1D,OACXq1D,EAAQA,EAAQr1D,OAAS,GAAKlD,KAAKy4D,wBAAwBz4D,KAAKizB,UAMxE,sBAEI,MAAMylC,EAAoB14D,KAAKizB,SAASxlB,cAAc,0CAEtD,OAAIirD,GAEIA,EAAkBxC,aAAa,sBAC/B31D,QAAQC,KAAK,0IAEmBk4D,GAIhC,OAAA,EAAA,UAAA,KAAgB14D,KAAKo3D,SAASuB,YAAYD,IAC1Cn4D,QAAQC,KAAK,yDAA0Dk4D,GAE3EA,EAAkB3C,SACX,GAEJ/1D,KAAK23D,4BAMhB,4BACI,MAAMe,EAAoB14D,KAAK44D,mBAAmB,SAIlD,OAHIF,GACAA,EAAkB3C,UAEb2C,EAMb,2BACI,MAAMA,EAAoB14D,KAAK44D,mBAAmB,OAIlD,OAHIF,GACAA,EAAkB3C,UAEb2C,EAKb,cACI,OAAO14D,KAAKu3D,aAGhB,yBAAyB/qC,GACrB,GAAIxsB,KAAKo3D,SAASuB,YAAYnsC,IAASxsB,KAAKo3D,SAASyB,WAAWrsC,GAC5D,OAAOA,EAIX,IAAIkd,EAAWld,EAAKkd,UAAYld,EAAKssC,WACrC,IAAK,IAAIh8D,EAAI,EAAGA,EAAI4sC,EAASxmC,OAAQpG,IAAK,CACtC,IAAIi8D,EAAgBrvB,EAAS5sC,GAAGk8D,WAAah5D,KAAKq3D,UAAU4B,aACxDj5D,KAAKw4D,yBAAyB9uB,EAAS5sC,IACvC,KACJ,GAAIi8D,EACA,OAAOA,EAGf,OAAO,KAGX,wBAAwBvsC,GACpB,GAAIxsB,KAAKo3D,SAASuB,YAAYnsC,IAASxsB,KAAKo3D,SAASyB,WAAWrsC,GAC5D,OAAOA,EAGX,IAAIkd,EAAWld,EAAKkd,UAAYld,EAAKssC,WACrC,IAAK,IAAIh8D,EAAI4sC,EAASxmC,OAAS,EAAGpG,GAAK,EAAGA,IAAK,CAC3C,IAAIi8D,EAAgBrvB,EAAS5sC,GAAGk8D,WAAah5D,KAAKq3D,UAAU4B,aACxDj5D,KAAKy4D,wBAAwB/uB,EAAS5sC,IACtC,KACJ,GAAIi8D,EACA,OAAOA,EAGf,OAAO,KAGX,gBACI,MAAMjxB,EAAS9nC,KAAKq3D,UAAU31D,cAAc,OAK5C,OAJA1B,KAAKg4D,sBAAsBh4D,KAAK43D,SAAU9vB,GAC1CA,EAAOpW,UAAUrb,IAAI,uBACrByxB,EAAOpW,UAAUrb,IAAI,yBACrByxB,EAAOx3B,aAAa,cAAe,QAC5Bw3B,EAOX,sBAAsBoxB,EAAWpxB,GAG7BoxB,EAAYpxB,EAAOx3B,aAAa,WAAY,KAAOw3B,EAAO3M,gBAAgB,YAM9E,cAAc44B,GACN/zD,KAAK83D,cAAgB93D,KAAK+3D,aAC1B/3D,KAAKg4D,sBAAsBjE,EAAS/zD,KAAK83D,cACzC93D,KAAKg4D,sBAAsBjE,EAAS/zD,KAAK+3D,aAIjD,iBAAiB7wD,GACTlH,KAAKyyD,QAAQ0G,SACbjyD,IAGAlH,KAAKyyD,QAAQ2G,SAASC,eAAe52B,KAAKiC,GAAK,IAAI/E,UAAUz4B,IASzE,IAAI,GAAiC,MACjC,MAAMoyD,EACF,YAAYlC,EAAU3E,EAAS4E,GAC3Br3D,KAAKo3D,SAAWA,EAChBp3D,KAAKyyD,QAAUA,EACfzyD,KAAKq3D,UAAYA,EASrB,OAAOxtD,EAAS0vD,GAAuB,GACnC,OAAO,IAAI,GAAU1vD,EAAS7J,KAAKo3D,SAAUp3D,KAAKyyD,QAASzyD,KAAKq3D,UAAWkC,IAiBnF,OAdJD,EAAiB92D,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAKs7D,GAAkB,EAAA,sBAAgB,IAAuB,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,EAAA,YACrLA,EAAiB72D,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAsC,OAAO,IAAI45D,EAAiB,OAAA,EAAA,sBAAA,CAAS,IAAuB,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,EAAA,YAAe52D,MAAO42D,EAAkB75D,WAAY,SAajO65D,GAhC0B,GA+LM,oBAAX1sD,SAA4BA,QAuN5D,MAAM4sD,GAA+B,IAAI,EAAA,eAAe,uBAAwB,CAC5E/5D,WAAY,OACZC,QAGJ,WACI,OAAO,QAGL+5D,GAAiC,IAAI,EAAA,eAAe,kCAS1D,IAAI,GAA8B,MAC9B,MAAMC,EACF,YAAYC,EAAclH,EAAS4E,EAAWuC,GAC1C55D,KAAKyyD,QAAUA,EACfzyD,KAAK45D,gBAAkBA,EAIvB55D,KAAKq3D,UAAYA,EACjBr3D,KAAK65D,aAAeF,GAAgB35D,KAAK85D,qBAE7C,SAAS18B,KAAYxY,GACjB,MAAMm1C,EAAiB/5D,KAAK45D,gBAC5B,IAAII,EACAxzD,EAuBJ,OAtBoB,IAAhBoe,EAAK1hB,QAAmC,iBAAZ0hB,EAAK,GACjCpe,EAAWoe,EAAK,IAGfo1C,EAAYxzD,GAAYoe,EAE7B5kB,KAAK0D,QACLu2D,aAAaj6D,KAAKk6D,kBACbF,IACDA,EACKD,GAAkBA,EAAeC,WAAcD,EAAeC,WAAa,UAEpE,MAAZxzD,GAAoBuzD,IACpBvzD,EAAWuzD,EAAevzD,UAG9BxG,KAAK65D,aAAavpD,aAAa,YAAa0pD,GAMrCh6D,KAAKyyD,QAAQt4B,kBAAkB,IAC3B,IAAI93B,QAAQP,IACfm4D,aAAaj6D,KAAKk6D,kBAClBl6D,KAAKk6D,iBAAmBp9B,WAAW,KAC/B98B,KAAK65D,aAAaM,YAAc/8B,EAChCt7B,IACwB,iBAAb0E,IACPxG,KAAKk6D,iBAAmBp9B,WAAW,IAAM98B,KAAK0D,QAAS8C,KAE5D,QASf,QACQxG,KAAK65D,eACL75D,KAAK65D,aAAaM,YAAc,IAGxC,cACIF,aAAaj6D,KAAKk6D,kBACdl6D,KAAK65D,cAAgB75D,KAAK65D,aAAahxC,aACvC7oB,KAAK65D,aAAahxC,WAAW0O,YAAYv3B,KAAK65D,cAC9C75D,KAAK65D,aAAe,MAG5B,qBACI,MACMO,EAAmBp6D,KAAKq3D,UAAUgD,uBADnB,8BAEfC,EAASt6D,KAAKq3D,UAAU31D,cAAc,OAE5C,IAAK,IAAI5E,EAAI,EAAGA,EAAIs9D,EAAiBl3D,OAAQpG,IACzCs9D,EAAiBt9D,GAAG+rB,WAAW0O,YAAY6iC,EAAiBt9D,IAOhE,OALAw9D,EAAO5oC,UAAUrb,IAPI,8BAQrBikD,EAAO5oC,UAAUrb,IAAI,uBACrBikD,EAAOhqD,aAAa,cAAe,QACnCgqD,EAAOhqD,aAAa,YAAa,UACjCtQ,KAAKq3D,UAAUp1D,KAAKC,YAAYo4D,GACzBA,GA4Bf,OAzBJZ,EAAcl3D,UAAO,SAA+BxE,GAAK,OAAO,IAAKA,GAAK07D,GAAe,EAAA,sBAAgBF,GAA8B,GAAI,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,EAAA,UAAW,EAAA,sBAAgBC,GAAgC,KAClPC,EAAcj3D,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAmC,OAAO,IAAIg6D,EAAc,OAAA,EAAA,sBAAA,CAASF,GAA8B,GAAI,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,EAAA,UAAW,OAAA,EAAA,sBAAA,CAASC,GAAgC,KAAQ/2D,MAAOg3D,EAAej6D,WAAY,SAwB7Qi6D,GA5GuB,GAkMlC,SAASa,GAAgCrvD,GACrC,OAAyB,IAAlBA,EAAMsvD,QAYjB,MAEMC,GAAgC,IAAI,EAAA,eAAe,qCAKnDC,GAA8B1J,GAAgC,CAChE2J,SAAS,EACT1sB,SAAS,IAGb,IAAI,GAA6B,MAC7B,MAAM2sB,EACF,YAAYnI,EAASwD,EAErBx0D,EAAU1B,GACNC,KAAKyyD,QAAUA,EACfzyD,KAAKi2D,UAAYA,EAEjBj2D,KAAK61D,QAAU,KAEf71D,KAAK66D,gBAAiB,EAEtB76D,KAAK86D,aAAe,IAAIn7D,IAExBK,KAAK+6D,uBAAyB,EAO9B/6D,KAAKg7D,4BAA8B,IAAIr7D,IAKvCK,KAAKi7D,yBAA2B,KAE5Bj7D,KAAKk7D,iBAAmB,KACxBl7D,KAAKm7D,+BAA+B,aAMxCn7D,KAAKo7D,2BAA8BlwD,IAG/B,IAAKlL,KAAKk7D,iBAAkB,CAGxB,MAAM17B,EAAS+6B,GAAgCrvD,GAAS,WAAa,QACrElL,KAAKm7D,+BAA+B37B,KAO5Cx/B,KAAKq7D,4BAA+BnwD,IAIJ,MAAxBlL,KAAKs7D,iBACLrB,aAAaj6D,KAAKs7D,iBAEtBt7D,KAAKk7D,iBAAmBK,GAAUrwD,GAClClL,KAAKs7D,gBAAkBx+B,WAAW,IAAM98B,KAAKk7D,iBAAmB,KArExD,MA2EZl7D,KAAKw7D,qBAAuB,KAGxBx7D,KAAK66D,gBAAiB,EACtB76D,KAAKy7D,sBAAwB3+B,WAAW,IAAM98B,KAAK66D,gBAAiB,IAMxE76D,KAAK07D,8BAAiCxwD,IAClC,MAAM6S,EAASw9C,GAAUrwD,GACnBywD,EAAyB,UAAfzwD,EAAMvJ,KAAmB3B,KAAK47D,SAAW57D,KAAK67D,QAE9D,IAAK,IAAIhyD,EAAUkU,EAAQlU,EAASA,EAAUA,EAAQiyD,cAClDH,EAAQ1+D,KAAK+C,KAAMkL,EAAOrB,IAGlC7J,KAAKq3D,UAAY51D,EACjBzB,KAAK+7D,gBAAkBh8D,MAAAA,OAAyC,EAASA,EAAQi8D,gBAAkB,EAEvG,QAAQnyD,EAASoyD,GAAgB,GAE7B,IAAKj8D,KAAKi2D,UAAU/F,UAChB,OAAO,OAAA,GAAA,GAAA,CAAG,MAEd,MAAM1J,EAAgBgJ,GAAc3lD,GAI9B2yC,EAAWyU,GAAezK,IAAkBxmD,KAAKk8D,eACjDC,EAAan8D,KAAK86D,aAAan9D,IAAI6oD,GAEzC,GAAI2V,EAOA,OANIF,IAIAE,EAAWF,eAAgB,GAExBE,EAAWC,QAAQ/C,eAG9B,MAAMgD,EAAO,CACTJ,cAAeA,EACfG,QAAS,IAAI,GAAA,QACb5f,SAAAA,GAIJ,OAFAx8C,KAAK86D,aAAa14D,IAAIokD,EAAe6V,GACrCr8D,KAAKs8D,yBAAyBD,GACvBA,EAAKD,QAAQ/C,eAExB,eAAexvD,GACX,MAAM28C,EAAgBgJ,GAAc3lD,GAC9B0yD,EAAcv8D,KAAK86D,aAAan9D,IAAI6oD,GACtC+V,IACAA,EAAYH,QAAQ99B,WACpBt+B,KAAKw8D,YAAYhW,GACjBxmD,KAAK86D,aAAahhD,OAAO0sC,GACzBxmD,KAAKy8D,uBAAuBF,IAGpC,SAAS1yD,EAASisD,EAAQ/1D,GACtB,MAAMymD,EAAgBgJ,GAAc3lD,GACpC7J,KAAKm7D,+BAA+BrF,GAED,mBAAxBtP,EAAcuP,OAErBvP,EAAcuP,MAAMh2D,GAG5B,cACIC,KAAK86D,aAAa36D,QAAQ,CAACu8D,EAAO7yD,IAAY7J,KAAK28D,eAAe9yD,IAGtE,eACI,OAAO7J,KAAKq3D,WAAa51D,SAG7B,aAEI,OADYzB,KAAKk8D,eACNzF,aAAe/iD,OAE9B,aAAa7J,EAAS4iB,EAAWmwC,GACzBA,EACA/yD,EAAQ6nB,UAAUrb,IAAIoW,GAGtB5iB,EAAQ6nB,UAAUE,OAAOnF,GAGjC,gBAAgBvhB,GAOZ,OAAIlL,KAAK61D,QACE71D,KAAK61D,QAEZ71D,KAAK66D,gBAAkB76D,KAAK68D,iBACrB78D,KAAK68D,iBAEP78D,KAAK88D,kBAAkB5xD,GACrB,QAGA,UAQf,YAAYrB,EAASisD,GACjB91D,KAAK+8D,aAAalzD,EAAS,gBAAiBisD,GAC5C91D,KAAK+8D,aAAalzD,EAAS,oBAAgC,UAAXisD,GAChD91D,KAAK+8D,aAAalzD,EAAS,uBAAmC,aAAXisD,GACnD91D,KAAK+8D,aAAalzD,EAAS,oBAAgC,UAAXisD,GAChD91D,KAAK+8D,aAAalzD,EAAS,sBAAkC,YAAXisD,GAOtD,+BAA+BA,GAC3B91D,KAAKyyD,QAAQt4B,kBAAkB,KAC3Bn6B,KAAK61D,QAAUC,EACa,IAAxB91D,KAAK+7D,iBAIL/7D,KAAKg9D,iBAAmBlgC,WAAW,IAAM98B,KAAK61D,QAAU,KAAM,MAS1E,kBAAkB3qD,GAkBd,MAAM+xD,EAAc1B,GAAUrwD,GAC9B,OAAOlL,KAAKk7D,4BAA4BgC,MAAQD,aAAuBC,OAClED,IAAgBj9D,KAAKk7D,kBAAoB+B,EAAYpwD,SAAS7M,KAAKk7D,mBAO5E,SAAShwD,EAAOrB,GAOZ,MAAM0yD,EAAcv8D,KAAK86D,aAAan9D,IAAIkM,GAC1C,IAAK0yD,IAAiBA,EAAYN,eAAiBpyD,IAAY0xD,GAAUrwD,GACrE,OAEJ,MAAM4qD,EAAS91D,KAAKm9D,gBAAgBjyD,GACpClL,KAAKw8D,YAAY3yD,EAASisD,GAC1B91D,KAAKo9D,YAAYb,EAAYH,QAAStG,GACtC91D,KAAK68D,iBAAmB/G,EAO5B,QAAQ5qD,EAAOrB,GAGX,MAAM0yD,EAAcv8D,KAAK86D,aAAan9D,IAAIkM,IACrC0yD,GAAgBA,EAAYN,eAAiB/wD,EAAMmyD,yBAAyBH,MAC7ErzD,EAAQgD,SAAS3B,EAAMmyD,iBAG3Br9D,KAAKw8D,YAAY3yD,GACjB7J,KAAKo9D,YAAYb,EAAYH,QAAS,OAE1C,YAAYA,EAAStG,GACjB91D,KAAKyyD,QAAQv4B,IAAI,IAAMkiC,EAAQtqD,KAAKgkD,IAExC,yBAAyByG,GACrB,IAAKv8D,KAAKi2D,UAAU/F,UAChB,OAEJ,MAAM1T,EAAW+f,EAAY/f,SACvB8gB,EAAyBt9D,KAAKg7D,4BAA4Br9D,IAAI6+C,IAAa,EAC5E8gB,GACDt9D,KAAKyyD,QAAQt4B,kBAAkB,KAC3BqiB,EAAS9mB,iBAAiB,QAAS11B,KAAK07D,8BAA+BhB,IACvEle,EAAS9mB,iBAAiB,OAAQ11B,KAAK07D,8BAA+BhB,MAG9E16D,KAAKg7D,4BAA4B54D,IAAIo6C,EAAU8gB,EAAyB,GAElC,KAAhCt9D,KAAK+6D,wBAGP/6D,KAAKyyD,QAAQt4B,kBAAkB,KAC3B,MAAM14B,EAAWzB,KAAKk8D,eAChBxoD,EAAS1T,KAAKu9D,aACpB97D,EAASi0B,iBAAiB,UAAW11B,KAAKi7D,yBAA0BP,IACpEj5D,EAASi0B,iBAAiB,YAAa11B,KAAKo7D,2BAA4BV,IACxEj5D,EAASi0B,iBAAiB,aAAc11B,KAAKq7D,4BAA6BX,IAC1EhnD,EAAOgiB,iBAAiB,QAAS11B,KAAKw7D,wBAIlD,uBAAuBe,GACnB,MAAM/f,EAAW+f,EAAY/f,SAC7B,GAAIx8C,KAAKg7D,4BAA4B14D,IAAIk6C,GAAW,CAChD,MAAM8gB,EAAyBt9D,KAAKg7D,4BAA4Br9D,IAAI6+C,GAChE8gB,EAAyB,EACzBt9D,KAAKg7D,4BAA4B54D,IAAIo6C,EAAU8gB,EAAyB,IAGxE9gB,EAAS/mB,oBAAoB,QAASz1B,KAAK07D,8BAA+BhB,IAC1Ele,EAAS/mB,oBAAoB,OAAQz1B,KAAK07D,8BAA+BhB,IACzE16D,KAAKg7D,4BAA4BlhD,OAAO0iC,IAIhD,MAAOx8C,KAAK+6D,uBAAwB,CAChC,MAAMt5D,EAAWzB,KAAKk8D,eAChBxoD,EAAS1T,KAAKu9D,aACpB97D,EAASg0B,oBAAoB,UAAWz1B,KAAKi7D,yBAA0BP,IACvEj5D,EAASg0B,oBAAoB,YAAaz1B,KAAKo7D,2BAA4BV,IAC3Ej5D,EAASg0B,oBAAoB,aAAcz1B,KAAKq7D,4BAA6BX,IAC7EhnD,EAAO+hB,oBAAoB,QAASz1B,KAAKw7D,sBAEzCvB,aAAaj6D,KAAKy7D,uBAClBxB,aAAaj6D,KAAKs7D,iBAClBrB,aAAaj6D,KAAKg9D,oBA0B9B,OAtBJpC,EAAap4D,UAAO,SAA8BxE,GAAK,OAAO,IAAKA,GAAK48D,GAAc,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,IAAkB,EAAA,sBAAgB,EAAA,SAAU,GAAI,EAAA,sBAAgBH,GAA+B,KACjOG,EAAan4D,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAkC,OAAO,IAAIk7D,EAAa,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,IAAW,OAAA,EAAA,sBAAA,CAAS,EAAA,SAAU,GAAI,OAAA,EAAA,sBAAA,CAASH,GAA+B,KAAQ/3D,MAAOk4D,EAAcn7D,WAAY,SAqBpPm7D,GA1VsB,GA6VjC,SAASW,GAAUrwD,GAGf,OAAQA,EAAMsyD,aAAetyD,EAAMsyD,eAAe,GAAKtyD,EAAM6S,OAWjE,IAAI,GAAgC,MAChC,MAAM0/C,EACF,YAAYjL,EAAakL,GACrB19D,KAAKwyD,YAAcA,EACnBxyD,KAAK09D,cAAgBA,EACrB19D,KAAK29D,eAAiB,IAAI,EAAA,aAE9B,kBACI39D,KAAK49D,qBAAuB59D,KAAK09D,cAAcG,QAAQ79D,KAAKwyD,YAAaxyD,KAAKwyD,YAAYhM,cAAc0P,aAAa,2BAChHv2B,UAAUm2B,GAAU91D,KAAK29D,eAAenU,KAAKsM,IAEtD,cACI91D,KAAK09D,cAAcf,eAAe38D,KAAKwyD,aACnCxyD,KAAK49D,sBACL59D,KAAK49D,qBAAqBtgC,eAqBtC,OAjBJmgC,EAAgBj7D,UAAO,SAAiCxE,GAAK,OAAO,IAAKA,GAAKy/D,GAAiB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,MACrKA,EAAgBv5D,UAAO,EAAA,+BAAyB,CAAEvC,KAAM87D,EAAiBt5D,UAAW,CAAC,CAAC,GAAI,yBAA0B,IAAK,CAAC,GAAI,yBAA0B,KAAMwlD,QAAS,CAAEgU,eAAgB,oBAgB9KF,GAnCyB,GA8DhC,GAAyC,MACzC,MAAMK,EACF,YAAY7H,EAAWx0D,GACnBzB,KAAKi2D,UAAYA,EACjBj2D,KAAKq3D,UAAY51D,EAGrB,sBACI,IAAKzB,KAAKi2D,UAAU/F,UAChB,OAAO,EAKX,MAAM6N,EAAc/9D,KAAKq3D,UAAU31D,cAAc,OACjDq8D,EAAYlwD,MAAMmwD,gBAAkB,aACpCD,EAAYlwD,MAAMrG,SAAW,WAC7BxH,KAAKq3D,UAAUp1D,KAAKC,YAAY67D,GAKhC,MAAME,EAAiBj+D,KAAKq3D,UAAUZ,aAAe/iD,OAC/CwqD,EAAiBD,GAAkBA,EAAetqD,iBACpDsqD,EAAetqD,iBAAiBoqD,GAAe,KAC7CI,GAAiBD,GAAiBA,EAAcF,iBAAmB,IAAIz7D,QAAQ,KAAM,IAE3F,OADAvC,KAAKq3D,UAAUp1D,KAAKs1B,YAAYwmC,GACxBI,GACJ,IAAK,aAAc,OAAO,EAC1B,IAAK,mBAAoB,OAAO,EAEpC,OAAO,EAGX,uCACI,GAAIn+D,KAAKi2D,UAAU/F,WAAalwD,KAAKq3D,UAAUp1D,KAAM,CACjD,MAAMm8D,EAAcp+D,KAAKq3D,UAAUp1D,KAAKyvB,UAExC0sC,EAAYxsC,OAlDgB,4BAmD5BwsC,EAAYxsC,OAvDK,oCAwDjBwsC,EAAYxsC,OAtDK,oCAuDjB,MAAM3zB,EAAO+B,KAAKq+D,sBACL,IAATpgE,GACAmgE,EAAY/nD,IAvDY,4BAwDxB+nD,EAAY/nD,IA5DC,qCA8DC,IAATpY,IACLmgE,EAAY/nD,IA3DY,4BA4DxB+nD,EAAY/nD,IA9DC,uCAgF7B,OAbJynD,EAAyBt7D,UAAO,SAA0CxE,GAAK,OAAO,IAAKA,GAAK8/D,GAA0B,EAAA,sBAAgB,IAAkB,EAAA,sBAAgB,EAAA,YACxKA,EAAyBr7D,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA8C,OAAO,IAAIo+D,EAAyB,OAAA,EAAA,sBAAA,CAAS,IAAW,OAAA,EAAA,sBAAA,CAAS,EAAA,YAAep7D,MAAOo7D,EAA0Br+D,WAAY,SAYnOq+D,GAlEkC,GA4EzC,GAA2B,MAC3B,MAAMQ,EACF,YAAYC,GACRA,EAAyBC,wCAiBjC,OAdJF,EAAWj5D,UAAO,EAAA,8BAAwB,CAAE1D,KAAM28D,IAClDA,EAAWh5D,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA4B1B,GAAK,OAAO,IAAKA,GAAKsgE,GAAY,EAAA,sBAAgB,MAA+B/4D,QAAS,CAAC,CAAC,GAAgB,OAalL+4D,GApBoB,GCjrE/B,MAAMG,GAAe,IAAI,EAAA,eAAe,cAAe,CACnDh/D,WAAY,OACZC,QAGJ,WACI,OAAO,OAAA,EAAA,OAAA,CAAO,EAAA,aAclB,IAAI,GAA+B,MAC/B,MAAMg/D,EACF,YAAYrH,GAKR,GAHAr3D,KAAKjC,MAAQ,MAEbiC,KAAKukD,OAAS,IAAI,EAAA,aACd8S,EAAW,CAKX,MACMsH,EAAUtH,EAAUuH,gBAAkBvH,EAAUuH,gBAAgBC,IAAM,KACtE9gE,GAFUs5D,EAAUp1D,KAAOo1D,EAAUp1D,KAAK48D,IAAM,OAE7BF,EACzB3+D,KAAKjC,MAAmB,QAAVA,GAA6B,QAAVA,EAAmBA,EAAQ,OAGpE,cACIiC,KAAKukD,OAAOjmB,YAiBpB,OAdJogC,EAAel8D,UAAO,SAAgCxE,GAAK,OAAO,IAAKA,GAAK0gE,GAAgB,EAAA,sBAAgBD,GAAc,KACtHC,EAAej8D,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAoC,OAAO,IAAIg/D,EAAe,OAAA,EAAA,sBAAA,CAASD,GAAc,KAAQ/7D,MAAOg8D,EAAgBj/D,WAAY,SAa9Ki/D,GApCwB,GAoD/B,GAAoB,MACpB,MAAMI,EACF,cAEI9+D,KAAK++D,KAAO,MAEZ/+D,KAAKg/D,gBAAiB,EAEtBh/D,KAAKukD,OAAS,IAAI,EAAA,aAGtB,UAAY,OAAOvkD,KAAK++D,KACxB,QAAQhhE,GACJ,MAAMkhE,EAAMj/D,KAAK++D,KACXp0D,EAAkB5M,EAAQA,EAAMsS,cAAgBtS,EACtDiC,KAAKk/D,QAAUnhE,EACfiC,KAAK++D,KAA4B,QAApBp0D,GAAiD,QAApBA,EAA6BA,EAAkB,MACrFs0D,IAAQj/D,KAAK++D,MAAQ/+D,KAAKg/D,gBAC1Bh/D,KAAKukD,OAAOiF,KAAKxpD,KAAK++D,MAI9B,YAAc,OAAO/+D,KAAK6+D,IAE1B,qBACI7+D,KAAKg/D,gBAAiB,EAE1B,cACIh/D,KAAKukD,OAAOjmB,YAyBpB,OAtBJwgC,EAAIt8D,UAAO,SAAqBxE,GAAK,OAAO,IAAKA,GAAK8gE,IACtDA,EAAI56D,UAAO,EAAA,+BAAyB,CAAEvC,KAAMm9D,EAAK36D,UAAW,CAAC,CAAC,GAAI,MAAO,KAAMqjD,SAAU,EAAGb,aAAc,SAA0Bxe,EAAIrsB,GAAgB,EAALqsB,GAC3I,EAAA,yBAAmB,MAAOrsB,EAAIojD,UAC7B96D,OAAQ,CAAEy6D,IAAK,OAASlV,QAAS,CAAEpF,OAAQ,aAAemE,SAAU,CAAC,OAAQhB,SAAU,CAAC,EAAA,gCAA0B,CAAC,CAAE5iD,QAAS,GAAgBonD,YAAa4S,QAmBzJA,GArDa,GA+DpB,GAA2B,MAC3B,MAAMK,GAYN,OAVJA,EAAW95D,UAAO,EAAA,8BAAwB,CAAE1D,KAAMw9D,IAClDA,EAAW75D,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA4B1B,GAAK,OAAO,IAAKA,GAAKmhE,MAS5FA,GAboB,GCvJ/B,MAAM,GAAU,IAAI,EAAA,QAAQ,UCgEtBC,GAAY,IAAI,EAAA,QAAQ,UAMxBC,GAAyB,IAAI,EAAA,eAAe,oBAAqB,CACnE5/D,WAAY,OACZC,QANJ,WACI,OAAO,KAaX,IA8aI4/D,GA9aA,GAAgC,MAChC,MAAMC,EACF,YAAYhB,EAA0BiB,EAEtC/9D,GAEIzB,KAAKy/D,sBAAuB,EAC5Bz/D,KAAKq3D,UAAY51D,EAGjB88D,EAAyBC,uCAGzBx+D,KAAK0/D,cAAgBF,EAChBx/D,KAAKy/D,uBACNz/D,KAAK2/D,yBACL3/D,KAAK4/D,uBACL5/D,KAAK6/D,wBACL7/D,KAAKy/D,sBAAuB,GAIpC,eACI,MAAM9mC,EAAM34B,KAAKq3D,WAAa51D,SAC9B,MAAsB,iBAARk3B,GAAoBA,EAAMA,EAAM,KAGlD,aACI,MAAMA,EAAM34B,KAAKk8D,eACX4D,GAAOnnC,MAAAA,OAAiC,EAASA,EAAI89B,cAAgB/iD,OAC3E,MAAsB,iBAARosD,GAAoBA,EAAMA,EAAM,KAGlD,oBACI,OAAO,OAAA,EAAA,UAAA,KAAgB9/D,KAAK+/D,aAGhC,aACI,MAAMrsD,EAAS1T,KAAKu9D,aACpB,OAAO7pD,IAAWA,EAAOssD,WAAatsD,EAAOusD,SAEjD,yBACI,MAAM/G,EAAYl5D,KAAKkgE,uBACK,IAAvBlgE,KAAK0/D,eAA0B1/D,KAAK0/D,cAAcS,SACjD1+D,EAAWzB,KAAKk8D,eAClBhD,GAAaz3D,IAAaA,EAAS0+D,SACnC5/D,QAAQC,KAAK,wHAIrB,uBAGI,MAAMy2D,GAAcj3D,KAAKkgE,sBACG,IAAvBlgE,KAAK0/D,gBAA4B1/D,KAAK0/D,cAAcU,MACnD3+D,EAAWzB,KAAKk8D,eACtB,GAAIjF,IAAex1D,IAAaA,EAASQ,MACT,mBAArB0R,iBACP,OAEJ,MAAMoqD,EAAct8D,EAASC,cAAc,OAC3Cq8D,EAAYrsC,UAAUrb,IAAI,2BAC1B5U,EAASQ,KAAKC,YAAY67D,GAC1B,MAAMG,EAAgBvqD,iBAAiBoqD,GAInCG,GAA2C,SAA1BA,EAAcntC,SAC/BxwB,QAAQC,KAAK,sLAIjBiB,EAASQ,KAAKs1B,YAAYwmC,GAG9B,wBACsB/9D,KAAKkgE,uBACK,IAAvBlgE,KAAK0/D,eAA0B1/D,KAAK0/D,cAAcW,UACtCjB,GAAUkB,OAAS,GAAUA,MAC1C//D,QAAQC,KAAK,iCAAmC4+D,GAAUkB,KAA7C,6CACqB,GAAUA,KAD/B,wEA+BzB,OAzBJf,EAAgBl6D,UAAO,EAAA,8BAAwB,CAAE1D,KAAM49D,IACvDA,EAAgBj6D,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAKuhE,GAAiB,EAAA,sBAAgB,IAAkC,EAAA,sBAAgBF,GAAwB,GAAI,EAAA,sBAAgB,EAAA,SAAU,KAAQ95D,QAAS,CAAC,CAAC,IAAa,MAwB/Qg6D,GA9GyB,GAyHpC,SAASgB,GAAcC,GACnB,OAAO,cAAcA,EACjB,eAAe57C,GACXxE,SAASwE,GACT5kB,KAAK0yD,WAAY,EAErB,eAAiB,OAAO1yD,KAAK0yD,UAC7B,aAAa30D,GAASiC,KAAK0yD,UAAYxD,GAAsBnxD,KAYrE,SAAS0iE,GAAWD,EAAME,GACtB,OAAO,cAAcF,EACjB,eAAe57C,GACXxE,SAASwE,GAET5kB,KAAK2gE,MAAQD,EAEjB,YAAc,OAAO1gE,KAAK4gE,OAC1B,UAAU7iE,GACN,MAAM8iE,EAAe9iE,GAAS2iE,EAC1BG,IAAiB7gE,KAAK4gE,SAClB5gE,KAAK4gE,QACL5gE,KAAKwyD,YAAYhM,cAAc90B,UAAUE,OAAO,OAAO5xB,KAAK4gE,QAE5DC,GACA7gE,KAAKwyD,YAAYhM,cAAc90B,UAAUrb,IAAI,OAAOwqD,GAExD7gE,KAAK4gE,OAASC,KAc9B,SAASC,GAAmBN,GACxB,OAAO,cAAcA,EACjB,eAAe57C,GACXxE,SAASwE,GACT5kB,KAAK+gE,gBAAiB,EAG1B,oBAAsB,OAAO/gE,KAAK+gE,eAClC,kBAAkBhjE,GAASiC,KAAK+gE,eAAiB7R,GAAsBnxD,KAwJ/E,MAAM,GACF,cACIiC,KAAKghE,eAAiB,IAAI,GAAA,QAG9B,oBAAsB,OAAOhhE,KAAKghE,eAalC,YAAYjjE,GACR,OAAa,MAATA,GAAiBiC,KAAKihE,eAAeljE,IAAUiC,KAAKkhE,QAAQnjE,GACrDA,EAEJiC,KAAKmhE,UAMhB,UAAUC,GACNphE,KAAKohE,OAASA,EACdphE,KAAKghE,eAAelvD,OASxB,YAAY6yB,EAAO08B,GACf,OAAOrhE,KAAKshE,QAAQ38B,GAAS3kC,KAAKshE,QAAQD,IACtCrhE,KAAKuhE,SAAS58B,GAAS3kC,KAAKuhE,SAASF,IACrCrhE,KAAKwhE,QAAQ78B,GAAS3kC,KAAKwhE,QAAQH,GAS3C,SAAS18B,EAAO08B,GACZ,GAAI18B,GAAS08B,EAAQ,CACjB,IAAII,EAAazhE,KAAKkhE,QAAQv8B,GAC1B+8B,EAAc1hE,KAAKkhE,QAAQG,GAC/B,OAAII,GAAcC,GACN1hE,KAAK2hE,YAAYh9B,EAAO08B,GAE7BI,GAAcC,EAEzB,OAAO/8B,GAAS08B,EAUpB,UAAUO,EAAM14D,EAAKR,GACjB,OAAIQ,GAAOlJ,KAAK2hE,YAAYC,EAAM14D,GAAO,EAC9BA,EAEPR,GAAO1I,KAAK2hE,YAAYC,EAAMl5D,GAAO,EAC9BA,EAEJk5D,GA4Bf,IACItC,GAAmC,oBAAR3P,KAE/B,MAAOE,IACHyP,IAAoB,EAuTxB,IAsCI,GAAkC,MAClC,MAAMuC,EACF,aAAaC,EAASC,GAClB,SAAUD,GAAWA,EAAQX,UAAYW,EAAQE,SAAYD,GAAQA,EAAKE,aASlF,OANJJ,EAAkBr/D,UAAO,SAAmCxE,GAAK,OAAO,IAAKA,GAAK6jE,IAC9EA,EAAkBp/D,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAuC,OAAO,IAAImiE,GAAwBn/D,MAAOm/D,EAAmBpiE,WAAY,SAKjKoiE,GAZ2B,GA4ElC,GAA8B,MAC9B,MAAMK,GAaN,OAXJA,EAAc78D,UAAO,EAAA,8BAAwB,CAAE1D,KAAMugE,IACrDA,EAAc58D,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAKkkE,IAAqB38D,QAAS,CAAC,CAAC,IAAkB,MAUpJ28D,GAduB,GA2BlC,MAAMC,GACF,YAAYtpC,EAEZhvB,EAEA7I,GACIhB,KAAK64B,UAAYA,EACjB74B,KAAK6J,QAAUA,EACf7J,KAAKgB,OAASA,EAEdhB,KAAK4mC,MAAQ,EAGjB,UACI5mC,KAAK64B,UAAUupC,cAAcpiE,OAQrC,MAAMqiE,GAA+B,CACjCC,cAAe,IACfC,aAAc,KAQZC,GAAsBxR,GAAgC,CAAE2J,SAAS,IAEjE8H,GAAoB,CAAC,YAAa,cAElCC,GAAkB,CAAC,UAAW,aAAc,WAAY,eAQ9D,MAAM,GACF,YAAYC,EAASlQ,EAASmQ,EAAqBC,GAC/C7iE,KAAK2iE,QAAUA,EACf3iE,KAAKyyD,QAAUA,EAEfzyD,KAAK8iE,gBAAiB,EAEtB9iE,KAAK+iE,eAAiB,IAAI1uD,IAE1BrU,KAAKgjE,4BAA6B,EAE9BH,EAAS3S,YACTlwD,KAAKijE,kBAAoBzT,GAAcoT,IAS/C,aAAapmC,EAAG0mC,EAAGliE,EAAS,IACxB,MAAMmiE,EAAgBnjE,KAAKojE,eACvBpjE,KAAKojE,gBAAkBpjE,KAAKijE,kBAAkBI,wBAC5CC,EAAkB9lE,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIk/C,IAA+BrhE,EAAOoF,WAC1FpF,EAAOuiE,WACP/mC,EAAI2mC,EAAcK,KAAOL,EAAcM,MAAQ,EAC/CP,EAAIC,EAAcO,IAAMP,EAAcQ,OAAS,GAEnD,MAAMC,EAAS5iE,EAAO4iE,QA2L9B,SAAkCpnC,EAAG0mC,EAAGW,GACpC,MAAMC,EAAQr7D,KAAKC,IAAID,KAAKwU,IAAIuf,EAAIqnC,EAAKL,MAAO/6D,KAAKwU,IAAIuf,EAAIqnC,EAAKE,QAC5DC,EAAQv7D,KAAKC,IAAID,KAAKwU,IAAIimD,EAAIW,EAAKH,KAAMj7D,KAAKwU,IAAIimD,EAAIW,EAAKI,SACjE,OAAOx7D,KAAKy7D,KAAKJ,EAAQA,EAAQE,EAAQA,GAH7C,CA3LiExnC,EAAG0mC,EAAGC,GACzDgB,EAAU3nC,EAAI2mC,EAAcK,KAC5BY,EAAUlB,EAAIC,EAAcO,IAC5Bl9D,EAAW88D,EAAgBhB,cAC3B+B,EAAS5iE,SAASC,cAAc,OACtC2iE,EAAO3yC,UAAUrb,IAAI,sBACrBguD,EAAOx2D,MAAM21D,KAAUW,EAAUP,EAAb,KACpBS,EAAOx2D,MAAM61D,IAASU,EAAUR,EAAb,KACnBS,EAAOx2D,MAAM81D,OAAqB,EAATC,EAAH,KACtBS,EAAOx2D,MAAM41D,MAAoB,EAATG,EAAH,KAGD,MAAhB5iE,EAAO2/D,QACP0D,EAAOx2D,MAAMmwD,gBAAkBh9D,EAAO2/D,OAE1C0D,EAAOx2D,MAAMy2D,mBAAwB99D,EAAH,KAClCxG,KAAKijE,kBAAkB/gE,YAAYmiE,GAsKvC3wD,OAAOC,iBAnKuB0wD,GAmKGl0D,iBAAiB,WAlK9Ck0D,EAAOx2D,MAAM02D,UAAY,WAEzB,MAAMC,EAAY,IAAIrC,GAAUniE,KAAMqkE,EAAQrjE,GAoB9C,OAnBAwjE,EAAU59B,MAAQ,EAElB5mC,KAAK+iE,eAAe1sD,IAAImuD,GACnBxjE,EAAOyjE,aACRzkE,KAAK0kE,2BAA6BF,GAItCxkE,KAAK2kE,uBAAuB,KACxB,MAAMC,EAA8BJ,IAAcxkE,KAAK0kE,2BACvDF,EAAU59B,MAAQ,EAKb5lC,EAAOyjE,YAAgBG,GAAgC5kE,KAAK8iE,gBAC7D0B,EAAUK,WAEfr+D,GACIg+D,EAGX,cAAcA,GACV,MAAMM,EAAY9kE,KAAK+iE,eAAejpD,OAAO0qD,GAS7C,GARIA,IAAcxkE,KAAK0kE,6BACnB1kE,KAAK0kE,2BAA6B,MAGjC1kE,KAAK+iE,eAAezsD,OACrBtW,KAAKojE,eAAiB,OAGrB0B,EACD,OAEJ,MAAMC,EAAWP,EAAU36D,QACrBy5D,EAAkB9lE,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAIk/C,IAA+BmC,EAAUxjE,OAAOoF,WACxG2+D,EAASl3D,MAAMy2D,mBAAwBhB,EAAgBf,aAAnB,KACpCwC,EAASl3D,MAAMm3D,QAAU,IACzBR,EAAU59B,MAAQ,EAElB5mC,KAAK2kE,uBAAuB,KACxBH,EAAU59B,MAAQ,EAClBm+B,EAASl8C,WAAW0O,YAAYwtC,IACjCzB,EAAgBf,cAGvB,aACIviE,KAAK+iE,eAAe5iE,QAAQkkE,GAAUA,EAAOQ,WAGjD,mBAAmBjC,GACf,MAAM/4D,EAAU2lD,GAAcoT,GACzB/4D,GAAWA,IAAY7J,KAAKilE,kBAIjCjlE,KAAKklE,uBACLllE,KAAKilE,gBAAkBp7D,EACvB7J,KAAKmlE,gBAAgB1C,KAMzB,YAAYv3D,GACW,cAAfA,EAAMvJ,KACN3B,KAAKolE,aAAal6D,GAEE,eAAfA,EAAMvJ,KACX3B,KAAKqlE,cAAcn6D,GAGnBlL,KAAKslE,eAKJtlE,KAAKgjE,6BACNhjE,KAAKmlE,gBAAgBzC,IACrB1iE,KAAKgjE,4BAA6B,GAI1C,aAAa93D,GAGT,MAAMq6D,EAAkBhL,GAAgCrvD,GAClDs6D,EAAmBxlE,KAAKylE,sBAC1B7wC,KAAKC,MAAQ70B,KAAKylE,qBA3JG,IA4JpBzlE,KAAK2iE,QAAQ+C,gBAAmBH,GAAoBC,IACrDxlE,KAAK8iE,gBAAiB,EACtB9iE,KAAK2lE,aAAaz6D,EAAM06D,QAAS16D,EAAM26D,QAAS7lE,KAAK2iE,QAAQmD,eAIrE,cAAc56D,GACV,IAAKlL,KAAK2iE,QAAQ+C,eAAgB,CAI9B1lE,KAAKylE,qBAAuB7wC,KAAKC,MACjC70B,KAAK8iE,gBAAiB,EAGtB,MAAMiD,EAAU76D,EAAM86D,eACtB,IAAK,IAAIlpE,EAAI,EAAGA,EAAIipE,EAAQ7iE,OAAQpG,IAChCkD,KAAK2lE,aAAaI,EAAQjpE,GAAG8oE,QAASG,EAAQjpE,GAAG+oE,QAAS7lE,KAAK2iE,QAAQmD,eAKnF,eACS9lE,KAAK8iE,iBAGV9iE,KAAK8iE,gBAAiB,EAEtB9iE,KAAK+iE,eAAe5iE,QAAQkkE,KAKnBA,EAAOrjE,OAAOyjE,aAFgB,IAAjBJ,EAAOz9B,OACrBy9B,EAAOrjE,OAAOilE,sBAAyC,IAAjB5B,EAAOz9B,QAE7Cy9B,EAAOQ,aAKnB,uBAAuB39D,EAAIT,EAAQ,GAC/BzG,KAAKyyD,QAAQt4B,kBAAkB,IAAM2C,WAAW51B,EAAIT,IAGxD,gBAAgBy/D,GACZlmE,KAAKyyD,QAAQt4B,kBAAkB,KAC3B+rC,EAAW/lE,QAASwB,IAChB3B,KAAKilE,gBAAgBvvC,iBAAiB/zB,EAAM3B,KAAMwiE,QAK9D,uBACQxiE,KAAKilE,kBACLxC,GAAkBtiE,QAASwB,IACvB3B,KAAKilE,gBAAgBxvC,oBAAoB9zB,EAAM3B,KAAMwiE,MAErDxiE,KAAKgjE,4BACLN,GAAgBviE,QAASwB,IACrB3B,KAAKilE,gBAAgBxvC,oBAAoB9zB,EAAM3B,KAAMwiE,QA8BzE,MAAM2D,GAA4B,IAAI,EAAA,eAAe,6BACrD,IAAI,GAA0B,MAC1B,MAAMC,EACF,YAAY5T,EAAatS,EAAQ2iB,EAAUwD,EAAeC,GACtDtmE,KAAKwyD,YAAcA,EACnBxyD,KAAKsmE,eAAiBA,EAMtBtmE,KAAK4jE,OAAS,EACd5jE,KAAK0yD,WAAY,EAEjB1yD,KAAKg/D,gBAAiB,EACtBh/D,KAAKumE,eAAiBF,GAAiB,GACvCrmE,KAAKwmE,gBAAkB,IAAI,GAAexmE,KAAMkgD,EAAQsS,EAAaqQ,GAMzE,eAAiB,OAAO7iE,KAAK0yD,UAC7B,aAAa30D,GACTiC,KAAK0yD,UAAY30D,EACjBiC,KAAKymE,+BAMT,cAAgB,OAAOzmE,KAAK0mE,UAAY1mE,KAAKwyD,YAAYhM,cACzD,YAAY/gD,GACRzF,KAAK0mE,SAAWjhE,EAChBzF,KAAKymE,+BAET,WACIzmE,KAAKg/D,gBAAiB,EACtBh/D,KAAKymE,+BAET,cACIzmE,KAAKwmE,gBAAgBtB,uBAGzB,aACIllE,KAAKwmE,gBAAgBG,aAMzB,mBACI,MAAO,CACHpD,SAAUvjE,KAAKujE,SACfK,OAAQ5jE,KAAK4jE,OACbjD,MAAO3gE,KAAK2gE,MACZv6D,UAAW5I,OAAO2lB,OAAO3lB,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKumE,eAAengE,WAAqC,mBAAxBpG,KAAKsmE,eAAsC,CAAEhE,cAAe,EAAGC,aAAc,GAAM,IAAMviE,KAAKoG,WACxL6/D,qBAAsBjmE,KAAKumE,eAAeN,sBAOlD,qBACI,OAAOjmE,KAAK0L,YAAc1L,KAAKumE,eAAe76D,SAGlD,gCACS1L,KAAK0L,UAAY1L,KAAKg/D,gBACvBh/D,KAAKwmE,gBAAgBI,mBAAmB5mE,KAAKyF,SAIrD,OAAOohE,EAAW3D,EAAI,EAAGliE,GACrB,MAAyB,iBAAd6lE,EACA7mE,KAAKwmE,gBAAgBb,aAAakB,EAAW3D,EAAG1lE,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAK8lE,cAAe9kE,IAGpGhB,KAAKwmE,gBAAgBb,aAAa,EAAG,EAAGnoE,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAK8lE,cAAee,KAkE/G,OA9DJT,EAAU5jE,UAAO,SAA2BxE,GAAK,OAAO,IAAKA,GAAKooE,GAAW,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,QAAgB,EAAA,+BAAyB,IAAkB,EAAA,+BAAyBD,GAA2B,GAAI,EAAA,+BAAyBvqC,GAAuB,KACtTwqC,EAAUliE,UAAO,EAAA,+BAAyB,CAAEvC,KAAMykE,EAAWjiE,UAAW,CAAC,CAAC,GAAI,aAAc,IAAK,CAAC,GAAI,YAAa,KAAM2iE,UAAW,CAAC,EAAG,cAAetf,SAAU,EAAGb,aAAc,SAAgCxe,EAAIrsB,GAAgB,EAALqsB,GACzN,EAAA,yBAAmB,uBAAwBrsB,EAAIirD,YAC9C3iE,OAAQ,CAAEw/D,OAAQ,CAAC,kBAAmB,UAAWl4D,SAAU,CAAC,oBAAqB,YAAajG,QAAS,CAAC,mBAAoB,WAAYk7D,MAAO,CAAC,iBAAkB,SAAUoG,UAAW,CAAC,qBAAsB,aAAcxD,SAAU,CAAC,oBAAqB,YAAan9D,UAAW,CAAC,qBAAsB,cAAgBsiD,SAAU,CAAC,eA2DpU0d,GAhJmB,GA0J1B,GAAgC,MAChC,MAAMY,GAaN,OAXJA,EAAgB3hE,UAAO,EAAA,8BAAwB,CAAE1D,KAAMqlE,IACvDA,EAAgB1hE,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAKgpE,IAAuBzhE,QAAS,CAAC,CAAC,GAAiB,IAAiB,MAU1KyhE,GAdyB,GA8FhC,GAAwC,MACxC,MAAMC,GAYN,OAVJA,EAAwB5hE,UAAO,EAAA,8BAAwB,CAAE1D,KAAMslE,IAC/DA,EAAwB3hE,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAyC1B,GAAK,OAAO,IAAKA,GAAKipE,MAStHA,GAbiC,GAqYxC,GAAgC,MAChC,MAAMC,GAaN,OAXJA,EAAgB7hE,UAAO,EAAA,8BAAwB,CAAE1D,KAAMulE,IACvDA,EAAgB5hE,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAKkpE,IAAuB3hE,QAAS,CAAC,CAAC,GAAiB,EAAA,aAAc,OAUvK2hE,GAdyB,GA8BpC,MC13DaC,GAVuB,MAChC,SAASC,IAIL,OAHAhmE,MAAMnE,KAAK+C,MACXA,KAAKo9B,QAAU,sBACfp9B,KAAK3C,KAAO,0BACL2C,KAGX,OADAonE,EAA4B1oE,UAAYlB,OAAOY,OAAOgD,MAAM1C,WACrD0oE,GARyB,GCC7B,MAAM,WAA4B,GACrC,YAAYhL,EAASx9B,GACjBxe,QACApgB,KAAKo8D,QAAUA,EACfp8D,KAAK4+B,WAAaA,EAClB5+B,KAAKg9B,QAAS,EAElB,cACI,GAAIh9B,KAAKg9B,OACL,OAEJh9B,KAAKg9B,QAAS,EACd,MAAMo/B,EAAUp8D,KAAKo8D,QACfiL,EAAYjL,EAAQiL,UAE1B,GADArnE,KAAKo8D,QAAU,MACViL,GAAkC,IAArBA,EAAUnkE,QAAgBk5D,EAAQ19B,WAAa09B,EAAQp/B,OACrE,OAEJ,MAAMsqC,EAAkBD,EAAUn7D,QAAQlM,KAAK4+B,aACtB,IAArB0oC,GACAD,EAAU53D,OAAO63D,EAAiB,ICfvC,MAAM,WAA0B,GACnC,YAAY13D,GACRwQ,MAAMxQ,GACN5P,KAAK4P,YAAcA,GAGpB,IAAA,GAAA,YAAM23D,UAAgB,GACzB,cACInnD,QACApgB,KAAKqnE,UAAY,GACjBrnE,KAAKg9B,QAAS,EACdh9B,KAAK0+B,WAAY,EACjB1+B,KAAKwnE,UAAW,EAChBxnE,KAAKynE,YAAc,KAEvB,CAACtpC,MACG,OAAO,IAAI,GAAkBn+B,MAEjC,KAAKihC,GACD,MAAMm7B,EAAU,IAAI,GAAiBp8D,KAAMA,MAE3C,OADAo8D,EAAQn7B,SAAWA,EACZm7B,EAEX,KAAKr+D,GACD,GAAIiC,KAAKg9B,OACL,MAAM,IAAImqC,GAEd,IAAKnnE,KAAK0+B,UAAW,CACjB,MAAM,UAAE2oC,GAAcrnE,KAChB29B,EAAM0pC,EAAUnkE,OAChBwkE,EAAOL,EAAU9oD,QACvB,IAAK,IAAIzhB,EAAI,EAAGA,EAAI6gC,EAAK7gC,IACrB4qE,EAAK5qE,GAAGgV,KAAK/T,IAIzB,MAAM8+B,GACF,GAAI78B,KAAKg9B,OACL,MAAM,IAAImqC,GAEdnnE,KAAKwnE,UAAW,EAChBxnE,KAAKynE,YAAc5qC,EACnB78B,KAAK0+B,WAAY,EACjB,MAAM,UAAE2oC,GAAcrnE,KAChB29B,EAAM0pC,EAAUnkE,OAChBwkE,EAAOL,EAAU9oD,QACvB,IAAK,IAAIzhB,EAAI,EAAGA,EAAI6gC,EAAK7gC,IACrB4qE,EAAK5qE,GAAGiH,MAAM84B,GAElB78B,KAAKqnE,UAAUnkE,OAAS,EAE5B,WACI,GAAIlD,KAAKg9B,OACL,MAAM,IAAImqC,GAEdnnE,KAAK0+B,WAAY,EACjB,MAAM,UAAE2oC,GAAcrnE,KAChB29B,EAAM0pC,EAAUnkE,OAChBwkE,EAAOL,EAAU9oD,QACvB,IAAK,IAAIzhB,EAAI,EAAGA,EAAI6gC,EAAK7gC,IACrB4qE,EAAK5qE,GAAGwhC,WAEZt+B,KAAKqnE,UAAUnkE,OAAS,EAE5B,cACIlD,KAAK0+B,WAAY,EACjB1+B,KAAKg9B,QAAS,EACdh9B,KAAKqnE,UAAY,KAErB,cAAczoC,GACV,GAAI5+B,KAAKg9B,OACL,MAAM,IAAImqC,GAGV,OAAO/mD,MAAMghB,cAAcxC,GAGnC,WAAWA,GACP,GAAI5+B,KAAKg9B,OACL,MAAM,IAAImqC,GAET,OAAInnE,KAAKwnE,UACV5oC,EAAW76B,MAAM/D,KAAKynE,aACf,GAAa3pC,OAEf99B,KAAK0+B,WACVE,EAAWN,WACJ,GAAaR,QAGpB99B,KAAKqnE,UAAU5mE,KAAKm+B,GACb,IAAI,GAAoB5+B,KAAM4+B,IAG7C,eACI,MAAM0B,EAAa,IAAI,GAEvB,OADAA,EAAWd,OAASx/B,KACbsgC,UAGfinC,EAAQnpE,OAAS,CAACwR,EAAa4vB,IACpB,IAAI,GAAiB5vB,EAAa4vB,MA/FtC,GAiGA,MAAM,WAAyB,GAClC,YAAY5vB,EAAa4vB,GACrBpf,QACApgB,KAAK4P,YAAcA,EACnB5P,KAAKw/B,OAASA,EAElB,KAAKzhC,GACD,MAAM,YAAE6R,GAAgB5P,KACpB4P,GAAeA,EAAYkC,MAC3BlC,EAAYkC,KAAK/T,GAGzB,MAAM8+B,GACF,MAAM,YAAEjtB,GAAgB5P,KACpB4P,GAAeA,EAAY7L,OAC3B/D,KAAK4P,YAAY7L,MAAM84B,GAG/B,WACI,MAAM,YAAEjtB,GAAgB5P,KACpB4P,GAAeA,EAAY0uB,UAC3Bt+B,KAAK4P,YAAY0uB,WAGzB,WAAWM,GACP,MAAM,OAAEY,GAAWx/B,KACnB,OAAIw/B,EACOx/B,KAAKw/B,OAAOG,UAAUf,GAGtB,GAAad,OC1IzB,SAAS,KACZ,OAAO,SAAkC0B,GACrC,OAAOA,EAAOC,KAAK,IAAIkoC,GAAiBnoC,KAGhD,MAAMmoC,GACF,YAAYC,GACR5nE,KAAK4nE,YAAcA,EAEvB,KAAKhpC,EAAYY,GACb,MAAM,YAAEooC,GAAgB5nE,KACxB4nE,EAAYC,YACZ,MAAMC,EAAa,IAAI,GAAmBlpC,EAAYgpC,GAChD/pC,EAAe2B,EAAOG,UAAUmoC,GAItC,OAHKA,EAAW9qC,SACZ8qC,EAAWC,WAAaH,EAAYI,WAEjCnqC,GAGf,MAAM,WAA2B,GAC7B,YAAYjuB,EAAag4D,GACrBxnD,MAAMxQ,GACN5P,KAAK4nE,YAAcA,EAEvB,eACI,MAAM,YAAEA,GAAgB5nE,KACxB,IAAK4nE,EAED,YADA5nE,KAAK+nE,WAAa,MAGtB/nE,KAAK4nE,YAAc,KACnB,MAAMK,EAAWL,EAAYC,UAC7B,GAAII,GAAY,EAEZ,YADAjoE,KAAK+nE,WAAa,MAItB,GADAH,EAAYC,UAAYI,EAAW,EAC/BA,EAAW,EAEX,YADAjoE,KAAK+nE,WAAa,MAGtB,MAAM,WAAEA,GAAe/nE,KACjBkoE,EAAmBN,EAAYO,YACrCnoE,KAAK+nE,WAAa,MACdG,GAAsBH,GAAcG,IAAqBH,GACzDG,EAAiB5qC,eC1CtB,MAAM,WAA8B,GACvC,YAAYkC,EAAQ4oC,GAChBhoD,QACApgB,KAAKw/B,OAASA,EACdx/B,KAAKooE,eAAiBA,EACtBpoE,KAAK6nE,UAAY,EACjB7nE,KAAKqoE,aAAc,EAEvB,WAAWzpC,GACP,OAAO5+B,KAAKsoE,aAAa3oC,UAAUf,GAEvC,aACI,MAAMw9B,EAAUp8D,KAAKuoE,SAIrB,OAHKnM,IAAWA,EAAQ19B,YACpB1+B,KAAKuoE,SAAWvoE,KAAKooE,kBAElBpoE,KAAKuoE,SAEhB,UACI,IAAIR,EAAa/nE,KAAKmoE,YAWtB,OAVKJ,IACD/nE,KAAKqoE,aAAc,EACnBN,EAAa/nE,KAAKmoE,YAAc,IAAI,GACpCJ,EAAW1xD,IAAIrW,KAAKw/B,OACfG,UAAU,IAAI,GAAsB3/B,KAAKsoE,aAActoE,QACxD+nE,EAAW/qC,SACXh9B,KAAKmoE,YAAc,KACnBJ,EAAa,GAAajqC,QAG3BiqC,EAEX,WACI,OAAO,IAAA,CAAsB/nE,OAG9B,MAAMwoE,GAAkC,MAC3C,MAAMC,EAAmB,GAAsB/pE,UAC/C,MAAO,CACHuiC,SAAU,CAAEljC,MAAO,MACnB8pE,UAAW,CAAE9pE,MAAO,EAAG2qE,UAAU,GACjCH,SAAU,CAAExqE,MAAO,KAAM2qE,UAAU,GACnCP,YAAa,CAAEpqE,MAAO,KAAM2qE,UAAU,GACtC1nC,WAAY,CAAEjjC,MAAO0qE,EAAiBznC,YACtCqnC,YAAa,CAAEtqE,MAAO0qE,EAAiBJ,YAAaK,UAAU,GAC9DJ,WAAY,CAAEvqE,MAAO0qE,EAAiBH,YACtCN,QAAS,CAAEjqE,MAAO0qE,EAAiBT,SACnCC,SAAU,CAAElqE,MAAO0qE,EAAiBR,YAXG,GAc/C,MAAM,WAA8B,GAChC,YAAYr4D,EAAag4D,GACrBxnD,MAAMxQ,GACN5P,KAAK4nE,YAAcA,EAEvB,OAAO/qC,GACH78B,KAAKy9B,eACLrd,MAAM0e,OAAOjC,GAEjB,YACI78B,KAAK4nE,YAAYS,aAAc,EAC/BroE,KAAKy9B,eACLrd,MAAM2e,YAEV,eACI,MAAM6oC,EAAc5nE,KAAK4nE,YACzB,GAAIA,EAAa,CACb5nE,KAAK4nE,YAAc,KACnB,MAAMG,EAAaH,EAAYO,YAC/BP,EAAYC,UAAY,EACxBD,EAAYW,SAAW,KACvBX,EAAYO,YAAc,KACtBJ,GACAA,EAAWzqC,gBC3E3B,SAASqrC,KACL,OAAO,IAAI,oBCqBf,MAAM,GAAM,CAAC,KACb,SAASC,GAA4BC,GACjC,OAAOznE,MAAM,sCAAsCynE,MAiBvD,SAASC,GAAmCjoE,GACxC,OAAOO,MACH,wHAAkDP,OAO1D,SAASkoE,GAAuCC,GAC5C,OAAO5nE,MACH,0HAAkD4nE,OAM1D,MAAMC,GACF,YAAYt9D,EAAM5L,GACdC,KAAKD,QAAUA,EAGT4L,EAAKgrD,SACP32D,KAAKkpE,WAAav9D,EAGlB3L,KAAKa,IAAM8K,GAWvB,IAAI,GAAgC,MAChC,MAAMw9D,EACF,YAAYC,EAAaC,EAAY5nE,EAAU6nE,GAC3CtpE,KAAKopE,YAAcA,EACnBppE,KAAKqpE,WAAaA,EAClBrpE,KAAKspE,cAAgBA,EAIrBtpE,KAAKupE,gBAAkB,IAAI5pE,IAK3BK,KAAKwpE,gBAAkB,IAAI7pE,IAE3BK,KAAKypE,kBAAoB,IAAI9pE,IAE7BK,KAAK0pE,sBAAwB,IAAI/pE,IAEjCK,KAAK2pE,uBAAyB,IAAIhqE,IAMlCK,KAAK4pE,qBAAuB,iBAC5B5pE,KAAKq3D,UAAY51D,EAOrB,WAAWonE,EAAUhoE,EAAKd,GACtB,OAAOC,KAAK6pE,sBAAsB,GAAIhB,EAAUhoE,EAAKd,GAOzD,kBAAkB8oE,EAAUG,EAASjpE,GACjC,OAAOC,KAAK8pE,6BAA6B,GAAIjB,EAAUG,EAASjpE,GAQpE,sBAAsB6D,EAAWilE,EAAUhoE,EAAKd,GAC5C,OAAOC,KAAK+pE,kBAAkBnmE,EAAWilE,EAAU,IAAII,GAAcpoE,EAAKd,IAQ9E,6BAA6B6D,EAAWilE,EAAUG,EAASjpE,GACvD,MAAMiqE,EAAmBhqE,KAAKqpE,WAAWY,SAAS,EAAA,gBAAgBC,KAAMlB,GACxE,IAAKgB,EACD,MAAMjB,GAAuCC,GAEjD,MAAME,EAAalpE,KAAKmqE,+BAA+BH,EAAkBjqE,GACzE,OAAOC,KAAK+pE,kBAAkBnmE,EAAWilE,EAAU,IAAII,GAAcC,EAAYnpE,IAMrF,cAAcc,EAAKd,GACf,OAAOC,KAAKoqE,yBAAyB,GAAIvpE,EAAKd,GAMlD,qBAAqBipE,EAASjpE,GAC1B,OAAOC,KAAKqqE,gCAAgC,GAAIrB,EAASjpE,GAO7D,yBAAyB6D,EAAW/C,EAAKd,GACrC,OAAOC,KAAKsqE,qBAAqB1mE,EAAW,IAAIqlE,GAAcpoE,EAAKd,IAOvE,gCAAgC6D,EAAWolE,EAASjpE,GAChD,MAAMiqE,EAAmBhqE,KAAKqpE,WAAWY,SAAS,EAAA,gBAAgBC,KAAMlB,GACxE,IAAKgB,EACD,MAAMjB,GAAuCC,GAEjD,MAAME,EAAalpE,KAAKuqE,sBAAsBP,GAC9C,OAAOhqE,KAAKsqE,qBAAqB1mE,EAAW,IAAIqlE,GAAcC,EAAYnpE,IAU9E,uBAAuBkU,EAAOwY,EAAYxY,GAEtC,OADAjU,KAAK2pE,uBAAuBvnE,IAAI6R,EAAOwY,GAChCzsB,KAMX,sBAAsBiU,GAClB,OAAOjU,KAAK2pE,uBAAuBhsE,IAAIsW,IAAUA,EAQrD,uBAAuBwY,GAEnB,OADAzsB,KAAK4pE,qBAAuBn9C,EACrBzsB,KAMX,yBACI,OAAOA,KAAK4pE,qBAUhB,kBAAkBY,GACd,MAAM3pE,EAAMb,KAAKqpE,WAAWY,SAAS,EAAA,gBAAgBQ,aAAcD,GACnE,IAAK3pE,EACD,MAAMioE,GAAmC0B,GAE7C,MAAME,EAAa1qE,KAAKypE,kBAAkB9rE,IAAIkD,GAC9C,OAAI6pE,EACO,OAAA,GAAA,GAAA,CAAGC,GAASD,IAEhB1qE,KAAK4qE,uBAAuB,IAAI3B,GAAcuB,IAAU/nC,KAAKoC,GAAIgmC,GAAO7qE,KAAKypE,kBAAkBrnE,IAAIvB,EAAKgqE,IAAOh/D,GAAIg/D,GAAOF,GAASE,KAU9I,gBAAgBxtE,EAAMuG,EAAY,IAE9B,MAAMvF,EAAMysE,GAAQlnE,EAAWvG,GACzB2D,EAAShB,KAAKupE,gBAAgB5rE,IAAIU,GACxC,GAAI2C,EACA,OAAOhB,KAAK+qE,kBAAkB/pE,GAGlC,MAAMgqE,EAAiBhrE,KAAKwpE,gBAAgB7rE,IAAIiG,GAChD,OAAIonE,EACOhrE,KAAKirE,0BAA0B5tE,EAAM2tE,GAEzC,OAAA,GAAA,WAAA,CAAWpC,GAA4BvqE,IAElD,cACI2B,KAAKupE,gBAAgB7lE,QACrB1D,KAAKwpE,gBAAgB9lE,QACrB1D,KAAKypE,kBAAkB/lE,QAK3B,kBAAkB1C,GACd,OAAIA,EAAOkoE,WAEA,OAAA,GAAA,GAAA,CAAGyB,GAAS3pE,EAAOkoE,aAInBlpE,KAAK4qE,uBAAuB5pE,GAAQyhC,KAAKoC,GAAIgmC,GAAO7pE,EAAOkoE,WAAa2B,GAAMh/D,GAAIg/D,GAAOF,GAASE,KAWjH,0BAA0BxtE,EAAM2tE,GAG5B,MAAME,EAAYlrE,KAAKmrE,+BAA+B9tE,EAAM2tE,GAC5D,GAAIE,EAIA,OAAO,OAAA,GAAA,GAAA,CAAGA,GAId,MAAME,EAAuBJ,EACxB9pE,OAAOmqE,IAAkBA,EAAcnC,YACvCr9D,IAAIw/D,GACErrE,KAAKsrE,0BAA0BD,GAAe5oC,KAAK4B,GAAYxH,IAClE,MAAMh8B,EAAMb,KAAKqpE,WAAWY,SAAS,EAAA,gBAAgBQ,aAAcY,EAAcxqE,KAKjF,OADAb,KAAKspE,cAAciC,YAAY,IAAInqE,MADd,yBAAyBP,aAAeg8B,EAAIO,YAE1D,OAAA,GAAA,GAAA,CAAG,UAKlB,OAAO,OAAA,GAAA,SAAA,CAASguC,GAAsB3oC,KAAK52B,GAAI,KAC3C,MAAM2/D,EAAYxrE,KAAKmrE,+BAA+B9tE,EAAM2tE,GAC5D,IAAKQ,EACD,MAAM5C,GAA4BvrE,GAEtC,OAAOmuE,KAQf,+BAA+B3C,EAAUmC,GAErC,IAAK,IAAIluE,EAAIkuE,EAAe9nE,OAAS,EAAGpG,GAAK,EAAGA,IAAK,CACjD,MAAMkE,EAASgqE,EAAeluE,GAC9B,GAAIkE,EAAOkoE,WAAY,CACnB,MAAMsC,EAAYxrE,KAAKyrE,uBAAuBzqE,EAAOkoE,WAAYL,EAAU7nE,EAAOjB,SAClF,GAAIyrE,EACA,OAAOA,GAInB,OAAO,KAMX,uBAAuBxqE,GACnB,OAAOhB,KAAK0rE,WAAW1qE,GAClByhC,KAAK52B,GAAI8/D,GAAW3rE,KAAKmqE,+BAA+BwB,EAAS3qE,EAAOjB,WAMjF,0BAA0BiB,GAEtB,OAAIA,EAAOkoE,WACA,OAAA,GAAA,GAAA,CAAGloE,EAAOkoE,YAEdlpE,KAAK0rE,WAAW1qE,GAAQyhC,KAAK52B,GAAI8/D,IAG/B3qE,EAAOkoE,aACRloE,EAAOkoE,WAAalpE,KAAKuqE,sBAAsBoB,IAE5C3qE,EAAOkoE,cAMtB,+BAA+B0C,EAAc7rE,GACzC,MAAM8qE,EAAM7qE,KAAKuqE,sBAAsBqB,GAEvC,OADA5rE,KAAK6rE,kBAAkBhB,EAAK9qE,GACrB8qE,EAOX,uBAAuBiB,EAASjD,EAAU9oE,GAGtC,MAAMgsE,EAAaD,EAAQr+D,cAAc,QAAQo7D,OACjD,IAAKkD,EACD,OAAO,KAIX,MAAMC,EAAcD,EAAWE,WAAU,GAIzC,GAHAD,EAAY7wC,gBAAgB,MAGe,QAAvC6wC,EAAYrV,SAAStmD,cACrB,OAAOrQ,KAAK6rE,kBAAkBG,EAAajsE,GAK/C,GAA2C,WAAvCisE,EAAYrV,SAAStmD,cACrB,OAAOrQ,KAAK6rE,kBAAkB7rE,KAAKksE,cAAcF,GAAcjsE,GAOnE,MAAM8qE,EAAM7qE,KAAKuqE,sBAAsB,eAGvC,OADAM,EAAI3oE,YAAY8pE,GACThsE,KAAK6rE,kBAAkBhB,EAAK9qE,GAKvC,sBAAsBwR,GAClB,MAAM46D,EAAMnsE,KAAKq3D,UAAU31D,cAAc,OACzCyqE,EAAIl1C,UAAY1lB,EAChB,MAAMs5D,EAAMsB,EAAI1+D,cAAc,OAC9B,IAAKo9D,EACD,MAAMzpE,MAAM,uBAEhB,OAAOypE,EAKX,cAAchhE,GACV,MAAMghE,EAAM7qE,KAAKuqE,sBAAsB,eACjC6B,EAAaviE,EAAQuiE,WAE3B,IAAK,IAAItvE,EAAI,EAAGA,EAAIsvE,EAAWlpE,OAAQpG,IAAK,CACxC,MAAM,KAAEO,EAAI,MAAEU,GAAUquE,EAAWtvE,GACtB,OAATO,GACAwtE,EAAIv6D,aAAajT,EAAMU,GAG/B,IAAK,IAAIjB,EAAI,EAAGA,EAAI+M,EAAQivD,WAAW51D,OAAQpG,IACvC+M,EAAQivD,WAAWh8D,GAAGk8D,WAAah5D,KAAKq3D,UAAU4B,cAClD4R,EAAI3oE,YAAY2H,EAAQivD,WAAWh8D,GAAGmvE,WAAU,IAGxD,OAAOpB,EAKX,kBAAkBA,EAAK9qE,GASnB,OARA8qE,EAAIv6D,aAAa,MAAO,IACxBu6D,EAAIv6D,aAAa,SAAU,QAC3Bu6D,EAAIv6D,aAAa,QAAS,QAC1Bu6D,EAAIv6D,aAAa,sBAAuB,iBACxCu6D,EAAIv6D,aAAa,YAAa,SAC1BvQ,GAAWA,EAAQssE,SACnBxB,EAAIv6D,aAAa,UAAWvQ,EAAQssE,SAEjCxB,EAMX,WAAWyB,GACP,IAAIzc,EACJ,MAAQhvD,IAAK2pE,EAAO,QAAEzqE,GAAYusE,EAC5BC,EAAuG,QAApF1c,EAAK9vD,MAAAA,OAAyC,EAASA,EAAQwsE,uBAAoC,IAAP1c,GAAgBA,EACrI,IAAK7vD,KAAKopE,YACN,MA9aLhoE,MAAM,8JAgbL,GAAe,MAAXopE,EACA,MAAMppE,MAAM,+BAA+BopE,OAE/C,MAAM3pE,EAAMb,KAAKqpE,WAAWY,SAAS,EAAA,gBAAgBQ,aAAcD,GACnE,IAAK3pE,EACD,MAAMioE,GAAmC0B,GAK7C,MAAMgC,EAAkBxsE,KAAK0pE,sBAAsB/rE,IAAIkD,GACvD,GAAI2rE,EACA,OAAOA,EAIX,MAAMC,EAAMzsE,KAAKopE,YAAYzrE,IAAIkD,EAAK,CAAE6rE,aAAc,OAAQH,gBAAAA,IAAmB9pC,KAAKuD,GAAS,IAAMhmC,KAAK0pE,sBAAsB5vD,OAAOjZ,ID5dvI2+B,IAAW,OAAA,IAAA,EENGmtC,EFMkBhE,GELjC,SAAmCnpC,GACtC,IAAI4oC,EAEAA,EADmC,mBAA5BuE,EACUA,EAGA,WACb,OAAOA,GAMf,MAAM/E,EAAcpqE,OAAOY,OAAOohC,EAAQgpC,IAG1C,OAFAZ,EAAYpoC,OAASA,EACrBooC,EAAYQ,eAAiBA,EACtBR,IFXkDpoC,IEN1D,IAAmBmtC,IDoed,OADA3sE,KAAK0pE,sBAAsBtnE,IAAIvB,EAAK4rE,GAC7BA,EAQX,kBAAkB7oE,EAAWilE,EAAU7nE,GAEnC,OADAhB,KAAKupE,gBAAgBnnE,IAAI0oE,GAAQlnE,EAAWilE,GAAW7nE,GAChDhB,KAOX,qBAAqB4D,EAAW5C,GAC5B,MAAM4rE,EAAkB5sE,KAAKwpE,gBAAgB7rE,IAAIiG,GAOjD,OANIgpE,EACAA,EAAgBnsE,KAAKO,GAGrBhB,KAAKwpE,gBAAgBpnE,IAAIwB,EAAW,CAAC5C,IAElChB,MAsBf,OAnBJmpE,EAAgB3mE,UAAO,SAAiCxE,GAAK,OAAO,IAAKA,GAAKmrE,GAAiB,EAAA,sBAAgB,GAAA,WAAmB,GAAI,EAAA,sBAAgB,EAAA,cAAsB,EAAA,sBAAgB,EAAA,SAAU,GAAI,EAAA,sBAAgB,EAAA,gBACtNA,EAAgB1mE,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAqC,OAAO,IAAIypE,EAAgB,OAAA,EAAA,sBAAA,CAAS,GAAA,WAAY,GAAI,OAAA,EAAA,sBAAA,CAAS,EAAA,cAAe,OAAA,EAAA,sBAAA,CAAS,EAAA,SAAU,GAAI,OAAA,EAAA,sBAAA,CAAS,EAAA,gBAAmBzmE,MAAOymE,EAAiB1pE,WAAY,SAkBvP0pE,GAncyB,GAudpC,SAASwB,GAASE,GACd,OAAOA,EAAIoB,WAAU,GAGzB,SAASnB,GAAQlnE,EAAWvG,GACxB,OAAOuG,EAAY,IAAMvG,EAY7B,MAAMwvE,GACF,YAAYra,GACRxyD,KAAKwyD,YAAcA,GAG3B,MAAMsa,GAAoBrM,GAAWoM,IAM/BE,GAAoB,IAAI,EAAA,eAAe,oBAAqB,CAC9DttE,WAAY,OACZC,QAGJ,WACI,MAAM23D,EAAY,OAAA,EAAA,OAAA,CAAO,EAAA,UACnB2V,EAAY3V,EAAYA,EAAUnY,SAAW,KACnD,MAAO,CAGH+tB,YAAa,IAAMD,EAAaA,EAAUE,SAAWF,EAAUG,OAAU,OAI3EC,GAAoB,CACtB,YACA,gBACA,MACA,SACA,OACA,SACA,SACA,eACA,aACA,aACA,OACA,UAIEC,GAA2BD,GAAkBvhE,IAFxCyhE,GAAQ,IAAIA,MAEoCviE,KAAK,MAE1DwiE,GAAiB,4BA4BvB,IAAI,GAAwB,MACxB,MAAMC,UAAgBV,GAClB,YAAYW,EAAYC,EAAeC,EAAYX,EAAW1D,GAC1DlpD,MAAMqtD,GACNztE,KAAK0tE,cAAgBA,EACrB1tE,KAAKgtE,UAAYA,EACjBhtE,KAAKspE,cAAgBA,EACrBtpE,KAAK4tE,SAAU,EAEf5tE,KAAK6tE,kBAAoB,GAAA,aAAa/vC,MAGjC6vC,GACDF,EAAWjnB,cAAcl2C,aAAa,cAAe,QAO7D,aACI,OAAOtQ,KAAK4tE,QAEhB,WAAWE,GACP9tE,KAAK4tE,QAAU1e,GAAsB4e,GAGzC,cAAgB,OAAO9tE,KAAK+tE,SAC5B,YAAYhwE,GACRiC,KAAK+tE,SAAW/tE,KAAKguE,kBAAkBjwE,GAG3C,eAAiB,OAAOiC,KAAKiuE,UAC7B,aAAalwE,GACTiC,KAAKiuE,UAAYjuE,KAAKguE,kBAAkBjwE,GAe5C,eAAe8qE,GACX,IAAKA,EACD,MAAO,CAAC,GAAI,IAEhB,MAAMlgC,EAAQkgC,EAAS90D,MAAM,KAC7B,OAAQ40B,EAAMzlC,QACV,KAAK,EAAG,MAAO,CAAC,GAAIylC,EAAM,IAC1B,KAAK,EAAG,OAAOA,EACf,QAAS,MAAMvnC,MAAM,uBAAuBynE,OAGpD,YAAY5hB,GAER,MAAMinB,EAAiBjnB,EAAiB,QACxC,GAAIinB,EAEA,GADAluE,KAAK6tE,kBAAkBvwC,cACnBt9B,KAAKmuE,QAAS,CACd,MAAOvqE,EAAWilE,GAAY7oE,KAAKouE,eAAepuE,KAAKmuE,SACvDnuE,KAAK6tE,kBAAoB7tE,KAAK0tE,cAAcW,gBAAgBxF,EAAUjlE,GACjE6+B,KAAKiC,GAAK,IACV/E,UAAUkrC,GAAO7qE,KAAKsuE,eAAezD,GAAOhuC,IAE7C78B,KAAKspE,cAAciC,YAAY,IAAInqE,MADd,yBAAyBwC,KAAailE,MAAahsC,EAAIO,mBAI3E8wC,EAAeK,eACpBvuE,KAAKwuE,mBAGTxuE,KAAKyuE,kBACLzuE,KAAK0uE,yBAGb,WAGQ1uE,KAAKyuE,kBACLzuE,KAAK0uE,yBAGb,qBACI,MAAMC,EAAiB3uE,KAAK4uE,gCAC5B,GAAID,GAAkBA,EAAer4D,KAAM,CACvC,MAAMu4D,EAAU7uE,KAAKgtE,UAAUC,cAO3B4B,IAAY7uE,KAAK8uE,gBACjB9uE,KAAK8uE,cAAgBD,EACrB7uE,KAAK+uE,yBAAyBF,KAI1C,cACI7uE,KAAK6tE,kBAAkBvwC,cACnBt9B,KAAK4uE,iCACL5uE,KAAK4uE,gCAAgClrE,QAG7C,iBACI,OAAQ1D,KAAKmuE,QAEjB,eAAetD,GACX7qE,KAAKwuE,mBAIL,MAAMQ,EAAYnE,EAAIt9D,iBAAiB,SACvC,IAAK,IAAIzQ,EAAI,EAAGA,EAAIkyE,EAAU9rE,OAAQpG,IAClCkyE,EAAUlyE,GAAGq9D,aAAe,IAIhC,MAAM/yB,EAAOpnC,KAAKgtE,UAAUC,cAC5BjtE,KAAK8uE,cAAgB1nC,EACrBpnC,KAAKivE,qCAAqCpE,GAC1C7qE,KAAK+uE,yBAAyB3nC,GAC9BpnC,KAAKwyD,YAAYhM,cAActkD,YAAY2oE,GAE/C,mBACI,MAAMqE,EAAgBlvE,KAAKwyD,YAAYhM,cACvC,IAAI2oB,EAAaD,EAAcpW,WAAW51D,OAM1C,IALIlD,KAAK4uE,iCACL5uE,KAAK4uE,gCAAgClrE,QAIlCyrE,KAAc,CACjB,MAAMhjC,EAAQ+iC,EAAcpW,WAAWqW,GAGhB,IAAnBhjC,EAAM6sB,UAAmD,QAAjC7sB,EAAMwqB,SAAStmD,eACvC6+D,EAAc33C,YAAY4U,IAItC,yBACI,IAAKnsC,KAAKyuE,iBACN,OAEJ,MAAMW,EAAOpvE,KAAKwyD,YAAYhM,cACxB6oB,EAAervE,KAAKsvE,QACtBtvE,KAAK0tE,cAAc6B,sBAAsBvvE,KAAKsvE,SAC9CtvE,KAAK0tE,cAAc8B,yBACnBH,GAAgBrvE,KAAKyvE,wBACjBzvE,KAAKyvE,uBACLL,EAAK19C,UAAUE,OAAO5xB,KAAKyvE,uBAE3BJ,GACAD,EAAK19C,UAAUrb,IAAIg5D,GAEvBrvE,KAAKyvE,sBAAwBJ,GAE7BrvE,KAAK0vE,UAAY1vE,KAAK2vE,yBAClB3vE,KAAK2vE,wBACLP,EAAK19C,UAAUE,OAAO5xB,KAAK2vE,wBAE3B3vE,KAAK0vE,UACLN,EAAK19C,UAAUrb,IAAIrW,KAAK0vE,UAE5B1vE,KAAK2vE,uBAAyB3vE,KAAK0vE,UAQ3C,kBAAkB3xE,GACd,MAAwB,iBAAVA,EAAqBA,EAAMqjB,OAAOrN,MAAM,KAAK,GAAKhW,EAOpE,yBAAyBqpC,GACrB,MAAMnoC,EAAWe,KAAK4uE,gCAClB3vE,GACAA,EAASkB,QAAQ,CAACyvE,EAAO/lE,KACrB+lE,EAAMzvE,QAAQmtE,IACVzjE,EAAQyG,aAAag9D,EAAKjwE,KAAM,QAAQ+pC,KAAQkmC,EAAKvvE,eASrE,qCAAqC8L,GACjC,MAAMgmE,EAAsBhmE,EAAQ0D,iBAAiB8/D,IAC/CpuE,EAAWe,KAAK4uE,gCAClB5uE,KAAK4uE,iCAAmC,IAAIjvE,IAChD,IAAK,IAAI7C,EAAI,EAAGA,EAAI+yE,EAAoB3sE,OAAQpG,IAC5CswE,GAAkBjtE,QAAQmtE,IACtB,MAAMwC,EAAuBD,EAAoB/yE,GAC3CiB,EAAQ+xE,EAAqB5Y,aAAaoW,GAC1Cx+D,EAAQ/Q,EAAQA,EAAM+Q,MAAMy+D,IAAkB,KACpD,GAAIz+D,EAAO,CACP,IAAIs9D,EAAantE,EAAStB,IAAImyE,GACzB1D,IACDA,EAAa,GACbntE,EAASmD,IAAI0tE,EAAsB1D,IAEvCA,EAAW3rE,KAAK,CAAEpD,KAAMiwE,EAAMvvE,MAAO+Q,EAAM,SA0D/D,OApDJ0+D,EAAQhrE,UAAO,SAAyBxE,GAAK,OAAO,IAAKA,GAAKwvE,GAAS,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,IAAkB,EAAA,+BAAyB,eAAgB,EAAA,+BAAyBT,IAAoB,EAAA,+BAAyB,EAAA,gBAC9QS,EAAQxlC,UAAO,EAAA,+BAAyB,CAAErmC,KAAM6rE,EAASrpE,UAAW,CAAC,CAAC,aAAc2iE,UAAW,CAAC,OAAQ,MAAO,EAAG,WAAY,eAAgBtf,SAAU,EAAGb,aAAc,SAA8Bxe,EAAIrsB,GAAgB,EAALqsB,GAC9M,EAAA,yBAAmB,kBAAmBrsB,EAAIgyD,OAA1C,CAAkD,oBAAmC,YAAdhyD,EAAI6kD,OAAqC,WAAd7kD,EAAI6kD,OAAoC,SAAd7kD,EAAI6kD,QAC/Hv8D,OAAQ,CAAEu8D,MAAO,QAASmN,OAAQ,SAAUwB,QAAS,UAAWI,SAAU,WAAYvB,QAAS,WAAazlB,SAAU,CAAC,WAAYhB,SAAU,CAAC,EAAA,wCAAmC,EAAA,mCAA8BqoB,mBAAoB,GAAK9nC,MAAO,EAAGC,KAAM,EAAGllC,SAAU,SAA0BmlC,EAAIrsB,GAAgB,EAALqsB,IAC/S,EAAA,+BACA,EAAA,0BAAoB,KACnBtiC,OAAQ,CAAC,ypBAA0pBkzB,cAAe,EAAGi3C,gBAAiB,IA8CpsBxC,GAnRiB,GA6RxB,GAA8B,MAC9B,MAAMyC,GAaN,OAXJA,EAAc5qE,UAAO,EAAA,8BAAwB,CAAE1D,KAAMsuE,IACrDA,EAAc3qE,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAKiyE,IAAqB1qE,QAAS,CAAC,CAAC,IAAkB,MAUpJ0qE,GAduB,GEz5B3B,GAAA,YAAMC,EAEZ,YAAoBC,EAAiCrwE,GAAjC,KAAAqwE,UAAAA,EAAiC,KAAArwE,SAAAA,EACrD,cAAcswE,GACbA,EAAMjwE,QAAQ9C,GACb2C,KAAKF,SAASuwE,WACbhzE,EACA2C,KAAKmwE,UAAUG,+BAA+B,gCAAgCjzE,yDAPrE6yE,GAAY,EAAA,sBAAA,EAAA,cAAA,EAAA,sBAAA,4DAAZA,EAAY,QAAZA,EAAY,UAAA,WADC,YACnB,GCQA,GAAA,YAAMK,EAQZ,YACSH,EACA9pB,GADA,KAAA8pB,MAAAA,EACA,KAAA9pB,OAAAA,EART,KAAAkqB,YAA4B,GAC5B,KAAAC,WAAa,IAAI,GAAA,qBAA4B/vE,GAC7C,kBACC,OAAOV,KAAKywE,WAAWpX,eAQxB,iBAECr5D,KAAKwwE,YAAcE,GAAK7kE,IAAI,CAACkrB,EAAKrS,IAAmB,OAAA,OAAA,OAAA,OAAA,GAAKqS,GAAG,CAAErS,MAAAA,KAC/D1kB,KAAKsmD,OAAO/G,OAAO9c,KAAKvhC,GAAOgK,GAASA,aAAiBo7B,KAAgB3G,UAAWz0B,IACnF,MAAMylE,EAAU3wE,KAAK4wE,cAAc1lE,EAAMq7B,mBAC1B,MAAXoqC,GAAmB3wE,KAAKsmD,OAAOuqB,SAAS,CAAC7wE,KAAKwwE,YAAY,GAAGrpC,QACjEnnC,KAAKywE,WAAW3+D,KAAK6+D,KAGtB3wE,KAAKowE,MAAMU,cAAc9wE,KAAKwwE,YAAY3kE,IAAI2wB,GAAKA,EAAEu0C,OAG9C,cAAc5pC,GAErB,OADAA,EAAQA,EAAMpzB,MAAM,KAAK,IAAMozB,EACxBnnC,KAAKwwE,YAAYzvE,KAAKg2B,GAAOA,EAAIoQ,QAAUA,iDA3BvCopC,GAAiB,EAAA,sBAAA,IAAA,EAAA,sBAAA,4DAAjBA,EAAiB,QAAjBA,EAAiB,UAAA,WAFjB,YAEN,GCNA,GAAA,YAAMS,EAHb,cAIS,KAAApqC,MAAQ,IAAI,GAAA,gBAAuB1K,IAC3C,aACC,OAAOl8B,KAAK4mC,MAAMyyB,eAGZ,YAAYzyB,GAClB5mC,KAAK4mC,MAAM90B,KAAK80B,GAGjB,YACC,OAAO5mC,KAAK4mC,MAAM7oC,oDAXPizE,0DAAAA,EAAY,QAAZA,EAAY,UAAA,WAFZ,YAEN,GCeP,SAASC,KACL,MAAM7vE,MAAM,sCA2ChB,MAAM8vE,GAEF,OAAOC,GAQH,OAPY,MAARA,GAzBZ,WACI,MAAM/vE,MAAM,wDADhB,GA4BY+vE,EAAKC,eACLH,KAEJjxE,KAAKqxE,cAAgBF,EACdA,EAAK97B,OAAOr1C,MAGvB,SACI,IAAImxE,EAAOnxE,KAAKqxE,cACJ,MAARF,EA9BZ,WACI,MAAM/vE,MAAM,gEADhB,IAkCYpB,KAAKqxE,cAAgB,KACrBF,EAAKz8B,UAIb,iBACI,OAA6B,MAAtB10C,KAAKqxE,cAMhB,gBAAgBF,GACZnxE,KAAKqxE,cAAgBF,GAM7B,MAAMG,WAAwBJ,GAC1B,YAAYznC,EAAW8nC,EAAkBt5B,EAAUxC,GAC/Cr1B,QACApgB,KAAKypC,UAAYA,EACjBzpC,KAAKuxE,iBAAmBA,EACxBvxE,KAAKi4C,SAAWA,EAChBj4C,KAAKy1C,yBAA2BA,GAMxC,MAAM+7B,WAAuBN,GACzB,YAAYluE,EAAUuuE,EAAkB3+D,GACpCwN,QACApgB,KAAKyxE,YAAczuE,EACnBhD,KAAKuxE,iBAAmBA,EACxBvxE,KAAK4S,QAAUA,EAEnB,aACI,OAAO5S,KAAKyxE,YAAYhE,WAO5B,OAAO0D,EAAMv+D,EAAU5S,KAAK4S,SAExB,OADA5S,KAAK4S,QAAUA,EACRwN,MAAMi1B,OAAO87B,GAExB,SAEI,OADAnxE,KAAK4S,aAAUlS,EACR0f,MAAMs0B,UAQrB,MAAM,WAAkBw8B,GACpB,YAAYrnE,GACRuW,QACApgB,KAAK6J,QAAUA,aAAmB,EAAA,WAAaA,EAAQ28C,cAAgB38C,GAO/E,MAAM6nE,GACF,cAEI1xE,KAAK2xE,aAAc,EAEnB3xE,KAAK4xE,gBAAkB,KAG3B,cACI,QAAS5xE,KAAK6xE,gBAGlB,OAAOC,GAUH,OATKA,GAzJb,WACI,MAAM1wE,MAAM,mCADhB,GA4JYpB,KAAKoxE,eACLH,KAEAjxE,KAAK2xE,aAjJjB,WACI,MAAMvwE,MAAM,+CADhB,GAoJY0wE,aAAkBR,IAClBtxE,KAAK6xE,gBAAkBC,EAChB9xE,KAAK+xE,sBAAsBD,IAE7BA,aAAkBN,IACvBxxE,KAAK6xE,gBAAkBC,EAChB9xE,KAAKgyE,qBAAqBF,IAG5B9xE,KAAK4xE,iBAAmBE,aAAkB,IAC/C9xE,KAAK6xE,gBAAkBC,EAChB9xE,KAAK4xE,gBAAgBE,SAxJxC,WACI,MAAM1wE,MAAM,uHADhB,GA6JI,SACQpB,KAAK6xE,kBACL7xE,KAAK6xE,gBAAgBI,gBAAgB,MACrCjyE,KAAK6xE,gBAAkB,MAE3B7xE,KAAKkyE,mBAGT,UACQlyE,KAAKoxE,eACLpxE,KAAK00C,SAET10C,KAAKkyE,mBACLlyE,KAAK2xE,aAAc,EAGvB,aAAazqE,GACTlH,KAAKmyE,WAAajrE,EAEtB,mBACQlH,KAAKmyE,aACLnyE,KAAKmyE,aACLnyE,KAAKmyE,WAAa,OAsB9B,MAAMC,WAAwBV,GAC1B,YAEAW,EAAeC,EAA2BC,EAASC,EAKnDnb,GACIj3C,QACApgB,KAAKqyE,cAAgBA,EACrBryE,KAAKsyE,0BAA4BA,EACjCtyE,KAAKuyE,QAAUA,EACfvyE,KAAKwyE,iBAAmBA,EAOxBxyE,KAAK4xE,gBAAmBE,IAGpB,IAAK9xE,KAAKq3D,UACN,MAAMj2D,MAAM,oEAEhB,MAAMyI,EAAUioE,EAAOjoE,QACvB,IAAKA,EAAQgf,WACT,MAAMznB,MAAM,yDAIhB,MAAMqxE,EAAazyE,KAAKq3D,UAAU98B,cAAc,cAChD1wB,EAAQgf,WAAW8B,aAAa8nD,EAAY5oE,GAC5C7J,KAAKqyE,cAAcnwE,YAAY2H,GAC/BuW,MAAMsyD,aAAa,KAEXD,EAAW5pD,YACX4pD,EAAW5pD,WAAW8pD,aAAa9oE,EAAS4oE,MAIxDzyE,KAAKq3D,UAAYA,EAOrB,sBAAsBya,GAClB,MACMc,GADWd,EAAOr8B,0BAA4Bz1C,KAAKsyE,2BACvB/uE,wBAAwBuuE,EAAOroC,WACjE,IAAIgL,EAoBJ,OAfIq9B,EAAOP,kBACP98B,EAAeq9B,EAAOP,iBAAiB/tE,gBAAgBovE,EAAkBd,EAAOP,iBAAiBruE,OAAQ4uE,EAAO75B,UAAY65B,EAAOP,iBAAiBt5B,UACpJj4C,KAAK0yE,aAAa,IAAMj+B,EAAa1rC,aAGrC0rC,EAAem+B,EAAiBx0E,OAAO0zE,EAAO75B,UAAYj4C,KAAKwyE,kBAC/DxyE,KAAKuyE,QAAQM,WAAWp+B,EAAa8U,UACrCvpD,KAAK0yE,aAAa,KACd1yE,KAAKuyE,QAAQO,WAAWr+B,EAAa8U,UACrC9U,EAAa1rC,aAKrB/I,KAAKqyE,cAAcnwE,YAAYlC,KAAK+yE,sBAAsBt+B,IACnDA,EAOX,qBAAqBq9B,GACjB,IAAIkB,EAAgBlB,EAAOP,iBACvB0B,EAAUD,EAAc1vE,mBAAmBwuE,EAAOL,YAAaK,EAAOl/D,SAc1E,OAbAqgE,EAAQC,gBAKRD,EAAQE,UAAUhzE,QAAQq8C,GAAYx8C,KAAKqyE,cAAcnwE,YAAYs6C,IACrEx8C,KAAK0yE,aAAa,KACd,IAAIhuD,EAAQsuD,EAAc9mE,QAAQ+mE,IACnB,IAAXvuD,GACAsuD,EAAcphD,OAAOlN,KAItBuuD,EAKX,UACI7yD,MAAMqkC,UAC+B,MAAjCzkD,KAAKqyE,cAAcxpD,YACnB7oB,KAAKqyE,cAAcxpD,WAAW0O,YAAYv3B,KAAKqyE,eAIvD,sBAAsB59B,GAClB,OAAOA,EAAa8U,SAAS4pB,UAAU,IAqB/C,IAAI,GAA0B,MAC1B,MAAMC,UAAkB5B,GACpB,YAAYC,EAAaF,GACrBnxD,MAAMqxD,EAAaF,IAgB3B,OAbJ6B,EAAU5wE,UAAO,SAA2BxE,GAAK,OAAO,IAAKA,GAAKo1E,GAAW,EAAA,+BAAyB,EAAA,aAAqB,EAAA,+BAAyB,EAAA,oBACpJA,EAAUlvE,UAAO,EAAA,+BAAyB,CAAEvC,KAAMyxE,EAAWjvE,UAAW,CAAC,CAAC,GAAI,YAAa,KAAMukD,SAAU,CAAC,aAAchB,SAAU,CAAC,EAAA,2CAY1H0rB,GAnBmB,GAsD1B,GAAgC,MAChC,MAAMC,UAAwB3B,GAC1B,YAAYY,EAA2BgB,EAKvCjc,GACIj3C,QACApgB,KAAKsyE,0BAA4BA,EACjCtyE,KAAKszE,kBAAoBA,EAEzBtzE,KAAKg/D,gBAAiB,EAEtBh/D,KAAKuzE,SAAW,IAAI,EAAA,aAOpBvzE,KAAK4xE,gBAAmBE,IAGpB,IAAK9xE,KAAKq3D,UACN,MAAMj2D,MAAM,oEAEhB,MAAMyI,EAAUioE,EAAOjoE,QACvB,IAAKA,EAAQgf,WACT,MAAMznB,MAAM,yDAIhB,MAAMqxE,EAAazyE,KAAKq3D,UAAU98B,cAAc,cAChDu3C,EAAOG,gBAAgBjyE,MACvB6J,EAAQgf,WAAW8B,aAAa8nD,EAAY5oE,GAC5C7J,KAAKwzE,eAAetxE,YAAY2H,GAChCuW,MAAMsyD,aAAa,KACXD,EAAW5pD,YACX4pD,EAAW5pD,WAAW8pD,aAAa9oE,EAAS4oE,MAIxDzyE,KAAKq3D,UAAYA,EAGrB,aACI,OAAOr3D,KAAK6xE,gBAEhB,WAAWC,KAKH9xE,KAAKoxE,eAAkBU,GAAW9xE,KAAKg/D,kBAGvCh/D,KAAKoxE,eACLhxD,MAAMs0B,SAENo9B,GACA1xD,MAAMi1B,OAAOy8B,GAEjB9xE,KAAK6xE,gBAAkBC,GAG3B,kBACI,OAAO9xE,KAAKyzE,aAEhB,WACIzzE,KAAKg/D,gBAAiB,EAE1B,cACI5+C,MAAMqkC,UACNzkD,KAAK6xE,gBAAkB,KACvB7xE,KAAKyzE,aAAe,KAQxB,sBAAsB3B,GAClBA,EAAOG,gBAAgBjyE,MAGvB,MAAMuxE,EAA8C,MAA3BO,EAAOP,iBAC5BO,EAAOP,iBACPvxE,KAAKszE,kBAEHV,GADWd,EAAOr8B,0BAA4Bz1C,KAAKsyE,2BACvB/uE,wBAAwBuuE,EAAOroC,WAC3D2f,EAAMmoB,EAAiB/tE,gBAAgBovE,EAAkBrB,EAAiBruE,OAAQ4uE,EAAO75B,UAAYs5B,EAAiBt5B,UAW5H,OAPIs5B,IAAqBvxE,KAAKszE,mBAC1BtzE,KAAKwzE,eAAetxE,YAAYknD,EAAIG,SAAS4pB,UAAU,IAE3D/yD,MAAMsyD,aAAa,IAAMtpB,EAAIrgD,WAC7B/I,KAAK6xE,gBAAkBC,EACvB9xE,KAAKyzE,aAAerqB,EACpBppD,KAAKuzE,SAAS/pB,KAAKJ,GACZA,EAOX,qBAAqB0oB,GACjBA,EAAOG,gBAAgBjyE,MACvB,MAAMizE,EAAUjzE,KAAKszE,kBAAkBhwE,mBAAmBwuE,EAAOL,YAAaK,EAAOl/D,SAKrF,OAJAwN,MAAMsyD,aAAa,IAAM1yE,KAAKszE,kBAAkB5vE,SAChD1D,KAAK6xE,gBAAkBC,EACvB9xE,KAAKyzE,aAAeR,EACpBjzE,KAAKuzE,SAAS/pB,KAAKypB,GACZA,EAGX,eACI,MAAMzsB,EAAgBxmD,KAAKszE,kBAAkBzpE,QAAQ28C,cAGrD,OAAQA,EAAcwS,WAAaxS,EAAcyS,aAC7CzS,EAAgBA,EAAc39B,YA0B1C,OAvBJwqD,EAAgB7wE,UAAO,SAAiCxE,GAAK,OAAO,IAAKA,GAAKq1E,GAAiB,EAAA,+BAAyB,EAAA,0BAAkC,EAAA,+BAAyB,EAAA,kBAA0B,EAAA,+BAAyB,EAAA,YACtOA,EAAgBnvE,UAAO,EAAA,+BAAyB,CAAEvC,KAAM0xE,EAAiBlvE,UAAW,CAAC,CAAC,GAAI,kBAAmB,KAAMC,OAAQ,CAAE0tE,OAAQ,CAAC,kBAAmB,WAAanoB,QAAS,CAAE4pB,SAAU,YAAc7qB,SAAU,CAAC,mBAAoBhB,SAAU,CAAC,EAAA,2CAsBxO2rB,GAvJyB,GA6JhC,GAAoC,MACpC,MAAMK,UAA4B,IAEtCA,EAAoBlxE,UAAO,SAAqCxE,GAAK,OAAO21E,EAAiC31E,GAAK01E,IAClHA,EAAoBxvE,UAAO,EAAA,+BAAyB,CAAEvC,KAAM+xE,EAAqBvvE,UAAW,CAAC,CAAC,GAAI,gBAAiB,IAAK,CAAC,GAAI,aAAc,KAAMC,OAAQ,CAAE0tE,OAAQ,CAAC,gBAAiB,WAAappB,SAAU,CAAC,iBAAkBhB,SAAU,CAAC,EAAA,gCAA0B,CAAC,CACrP5iD,QAAS,GACTonD,YAAawnB,KACZ,EAAA,2CACjB,MAAMC,EAAmC,EAAA,mCAA6BD,GAalE,OAAOA,GArB6B,GAuBpC,GAA6B,MAC7B,MAAME,GAYN,OAVJA,EAAavuE,UAAO,EAAA,8BAAwB,CAAE1D,KAAMiyE,IACpDA,EAAatuE,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA8B1B,GAAK,OAAO,IAAKA,GAAK41E,MAShGA,GAbsB,GA4BjC,MAAMC,GACF,YAAYC,EAAiBC,GACzB/zE,KAAK8zE,gBAAkBA,EACvB9zE,KAAK+zE,cAAgBA,EAEzB,IAAIrxE,EAAOknD,GACP,MAAM7rD,EAAQiC,KAAK+zE,cAAcp2E,IAAI+E,GACrC,YAAqB,IAAV3E,EACAA,EAEJiC,KAAK8zE,gBAAgBn2E,IAAI+E,EAAOknD,IC1nB/C,MAAMoqB,GACF,YAAYrhC,EAASshC,GACjBj0E,KAAK2yC,QAAUA,EACf3yC,KAAKi0E,YAAcA,EAEvB,KAAKr1C,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAA+Bf,EAAY5+B,KAAK2yC,QAAS3yC,KAAKi0E,eAGlG,MAAM,WAAuC,GACzC,YAAYrkE,EAAa+iC,EAASshC,GAC9B7zD,MAAMxQ,GACN5P,KAAKi0E,YAAcA,EACnBj0E,KAAKk0E,QAAS,EACS,mBAAZvhC,IACP3yC,KAAK2yC,QAAUA,GAGvB,QAAQnW,EAAG0mC,GACP,OAAO1mC,IAAM0mC,EAEjB,MAAMnlE,GACF,IAAIM,EACJ,IACI,MAAM,YAAE41E,GAAgBj0E,KACxB3B,EAAM41E,EAAcA,EAAYl2E,GAASA,EAE7C,MAAO8+B,GACH,OAAO78B,KAAK4P,YAAY7L,MAAM84B,GAElC,IAAI/uB,GAAS,EACb,GAAI9N,KAAKk0E,OACL,IACI,MAAM,QAAEvhC,GAAY3yC,KACpB8N,EAAS6kC,EAAQ3yC,KAAK3B,IAAKA,GAE/B,MAAOw+B,GACH,OAAO78B,KAAK4P,YAAY7L,MAAM84B,QAIlC78B,KAAKk0E,QAAS,EAEbpmE,IACD9N,KAAK3B,IAAMA,EACX2B,KAAK4P,YAAYkC,KAAK/T,KC/C3B,SAASo2E,GAAU7yE,GACtB,OAAQk+B,GAAWA,EAAOC,KAAK,IAAI,GAAkBn+B,IAEzD,MAAM,GACF,YAAYA,GACRtB,KAAKsB,SAAWA,EAEpB,KAAKs9B,EAAYY,GACb,MAAM40C,EAAsB,IAAI,GAAoBx1C,GAC9Cy1C,EAAuB1yC,GAAkByyC,EAAqBp0E,KAAKsB,UACzE,OAAI+yE,IAAyBD,EAAoBE,WAC7CF,EAAoB/9D,IAAIg+D,GACjB70C,EAAOG,UAAUy0C,IAErBA,GAGf,MAAM,WAA4B,GAC9B,YAAYxkE,GACRwQ,MAAMxQ,GACN5P,KAAKs0E,WAAY,EAErB,WAAWx0C,EAAYgC,EAAY/B,EAAYgC,EAAYC,GACvDhiC,KAAKs0E,WAAY,EACjBt0E,KAAKs+B,WAET,mBCrBJ,MAAMi2C,GACF,YAAYC,GACRx0E,KAAKw0E,iBAAmBA,EAE5B,KAAK51C,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAgBf,EAAY5+B,KAAKw0E,oBAGrE,MAAM,WAAwB,GAC1B,YAAY5kE,EAAa4kE,GACrBp0D,MAAMxQ,GACN5P,KAAKw0E,iBAAmBA,EACxBx0E,KAAKkkC,UAAW,EAEpB,MAAMnmC,GAGF,GAFAiC,KAAKjC,MAAQA,EACbiC,KAAKkkC,UAAW,GACXlkC,KAAKy0E,UAAW,CACjB,IAAIjuE,EACJ,IACI,MAAM,iBAAEguE,GAAqBx0E,KAC7BwG,EAAWguE,EAAiBz2E,GAEhC,MAAO8+B,GACH,OAAO78B,KAAK4P,YAAY7L,MAAM84B,GAElC,MAAMqG,EAAoBvB,GAAkB3hC,KAAMwG,IAC7C08B,GAAqBA,EAAkBlG,OACxCh9B,KAAK00E,gBAGL10E,KAAKqW,IAAIrW,KAAKy0E,UAAYvxC,IAItC,gBACI,MAAM,MAAEnlC,EAAK,SAAEmmC,EAAQ,UAAEuwC,GAAcz0E,KACnCy0E,IACAz0E,KAAK4xB,OAAO6iD,GACZz0E,KAAKy0E,UAAY,KACjBA,EAAUn3C,eAEV4G,IACAlkC,KAAKjC,MAAQ,KACbiC,KAAKkkC,UAAW,EAChBlkC,KAAK4P,YAAYkC,KAAK/T,IAG9B,WAAW+hC,EAAYgC,EAAY/B,EAAYgC,GAC3C/hC,KAAK00E,gBAET,iBACI10E,KAAK00E,iBC1DN,SAASC,GAAUr1D,GACtB,OAAQxO,GAAQwO,IAASA,EAAMtQ,WAAWsQ,GAAO,GAAM,ECsB3D,SAASs1D,GAAShuC,GACd,MAAM,MAAEliB,EAAK,OAAEmwD,EAAM,WAAEj2C,GAAegI,EAEtC,GADAhI,EAAW9sB,KAAK4S,IACZka,EAAW5B,OAAf,CAGK,IAAgB,IAAZ63C,EACL,OAAOj2C,EAAWN,WAEtBsI,EAAMliB,MAAQA,EAAQ,EACtB1kB,KAAKmiC,SAASyE,EAAOiuC,IC/BlB,SAASC,GAAUtuE,EAAU07B,EAAY,IAC5C,OHFkBsyC,EGEL,IDAV,SAAe7lB,EAAU,EAAGomB,EAAmB7yC,GAClD,IAAI2yC,GAAU,EAUd,OATIF,GAAUI,GACVF,EAAStyC,OAAOwyC,GAAqB,EAAK,EAAKxyC,OAAOwyC,GAEjDzvC,GAAYyvC,KACjB7yC,EAAY6yC,GAEXzvC,GAAYpD,KACbA,EAAY,IAET,IAAI,GAAWtD,IAClB,MAAMo2C,EAAML,GAAUhmB,GAChBA,GACEA,EAAUzsB,EAAUrN,MAC5B,OAAOqN,EAAUC,SAASyyC,GAAUI,EAAK,CACrCtwD,MAAO,EAAGmwD,OAAAA,EAAQj2C,WAAAA,MAhBvB,CCAsBp4B,EAAU07B,GHD5B,SAA+B1C,GAClC,OAAOA,EAAOC,KAAK,IAAI80C,GAAcC,KAFtC,IAAeA,EI0OtB,IAAI,GAAiC,MACjC,MAAMS,EACF,YAAYxiB,EAASwD,EAErBx0D,GACIzB,KAAKyyD,QAAUA,EACfzyD,KAAKi2D,UAAYA,EAEjBj2D,KAAKk1E,UAAY,IAAI,GAAA,QAErBl1E,KAAKm1E,oBAAsB,KAE3Bn1E,KAAKo1E,eAAiB,EAKtBp1E,KAAKq1E,iBAAmB,IAAI11E,IAC5BK,KAAKq3D,UAAY51D,EAOrB,SAAS6zE,GACAt1E,KAAKq1E,iBAAiB/yE,IAAIgzE,IAC3Bt1E,KAAKq1E,iBAAiBjzE,IAAIkzE,EAAYA,EAAWC,kBAC5C51C,UAAU,IAAM3/B,KAAKk1E,UAAUpjE,KAAKwjE,KAOjD,WAAWA,GACP,MAAME,EAAsBx1E,KAAKq1E,iBAAiB13E,IAAI23E,GAClDE,IACAA,EAAoBl4C,cACpBt9B,KAAKq1E,iBAAiBv7D,OAAOw7D,IAarC,SAASG,EAzDW,IA0DhB,OAAKz1E,KAAKi2D,UAAU/F,UAGb,IAAI,GAAA,WAAY7uB,IACdrhC,KAAKm1E,qBACNn1E,KAAK01E,qBAIT,MAAM73C,EAAe43C,EAAgB,EACjCz1E,KAAKk1E,UAAUzyC,KAAKqyC,GAAUW,IAAgB91C,UAAU0B,GACxDrhC,KAAKk1E,UAAUv1C,UAAU0B,GAE7B,OADArhC,KAAKo1E,iBACE,KACHv3C,EAAaP,cACbt9B,KAAKo1E,iBACAp1E,KAAKo1E,gBACNp1E,KAAK21E,2BAhBN,OAAA,GAAA,GAAA,GAqBf,cACI31E,KAAK21E,wBACL31E,KAAKq1E,iBAAiBl1E,QAAQ,CAACqR,EAAGg5B,IAAcxqC,KAAK41E,WAAWprC,IAChExqC,KAAKk1E,UAAU52C,WAQnB,iBAAiBmvC,EAAYgI,GACzB,MAAMI,EAAY71E,KAAK81E,4BAA4BrI,GACnD,OAAOztE,KAAK+1E,SAASN,GAAehzC,KAAKvhC,GAAO6c,IACpCA,GAAU83D,EAAU3pE,QAAQ6R,IAAW,IAIvD,4BAA4B0vD,GACxB,MAAMuI,EAAsB,GAM5B,OALAh2E,KAAKq1E,iBAAiBl1E,QAAQ,CAAC81E,EAAeX,KACtCt1E,KAAKk2E,2BAA2BZ,EAAY7H,IAC5CuI,EAAoBv1E,KAAK60E,KAG1BU,EAGX,eACI,OAAOh2E,KAAKq3D,WAAa51D,SAG7B,aAEI,OADYzB,KAAKk8D,eACNzF,aAAe/iD,OAG9B,2BAA2B4hE,EAAY7H,GACnC,IAAI5jE,EAAU4jE,EAAWjnB,cACrB2vB,EAAoBb,EAAWc,gBAAgB5vB,cAGnD,EAAA,CACI,GAAI38C,GAAWssE,EACX,OAAO,QAENtsE,EAAUA,EAAQiyD,eAC3B,OAAO,EAGX,qBACI97D,KAAKm1E,oBAAsBn1E,KAAKyyD,QAAQt4B,kBAAkB,KACtD,MAAMzmB,EAAS1T,KAAKu9D,aACpB,OAAO,OAAA,GAAA,UAAA,CAAU7pD,EAAOjS,SAAU,UAAUk+B,UAAU,IAAM3/B,KAAKk1E,UAAUpjE,UAInF,wBACQ9R,KAAKm1E,sBACLn1E,KAAKm1E,oBAAoB73C,cACzBt9B,KAAKm1E,oBAAsB,OAoBvC,OAhBJF,EAAiBzyE,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAKi3E,GAAkB,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,IAAkB,EAAA,sBAAgB,EAAA,SAAU,KAC1LA,EAAiBxyE,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAsC,OAAO,IAAIu1E,EAAiB,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,IAAW,OAAA,EAAA,sBAAA,CAAS,EAAA,SAAU,KAAQvyE,MAAOuyE,EAAkBx1E,WAAY,SAexNw1E,GA3J0B,GA0VjC,GAA8B,MAC9B,MAAMoB,EACF,YAAYpgB,EAAW/V,EAEvBz+C,GACIzB,KAAKi2D,UAAYA,EACjBj2D,KAAKq3D,UAAY51D,EACjBy+C,EAAO/lB,kBAAkB,KACrB,MAAMzmB,EAAS1T,KAAKu9D,aACpBv9D,KAAKs2E,QAAUrgB,EAAU/F,UACrB,OAAA,GAAA,MAAA,CAAM,OAAA,GAAA,UAAA,CAAUx8C,EAAQ,UAAW,OAAA,GAAA,UAAA,CAAUA,EAAQ,sBACrD,OAAA,GAAA,GAAA,GAGJ1T,KAAKu2E,iBAAmBv2E,KAAKukD,SAAS5kB,UAAU,IAAM3/B,KAAKw2E,yBAGnE,cACIx2E,KAAKu2E,iBAAiBj5C,cAG1B,kBACSt9B,KAAKy2E,eACNz2E,KAAKw2E,sBAET,MAAME,EAAS,CAAEjT,MAAOzjE,KAAKy2E,cAAchT,MAAOE,OAAQ3jE,KAAKy2E,cAAc9S,QAK7E,OAHK3jE,KAAKi2D,UAAU/F,YAChBlwD,KAAKy2E,cAAgB,MAElBC,EAGX,kBAUI,MAAMC,EAAiB32E,KAAK42E,6BACtB,MAAEnT,EAAK,OAAEE,GAAW3jE,KAAK62E,kBAC/B,MAAO,CACHnT,IAAKiT,EAAejT,IACpBF,KAAMmT,EAAenT,KACrBS,OAAQ0S,EAAejT,IAAMC,EAC7BI,MAAO4S,EAAenT,KAAOC,EAC7BE,OAAAA,EACAF,MAAAA,GAIR,4BAGI,IAAKzjE,KAAKi2D,UAAU/F,UAChB,MAAO,CAAEwT,IAAK,EAAGF,KAAM,GAQ3B,MAAM/hE,EAAWzB,KAAKk8D,eAChBxoD,EAAS1T,KAAKu9D,aACdqB,EAAkBn9D,EAASm9D,gBAC3BkY,EAAelY,EAAgByE,wBAKrC,MAAO,CAAEK,KAJIoT,EAAapT,KAAOjiE,EAASQ,KAAK80E,WAAarjE,EAAOsjE,SAC/DpY,EAAgBmY,WAAa,EAGnBvT,MAFAsT,EAAatT,MAAQ/hE,EAASQ,KAAKg1E,YAAcvjE,EAAOwjE,SAClEtY,EAAgBqY,YAAc,GAOtC,OAAOE,EAtFa,IAuFhB,OAAOA,EAAe,EAAIn3E,KAAKs2E,QAAQ7zC,KAAKqyC,GAAUqC,IAAiBn3E,KAAKs2E,QAGhF,eACI,OAAOt2E,KAAKq3D,WAAa51D,SAG7B,aAEI,OADYzB,KAAKk8D,eACNzF,aAAe/iD,OAG9B,sBACI,MAAMA,EAAS1T,KAAKu9D,aACpBv9D,KAAKy2E,cAAgBz2E,KAAKi2D,UAAU/F,UAChC,CAAEuT,MAAO/vD,EAAO0jE,WAAYzT,OAAQjwD,EAAO2jE,aAC3C,CAAE5T,MAAO,EAAGE,OAAQ,IAmBhC,OAhBJ0S,EAAc7zE,UAAO,SAA+BxE,GAAK,OAAO,IAAKA,GAAKq4E,GAAe,EAAA,sBAAgB,IAAkB,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,EAAA,SAAU,KACjLA,EAAc5zE,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAmC,OAAO,IAAI22E,EAAc,OAAA,EAAA,sBAAA,CAAS,IAAW,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,EAAA,SAAU,KAAQ3zE,MAAO2zE,EAAe52E,WAAY,SAe5M42E,GArHuB,GAg1B9B,GAAoC,MACpC,MAAMiB,GAYN,OAVJA,EAAoBjyE,UAAO,EAAA,8BAAwB,CAAE1D,KAAM21E,IAC3DA,EAAoBhyE,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAqC1B,GAAK,OAAO,IAAKA,GAAKs5E,MAS9GA,GAb6B,GAepC,GAAgC,MAChC,MAAMC,GAgCN,OA9BJA,EAAgBlyE,UAAO,EAAA,8BAAwB,CAAE1D,KAAM41E,IACvDA,EAAgBjyE,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAKu5E,IAAuBhyE,QAAS,CAAC,CACtI,GACA,GACA,IACD,GAAY,MAyBZgyE,GAjCyB,GCn4CpC,SAASC,GAA8BrvC,EAAIrsB,GAAgB,EAALqsB,GAClD,EAAA,0BAAoB,GAExB,MAAM,GAAM,CAAC,KACb,SAASsvC,GAAkCtvC,EAAIrsB,IAC/C,MAAM,GAAM,SAAU47D,GAAM,MAAO,CAAEC,kBAAmBD,IAClD,GAAM,SAAUA,EAAIE,GAAM,MAAO,CAAE75E,MAAO25E,EAAIxmE,OAAQ0mE,IACtDC,GAAM,CAAC,kBACPC,GAAM,CAAC,aACb,SAASC,GAAuD5vC,EAAIrsB,IACpE,SAASk8D,GAAyC7vC,EAAIrsB,GAEpD,GAFoE,EAALqsB,GAC7D,EAAA,wBAAkB,EAAG4vC,GAAwD,EAAG,EAAG,cAAe,GAC3F,EAAL5vC,EAAQ,CACV,MAAM8vC,EAAS,EAAA,6BAAuBC,UACtC,EAAA,wBAAkB,kBAAmBD,EAAOE,gBAEhD,SAASC,GAAyCjwC,EAAIrsB,GAEpD,GAFoE,EAALqsB,GAC7D,EAAA,oBAAc,GACP,EAALA,EAAQ,CACV,MAAM8vC,EAAS,EAAA,6BAAuBC,UACtC,EAAA,+BAAyBD,EAAOI,YAEpC,SAASC,GAA2BnwC,EAAIrsB,GAAO,GAAS,EAALqsB,EAAQ,CACvD,MAAMowC,EAAO,EAAA,gCACb,EAAA,4BAAsB,EAAG,MAAO,GAChC,EAAA,wBAAkB,SAAA,WAAsE,EAAA,2BAAqBA,GAAO,MAAMN,EAASn8D,EAAIo8D,UAAiBM,EAAO18D,EAAI4I,MAAa+zD,EAAU,EAAA,6BAA8BC,EAAM,EAAA,yBAAmB,GAAI,OAAOD,EAAQE,aAAaV,EAAQS,EAAKF,MAC9R,EAAA,4BAAsB,EAAG,MAAO,GAChC,EAAA,wBAAkB,EAAGR,GAA0C,EAAG,EAAG,cAAe,GACpF,EAAA,wBAAkB,EAAGI,GAA0C,EAAG,EAAG,cAAe,GACpF,EAAA,4BACA,EAAA,4BACF,GAAS,EAALjwC,EAAQ,CACV,MAAM8vC,EAASn8D,EAAIo8D,UACbM,EAAO18D,EAAI4I,MACXk0D,EAAS,EAAA,6BACf,EAAA,yBAAmB,uBAAwBA,EAAOC,eAAiBL,GACnE,EAAA,wBAAkB,KAAMI,EAAOE,eAAeN,GAA9C,CAAqD,WAAYP,EAAOvsE,SAAxE,CAAkF,oBAAqBusE,EAAOvsE,UAAYktE,EAAOG,eACjI,EAAA,yBAAmB,WAAYH,EAAOI,aAAaf,EAAQO,GAA3D,CAAkE,gBAAiBA,EAAO,EAA1F,CAA6F,eAAgBI,EAAOK,MAAM/1E,OAA1H,CAAkI,gBAAiB01E,EAAOM,iBAAiBV,GAA3K,CAAkL,gBAAiBI,EAAOC,eAAiBL,EAA3N,CAAiO,aAAcP,EAAOkB,WAAa,KAAnQ,CAAyQ,mBAAoBlB,EAAOkB,WAAalB,EAAOmB,eAAiBnB,EAAOmB,eAAiB,MACjW,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,OAAQnB,EAAOE,eACjC,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,QAASF,EAAOE,gBAEtC,SAASkB,GAAoClxC,EAAIrsB,GAAO,GAAS,EAALqsB,EAAQ,CAChE,MAAMmxC,EAAO,EAAA,gCACb,EAAA,4BAAsB,EAAG,eAAgB,IACzC,EAAA,wBAAkB,eAAA,WAAwK,OAApE,EAAA,2BAAqBA,GAAuB,EAAA,6BAAuCC,gCAAzM,CAA2O,gBAAA,SAAkG9xB,GAA8E,OAApE,EAAA,2BAAqB6xB,GAAuB,EAAA,6BAAuCE,yBAAyB/xB,MACnc,EAAA,4BACF,GAAS,EAALtf,EAAQ,CACV,MAAMsxC,EAAU39D,EAAIo8D,UACdwB,EAAQ59D,EAAI4I,MACZi1D,EAAS,EAAA,6BACf,EAAA,yBAAmB,sBAAuBA,EAAOd,eAAiBa,GAClE,EAAA,wBAAkB,KAAMC,EAAOT,iBAAiBQ,GAAhD,CAAwD,UAAWD,EAAQG,QAA3E,CAAoF,WAAYH,EAAQjyE,SAAxG,CAAkH,SAAUiyE,EAAQ3jB,OAApI,CAA4I,oBAAqB6jB,EAAOhC,mBACxK,EAAA,yBAAmB,kBAAmBgC,EAAOb,eAAeY,KAEhE,MAAMG,GAAM,CAAC,oBACPC,GAAM,CAAC,WACPC,GAAM,CAAC,iBACPC,GAAM,CAAC,qBAEPC,GAA0B,IAAI,EAAA,eAAe,sBAAuB,CACtEx6E,WAAY,OACZC,QAMJ,WAKI,OAJgBmK,IAAAA,CACZ25D,KAAM35D,GAAWA,EAAQqwE,YAAc,GAAK,KAAO,IACnDzW,MAAO55D,GAAWA,EAAQssD,aAAe,GAAK,KAAO,SAQ7D,IAAI,GAA0B,MAC1B,MAAMgkB,EACF,YAAY3nB,EAAaC,EAAS2nB,EAAmB9T,GACjDtmE,KAAKwyD,YAAcA,EACnBxyD,KAAKyyD,QAAUA,EACfzyD,KAAKo6E,kBAAoBA,EACzBp6E,KAAKsmE,eAAiBA,EAO1B,eAAez8D,GACX7J,KAAKq6E,OACgC,oBAA1BC,sBACPt6E,KAAKyyD,QAAQt4B,kBAAkB,KAC3BmgD,sBAAsB,IAAMt6E,KAAKu6E,WAAW1wE,MAIhD7J,KAAKu6E,WAAW1wE,GAIxB,OACI7J,KAAKwyD,YAAYhM,cAAc34C,MAAMyoD,WAAa,UAGtD,OACIt2D,KAAKwyD,YAAYhM,cAAc34C,MAAMyoD,WAAa,SAMtD,WAAWzsD,GACP,MAAM2wE,EAAYx6E,KAAKo6E,kBAAkBvwE,GACnC4wE,EAASz6E,KAAKwyD,YAAYhM,cAChCi0B,EAAO5sE,MAAM21D,KAAOgX,EAAUhX,KAC9BiX,EAAO5sE,MAAM41D,MAAQ+W,EAAU/W,OA+BvC,OA5BJ0W,EAAU33E,UAAO,SAA2BxE,GAAK,OAAO,IAAKA,GAAKm8E,GAAW,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,QAAgB,EAAA,+BAAyBF,IAA0B,EAAA,+BAAyBr+C,GAAuB,KACtQu+C,EAAUj2E,UAAO,EAAA,+BAAyB,CAAEvC,KAAMw4E,EAAWh2E,UAAW,CAAC,CAAC,gBAAiB2iE,UAAW,CAAC,EAAG,eAAgBtf,SAAU,EAAGb,aAAc,SAAgCxe,EAAIrsB,GAAgB,EAALqsB,GAC5L,EAAA,yBAAmB,0BAAkD,mBAAvBrsB,EAAIwqD,mBA0B/C6T,GAvEmB,GAkF1B,GAA8B,MAC9B,MAAMO,EACF,YAAY13E,GACRhD,KAAKgD,SAAWA,GAYxB,OATJ03E,EAAcl4E,UAAO,SAA+BxE,GAAK,OAAO,IAAKA,GAAK08E,GAAe,EAAA,+BAAyB,EAAA,eAClHA,EAAcx2E,UAAO,EAAA,+BAAyB,CAAEvC,KAAM+4E,EAAev2E,UAAW,CAAC,CAAC,GAAI,gBAAiB,OAQ5Fu2E,GAfuB,GA0B9B,GAA4B,MAC5B,MAAMC,UAAoB,IAE9BA,EAAYn4E,UAAO,SAA6BxE,GAAK,OAAO48E,EAAyB58E,GAAK28E,IAC1FA,EAAYz2E,UAAO,EAAA,+BAAyB,CAAEvC,KAAMg5E,EAAax2E,UAAW,CAAC,CAAC,GAAI,gBAAiB,IAAK,CAAC,GAAI,cAAe,KAAMujD,SAAU,CAAC,EAAA,2CAC7I,MAAMkzB,EAA2B,EAAA,mCAA6BD,GAO1D,OAAOA,GAZqB,GAwBhC,MAAME,IAEN,MAAMC,GAAmBva,GAAcsa,IAKjCE,GAAgB,IAAI,EAAA,eAAe,iBACzC,IAAI,GAAuB,MACvB,MAAMC,UAAeF,GACjB,YAAYxH,EAKZ2H,GACI76D,QACApgB,KAAKszE,kBAAoBA,EACzBtzE,KAAKi7E,iBAAmBA,EAExBj7E,KAAKq4E,UAAY,GAEjBr4E,KAAKk7E,eAAiB,KAEtBl7E,KAAKm7E,cAAgB,IAAI,GAAA,QAKzBn7E,KAAKwH,SAAW,KAKhBxH,KAAK81D,OAAS,KAId91D,KAAK8nD,UAAW,EAGpB,oBAAsB,OAAO9nD,KAAKo7E,eAClC,kBAAkBr9E,GAKVA,IACAiC,KAAKo7E,eAAiBr9E,GAI9B,cACI,OAAOiC,KAAKk7E,eAEhB,YAAYj0B,IACJA,EAAQtoD,eAAe,cAAgBsoD,EAAQtoD,eAAe,cAC9DqB,KAAKm7E,cAAcrpE,OAG3B,cACI9R,KAAKm7E,cAAc78C,WAEvB,WACIt+B,KAAKk7E,eAAiB,IAAI1J,GAAexxE,KAAKq7E,kBAAoBr7E,KAAKs7E,iBAAkBt7E,KAAKszE,oBAmEtG,OAhEJ0H,EAAOx4E,UAAO,SAAwBxE,GAAK,OAAO,IAAKA,GAAKg9E,GAAQ,EAAA,+BAAyB,EAAA,kBAA0B,EAAA,+BAAyBD,GAAe,KAC/JC,EAAOhzC,UAAO,EAAA,+BAAyB,CAAErmC,KAAMq5E,EAAQ72E,UAAW,CAAC,CAAC,YAAamkD,eAAgB,SAA+BngB,EAAIrsB,EAAKysC,GAIjI,IAAIC,EAJkJ,EAALrgB,IACjJ,EAAA,4BAAsBogB,EAAU,IAAa,GAC7C,EAAA,kCAA4BA,EAAU,IAAe,EAAM,EAAA,cACpD,EAALpgB,IAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIq8D,cAAgB3vB,EAAG7jB,OAC5E,EAAA,4BAAsB6jB,EAAK,EAAA,8BAA0B1sC,EAAIu/D,iBAAmB7yB,EAAG7jB,SAC9E42C,UAAW,SAAsBpzC,EAAIrsB,GAGtC,IAAI0sC,EAHkD,EAALrgB,GACjD,EAAA,+BAAyB,EAAA,aAAa,GAC/B,EAALA,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIw/D,iBAAmB9yB,EAAG7jB,QAC9EvgC,OAAQ,CAAEsH,SAAU,WAAY2sE,UAAW,CAAC,QAAS,aAAcc,UAAW,CAAC,aAAc,aAAcC,eAAgB,CAAC,kBAAmB,mBAAqB1wB,SAAU,CAAC,UAAWhB,SAAU,CAAC,EAAA,wCAAmC,EAAA,mCAA8BqoB,mBAAoB,GAAK9nC,MAAO,EAAGC,KAAM,EAAGllC,SAAU,SAAyBmlC,EAAIrsB,GAAgB,EAALqsB,IACrW,EAAA,+BACA,EAAA,wBAAkB,EAAGqvC,GAA+B,EAAG,EAAG,iBACzDz+C,cAAe,IAgDbiiD,GA3HgB,GAyI3B,MAAMQ,GAAoB,CAEtBC,aAAch2E,EAAQ,eAAgB,CAElC,EAAM,wDAAyD,EAAM,CAAE8+D,UAAW,UAKlF,EAAM,OAAQ,EAAM,CAAEA,UAAW,2BAA4BmX,UAAW,SACxE,EAAM,QAAS,EAAM,CAAEnX,UAAW,0BAA2BmX,UAAW,SACxE,EAAW,yDAA0D/1E,EAAQ,yDAC7E,EAAW,6BAA8B,CACrC,EAAM,CAAE4+D,UAAW,6BACnB5+D,EAAQ,0DAEZ,EAAW,8BAA+B,CACtC,EAAM,CAAE4+D,UAAW,4BACnB5+D,EAAQ,6DAgBpB,IAAI,GAAiC,MACjC,MAAMg2E,UAAyB,GAC3B,YAAYlmC,EAA0B87B,EAAkBqK,EAKxDvkB,GACIj3C,MAAMq1B,EAA0B87B,EAAkBla,GAClDr3D,KAAK47E,MAAQA,EAEb57E,KAAK67E,cAAgB,GAAA,aAAa/9C,MAElC99B,KAAK87E,YAAc,GAAA,aAAah+C,MAGpC,WACI1d,MAAM27D,WACN/7E,KAAK67E,cAAgB77E,KAAK47E,MAAMI,iBAC3Bv5C,KAAKgD,GAAUzlC,KAAK47E,MAAMK,kBAAkBj8E,KAAK47E,MAAMznD,aACvDwL,UAAWu8C,IACRA,IAAgBl8E,KAAKoxE,eACrBpxE,KAAKq1C,OAAOr1C,KAAK47E,MAAMO,YAG/Bn8E,KAAK87E,YAAc97E,KAAK47E,MAAMQ,oBAAoBz8C,UAAU,KACxD3/B,KAAK00C,WAIb,cACIt0B,MAAMi8D,cACNr8E,KAAK67E,cAAcv+C,cACnBt9B,KAAK87E,YAAYx+C,eAuBzB,OApBJq+C,EAAiBn5E,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAK29E,GAAkB,EAAA,+BAAyB,EAAA,0BAAkC,EAAA,+BAAyB,EAAA,kBAA0B,EAAA,+BAAyB,OAAA,EAAA,WAAA,CAAW,IAAM,KAAc,EAAA,+BAAyB,EAAA,YACjSA,EAAiBz3E,UAAO,EAAA,+BAAyB,CAAEvC,KAAMg6E,EAAkBx3E,UAAW,CAAC,CAAC,GAAI,iBAAkB,KAAMujD,SAAU,CAAC,EAAA,2CAmBpHi0B,GAxD0B,GA8DjC,GAAgC,MAChC,MAAMW,EACF,YAAY9pB,EAAauM,EAAMwd,GAC3Bv8E,KAAKwyD,YAAcA,EACnBxyD,KAAK++D,KAAOA,EAEZ/+D,KAAKw8E,uBAAyB,GAAA,aAAa1+C,MAE3C99B,KAAKy8E,sBAAwB,IAAI,GAAA,QAEjCz8E,KAAK08E,aAAe,IAAI,EAAA,aAExB18E,KAAKg8E,iBAAmB,IAAI,EAAA,aAE5Bh8E,KAAKo8E,oBAAsB,IAAI,EAAA,aAE/Bp8E,KAAK28E,YAAc,IAAI,EAAA,cAAa,GAIpC38E,KAAK23E,kBAAoB,QACrB5Y,IACA/+D,KAAKw8E,uBAAyBzd,EAAKxa,OAAO5kB,UAAWk/B,IACjD7+D,KAAK48E,+BAA+B/d,GACpC0d,EAAkB14E,kBAK1B7D,KAAKy8E,sBAAsBh6C,KPngBhC,SAA8BkQ,EAASshC,GAC1C,OAAQz0C,GAAWA,EAAOC,KAAK,IAAIu0C,GAA6BrhC,OOkgBxBkqC,IPngBrC,COmgB0D,CAACrgD,EAAG0mC,IAC9C1mC,EAAEhxB,YAAc03D,EAAE13D,WAAagxB,EAAE/wB,UAAYy3D,EAAEz3D,UACtDk0B,UAAUz0B,IAENlL,KAAKi8E,kBAAkB/wE,EAAMO,UAAYzL,KAAKi8E,kBAAkBj8E,KAAKm0B,YACrEn0B,KAAK28E,YAAYnzB,OAEjBxpD,KAAKi8E,kBAAkB/wE,EAAMM,aAAexL,KAAKi8E,kBAAkBj8E,KAAKm0B,YACxEn0B,KAAKo8E,oBAAoB5yB,SAKrC,aAAahiD,GACTxH,KAAK88E,eAAiBt1E,EACtBxH,KAAK48E,iCAMT,WAC0B,UAAlB58E,KAAKm0B,WAAwC,MAAfn0B,KAAK81D,SACnC91D,KAAKm0B,UAAYn0B,KAAK+8E,2BAA2B/8E,KAAK81D,SAG9D,cACI91D,KAAKw8E,uBAAuBl/C,cAC5Bt9B,KAAKy8E,sBAAsBn+C,WAE/B,uBAAuBpzB,GACnB,MAAMgxE,EAAcl8E,KAAKi8E,kBAAkB/wE,EAAMO,SACjDzL,KAAKg8E,iBAAiBxyB,KAAK0yB,GACvBA,GACAl8E,KAAK08E,aAAalzB,KAAKxpD,KAAKwyD,YAAYhM,cAAcw2B,cAI9D,sBACI,OAAOh9E,KAAK++D,MAA4B,QAApB/+D,KAAK++D,KAAKhhE,MAAkB,MAAQ,MAG5D,kBAAkByJ,GACd,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,EAGR,+BAA+Bq3D,EAAM7+D,KAAKi9E,uBAElCj9E,KAAKm0B,UADLn0B,KAAK88E,eAAiB,EACE,OAAPje,EAAe,OAAS,QAEpC7+D,KAAK88E,eAAiB,EACH,OAAPje,EAAe,QAAU,OAGzB,SAOzB,2BAA2B/I,GACvB,MAAM+I,EAAM7+D,KAAKi9E,sBACjB,MAAY,OAAPpe,GAAgB/I,GAAU,GAAc,OAAP+I,GAAgB/I,EAAS,EACpD,qBAEJ,uBA0Cf,OAvCJwmB,EAAgB95E,UAAO,SAAiCxE,GAAK,OAAO,IAAKA,GAAKs+E,GAAiB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,GAAuB,GAAI,EAAA,+BAAyB,EAAA,qBACzNA,EAAgBp4E,UAAO,EAAA,+BAAyB,CAAEvC,KAAM26E,EAAiBl4E,OAAQ,CAAEuzE,kBAAmB,oBAAqBnwE,SAAU,WAAY20E,SAAU,CAAC,UAAW,YAAarmB,OAAQ,UAAYnM,QAAS,CAAE+yB,aAAc,eAAgBV,iBAAkB,mBAAoBI,oBAAqB,sBAAuBO,YAAa,iBAsCrUL,GA3IyB,GAiJhC,GAA2B,MAC3B,MAAMY,UAAmB,GACrB,YAAYzP,EAAY5O,EAAK0d,GACzBn8D,MAAMqtD,EAAY5O,EAAK0d,IA6C/B,OA1CJW,EAAW16E,UAAO,SAA4BxE,GAAK,OAAO,IAAKA,GAAKk/E,GAAY,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,GAAuB,GAAI,EAAA,+BAAyB,EAAA,qBAC1MA,EAAWl1C,UAAO,EAAA,+BAAyB,CAAErmC,KAAMu7E,EAAY/4E,UAAW,CAAC,CAAC,iBAAkBo3E,UAAW,SAA0BpzC,EAAIrsB,GAG/H,IAAI0sC,EAH2I,EAALrgB,GAC1I,EAAA,yBAAmB,IAAqB,GACjC,EAALA,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIqhE,YAAc30B,EAAG7jB,QACzEmiC,UAAW,CAAC,EAAG,gBAAiBpf,SAAU,CAAC,EAAA,yCAAoCzf,MAAO,EAAGC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,EAAG,wBAAyB,CAAC,UAAW,IAAK,CAAC,iBAAkB,KAAMp6E,SAAU,SAA6BmlC,EAAIrsB,GAAgB,EAALqsB,IACzO,EAAA,4BAAsB,EAAG,MAAO,EAAG,GACnC,EAAA,wBAAkB,uBAAA,SAAgGsf,GAAU,OAAO3rC,EAAIuhE,uBAAuB51B,KAA9J,CAA0K,sBAAA,SAA8FA,GAAU,OAAO3rC,EAAI2gE,sBAAsB3qE,KAAK21C,MACxT,EAAA,wBAAkB,EAAGgwB,GAAmC,EAAG,EAAG,cAAe,GAC7E,EAAA,6BACO,EAALtvC,GACF,EAAA,wBAAkB,gBAAiB,EAAA,6BAAuB,EAAG,GAAKrsB,EAAIqY,UAAW,EAAA,6BAAuB,EAAG,GAAKrY,EAAI67D,sBACnHvvC,WAAY,CAAC,IAAmBviC,OAAQ,CAAC,0HAA2HkzB,cAAe,EAAGptB,KAAM,CAAEvF,UAAW,CAACo1E,GAAkBC,iBA6B1NyB,GAhDoB,GA2D/B,MAAMI,GAAkB,IAAI,EAAA,eAAe,mBAU3C,IAAI,GAAS,EAEb,MAAMC,IAIN,MAAMC,GACF,YAAYhrB,GACRxyD,KAAKwyD,YAAcA,GAG3B,MAAMirB,GAAwBhd,GAAWK,GAAmB0c,IAAuB,WAKnF,IAAI,GAAiC,MACjC,MAAME,UAAyBD,GAC3B,YAAYhQ,EAAYkQ,EAAoBC,EAAetX,GACvDlmD,MAAMqtD,GACNztE,KAAK29E,mBAAqBA,EAC1B39E,KAAKsmE,eAAiBA,EAEtBtmE,KAAKi5E,MAAQ,IAAI,EAAA,UAEjBj5E,KAAK69E,eAAiB,EAEtB79E,KAAK89E,sBAAwB,EAE7B99E,KAAK+9E,kBAAoB,GAAA,aAAajgD,MAEtC99B,KAAKg+E,sBAAwB,GAAA,aAAalgD,MAC1C99B,KAAKi+E,gBAAiB,EACtBj+E,KAAKk+E,eAAiB,KAEtBl+E,KAAKm+E,eAAiB,QAEtBn+E,KAAKo+E,oBAAsB,IAAI,EAAA,aAE/Bp+E,KAAKq+E,YAAc,IAAI,EAAA,aAEvBr+E,KAAKs+E,cAAgB,IAAI,EAAA,aAEzBt+E,KAAKu+E,kBAAoB,IAAI,EAAA,cAAa,GAC1Cv+E,KAAKw+E,SAAW,KAChBx+E,KAAK23E,kBAAoBiG,GAAiBA,EAAcjG,kBACpDiG,EAAcjG,kBAAoB,QACtC33E,KAAKy+E,qBAAoBb,GAAoD,MAAnCA,EAAca,oBACpDb,EAAca,kBAGtB,oBAAsB,OAAOz+E,KAAKi+E,eAClC,kBAAkBlgF,GAASiC,KAAKi+E,eAAiB/uB,GAAsBnxD,GAEvE,oBAAsB,OAAOiC,KAAKk+E,eAClC,kBAAkBngF,GACdiC,KAAK69E,eAAiB1uB,GAAqBpxD,EAAO,MAGtD,wBAA0B,OAAOiC,KAAK0+E,mBACtC,sBAAsB3gF,GAClBiC,KAAK0+E,mBAAqB,QAAQxmD,KAAKn6B,GAASA,EAAQ,KAAOA,EAGnE,sBAAwB,OAAOiC,KAAK2+E,iBACpC,oBAAoB5gF,GAChB,MAAMyoD,EAAgBxmD,KAAKwyD,YAAYhM,cACvCA,EAAc90B,UAAUE,OAAO,kBAAkB5xB,KAAKg+D,iBAClDjgE,GACAyoD,EAAc90B,UAAUrb,IAAI,kBAAkBtY,GAElDiC,KAAK2+E,iBAAmB5gF,EAQ5B,wBAGI,MAAM6gF,EAAgB5+E,KAAK69E,eAAiB79E,KAAK6+E,eAAe7+E,KAAK69E,gBAGrE,GAAI79E,KAAKk+E,gBAAkBU,EAAe,CACtC,MAAME,EAAoC,MAAvB9+E,KAAKk+E,eACnBY,GACD9+E,KAAKu+E,kBAAkB/0B,KAAKxpD,KAAK++E,mBAAmBH,IAIxDv8E,QAAQP,UAAU2B,KAAK,KACnBzD,KAAKi5E,MAAM94E,QAAQ,CAAC42B,EAAKrS,IAAUqS,EAAI+wB,SAAWpjC,IAAUk6D,GACvDE,GACD9+E,KAAKo+E,oBAAoB50B,KAAKo1B,KAK1C5+E,KAAKi5E,MAAM94E,QAAQ,CAAC42B,EAAKrS,KACrBqS,EAAIvvB,SAAWkd,EAAQk6D,EAGI,MAAvB5+E,KAAKk+E,gBAA0C,GAAhBnnD,EAAIvvB,UAAkBuvB,EAAI++B,SACzD/+B,EAAI++B,OAAS8oB,EAAgB5+E,KAAKk+E,kBAGtCl+E,KAAKk+E,iBAAmBU,IACxB5+E,KAAKk+E,eAAiBU,EACtB5+E,KAAK29E,mBAAmB95E,gBAGhC,qBACI7D,KAAKg/E,4BACLh/E,KAAKi/E,wBAGLj/E,KAAK+9E,kBAAoB/9E,KAAKi5E,MAAMhyB,QAAQtnB,UAAU,KAIlD,GAHsB3/B,KAAK6+E,eAAe7+E,KAAK69E,kBAGzB79E,KAAKk+E,eAAgB,CACvC,MAAMxN,EAAO1wE,KAAKi5E,MAAMplB,UACxB,IAAK,IAAI/2D,EAAI,EAAGA,EAAI4zE,EAAKxtE,OAAQpG,IAC7B,GAAI4zE,EAAK5zE,GAAGgrD,SAAU,CAIlB9nD,KAAK69E,eAAiB79E,KAAKk+E,eAAiBphF,EAC5C,OAIZkD,KAAK29E,mBAAmB95E,iBAIhC,4BAII7D,KAAKk/E,SAASj4B,QACTxkB,KAAKgD,GAAUzlC,KAAKk/E,WACpBv/C,UAAW+wC,IACZ1wE,KAAKi5E,MAAMjwE,MAAM0nE,EAAKxvE,OAAO61B,IAGjBA,EAAIkkD,kBAAoBlkD,EAAIkkD,mBAAqBj7E,OAE7DA,KAAKi5E,MAAMkG,oBAGnB,cACIn/E,KAAKi5E,MAAMlwE,UACX/I,KAAK+9E,kBAAkBzgD,cACvBt9B,KAAKg+E,sBAAsB1gD,cAG/B,gBACQt9B,KAAKo/E,YACLp/E,KAAKo/E,WAAWC,4BAGxB,cAAc36D,GACV1kB,KAAKq+E,YAAY70B,KAAKxpD,KAAK++E,mBAAmBr6D,IAElD,mBAAmBA,GACf,MAAMxZ,EAAQ,IAAIqyE,GAKlB,OAJAryE,EAAMwZ,MAAQA,EACV1kB,KAAKi5E,OAASj5E,KAAKi5E,MAAM/1E,SACzBgI,EAAM6rB,IAAM/2B,KAAKi5E,MAAMplB,UAAUnvC,IAE9BxZ,EAQX,wBACQlL,KAAKg+E,uBACLh+E,KAAKg+E,sBAAsB1gD,cAE/Bt9B,KAAKg+E,sBAAwB,OAAA,GAAA,MAAA,IAASh+E,KAAKi5E,MAAMptE,IAAIkrB,GAAOA,EAAIokD,gBAC3Dx7C,UAAU,IAAM3/B,KAAK29E,mBAAmB95E,gBAGjD,eAAe6gB,GAIX,OAAOjc,KAAKS,IAAIlJ,KAAKi5E,MAAM/1E,OAAS,EAAGuF,KAAKC,IAAIgc,GAAS,EAAG,IAGhE,eAAe5nB,GACX,MAAO,iBAAiBkD,KAAKw+E,YAAY1hF,IAG7C,iBAAiBA,GACb,MAAO,mBAAmBkD,KAAKw+E,YAAY1hF,IAM/C,yBAAyBwiF,GACrB,IAAKt/E,KAAKi+E,iBAAmBj+E,KAAK89E,sBAC9B,OAEJ,MAAMyB,EAAUv/E,KAAKw/E,gBAAgBh5B,cACrC+4B,EAAQ1xE,MAAM81D,OAAS3jE,KAAK89E,sBAAwB,KAGhD99E,KAAKw/E,gBAAgBh5B,cAAc4P,eACnCmpB,EAAQ1xE,MAAM81D,OAAS2b,EAAY,MAI3C,8BACI,MAAMC,EAAUv/E,KAAKw/E,gBAAgBh5B,cACrCxmD,KAAK89E,sBAAwByB,EAAQvC,aACrCuC,EAAQ1xE,MAAM81D,OAAS,GACvB3jE,KAAKs+E,cAAc90B,OAGvB,aAAazyB,EAAK0oD,EAAW/6D,GACpBqS,EAAIrrB,WACL1L,KAAK64E,cAAgB4G,EAAUC,WAAah7D,GAIpD,aAAaqS,EAAK8M,GACd,OAAI9M,EAAIrrB,SACG,KAEJ1L,KAAK64E,gBAAkBh1C,EAAM,GAAK,GAwDjD,OArDJ65C,EAAiBl7E,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAK0/E,GAAkB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyBJ,GAAiB,GAAI,EAAA,+BAAyB1hD,GAAuB,KACjS8hD,EAAiBx5E,UAAO,EAAA,+BAAyB,CAAEvC,KAAM+7E,EAAkBt5E,OAAQ,CAAE+5E,eAAgB,iBAAkBxG,kBAAmB,oBAAqB8G,kBAAmB,oBAAqBkB,cAAe,gBAAiB9G,cAAe,gBAAiB7a,gBAAiB,mBAAqBrU,QAAS,CAAEy0B,oBAAqB,sBAAuBC,YAAa,cAAeC,cAAe,gBAAiBC,kBAAmB,qBAAuB72B,SAAU,CAAC,EAAA,2CAoD1cg2B,GArR0B,GA4RjC,GAA4B,MAC5B,MAAMkC,UAAoB,GACtB,YAAYnS,EAAY8O,EAAmBqB,EAAeiC,GACtDz/D,MAAMqtD,EAAY8O,EAAmBqB,EAAeiC,IA0F5D,OAvFJD,EAAYp9E,UAAO,SAA6BxE,GAAK,OAAO,IAAKA,GAAK4hF,GAAa,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyBtC,GAAiB,GAAI,EAAA,+BAAyB1hD,GAAuB,KAClRgkD,EAAY53C,UAAO,EAAA,+BAAyB,CAAErmC,KAAMi+E,EAAaz7E,UAAW,CAAC,CAAC,kBAAmBmkD,eAAgB,SAAoCngB,EAAIrsB,EAAKysC,GAGtJ,IAAIC,EAHuK,EAALrgB,GACtK,EAAA,4BAAsBogB,EAAU,IAAQ,GACjC,EAALpgB,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIojE,SAAW12B,IACnE+yB,UAAW,SAA2BpzC,EAAIrsB,GAI3C,IAAI0sC,EAJuD,EAALrgB,IACtD,EAAA,yBAAmB0vC,IAAK,GACxB,EAAA,yBAAmBC,IAAK,IACjB,EAAL3vC,IAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAI0jE,gBAAkBh3B,EAAG7jB,OAC9E,EAAA,4BAAsB6jB,EAAK,EAAA,8BAA0B1sC,EAAIsjE,WAAa52B,EAAG7jB,SACxEmiC,UAAW,CAAC,EAAG,iBAAkBtf,SAAU,EAAGb,aAAc,SAAkCxe,EAAIrsB,GAAgB,EAALqsB,GAC9G,EAAA,yBAAmB,+BAAgCrsB,EAAI6jE,cAAvD,CAAsE,gCAAwD,UAAvB7jE,EAAIqiE,iBAC1G/5E,OAAQ,CAAEu8D,MAAO,QAASoY,cAAe,iBAAmBrwB,SAAU,CAAC,eAAgBhB,SAAU,CAAC,EAAA,gCAA0B,CAAC,CACtH5iD,QAASi2E,GACT7uB,YAAa0zB,KACZ,EAAA,yCAAoC33C,MAAO,EAAGC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,EAAG,gBAAiB,gBAAiB,oBAAqB,eAAgB,sBAAuB,CAAC,YAAa,IAAK,CAAC,QAAS,oCAAqC,OAAQ,MAAO,qBAAsB,GAAI,aAAc,GAAI,yBAA0B,GAAI,EAAG,KAAM,uBAAwB,WAAY,oBAAqB,QAAS,EAAG,QAAS,WAAY,CAAC,EAAG,wBAAyB,CAAC,iBAAkB,IAAK,CAAC,OAAQ,WAAY,EAAG,KAAM,sBAAuB,UAAW,WAAY,SAAU,oBAAqB,cAAe,eAAgB,EAAG,QAAS,WAAY,CAAC,OAAQ,MAAO,qBAAsB,GAAI,aAAc,GAAI,yBAA0B,GAAI,EAAG,gBAAiB,sBAAuB,EAAG,KAAM,WAAY,oBAAqB,SAAU,CAAC,EAAG,yBAA0B,CAAC,EAAG,QAAS,CAAC,EAAG,mBAAoB,CAAC,OAAQ,WAAY,EAAG,KAAM,UAAW,WAAY,SAAU,oBAAqB,cAAe,iBAAkBp6E,SAAU,SAA8BmlC,EAAIrsB,GAAgB,EAALqsB,IACxiC,EAAA,4BAAsB,EAAG,iBAAkB,EAAG,GAC9C,EAAA,wBAAkB,gBAAA,SAAqFsf,GAAU,OAAO3rC,EAAIgkE,cAAcr4B,KAA1I,CAAsJ,sBAAA,SAAiGA,GAAU,OAAO3rC,EAAI+8D,cAAgBpxB,KAC5R,EAAA,wBAAkB,EAAG6wB,GAA4B,EAAG,GAAI,MAAO,GAC/D,EAAA,4BACA,EAAA,4BAAsB,EAAG,MAAO,EAAG,GACnC,EAAA,wBAAkB,EAAGe,GAAqC,EAAG,EAAG,eAAgB,GAChF,EAAA,6BACO,EAALlxC,IACF,EAAA,wBAAkB,gBAAiBrsB,EAAI+8D,eAAiB,EAAxD,CAA2D,gBAAiB/8D,EAAIi9D,cAAhF,CAA+F,oBAAqBj9D,EAAI2iE,mBACxH,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,UAAW3iE,EAAIm9D,OACjC,EAAA,uBAAiB,GACjB,EAAA,yBAAmB,0BAAkD,mBAAvBn9D,EAAIwqD,gBAClD,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,UAAWxqD,EAAIm9D,SAChC7wC,WAAY,WAAc,MAAO,CAAC,GAAc,EAAA,QAAgB,GAAoB,GAAkB,GAAwB,EAAA,KAAa,GAAwB,KAAgBviC,OAAQ,CAAC,w/CAAy/CkzB,cAAe,IAqDlsD6mD,GA7FqB,GAyGhC,MAAMG,IAEN,MAAMC,GAA+Bzf,GAAcwf,IAKnD,IAAI,GAAmC,MACnC,MAAME,UAA2BD,GAC7B,YAAYvS,GACRrtD,QACApgB,KAAKytE,WAAaA,EAGtB,QACIztE,KAAKytE,WAAWjnB,cAAcuP,QAElC,gBACI,OAAO/1D,KAAKytE,WAAWjnB,cAAc0zB,WAEzC,iBACI,OAAOl6E,KAAKytE,WAAWjnB,cAAc2P,aAsB7C,OAnBJ8pB,EAAmBz9E,UAAO,SAAoCxE,GAAK,OAAO,IAAKA,GAAKiiF,GAAoB,EAAA,+BAAyB,EAAA,cACjIA,EAAmB/7E,UAAO,EAAA,+BAAyB,CAAEvC,KAAMs+E,EAAoB97E,UAAW,CAAC,CAAC,GAAI,qBAAsB,KAAMqjD,SAAU,EAAGb,aAAc,SAAyCxe,EAAIrsB,GAAgB,EAALqsB,IACvM,EAAA,yBAAmB,kBAAmBrsB,EAAIpQ,UAC1C,EAAA,yBAAmB,mBAAoBoQ,EAAIpQ,YAC1CtH,OAAQ,CAAEsH,SAAU,YAAcg8C,SAAU,CAAC,EAAA,2CAe3Cu4B,GApC4B,GA+CvC,MAAMC,GAA8BlvB,GAAgC,CAAE2J,SAAS,IAoB/E,IAAI,GAAsC,MACtC,MAAMwlB,EACF,YAAY3tB,EAAamrB,EAAoByC,EAAgBrhB,EAAMtM,EAKnEwD,EAAWqQ,GACPtmE,KAAKwyD,YAAcA,EACnBxyD,KAAK29E,mBAAqBA,EAC1B39E,KAAKogF,eAAiBA,EACtBpgF,KAAK++D,KAAOA,EACZ/+D,KAAKyyD,QAAUA,EACfzyD,KAAKi2D,UAAYA,EACjBj2D,KAAKsmE,eAAiBA,EAEtBtmE,KAAKqgF,gBAAkB,EAEvBrgF,KAAKsgF,uBAAwB,EAE7BtgF,KAAK8G,WAAa,IAAI,GAAA,QAEtB9G,KAAKugF,yBAA0B,EAE/BvgF,KAAKwgF,qBAAsB,EAE3BxgF,KAAKygF,sBAAuB,EAE5BzgF,KAAK0gF,eAAiB,IAAI,GAAA,QAK1B1gF,KAAKy+E,mBAAoB,EACzBz+E,KAAKk+E,eAAiB,EAEtBl+E,KAAK2gF,mBAAqB,IAAI,EAAA,aAE9B3gF,KAAK4gF,aAAe,IAAI,EAAA,aAExBnuB,EAAQt4B,kBAAkB,KACtB,OAAA,GAAA,UAAA,CAAUq4B,EAAYhM,cAAe,cAChC/jB,KAAK0xC,GAAUn0E,KAAK8G,aACpB64B,UAAU,KACX3/B,KAAK6gF,oBAKjB,oBAAsB,OAAO7gF,KAAKk+E,eAClC,kBAAkBngF,GACdA,EAAQoxD,GAAqBpxD,GACzBiC,KAAKk+E,gBAAkBngF,IACvBiC,KAAKsgF,uBAAwB,EAC7BtgF,KAAKk+E,eAAiBngF,EAClBiC,KAAK8gF,aACL9gF,KAAK8gF,YAAYpsB,iBAAiB32D,IAI9C,kBAEI,OAAA,GAAA,UAAA,CAAUiC,KAAK+gF,mBAAmBv6B,cAAe,aAAc05B,IAC1Dz9C,KAAK0xC,GAAUn0E,KAAK8G,aACpB64B,UAAU,KACX3/B,KAAKghF,sBAAsB,YAE/B,OAAA,GAAA,UAAA,CAAUhhF,KAAKihF,eAAez6B,cAAe,aAAc05B,IACtDz9C,KAAK0xC,GAAUn0E,KAAK8G,aACpB64B,UAAU,KACX3/B,KAAKghF,sBAAsB,WAGnC,qBACI,MAAME,EAAYlhF,KAAK++D,KAAO/+D,KAAK++D,KAAKxa,OAAS,OAAA,GAAA,GAAA,CAAG,MAC9C48B,EAASnhF,KAAKogF,eAAe77B,OAAO,KACpC68B,EAAU,KACZphF,KAAKqhF,mBACLrhF,KAAKq/E,6BAETr/E,KAAK8gF,YAAc,IAAI/tB,GAAgB/yD,KAAKgzD,QACvCsuB,0BAA0BthF,KAAKi9E,uBAC/BsE,WACLvhF,KAAK8gF,YAAYpsB,iBAAiB,GAGD,oBAA1B4lB,sBAAwCA,sBAAsB8G,GAAWA,IAGhF,OAAA,GAAA,MAAA,CAAMF,EAAWC,EAAQnhF,KAAKgzD,OAAO/L,SAASxkB,KAAK0xC,GAAUn0E,KAAK8G,aAAa64B,UAAU,KAErFt9B,QAAQP,UAAU2B,KAAK29E,GACvBphF,KAAK8gF,YAAYQ,0BAA0BthF,KAAKi9E,yBAKpDj9E,KAAK8gF,YAAYv8B,OAAO9hB,KAAK0xC,GAAUn0E,KAAK8G,aAAa64B,UAAU6hD,IAC/DxhF,KAAK4gF,aAAap3B,KAAKg4B,GACvBxhF,KAAKyhF,aAAaD,KAG1B,wBAEQxhF,KAAK0hF,gBAAkB1hF,KAAKgzD,OAAO9vD,SACnClD,KAAKqhF,mBACLrhF,KAAK0hF,eAAiB1hF,KAAKgzD,OAAO9vD,OAClClD,KAAK29E,mBAAmB95E,gBAIxB7D,KAAKsgF,wBACLtgF,KAAK2hF,eAAe3hF,KAAKk+E,gBACzBl+E,KAAK4hF,0BACL5hF,KAAKq/E,4BACLr/E,KAAKsgF,uBAAwB,EAC7BtgF,KAAK29E,mBAAmB95E,gBAIxB7D,KAAK6hF,yBACL7hF,KAAK8hF,2BACL9hF,KAAK6hF,wBAAyB,EAC9B7hF,KAAK29E,mBAAmB95E,gBAGhC,cACI7D,KAAK8G,WAAWgL,OAChB9R,KAAK8G,WAAWw3B,WAChBt+B,KAAK0gF,eAAepiD,WAGxB,eAAepzB,GAEX,IAAIwiD,GAAexiD,GAGnB,OAAQA,EAAMypD,SACV,KjChxCH,GiCixCO30D,KAAK8gF,YAAY1rB,qBACjBlqD,EAAMgqD,iBACN,MACJ,KjCrxCJ,GiCsxCQl1D,KAAK8gF,YAAYxrB,oBACjBpqD,EAAMgqD,iBACN,MACJ,KjCnyCF,GiCoyCE,KjC7xCF,GiC8xCUl1D,KAAK0/E,aAAe1/E,KAAK64E,gBACzB74E,KAAK2gF,mBAAmBn3B,KAAKxpD,KAAK0/E,YAClC1/E,KAAK+hF,cAAc72E,IAEvB,MACJ,QACIlL,KAAK8gF,YAAYkB,UAAU92E,IAMvC,oBACI,MAAMivD,EAAcn6D,KAAKwyD,YAAYhM,cAAc2T,YAI/CA,IAAgBn6D,KAAKiiF,sBACrBjiF,KAAKiiF,oBAAsB9nB,GAAe,GAG1Cn6D,KAAKyyD,QAAQv4B,IAAI,KACbl6B,KAAKqhF,mBACLrhF,KAAKq/E,4BACLr/E,KAAK29E,mBAAmB95E,kBAWpC,mBACI7D,KAAKkiF,0BACLliF,KAAK4hF,0BACL5hF,KAAK8hF,2BAGT,iBACI,OAAO9hF,KAAK8gF,YAAc9gF,KAAK8gF,YAAYqB,gBAAkB,EAGjE,eAAepkF,GACNiC,KAAKoiF,cAAcrkF,IAAUiC,KAAK0/E,aAAe3hF,GAAUiC,KAAK8gF,aAGrE9gF,KAAK8gF,YAAYtsB,cAAcz2D,GAMnC,cAAc2mB,GACV,IAAK1kB,KAAKgzD,OACN,OAAO,EAEX,MAAMj8B,EAAM/2B,KAAKgzD,OAAShzD,KAAKgzD,OAAOa,UAAUnvC,GAAS,KACzD,QAASqS,IAAQA,EAAIrrB,SAMzB,aAAa66C,GAIT,GAHIvmD,KAAKugF,yBACLvgF,KAAK2hF,eAAep7B,GAEpBvmD,KAAKgzD,QAAUhzD,KAAKgzD,OAAO9vD,OAAQ,CACnClD,KAAKgzD,OAAOa,UAAUtN,GAAUwP,QAIhC,MAAMssB,EAAcriF,KAAKsiF,kBAAkB97B,cACrCqY,EAAM7+D,KAAKi9E,sBAEboF,EAAYpL,WADL,OAAPpY,EACyB,EAGAwjB,EAAYE,YAAcF,EAAYlsB,aAK3E,sBACI,OAAOn2D,KAAK++D,MAA4B,QAApB/+D,KAAK++D,KAAKhhE,MAAkB,MAAQ,MAG5D,2BACI,GAAIiC,KAAKy+E,kBACL,OAEJ,MAAM+D,EAAiBxiF,KAAKwiF,eACtB3f,EAAW7iE,KAAKi2D,UAChBwsB,EAA4C,QAA/BziF,KAAKi9E,uBAAmCuF,EAAiBA,EAO5ExiF,KAAK0iF,SAASl8B,cAAc34C,MAAM02D,UAAY,cAAc97D,KAAKoY,MAAM4hE,QAMnE5f,IAAaA,EAASvS,SAAWuS,EAAS1S,QAC1CnwD,KAAKsiF,kBAAkB97B,cAAcywB,WAAa,GAI1D,qBAAuB,OAAOj3E,KAAKqgF,gBACnC,mBAAmBtiF,GACfiC,KAAK2iF,UAAU5kF,GAUnB,cAAci2D,GAIV,OAAOh0D,KAAK2iF,UAAU3iF,KAAKqgF,iBADQ,UAAbrsB,GAAyB,EAAI,GAFhCh0D,KAAKsiF,kBAAkB97B,cAAc2P,YAEa,GAIzE,sBAAsBnC,GAClBh0D,KAAK6gF,gBACL7gF,KAAK4iF,cAAc5uB,GAQvB,eAAe6uB,GACX,GAAI7iF,KAAKy+E,kBACL,OAEJ,MAAMqE,EAAgB9iF,KAAKgzD,OAAShzD,KAAKgzD,OAAOa,UAAUgvB,GAAc,KACxE,IAAKC,EACD,OAGJ,MAAMC,EAAa/iF,KAAKsiF,kBAAkB97B,cAAc2P,aAClD,WAAE+jB,EAAU,YAAE/jB,GAAgB2sB,EAAcrV,WAAWjnB,cAC7D,IAAIw8B,EAAgBC,EACc,OAA9BjjF,KAAKi9E,uBACL+F,EAAiB9I,EACjB+I,EAAgBD,EAAiB7sB,IAGjC8sB,EAAgBjjF,KAAK0iF,SAASl8B,cAAc2P,YAAc+jB,EAC1D8I,EAAiBC,EAAgB9sB,GAErC,MAAM+sB,EAAmBljF,KAAKwiF,eACxBW,EAAkBnjF,KAAKwiF,eAAiBO,EAC1CC,EAAiBE,EAEjBljF,KAAKwiF,gBAAkBU,EAAmBF,EA1U3B,GA4UVC,EAAgBE,IAErBnjF,KAAKwiF,gBAAkBS,EAAgBE,EA9UxB,IAyVvB,0BACI,GAAInjF,KAAKy+E,kBACLz+E,KAAKugF,yBAA0B,MAE9B,CACD,MAAMrnB,EAAYl5D,KAAK0iF,SAASl8B,cAAc+7B,YAAcviF,KAAKwyD,YAAYhM,cAAc2P,YACtF+C,IACDl5D,KAAKwiF,eAAiB,GAEtBtpB,IAAcl5D,KAAKugF,yBACnBvgF,KAAK29E,mBAAmB95E,eAE5B7D,KAAKugF,wBAA0BrnB,GAYvC,0BACQl5D,KAAKy+E,kBACLz+E,KAAKwgF,oBAAsBxgF,KAAKygF,sBAAuB,GAIvDzgF,KAAKygF,qBAA8C,GAAvBzgF,KAAKwiF,eACjCxiF,KAAKwgF,oBAAsBxgF,KAAKwiF,gBAAkBxiF,KAAKojF,wBACvDpjF,KAAK29E,mBAAmB95E,gBAUhC,wBAGI,OAFwB7D,KAAK0iF,SAASl8B,cAAc+7B,YACjCviF,KAAKsiF,kBAAkB97B,cAAc2P,aACf,EAG7C,4BACI,MAAMktB,EAAerjF,KAAKgzD,QAAUhzD,KAAKgzD,OAAO9vD,OAC5ClD,KAAKgzD,OAAOa,UAAU7zD,KAAK64E,eAAiB,KAC1CyK,EAAuBD,EAAeA,EAAa5V,WAAWjnB,cAAgB,KAChF88B,EACAtjF,KAAKujF,QAAQC,eAAeF,GAG5BtjF,KAAKujF,QAAQE,OAIrB,gBACIzjF,KAAK0gF,eAAe5uE,OAOxB,sBAAsBkiD,EAAW0vB,GAGzBA,GAAmC,MAArBA,EAAWx8B,QAAwC,IAAtBw8B,EAAWx8B,SAI1DlnD,KAAK6gF,gBAEL,OAAA,GAAA,MAAA,CAjagB,IAKG,KA8Zdp+C,KAAK0xC,GAAU,OAAA,GAAA,MAAA,CAAMn0E,KAAK0gF,eAAgB1gF,KAAK8G,cAC/C64B,UAAU,KACX,MAAM,kBAAEgkD,EAAiB,SAAEC,GAAa5jF,KAAK4iF,cAAc5uB,IAE1C,IAAb4vB,GAAkBA,GAAYD,IAC9B3jF,KAAK6gF,mBASjB,UAAUr5E,GACN,GAAIxH,KAAKy+E,kBACL,MAAO,CAAEkF,kBAAmB,EAAGC,SAAU,GAE7C,MAAMD,EAAoB3jF,KAAKojF,wBAM/B,OALApjF,KAAKqgF,gBAAkB53E,KAAKC,IAAI,EAAGD,KAAKS,IAAIy6E,EAAmBn8E,IAG/DxH,KAAK6hF,wBAAyB,EAC9B7hF,KAAK4hF,0BACE,CAAE+B,kBAAAA,EAAmBC,SAAU5jF,KAAKqgF,kBA6BnD,OA1BJF,EAAsB39E,UAAO,SAAuCxE,GAAK,OAAO,IAAKA,GAAKmiF,GAAuB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyB,IAAuB,EAAA,+BAAyB,GAAuB,GAAI,EAAA,+BAAyB,EAAA,QAAgB,EAAA,+BAAyB,IAAkB,EAAA,+BAAyBvkD,GAAuB,KAC1bukD,EAAsBj8E,UAAO,EAAA,+BAAyB,CAAEvC,KAAMw+E,EAAuB/7E,OAAQ,CAAEq6E,kBAAmB,uBAyBvG0B,GA9c+B,GA4dtC,GAAkC,MAClC,MAAM0D,UAA0B,GAC5B,YAAYpW,EAAY8O,EAAmBuH,EAAejlB,EAAK3e,EAAQ2iB,EAEvEgd,GACIz/D,MAAMqtD,EAAY8O,EAAmBuH,EAAejlB,EAAK3e,EAAQ2iB,EAAUgd,GAC3E7/E,KAAK+gE,gBAAiB,EAG1B,oBAAsB,OAAO/gE,KAAK+gE,eAClC,kBAAkBhjE,GAASiC,KAAK+gE,eAAiB7R,GAAsBnxD,GACvE,cAAcmN,GACVA,EAAMgqD,kBA6Bd,OA1BJ2uB,EAAkBrhF,UAAO,SAAmCxE,GAAK,OAAO,IAAKA,GAAK6lF,GAAmB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyB,IAAuB,EAAA,+BAAyB,GAAuB,GAAI,EAAA,+BAAyB,EAAA,QAAgB,EAAA,+BAAyB,IAAkB,EAAA,+BAAyBjoD,GAAuB,KAC9aioD,EAAkB3/E,UAAO,EAAA,+BAAyB,CAAEvC,KAAMkiF,EAAmBz/E,OAAQ,CAAE20E,cAAe,iBAAmBrxB,SAAU,CAAC,EAAA,2CAyBzHm8B,GAzC2B,GAkDlC,GAA6B,MAC7B,MAAME,UAAqB,GACvB,YAAYtW,EAAY8O,EAAmBuH,EAAejlB,EAAK3e,EAAQ2iB,EAEvEgd,GACIz/D,MAAMqtD,EAAY8O,EAAmBuH,EAAejlB,EAAK3e,EAAQ2iB,EAAUgd,IAiHnF,OA9GJkE,EAAavhF,UAAO,SAA8BxE,GAAK,OAAO,IAAKA,GAAK+lF,GAAc,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyB,IAAuB,EAAA,+BAAyB,GAAuB,GAAI,EAAA,+BAAyB,EAAA,QAAgB,EAAA,+BAAyB,IAAkB,EAAA,+BAAyBnoD,GAAuB,KAC/ZmoD,EAAa/7C,UAAO,EAAA,+BAAyB,CAAErmC,KAAMoiF,EAAc5/E,UAAW,CAAC,CAAC,mBAAoBmkD,eAAgB,SAAqCngB,EAAIrsB,EAAKysC,GAG1J,IAAIC,EAH2K,EAALrgB,GAC1K,EAAA,4BAAsBogB,EAAU,IAAoB,GAC7C,EAALpgB,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIk3C,OAASxK,IACjE+yB,UAAW,SAA4BpzC,EAAIrsB,GAO5C,IAAI0sC,EAPwD,EAALrgB,IACvD,EAAA,+BAAyB,IAAW,GACpC,EAAA,+BAAyB0xC,IAAK,GAC9B,EAAA,+BAAyBC,IAAK,GAC9B,EAAA,yBAAmBC,IAAK,GACxB,EAAA,yBAAmBC,IAAK,IACjB,EAAL7xC,IAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIynE,QAAU/6B,EAAG7jB,OACtE,EAAA,4BAAsB6jB,EAAK,EAAA,8BAA0B1sC,EAAIwmE,kBAAoB95B,EAAG7jB,OAChF,EAAA,4BAAsB6jB,EAAK,EAAA,8BAA0B1sC,EAAI4mE,SAAWl6B,EAAG7jB,OACvE,EAAA,4BAAsB6jB,EAAK,EAAA,8BAA0B1sC,EAAImlE,eAAiBz4B,EAAG7jB,OAC7E,EAAA,4BAAsB6jB,EAAK,EAAA,8BAA0B1sC,EAAIilE,mBAAqBv4B,EAAG7jB,SAChFmiC,UAAW,CAAC,EAAG,kBAAmBtf,SAAU,EAAGb,aAAc,SAAmCxe,EAAIrsB,GAAgB,EAALqsB,GAChH,EAAA,yBAAmB,6CAA8CrsB,EAAIykE,wBAArE,CAA8F,qBAAmD,OAA7BzkE,EAAImhE,wBACvH74E,OAAQ,CAAEy0E,cAAe,iBAAmBlvB,QAAS,CAAEg3B,mBAAoB,qBAAsBC,aAAc,gBAAkBl5B,SAAU,CAAC,EAAA,yCAAoCqoB,mBAAoB,GAAK9nC,MAAO,GAAIC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,cAAe,OAAQ,aAAc,GAAI,EAAG,4BAA6B,mCAAoC,mBAAoB,EAAG,oBAAqB,QAAS,YAAa,YAAa,CAAC,oBAAqB,IAAK,CAAC,EAAG,qCAAsC,CAAC,EAAG,0BAA2B,EAAG,WAAY,CAAC,mBAAoB,IAAK,CAAC,OAAQ,UAAW,EAAG,eAAgB,EAAG,qBAAsB,CAAC,UAAW,IAAK,CAAC,EAAG,kBAAmB,CAAC,cAAe,OAAQ,aAAc,GAAI,EAAG,4BAA6B,kCAAmC,mBAAoB,EAAG,oBAAqB,YAAa,QAAS,YAAa,CAAC,gBAAiB,KAAMp6E,SAAU,SAA+BmlC,EAAIrsB,GAAgB,EAALqsB,IACr6B,EAAA,+BACA,EAAA,4BAAsB,EAAG,MAAO,EAAG,GACnC,EAAA,wBAAkB,SAAA,WAAiE,OAAOrsB,EAAIkoE,sBAAsB,YAApH,CAAkI,aAAA,SAAqEv8B,GAAU,OAAO3rC,EAAIklE,sBAAsB,SAAUv5B,KAA5P,CAAwQ,YAAA,WAAuE,OAAO3rC,EAAI+kE,mBAC1V,EAAA,uBAAiB,EAAG,MAAO,GAC3B,EAAA,4BACA,EAAA,4BAAsB,EAAG,MAAO,EAAG,GACnC,EAAA,wBAAkB,WAAA,SAAiEp5B,GAAU,OAAO3rC,EAAImoE,eAAex8B,MACvH,EAAA,4BAAsB,EAAG,MAAO,EAAG,GACnC,EAAA,wBAAkB,qBAAA,WAAyF,OAAO3rC,EAAIooE,uBACtH,EAAA,4BAAsB,EAAG,MAAO,GAChC,EAAA,0BAAoB,GACpB,EAAA,4BACA,EAAA,uBAAiB,EAAG,eACpB,EAAA,4BACA,EAAA,4BACA,EAAA,4BAAsB,GAAI,MAAO,EAAG,GACpC,EAAA,wBAAkB,aAAA,SAAsEz8B,GAAU,OAAO3rC,EAAIklE,sBAAsB,QAASv5B,KAA5I,CAAwJ,SAAA,WAAkE,OAAO3rC,EAAIkoE,sBAAsB,WAA3P,CAAwQ,YAAA,WAAwE,OAAOloE,EAAI+kE,mBAC3V,EAAA,uBAAiB,GAAI,MAAO,GAC5B,EAAA,6BACO,EAAL14C,IACF,EAAA,yBAAmB,qCAAsCrsB,EAAI2kE,sBAC7D,EAAA,wBAAkB,oBAAqB3kE,EAAI2kE,sBAAwB3kE,EAAIi9D,eACvE,EAAA,uBAAiB,GACjB,EAAA,yBAAmB,0BAAkD,mBAAvBj9D,EAAIwqD,gBAClD,EAAA,uBAAiB,GACjB,EAAA,yBAAmB,qCAAsCxqD,EAAI0kE,qBAC7D,EAAA,wBAAkB,oBAAqB1kE,EAAI0kE,qBAAuB1kE,EAAIi9D,iBACrE3wC,WAAY,CAAC,GAAkB,GAA0B,IAAYviC,OAAQ,CAAC,4mFAA+mFkzB,cAAe,IA6D1sFgrD,GAtHsB,GAwf7B,GAA8B,MAC9B,MAAMI,GAqDN,OAnDJA,EAAc9+E,UAAO,EAAA,8BAAwB,CAAE1D,KAAMwiF,IACrDA,EAAc7+E,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAKmmF,IAAqB5+E,QAAS,CAAC,CAChI,EAAA,aACA,GACA,GACA,GACA,GACA,IACD,MA2CA4+E,GAtDuB,6BC/pE/B,EAAA,4BAAA,EAAA,MAAA,GACC,EAAA,uBAAA,EAAA,WAAA,GACA,EAAA,4BAAA,EAAA,MAAA,GAAyB,EAAA,oBAAA,GAAkB,EAAA,4BAC5C,EAAA,mFAHK,EAAA,wBAAA,aAAA,EAAA,OACM,EAAA,uBAAA,GAAA,EAAA,wBAAA,UAAA,EAAA,MACe,EAAA,uBAAA,GAAA,EAAA,gCAAA,IAAA,EAAA,QAAA,6BAI1B,EAAA,qCAAA,GACC,EAAA,uBAAA,EAAA,iBACD,EAAA,gEACA,EAAA,qCAAA,GACC,EAAA,4BAAA,EAAA,OAAA,GAA4B,EAAA,oBAAA,GAAa,EAAA,4BAC1C,EAAA,mFAD6B,EAAA,uBAAA,GAAA,EAAA,+BAAA,EAAA,oCAJ7B,EAAA,wBAAA,EAAA,GAAA,EAAA,EAAA,eAAA,GAGA,EAAA,wBAAA,EAAA,GAAA,EAAA,EAAA,eAAA,iDAHc,EAAA,wBAAA,OAAA,EAAA,mBAGA,EAAA,uBAAA,GAAA,EAAA,wBAAA,QAAA,EAAA,2CAXhB,EAAA,4BAAA,EAAA,WACC,EAAA,wBAAA,EAAA,GAAA,EAAA,EAAA,cAAA,GAMA,EAAA,wBAAA,EAAA,GAAA,EAAA,EAAA,cAAA,GAQD,EAAA,6BCEM,IAAA,GAAA,YAAMC,EAeZ,YACSC,EACAC,GADA,KAAAD,WAAAA,EACA,KAAAC,aAAAA,EAdT,WACC,OAAOtkF,KAAKqkF,WAAW7T,YAGxB,aACC,OAAOxwE,KAAKskF,aAAaC,OAG1B,wBACC,OAAOvkF,KAAKqkF,WAAWG,YAAY/hD,KAAK52B,GAAKkrB,IAAoBA,MAAAA,OAAG,EAAHA,EAAKrS,QAAS,IAQhF,WACC1kB,KAAKykF,eACLzkF,KAAKqkF,WAAWK,iBAGjB,eACC,MAAMC,EAAeljF,SAASC,cAAc,UAC5CijF,EAAa/iF,IAAM,wCACnB+iF,EAAahjF,KAAO,SACpBgjF,EAAaC,OAAQ,EACrBnjF,SAASQ,KAAKmrB,OAAOu3D,GACrB,MAAME,EAASpjF,SAASC,cAAc,mBACtCD,SAASgM,cAAc,mBAAmBq3E,MAAMD,GAChDA,EAAOnvD,iBAAiB,cAAgBxqB,GAA8BlL,KAAK+kF,YAAY75E,IAGxF,YAAYA,GACXlL,KAAKskF,aAAaU,YAAY95E,EAAM+5E,QAGrC,wBACC,OAAOjlF,KAAKskF,aAAavmF,MAAMs+B,cAAgBJ,GAAYK,KAG5D,cACC,MAAM,KAAEH,EAAI,MAAEC,EAAK,YAAEC,GAAgBr8B,KAAKskF,aAAavmF,MAEvD,OAAKo+B,EAIAC,EAIDC,IAAgBJ,GAAYK,KACxB,+IADR,EAHQ,uEAJA,wGAhDG8nD,GAAY,EAAA,+BAAA,IAAA,EAAA,+BAAA,yDAAZA,EAAY,UAAA,CAAA,CAAA,aAAA,MAAA,EAAA,KAAA,EAAA,OAAA,CAAA,CAAA,kBAAA,UAAA,MAAA,MAAA,EAAA,OAAA,EAAA,iBAAA,CAAA,EAAA,QAAA,WAAA,CAAA,cAAA,IAAA,CAAA,gBAAA,IAAA,CAAA,mBAAA,GAAA,EAAA,sBAAA,EAAA,cAAA,CAAA,EAAA,WAAA,CAAA,EAAA,cAAA,CAAA,EAAA,QAAA,CAAA,EAAA,kBAAA,SAAA,SAAA,EAAA,GAAA,EAAA,IDlBzB,EAAA,4BAAA,EAAA,gBAAA,oCACC,EAAA,wBAAA,EAAA,GAAA,EAAA,EAAA,UAAA,GAgBD,EAAA,mCAjBgE,EAAA,wBAAA,gBAAA,EAAA,yBAAA,EAAA,EAAA,EAAA,oBACtD,EAAA,uBAAA,GAAA,EAAA,wBAAA,UAAA,EAAA,o0BCiBH,GCSP,MAAM,GACF,YAAYhE,EAAgB3+E,GACxBzB,KAAKogF,eAAiBA,EACtBpgF,KAAKklF,oBAAsB,CAAExhB,IAAK,GAAIF,KAAM,IAC5CxjE,KAAKmlF,YAAa,EAClBnlF,KAAKq3D,UAAY51D,EAGrB,UAEA,SACI,GAAIzB,KAAKolF,gBAAiB,CACtB,MAAM54D,EAAOxsB,KAAKq3D,UAAUuH,gBAC5B5+D,KAAKqlF,wBAA0BrlF,KAAKogF,eAAexJ,4BAEnD52E,KAAKklF,oBAAoB1hB,KAAOh3C,EAAK3e,MAAM21D,MAAQ,GACnDxjE,KAAKklF,oBAAoBxhB,IAAMl3C,EAAK3e,MAAM61D,KAAO,GAGjDl3C,EAAK3e,MAAM21D,KAAOjU,IAAqBvvD,KAAKqlF,wBAAwB7hB,MACpEh3C,EAAK3e,MAAM61D,IAAMnU,IAAqBvvD,KAAKqlF,wBAAwB3hB,KACnEl3C,EAAKkF,UAAUrb,IAAI,0BACnBrW,KAAKmlF,YAAa,GAI1B,UACI,GAAInlF,KAAKmlF,WAAY,CACjB,MAAMG,EAAOtlF,KAAKq3D,UAAUuH,gBAEtB2mB,EAAYD,EAAKz3E,MACjB23E,EAFOxlF,KAAKq3D,UAAUp1D,KAEL4L,MACjB43E,EAA6BF,EAAUG,gBAAkB,GACzDC,EAA6BH,EAAUE,gBAAkB,GAC/D1lF,KAAKmlF,YAAa,EAClBI,EAAU/hB,KAAOxjE,KAAKklF,oBAAoB1hB,KAC1C+hB,EAAU7hB,IAAM1jE,KAAKklF,oBAAoBxhB,IACzC4hB,EAAK5zD,UAAUE,OAAO,0BAGtB2zD,EAAUG,eAAiBF,EAAUE,eAAiB,OACtDhyE,OAAOkyE,OAAO5lF,KAAKqlF,wBAAwB7hB,KAAMxjE,KAAKqlF,wBAAwB3hB,KAC9E6hB,EAAUG,eAAiBD,EAC3BD,EAAUE,eAAiBC,GAGnC,gBAKI,GADa3lF,KAAKq3D,UAAUuH,gBACnBltC,UAAU7kB,SAAS,2BAA6B7M,KAAKmlF,WAC1D,OAAO,EAEX,MAAMljF,EAAOjC,KAAKq3D,UAAUp1D,KACtB4jF,EAAW7lF,KAAKogF,eAAevJ,kBACrC,OAAO50E,EAAK6jF,aAAeD,EAASliB,QAAU1hE,EAAKsgF,YAAcsD,EAASpiB,OAclF,SAASsiB,KACL,OAAO3kF,MAAM,8CAMjB,MAAM4kF,GACF,YAAYC,EAAmBxzB,EAAS2tB,EAAgB8F,GACpDlmF,KAAKimF,kBAAoBA,EACzBjmF,KAAKyyD,QAAUA,EACfzyD,KAAKogF,eAAiBA,EACtBpgF,KAAKkmF,QAAUA,EACflmF,KAAKmmF,oBAAsB,KAE3BnmF,KAAKomF,QAAU,KACXpmF,KAAKsyB,UACDtyB,KAAKqmF,YAAYjV,eACjBpxE,KAAKyyD,QAAQv4B,IAAI,IAAMl6B,KAAKqmF,YAAY3xC,WAKpD,OAAO4xC,GACH,GAAItmF,KAAKqmF,YACL,MAAMN,KAEV/lF,KAAKqmF,YAAcC,EAGvB,SACI,GAAItmF,KAAKmmF,oBACL,OAEJ,MAAMp0B,EAAS/xD,KAAKimF,kBAAkBlQ,SAAS,GAC3C/1E,KAAKkmF,SAAWlmF,KAAKkmF,QAAQK,WAAavmF,KAAKkmF,QAAQK,UAAY,GACnEvmF,KAAKwmF,uBAAyBxmF,KAAKogF,eAAexJ,4BAA4BlT,IAC9E1jE,KAAKmmF,oBAAsBp0B,EAAOpyB,UAAU,KACxC,MAAMg3C,EAAiB32E,KAAKogF,eAAexJ,4BAA4BlT,IACnEj7D,KAAKwU,IAAI05D,EAAiB32E,KAAKwmF,wBAA0BxmF,KAAKkmF,QAAQK,UACtEvmF,KAAKomF,UAGLpmF,KAAKqmF,YAAYI,oBAKzBzmF,KAAKmmF,oBAAsBp0B,EAAOpyB,UAAU3/B,KAAKomF,SAIzD,UACQpmF,KAAKmmF,sBACLnmF,KAAKmmF,oBAAoB7oD,cACzBt9B,KAAKmmF,oBAAsB,MAGnC,SACInmF,KAAKsyB,UACLtyB,KAAKqmF,YAAc,MAY3B,MAAMK,GAEF,UAEA,WAEA,WAmBJ,SAASC,GAA6B98E,EAASwrE,GAC3C,OAAOA,EAAiBp+D,KAAK2vE,GACJ/8E,EAAQo6D,OAAS2iB,EAAgBljB,KACjC75D,EAAQ65D,IAAMkjB,EAAgB3iB,QAC/Bp6D,EAAQk6D,MAAQ6iB,EAAgBpjB,MAC/B35D,EAAQ25D,KAAOojB,EAAgB7iB,OAW5D,SAAS8iB,GAA4Bh9E,EAASwrE,GAC1C,OAAOA,EAAiBp+D,KAAK6vE,GACJj9E,EAAQ65D,IAAMojB,EAAoBpjB,KAClC75D,EAAQo6D,OAAS6iB,EAAoB7iB,QACtCp6D,EAAQ25D,KAAOsjB,EAAoBtjB,MAClC35D,EAAQk6D,MAAQ+iB,EAAoB/iB,OAejE,MAAMgjB,GACF,YAAYd,EAAmB7F,EAAgB3tB,EAASyzB,GACpDlmF,KAAKimF,kBAAoBA,EACzBjmF,KAAKogF,eAAiBA,EACtBpgF,KAAKyyD,QAAUA,EACfzyD,KAAKkmF,QAAUA,EACflmF,KAAKmmF,oBAAsB,KAG/B,OAAOG,GACH,GAAItmF,KAAKqmF,YACL,MAAMN,KAEV/lF,KAAKqmF,YAAcC,EAGvB,SACStmF,KAAKmmF,sBAENnmF,KAAKmmF,oBAAsBnmF,KAAKimF,kBAAkBlQ,SADjC/1E,KAAKkmF,QAAUlmF,KAAKkmF,QAAQc,eAAiB,GACOrnD,UAAU,KAG3E,GAFA3/B,KAAKqmF,YAAYI,iBAEbzmF,KAAKkmF,SAAWlmF,KAAKkmF,QAAQe,UAAW,CACxC,MAAMC,EAAclnF,KAAKqmF,YAAYc,eAAe9jB,yBAC9C,MAAEI,EAAK,OAAEE,GAAW3jE,KAAKogF,eAAevJ,kBAI1C8P,GAA6BO,EADb,CAAC,CAAEzjB,MAAAA,EAAOE,OAAAA,EAAQM,OAAQN,EAAQI,MAAON,EAAOC,IAAK,EAAGF,KAAM,OAE9ExjE,KAAKsyB,UACLtyB,KAAKyyD,QAAQv4B,IAAI,IAAMl6B,KAAKqmF,YAAY3xC,eAO5D,UACQ10C,KAAKmmF,sBACLnmF,KAAKmmF,oBAAoB7oD,cACzBt9B,KAAKmmF,oBAAsB,MAGnC,SACInmF,KAAKsyB,UACLtyB,KAAKqmF,YAAc,MAiB3B,IAAI,GAAsC,MACtC,MAAMe,EACF,YAAYnB,EAAmB7F,EAAgB3tB,EAAShxD,GACpDzB,KAAKimF,kBAAoBA,EACzBjmF,KAAKogF,eAAiBA,EACtBpgF,KAAKyyD,QAAUA,EAEfzyD,KAAK6gC,KAAO,IAAM,IAAI6lD,GAKtB1mF,KAAKqnF,MAASrmF,GAAW,IAAIglF,GAAoBhmF,KAAKimF,kBAAmBjmF,KAAKyyD,QAASzyD,KAAKogF,eAAgBp/E,GAE5GhB,KAAKsnF,MAAQ,IAAM,IAAI,GAAoBtnF,KAAKogF,eAAgBpgF,KAAKq3D,WAMrEr3D,KAAKunF,WAAcvmF,GAAW,IAAI+lF,GAAyB/mF,KAAKimF,kBAAmBjmF,KAAKogF,eAAgBpgF,KAAKyyD,QAASzxD,GACtHhB,KAAKq3D,UAAY51D,GAkBzB,OAfJ2lF,EAAsB5kF,UAAO,SAAuCxE,GAAK,OAAO,IAAKA,GAAKopF,GAAuB,EAAA,sBAAgB,IAA0B,EAAA,sBAAgB,IAAuB,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,EAAA,YAC9OA,EAAsB3kF,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA2C,OAAO,IAAI0nF,EAAsB,OAAA,EAAA,sBAAA,CAAS,IAAmB,OAAA,EAAA,sBAAA,CAAS,IAAgB,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,EAAA,YAAe1kF,MAAO0kF,EAAuB3nF,WAAY,SAc1Q2nF,GAvC+B,GA0D1C,MAAMI,GACF,YAAYxmF,GAeR,GAbAhB,KAAKynF,eAAiB,IAAIf,GAE1B1mF,KAAK0nF,WAAa,GAElB1nF,KAAK2nF,aAAc,EAEnB3nF,KAAK4nF,cAAgB,4BAMrB5nF,KAAK6nF,qBAAsB,EACvB7mF,EAAQ,CAIR,MAAM8mF,EAAatqF,OAAOgN,KAAKxJ,GAC/B,IAAK,MAAM3C,KAAOypF,OACMpnF,IAAhBM,EAAO3C,KAOP2B,KAAK3B,GAAO2C,EAAO3C,MAevC,MAAM0pF,GACF,YAAYjyB,EAAQkyB,EAEpB7jB,EAEAC,EAEAsjB,GACI1nF,KAAKmkE,QAAUA,EACfnkE,KAAKokE,QAAUA,EACfpkE,KAAK0nF,WAAaA,EAClB1nF,KAAKioF,QAAUnyB,EAAOmyB,QACtBjoF,KAAKkoF,QAAUpyB,EAAOoyB,QACtBloF,KAAKmoF,SAAWH,EAAQG,SACxBnoF,KAAKooF,SAAWJ,EAAQI,UA+BhC,IAAIC,GAA+C,KAC/C,MACI,YAEAC,EAEAC,GACIvoF,KAAKsoF,eAAiBA,EACtBtoF,KAAKuoF,yBAA2BA,IARO,GAuBnD,SAASC,GAAyB/pF,EAAUV,GACxC,GAAc,QAAVA,GAA6B,WAAVA,GAAgC,WAAVA,EACzC,MAAMqD,MAAM,8BAA8B3C,MAAaV,6CAU/D,SAAS0qF,GAA2BhqF,EAAUV,GAC1C,GAAc,UAAVA,GAA+B,QAAVA,GAA6B,WAAVA,EACxC,MAAMqD,MAAM,8BAA8B3C,MAAaV,4CAiB/D,IAAI,GAA0C,MAC1C,MAAM2qF,EACF,YAAYjnF,GAERzB,KAAK2oF,kBAAoB,GAEzB3oF,KAAK4oF,iBAAoB19E,IACrB,MAAM29E,EAAW7oF,KAAK2oF,kBACtB,IAAK,IAAI7rF,EAAI+rF,EAAS3lF,OAAS,EAAGpG,GAAK,EAAGA,IAOtC,GAAI+rF,EAAS/rF,GAAGgsF,eAAezhB,UAAUnkE,OAAS,EAAG,CACjD2lF,EAAS/rF,GAAGgsF,eAAeh3E,KAAK5G,GAChC,QAIZlL,KAAKq3D,UAAY51D,EAErB,cACIzB,KAAKomF,UAGT,IAAIE,GAEAtmF,KAAK4xB,OAAO00D,GAEPtmF,KAAK+oF,cACN/oF,KAAKq3D,UAAUp1D,KAAKyzB,iBAAiB,UAAW11B,KAAK4oF,kBACrD5oF,KAAK+oF,aAAc,GAEvB/oF,KAAK2oF,kBAAkBloF,KAAK6lF,GAGhC,OAAOA,GACH,MAAM5hE,EAAQ1kB,KAAK2oF,kBAAkBz8E,QAAQo6E,GACzC5hE,GAAS,GACT1kB,KAAK2oF,kBAAkBl5E,OAAOiV,EAAO,GAGH,IAAlC1kB,KAAK2oF,kBAAkBzlF,QACvBlD,KAAKomF,UAIb,UACQpmF,KAAK+oF,cACL/oF,KAAKq3D,UAAUp1D,KAAKwzB,oBAAoB,UAAWz1B,KAAK4oF,kBACxD5oF,KAAK+oF,aAAc,IAgB/B,OAZJL,EAA0BlmF,UAAO,SAA2CxE,GAAK,OAAO,IAAKA,GAAK0qF,GAA2B,EAAA,sBAAgB,EAAA,YACzIA,EAA0BjmF,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA+C,OAAO,IAAIgpF,EAA0B,OAAA,EAAA,sBAAA,CAAS,EAAA,YAAehmF,MAAOgmF,EAA2BjpF,WAAY,SAWnNipF,GApEmC,GA2E9C,MAwBMM,KAAsC,oBAAXt1E,SAA4BA,SACtDA,OAAOssD,YAAatsD,OAAOusD,SAElC,IAAI,GAAiC,MACjC,MAAMgpB,EACF,YAAYxnF,EAKZw0D,GACIj2D,KAAKi2D,UAAYA,EACjBj2D,KAAKq3D,UAAY51D,EAErB,cACI,MAAM+oC,EAAYxqC,KAAKijE,kBACnBz4B,GAAaA,EAAU3hB,YACvB2hB,EAAU3hB,WAAW0O,YAAYiT,GASzC,sBAII,OAHKxqC,KAAKijE,mBACNjjE,KAAKkpF,mBAEFlpF,KAAKijE,kBAMhB,mBAEI,MAAM/S,EAAYlwD,KAAKi2D,UAAYj2D,KAAKi2D,UAAU/F,UAA8B,oBAAXx8C,OAErE,GAAIw8C,GAAa84B,GAAmB,CAChC,MAAMG,EAA6BnpF,KAAKq3D,UAAU9pD,iBAAiB,sFAInE,IAAK,IAAIzQ,EAAI,EAAGA,EAAIqsF,EAA2BjmF,OAAQpG,IACnDqsF,EAA2BrsF,GAAG+rB,WAAW0O,YAAY4xD,EAA2BrsF,IAGxF,MAAM0tC,EAAYxqC,KAAKq3D,UAAU31D,cAAc,OAC/C8oC,EAAU9Y,UAAUrb,IAXG,yBAqBnB2yE,GACAx+C,EAAUl6B,aAAa,WAAY,QAE7B4/C,GACN1lB,EAAUl6B,aAAa,WAAY,UAEvCtQ,KAAKq3D,UAAUp1D,KAAKC,YAAYsoC,GAChCxqC,KAAKijE,kBAAoBz4B,GAgBjC,OAbJy+C,EAAiBzmF,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAKirF,GAAkB,EAAA,sBAAgB,EAAA,UAAW,EAAA,sBAAgB,MACzIA,EAAiBxmF,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAsC,OAAO,IAAIupF,EAAiB,OAAA,EAAA,sBAAA,CAAS,EAAA,UAAW,OAAA,EAAA,sBAAA,CAAS,MAAevmF,MAAOumF,EAAkBxpF,WAAY,SAYnMwpF,GAhF0B,GA4GrC,MAAM,GACF,YAAYG,EAAexN,EAAOyN,EAAOnD,EAASzzB,EAAS62B,EAAqBjyB,EAEhF2V,GACIhtE,KAAKopF,cAAgBA,EACrBppF,KAAK47E,MAAQA,EACb57E,KAAKqpF,MAAQA,EACbrpF,KAAKkmF,QAAUA,EACflmF,KAAKyyD,QAAUA,EACfzyD,KAAKspF,oBAAsBA,EAC3BtpF,KAAKq3D,UAAYA,EACjBr3D,KAAKgtE,UAAYA,EACjBhtE,KAAKupF,iBAAmB,KACxBvpF,KAAKwpF,eAAiB,IAAI,GAAA,QAC1BxpF,KAAKypF,aAAe,IAAI,GAAA,QACxBzpF,KAAK0pF,aAAe,IAAI,GAAA,QACxB1pF,KAAK2pF,iBAAmB,GAAA,aAAa7rD,MACrC99B,KAAK4pF,sBAAyB1+E,GAAUlL,KAAKwpF,eAAe13E,KAAK5G,GAEjElL,KAAK8oF,eAAiB,IAAI,GAAA,QACtB5C,EAAQuB,iBACRznF,KAAK6pF,gBAAkB3D,EAAQuB,eAC/BznF,KAAK6pF,gBAAgBx0C,OAAOr1C,OAEhCA,KAAK8pF,kBAAoB5D,EAAQ6D,iBAGrC,qBACI,OAAO/pF,KAAKqpF,MAGhB,sBACI,OAAOrpF,KAAKupF,iBAOhB,kBACI,OAAOvpF,KAAK47E,MAShB,OAAO9J,GACH,IAAIkY,EAAehqF,KAAKopF,cAAc/zC,OAAOy8B,GA2C7C,OAzCK9xE,KAAK47E,MAAM9f,eAAiB97D,KAAKiqF,qBAClCjqF,KAAKiqF,oBAAoB/nF,YAAYlC,KAAK47E,OAE1C57E,KAAK8pF,mBACL9pF,KAAK8pF,kBAAkBz0C,OAAOr1C,MAElCA,KAAKkqF,uBACLlqF,KAAKmqF,qBACLnqF,KAAKoqF,0BACDpqF,KAAK6pF,iBACL7pF,KAAK6pF,gBAAgBQ,SAKzBrqF,KAAKyyD,QAAQ2G,SACRC,eACA52B,KAAKiC,GAAK,IACV/E,UAAU,KAEP3/B,KAAKoxE,eACLpxE,KAAKymF,mBAIbzmF,KAAKsqF,sBAAqB,GACtBtqF,KAAKkmF,QAAQyB,aACb3nF,KAAKuqF,kBAELvqF,KAAKkmF,QAAQwB,YACb1nF,KAAKwqF,eAAexqF,KAAKqpF,MAAOrpF,KAAKkmF,QAAQwB,YAAY,GAG7D1nF,KAAKypF,aAAa33E,OAElB9R,KAAKspF,oBAAoBjzE,IAAIrW,MAGzBA,KAAKkmF,QAAQ2B,qBAAuB7nF,KAAKgtE,YACzChtE,KAAK2pF,iBAAmB3pF,KAAKgtE,UAAUrtC,UAAU,IAAM3/B,KAAKykD,YAEzDulC,EAMX,SACI,IAAKhqF,KAAKoxE,cACN,OAEJpxE,KAAKyqF,iBAILzqF,KAAKsqF,sBAAqB,GACtBtqF,KAAK8pF,mBAAqB9pF,KAAK8pF,kBAAkBp1C,QACjD10C,KAAK8pF,kBAAkBp1C,SAEvB10C,KAAK6pF,iBACL7pF,KAAK6pF,gBAAgBv3D,UAEzB,MAAMo4D,EAAmB1qF,KAAKopF,cAAc10C,SAU5C,OARA10C,KAAK0pF,aAAa53E,OAElB9R,KAAKspF,oBAAoB13D,OAAO5xB,MAGhCA,KAAK2qF,2BAEL3qF,KAAK2pF,iBAAiBrsD,cACfotD,EAGX,UACI,MAAME,EAAa5qF,KAAKoxE,cACpBpxE,KAAK8pF,mBACL9pF,KAAK8pF,kBAAkBrlC,UAE3BzkD,KAAK6qF,yBACL7qF,KAAKyqF,iBACLzqF,KAAK2pF,iBAAiBrsD,cACtBt9B,KAAKspF,oBAAoB13D,OAAO5xB,MAChCA,KAAKopF,cAAc3kC,UACnBzkD,KAAKypF,aAAanrD,WAClBt+B,KAAKwpF,eAAelrD,WACpBt+B,KAAK8oF,eAAexqD,WAChBt+B,KAAK47E,OAAS57E,KAAK47E,MAAM/yD,aACzB7oB,KAAK47E,MAAM/yD,WAAW0O,YAAYv3B,KAAK47E,OACvC57E,KAAK47E,MAAQ,MAEjB57E,KAAKiqF,oBAAsBjqF,KAAKqpF,MAAQ,KACpCuB,GACA5qF,KAAK0pF,aAAa53E,OAEtB9R,KAAK0pF,aAAaprD,WAGtB,cACI,OAAOt+B,KAAKopF,cAAchY,cAG9B,gBACI,OAAOpxE,KAAKwpF,eAAenwB,eAG/B,cACI,OAAOr5D,KAAKypF,aAAapwB,eAG7B,cACI,OAAOr5D,KAAK0pF,aAAarwB,eAG7B,gBACI,OAAOr5D,KAAK8oF,eAAezvB,eAG/B,YACI,OAAOr5D,KAAKkmF,QAGhB,iBACQlmF,KAAK8pF,mBACL9pF,KAAK8pF,kBAAkBz8E,QAI/B,uBAAuBy9E,GACfA,IAAa9qF,KAAK8pF,oBAGlB9pF,KAAK8pF,mBACL9pF,KAAK8pF,kBAAkBrlC,UAE3BzkD,KAAK8pF,kBAAoBgB,EACrB9qF,KAAKoxE,gBACL0Z,EAASz1C,OAAOr1C,MAChBA,KAAKymF,mBAIb,WAAWsE,GACP/qF,KAAKkmF,QAAU1oF,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKkmF,SAAU6E,GAC9D/qF,KAAKmqF,qBAGT,aAAatrB,GACT7+D,KAAKkmF,QAAU1oF,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKkmF,SAAU,CAAElyB,UAAW6K,IAC3E7+D,KAAKoqF,0BAGT,cAAcz4D,GACN3xB,KAAKqpF,OACLrpF,KAAKwqF,eAAexqF,KAAKqpF,MAAO13D,GAAS,GAIjD,iBAAiBA,GACT3xB,KAAKqpF,OACLrpF,KAAKwqF,eAAexqF,KAAKqpF,MAAO13D,GAAS,GAMjD,eACI,MAAMqiC,EAAYh0D,KAAKkmF,QAAQlyB,UAC/B,OAAKA,EAGuB,iBAAdA,EAAyBA,EAAYA,EAAUj2D,MAFlD,MAKf,qBAAqB+sF,GACbA,IAAa9qF,KAAK6pF,kBAGtB7pF,KAAK6qF,yBACL7qF,KAAK6pF,gBAAkBiB,EACnB9qF,KAAKoxE,gBACL0Z,EAASz1C,OAAOr1C,MAChB8qF,EAAST,WAIjB,0BACIrqF,KAAK47E,MAAMtrE,aAAa,MAAOtQ,KAAKgrF,gBAGxC,qBACI,IAAKhrF,KAAKqpF,MACN,OAEJ,MAAMx7E,EAAQ7N,KAAKqpF,MAAMx7E,MACzBA,EAAM41D,MAAQlU,GAAoBvvD,KAAKkmF,QAAQziB,OAC/C51D,EAAM81D,OAASpU,GAAoBvvD,KAAKkmF,QAAQviB,QAChD91D,EAAMo9E,SAAW17B,GAAoBvvD,KAAKkmF,QAAQ+E,UAClDp9E,EAAM6tE,UAAYnsB,GAAoBvvD,KAAKkmF,QAAQxK,WACnD7tE,EAAMq9E,SAAW37B,GAAoBvvD,KAAKkmF,QAAQgF,UAClDr9E,EAAMs9E,UAAY57B,GAAoBvvD,KAAKkmF,QAAQiF,WAGvD,qBAAqBC,GACjBprF,KAAKqpF,MAAMx7E,MAAMw9E,cAAgBD,EAAgB,OAAS,OAG9D,kBAEIprF,KAAKupF,iBAAmBvpF,KAAKq3D,UAAU31D,cAAc,OACrD1B,KAAKupF,iBAAiB73D,UAAUrb,IAAI,wBAChCrW,KAAKkmF,QAAQ0B,eACb5nF,KAAKwqF,eAAexqF,KAAKupF,iBAAkBvpF,KAAKkmF,QAAQ0B,eAAe,GAI3E5nF,KAAK47E,MAAM9f,cAAcnxC,aAAa3qB,KAAKupF,iBAAkBvpF,KAAK47E,OAGlE57E,KAAKupF,iBAAiB7zD,iBAAiB,QAAS11B,KAAK4pF,uBAEhB,oBAA1BtP,sBACPt6E,KAAKyyD,QAAQt4B,kBAAkB,KAC3BmgD,sBAAsB,KACdt6E,KAAKupF,kBACLvpF,KAAKupF,iBAAiB73D,UAAUrb,IAjB3B,oCAuBjBrW,KAAKupF,iBAAiB73D,UAAUrb,IAvBf,gCAiCzB,uBACQrW,KAAK47E,MAAM3gD,aACXj7B,KAAK47E,MAAM/yD,WAAW3mB,YAAYlC,KAAK47E,OAI/C,iBACI,IAII0P,EAJAC,EAAmBvrF,KAAKupF,iBAC5B,IAAKgC,EACD,OAGJ,IAAIC,EAAe,KAEXD,IACAA,EAAiB91D,oBAAoB,QAASz1B,KAAK4pF,uBACnD2B,EAAiB91D,oBAAoB,gBAAiB+1D,GAClDD,EAAiB1iE,YACjB0iE,EAAiB1iE,WAAW0O,YAAYg0D,IAM5CvrF,KAAKupF,kBAAoBgC,IACzBvrF,KAAKupF,iBAAmB,MAExBvpF,KAAKkmF,QAAQ0B,eACb5nF,KAAKwqF,eAAee,EAAkBvrF,KAAKkmF,QAAQ0B,eAAe,GAEtE3tB,aAAaqxB,IAEjBC,EAAiB75D,UAAUE,OAAO,gCAClC5xB,KAAKyyD,QAAQt4B,kBAAkB,KAC3BoxD,EAAiB71D,iBAAiB,gBAAiB81D,KAIvDD,EAAiB19E,MAAMw9E,cAAgB,OAIvCC,EAAYtrF,KAAKyyD,QAAQt4B,kBAAkB,IAAM2C,WAAW0uD,EAAc,MAG9E,eAAe3hF,EAAS4hF,EAAYC,GAChC,MAAMh6D,EAAY7nB,EAAQ6nB,UAC1B49B,GAAYm8B,GAAYtrF,QAAQwrF,IAGxBA,IACAD,EAAQh6D,EAAUrb,IAAIs1E,GAAYj6D,EAAUE,OAAO+5D,MAK/D,2BAII3rF,KAAKyyD,QAAQt4B,kBAAkB,KAI3B,MAAM0D,EAAe79B,KAAKyyD,QAAQ2G,SAC7BC,eACA52B,KAAK0xC,GAAU,OAAA,GAAA,MAAA,CAAMn0E,KAAKypF,aAAczpF,KAAK0pF,gBAC7C/pD,UAAU,KAGN3/B,KAAKqpF,OAAUrpF,KAAK47E,OAAwC,IAA/B57E,KAAKqpF,MAAM3/C,SAASxmC,SAC9ClD,KAAKqpF,OAASrpF,KAAKkmF,QAAQwB,YAC3B1nF,KAAKwqF,eAAexqF,KAAKqpF,MAAOrpF,KAAKkmF,QAAQwB,YAAY,GAEzD1nF,KAAK47E,OAAS57E,KAAK47E,MAAM9f,gBACzB97D,KAAKiqF,oBAAsBjqF,KAAK47E,MAAM9f,cACtC97D,KAAKiqF,oBAAoB1yD,YAAYv3B,KAAK47E,QAE9C/9C,EAAaP,mBAM7B,yBACI,MAAMmqD,EAAiBznF,KAAK6pF,gBACxBpC,IACAA,EAAen1D,UACXm1D,EAAe/yC,QACf+yC,EAAe/yC,WAgB/B,MAEMk3C,GAAiB,gBAQvB,MAAM,GACF,YAAYC,EAAazL,EAAgB/oB,EAAWpB,EAAW61B,GAC3D9rF,KAAKogF,eAAiBA,EACtBpgF,KAAKq3D,UAAYA,EACjBr3D,KAAKi2D,UAAYA,EACjBj2D,KAAK8rF,kBAAoBA,EAEzB9rF,KAAK+rF,qBAAuB,CAAEtoB,MAAO,EAAGE,OAAQ,GAEhD3jE,KAAKgsF,WAAY,EAEjBhsF,KAAKisF,UAAW,EAEhBjsF,KAAKksF,gBAAiB,EAEtBlsF,KAAKmsF,wBAAyB,EAE9BnsF,KAAKosF,iBAAkB,EAEvBpsF,KAAKqsF,gBAAkB,EAEvBrsF,KAAKssF,aAAe,GAEpBtsF,KAAKusF,oBAAsB,GAE3BvsF,KAAKwsF,iBAAmB,IAAI,GAAA,QAE5BxsF,KAAKysF,oBAAsB,GAAA,aAAa3uD,MAExC99B,KAAK0sF,SAAW,EAEhB1sF,KAAK2sF,SAAW,EAEhB3sF,KAAK4sF,qBAAuB,GAE5B5sF,KAAK6sF,gBAAkB7sF,KAAKwsF,iBAAiBnzB,eAC7Cr5D,KAAK8sF,UAAUjB,GAGnB,gBACI,OAAO7rF,KAAKusF,oBAGhB,OAAOjG,GACH,GAAItmF,KAAKqmF,aAAeC,IAAetmF,KAAKqmF,YACxC,MAAMjlF,MAAM,4DAEhBpB,KAAK+sF,qBACLzG,EAAW5gE,YAAYgM,UAAUrb,IA1DhB,+CA2DjBrW,KAAKqmF,YAAcC,EACnBtmF,KAAKgtF,aAAe1G,EAAW5gE,YAC/B1lB,KAAKqpF,MAAQ/C,EAAWa,eACxBnnF,KAAK2xE,aAAc,EACnB3xE,KAAKitF,kBAAmB,EACxBjtF,KAAKktF,cAAgB,KACrBltF,KAAKysF,oBAAoBnvD,cACzBt9B,KAAKysF,oBAAsBzsF,KAAKogF,eAAe77B,SAAS5kB,UAAU,KAI9D3/B,KAAKitF,kBAAmB,EACxBjtF,KAAKqN,UAiBb,QAEI,GAAIrN,KAAK2xE,cAAgB3xE,KAAKi2D,UAAU/F,UACpC,OAKJ,IAAKlwD,KAAKitF,kBAAoBjtF,KAAKosF,iBAAmBpsF,KAAKktF,cAEvD,YADAltF,KAAKmtF,sBAGTntF,KAAKotF,qBACLptF,KAAKqtF,6BACLrtF,KAAKstF,0BAILttF,KAAKutF,cAAgBvtF,KAAKwtF,2BAC1BxtF,KAAKytF,YAAcztF,KAAK0tF,iBACxB1tF,KAAK2tF,aAAe3tF,KAAKqpF,MAAMhmB,wBAC/B,MAAMuqB,EAAa5tF,KAAKytF,YAClBvG,EAAclnF,KAAK2tF,aACnBE,EAAe7tF,KAAKutF,cAEpBO,EAAe,GAErB,IAAIC,EAGJ,IAAK,IAAI9zC,KAAOj6C,KAAKusF,oBAAqB,CAEtC,IAAIyB,EAAchuF,KAAKiuF,gBAAgBL,EAAY3zC,GAI/Ci0C,EAAeluF,KAAKmuF,iBAAiBH,EAAa9G,EAAajtC,GAE/Dm0C,EAAapuF,KAAKquF,eAAeH,EAAchH,EAAa2G,EAAc5zC,GAE9E,GAAIm0C,EAAWE,2BAGX,OAFAtuF,KAAKgsF,WAAY,OACjBhsF,KAAKuuF,eAAet0C,EAAK+zC,GAKzBhuF,KAAKwuF,8BAA8BJ,EAAYF,EAAcL,GAG7DC,EAAartF,KAAK,CACd+G,SAAUyyC,EACV6b,OAAQk4B,EACR9G,YAAAA,EACAuH,gBAAiBzuF,KAAK0uF,0BAA0BV,EAAa/zC,OAOhE8zC,GAAYA,EAASK,WAAWO,YAAcP,EAAWO,eAC1DZ,EAAW,CAAEK,WAAAA,EAAYF,aAAAA,EAAcF,YAAAA,EAAaxmF,SAAUyyC,EAAKitC,YAAAA,IAK3E,GAAI4G,EAAa5qF,OAAQ,CACrB,IAAI0rF,EAAU,KACVC,GAAa,EACjB,IAAK,MAAMC,KAAOhB,EAAc,CAC5B,MAAMiB,EAAQD,EAAIL,gBAAgBhrB,MAAQqrB,EAAIL,gBAAgB9qB,QAAUmrB,EAAItnF,SAASwnF,QAAU,GAC3FD,EAAQF,IACRA,EAAYE,EACZH,EAAUE,GAKlB,OAFA9uF,KAAKgsF,WAAY,OACjBhsF,KAAKuuF,eAAeK,EAAQpnF,SAAUonF,EAAQ94B,QAKlD,GAAI91D,KAAKisF,SAIL,OAFAjsF,KAAKgsF,WAAY,OACjBhsF,KAAKuuF,eAAeR,EAASvmF,SAAUumF,EAASC,aAKpDhuF,KAAKuuF,eAAeR,EAASvmF,SAAUumF,EAASC,aAEpD,SACIhuF,KAAKotF,qBACLptF,KAAKktF,cAAgB,KACrBltF,KAAKivF,oBAAsB,KAC3BjvF,KAAKysF,oBAAoBnvD,cAG7B,UACQt9B,KAAK2xE,cAKL3xE,KAAKgtF,cACLkC,GAAalvF,KAAKgtF,aAAan/E,MAAO,CAClC61D,IAAK,GACLF,KAAM,GACNO,MAAO,GACPE,OAAQ,GACRN,OAAQ,GACRF,MAAO,GACP0rB,WAAY,GACZC,eAAgB,KAGpBpvF,KAAKqpF,OACLrpF,KAAKqtF,6BAELrtF,KAAKqmF,aACLrmF,KAAKqmF,YAAY3gE,YAAYgM,UAAUE,OAlN1B,+CAoNjB5xB,KAAK00C,SACL10C,KAAKwsF,iBAAiBluD,WACtBt+B,KAAKqmF,YAAcrmF,KAAKgtF,aAAe,KACvChtF,KAAK2xE,aAAc,GAOvB,sBACI,IAAK3xE,KAAK2xE,eAAiB3xE,KAAKi2D,WAAaj2D,KAAKi2D,UAAU/F,WAAY,CACpElwD,KAAKytF,YAAcztF,KAAK0tF,iBACxB1tF,KAAK2tF,aAAe3tF,KAAKqpF,MAAMhmB,wBAC/BrjE,KAAKutF,cAAgBvtF,KAAKwtF,2BAC1B,MAAM6B,EAAervF,KAAKktF,eAAiBltF,KAAKusF,oBAAoB,GAC9DyB,EAAchuF,KAAKiuF,gBAAgBjuF,KAAKytF,YAAa4B,GAC3DrvF,KAAKuuF,eAAec,EAAcrB,IAQ1C,yBAAyBsB,GAErB,OADAtvF,KAAKssF,aAAegD,EACbtvF,KAMX,cAAcw6E,GAQV,OAPAx6E,KAAKusF,oBAAsB/R,GAGoB,IAA3CA,EAAUtuE,QAAQlM,KAAKktF,iBACvBltF,KAAKktF,cAAgB,MAEzBltF,KAAK+sF,qBACE/sF,KAMX,mBAAmBuvF,GAEf,OADAvvF,KAAKqsF,gBAAkBkD,EAChBvvF,KAGX,uBAAuBwvF,GAAqB,GAExC,OADAxvF,KAAKmsF,uBAAyBqD,EACvBxvF,KAGX,kBAAkByvF,GAAgB,GAE9B,OADAzvF,KAAKksF,eAAiBuD,EACfzvF,KAGX,SAAS0vF,GAAU,GAEf,OADA1vF,KAAKisF,SAAWyD,EACT1vF,KAQX,mBAAmB2vF,GAAW,GAE1B,OADA3vF,KAAKosF,gBAAkBuD,EAChB3vF,KASX,UAAU81D,GAEN,OADA91D,KAAK61D,QAAUC,EACR91D,KAMX,mBAAmBiG,GAEf,OADAjG,KAAK0sF,SAAWzmF,EACTjG,KAMX,mBAAmBiG,GAEf,OADAjG,KAAK2sF,SAAW1mF,EACTjG,KAUX,sBAAsByM,GAElB,OADAzM,KAAK4vF,yBAA2BnjF,EACzBzM,KAKX,gBAAgB4tF,EAAY3zC,GACxB,IAAIzd,EAWA0mC,EAVJ,GAAmB,UAAfjpB,EAAIguC,QAGJzrD,EAAIoxD,EAAWpqB,KAAQoqB,EAAWnqB,MAAQ,MAEzC,CACD,MAAMosB,EAAS7vF,KAAK8vF,SAAWlC,EAAW7pB,MAAQ6pB,EAAWpqB,KACvDusB,EAAO/vF,KAAK8vF,SAAWlC,EAAWpqB,KAAOoqB,EAAW7pB,MAC1DvnC,EAAmB,SAAfyd,EAAIguC,QAAqB4H,EAASE,EAS1C,OALI7sB,EADe,UAAfjpB,EAAIiuC,QACA0F,EAAWlqB,IAAOkqB,EAAWjqB,OAAS,EAGvB,OAAf1pB,EAAIiuC,QAAmB0F,EAAWlqB,IAAMkqB,EAAW3pB,OAEpD,CAAEznC,EAAAA,EAAG0mC,EAAAA,GAMhB,iBAAiB8qB,EAAa9G,EAAajtC,GAGvC,IAAI+1C,EAUAC,EAQJ,OAhBID,EADgB,UAAhB/1C,EAAIkuC,UACajB,EAAYzjB,MAAQ,EAEf,UAAjBxpB,EAAIkuC,SACOnoF,KAAK8vF,UAAY5I,EAAYzjB,MAAQ,EAGrCzjE,KAAK8vF,SAAW,GAAK5I,EAAYzjB,MAIjDwsB,EADgB,UAAhBh2C,EAAImuC,UACalB,EAAYvjB,OAAS,EAGN,OAAhB1pB,EAAImuC,SAAoB,GAAKlB,EAAYvjB,OAGtD,CACHnnC,EAAGwxD,EAAYxxD,EAAIwzD,EACnB9sB,EAAG8qB,EAAY9qB,EAAI+sB,GAI3B,eAAeC,EAAOlI,EAASnC,EAAUr+E,GACrC,IAAI,EAAEg1B,EAAC,EAAE0mC,GAAMgtB,EACX/rB,EAAUnkE,KAAKmwF,WAAW3oF,EAAU,KACpC48D,EAAUpkE,KAAKmwF,WAAW3oF,EAAU,KAEpC28D,IACA3nC,GAAK2nC,GAELC,IACAlB,GAAKkB,GAGT,IAEIgsB,EAAc,EAAIltB,EAClBmtB,EAAkBntB,EAAI8kB,EAAQrkB,OAAUkiB,EAASliB,OAEjD2sB,EAAetwF,KAAKuwF,mBAAmBvI,EAAQvkB,MALhC,EAAIjnC,EACFA,EAAIwrD,EAAQvkB,MAASoiB,EAASpiB,OAK/C+sB,EAAgBxwF,KAAKuwF,mBAAmBvI,EAAQrkB,OAAQysB,EAAaC,GACrE1B,EAAc2B,EAAeE,EACjC,MAAO,CACH7B,YAAAA,EACAL,2BAA6BtG,EAAQvkB,MAAQukB,EAAQrkB,SAAYgrB,EACjE8B,yBAA0BD,IAAkBxI,EAAQrkB,OACpD+sB,2BAA4BJ,GAAgBtI,EAAQvkB,OAS5D,8BAA8BqrB,EAAKoB,EAAOrK,GACtC,GAAI7lF,KAAKmsF,uBAAwB,CAC7B,MAAMwE,EAAkB9K,EAAS5hB,OAASisB,EAAMhtB,EAC1C0tB,EAAiB/K,EAAS9hB,MAAQmsB,EAAM1zD,EACxCk/C,EAAYmV,GAAc7wF,KAAKqmF,YAAYyK,YAAYpV,WACvDuP,EAAW4F,GAAc7wF,KAAKqmF,YAAYyK,YAAY7F,UAGtD8F,EAAgBjC,EAAI4B,4BACT,MAAZzF,GAAoBA,GAAY2F,EACrC,OAJoB9B,EAAI2B,0BACN,MAAb/U,GAAqBA,GAAaiV,IAGjBI,EAE1B,OAAO,EAaX,qBAAqBv9D,EAAOw0D,EAASrR,GAIjC,GAAI32E,KAAKivF,qBAAuBjvF,KAAKosF,gBACjC,MAAO,CACH5vD,EAAGhJ,EAAMgJ,EAAIx8B,KAAKivF,oBAAoBzyD,EACtC0mC,EAAG1vC,EAAM0vC,EAAIljE,KAAKivF,oBAAoB/rB,GAG9C,MAAM2iB,EAAW7lF,KAAKutF,cAGhByD,EAAgBvoF,KAAKC,IAAI8qB,EAAMgJ,EAAIwrD,EAAQvkB,MAAQoiB,EAAS9hB,MAAO,GACnEktB,EAAiBxoF,KAAKC,IAAI8qB,EAAM0vC,EAAI8kB,EAAQrkB,OAASkiB,EAAS5hB,OAAQ,GACtEitB,EAAczoF,KAAKC,IAAIm9E,EAASniB,IAAMiT,EAAejT,IAAMlwC,EAAM0vC,EAAG,GACpEiuB,EAAe1oF,KAAKC,IAAIm9E,EAASriB,KAAOmT,EAAenT,KAAOhwC,EAAMgJ,EAAG,GAE7E,IAAI40D,EAAQ,EACRC,EAAQ,EAiBZ,OAZID,EADApJ,EAAQvkB,OAASoiB,EAASpiB,MAClB0tB,IAAiBH,EAGjBx9D,EAAMgJ,EAAIx8B,KAAKqsF,gBAAmBxG,EAASriB,KAAOmT,EAAenT,KAAQhwC,EAAMgJ,EAAI,EAG3F60D,EADArJ,EAAQrkB,QAAUkiB,EAASliB,OACnButB,IAAgBD,EAGhBz9D,EAAM0vC,EAAIljE,KAAKqsF,gBAAmBxG,EAASniB,IAAMiT,EAAejT,IAAOlwC,EAAM0vC,EAAI,EAE7FljE,KAAKivF,oBAAsB,CAAEzyD,EAAG40D,EAAOluB,EAAGmuB,GACnC,CACH70D,EAAGhJ,EAAMgJ,EAAI40D,EACbluB,EAAG1vC,EAAM0vC,EAAImuB,GAQrB,eAAe7pF,EAAUwmF,GAYrB,GAXAhuF,KAAKsxF,oBAAoB9pF,GACzBxH,KAAKuxF,yBAAyBvD,EAAaxmF,GAC3CxH,KAAKwxF,sBAAsBxD,EAAaxmF,GACpCA,EAASkgF,YACT1nF,KAAKyxF,iBAAiBjqF,EAASkgF,YAGnC1nF,KAAKktF,cAAgB1lF,EAIjBxH,KAAKwsF,iBAAiBnlB,UAAUnkE,OAAQ,CACxC,MAAMqlF,EAA2BvoF,KAAK0xF,uBAChCC,EAAc,IAAItJ,GAA+B7gF,EAAU+gF,GACjEvoF,KAAKwsF,iBAAiB16E,KAAK6/E,GAE/B3xF,KAAKitF,kBAAmB,EAG5B,oBAAoBzlF,GAChB,IAAKxH,KAAK4vF,yBACN,OAEJ,MAAM3wF,EAAWe,KAAKgtF,aAAaz/E,iBAAiBvN,KAAK4vF,0BACzD,IAAIgC,EACAC,EAAUrqF,EAAS4gF,SAEnBwJ,EADsB,WAAtBpqF,EAAS2gF,SACC,SAELnoF,KAAK8vF,SACsB,UAAtBtoF,EAAS2gF,SAAuB,QAAU,OAGpB,UAAtB3gF,EAAS2gF,SAAuB,OAAS,QAEvD,IAAK,IAAIrrF,EAAI,EAAGA,EAAImC,EAASiE,OAAQpG,IACjCmC,EAASnC,GAAG+Q,MAAMikF,gBAAkB,GAAGF,KAAWC,IAS1D,0BAA0B/7B,EAAQtuD,GAC9B,MAAMq+E,EAAW7lF,KAAKutF,cAChBwE,EAAQ/xF,KAAK8vF,SACnB,IAAInsB,EAAQD,EAAKO,EAgCbR,EAAOD,EAAMO,EA/BjB,GAA0B,QAAtBv8D,EAAS4gF,SAET1kB,EAAM5N,EAAOoN,EACbS,EAASkiB,EAASliB,OAASD,EAAM1jE,KAAKqsF,qBAErC,GAA0B,WAAtB7kF,EAAS4gF,SAIdnkB,EAAS4hB,EAASliB,OAAS7N,EAAOoN,EAA2B,EAAvBljE,KAAKqsF,gBAC3C1oB,EAASkiB,EAASliB,OAASM,EAASjkE,KAAKqsF,oBAExC,CAKD,MAAM2F,EAAiCvpF,KAAKS,IAAI28E,EAAS5hB,OAASnO,EAAOoN,EAAI2iB,EAASniB,IAAK5N,EAAOoN,GAC5F+uB,EAAiBjyF,KAAK+rF,qBAAqBpoB,OACjDA,EAA0C,EAAjCquB,EACTtuB,EAAM5N,EAAOoN,EAAI8uB,EACbruB,EAASsuB,IAAmBjyF,KAAKitF,mBAAqBjtF,KAAKksF,iBAC3DxoB,EAAM5N,EAAOoN,EAAK+uB,EAAiB,GAU3C,GAH2D,QAAtBzqF,EAAS2gF,WAAuB4J,GAC1C,UAAtBvqF,EAAS2gF,UAAwB4J,EAGlChuB,EAAQ8hB,EAASpiB,MAAQ3N,EAAOt5B,EAAIx8B,KAAKqsF,gBACzC5oB,EAAQ3N,EAAOt5B,EAAIx8B,KAAKqsF,qBAEvB,GAVuD,UAAtB7kF,EAAS2gF,WAAyB4J,GAC7C,QAAtBvqF,EAAS2gF,UAAsB4J,EAUhCvuB,EAAO1N,EAAOt5B,EACdinC,EAAQoiB,EAAS9hB,MAAQjO,EAAOt5B,MAE/B,CAKD,MAAMw1D,EAAiCvpF,KAAKS,IAAI28E,EAAS9hB,MAAQjO,EAAOt5B,EAAIqpD,EAASriB,KAAM1N,EAAOt5B,GAC5F01D,EAAgBlyF,KAAK+rF,qBAAqBtoB,MAChDA,EAAyC,EAAjCuuB,EACRxuB,EAAO1N,EAAOt5B,EAAIw1D,EACdvuB,EAAQyuB,IAAkBlyF,KAAKitF,mBAAqBjtF,KAAKksF,iBACzD1oB,EAAO1N,EAAOt5B,EAAK01D,EAAgB,GAG3C,MAAO,CAAExuB,IAAKA,EAAKF,KAAMA,EAAMS,OAAQA,EAAQF,MAAOA,EAAON,MAAAA,EAAOE,OAAAA,GASxE,sBAAsB7N,EAAQtuD,GAC1B,MAAMinF,EAAkBzuF,KAAK0uF,0BAA0B54B,EAAQtuD,GAG1DxH,KAAKitF,kBAAqBjtF,KAAKksF,iBAChCuC,EAAgB9qB,OAASl7D,KAAKS,IAAIulF,EAAgB9qB,OAAQ3jE,KAAK+rF,qBAAqBpoB,QACpF8qB,EAAgBhrB,MAAQh7D,KAAKS,IAAIulF,EAAgBhrB,MAAOzjE,KAAK+rF,qBAAqBtoB,QAEtF,MAAM59D,EAAS,GACf,GAAI7F,KAAKmyF,oBACLtsF,EAAO69D,IAAM79D,EAAO29D,KAAO,IAC3B39D,EAAOo+D,OAASp+D,EAAOk+D,MAAQl+D,EAAOslF,UAAYtlF,EAAOqlF,SAAW,GACpErlF,EAAO49D,MAAQ59D,EAAO89D,OAAS,WAE9B,CACD,MAAMwnB,EAAYnrF,KAAKqmF,YAAYyK,YAAY3F,UACzCD,EAAWlrF,KAAKqmF,YAAYyK,YAAY5F,SAC9CrlF,EAAO89D,OAASpU,GAAoBk/B,EAAgB9qB,QACpD99D,EAAO69D,IAAMnU,GAAoBk/B,EAAgB/qB,KACjD79D,EAAOo+D,OAAS1U,GAAoBk/B,EAAgBxqB,QACpDp+D,EAAO49D,MAAQlU,GAAoBk/B,EAAgBhrB,OACnD59D,EAAO29D,KAAOjU,GAAoBk/B,EAAgBjrB,MAClD39D,EAAOk+D,MAAQxU,GAAoBk/B,EAAgB1qB,OAG/Cl+D,EAAOspF,WADe,WAAtB3nF,EAAS2gF,SACW,SAGsB,QAAtB3gF,EAAS2gF,SAAqB,WAAa,aAG/DtiF,EAAOupF,eADe,WAAtB5nF,EAAS4gF,SACe,SAGsB,WAAtB5gF,EAAS4gF,SAAwB,WAAa,aAEtE+C,IACAtlF,EAAOslF,UAAY57B,GAAoB47B,IAEvCD,IACArlF,EAAOqlF,SAAW37B,GAAoB27B,IAG9ClrF,KAAK+rF,qBAAuB0C,EAC5BS,GAAalvF,KAAKgtF,aAAan/E,MAAOhI,GAG1C,0BACIqpF,GAAalvF,KAAKgtF,aAAan/E,MAAO,CAClC61D,IAAK,IACLF,KAAM,IACNO,MAAO,IACPE,OAAQ,IACRN,OAAQ,GACRF,MAAO,GACP0rB,WAAY,GACZC,eAAgB,KAIxB,6BACIF,GAAalvF,KAAKqpF,MAAMx7E,MAAO,CAC3B61D,IAAK,GACLF,KAAM,GACNS,OAAQ,GACRF,MAAO,GACPv8D,SAAU,GACV+8D,UAAW,KAInB,yBAAyBypB,EAAaxmF,GAClC,MAAM3B,EAAS,GACTusF,EAAmBpyF,KAAKmyF,oBACxBE,EAAwBryF,KAAKmsF,uBAC7BnrF,EAAShB,KAAKqmF,YAAYyK,YAChC,GAAIsB,EAAkB,CAClB,MAAMzb,EAAiB32E,KAAKogF,eAAexJ,4BAC3CsY,GAAarpF,EAAQ7F,KAAKsyF,kBAAkB9qF,EAAUwmF,EAAarX,IACnEuY,GAAarpF,EAAQ7F,KAAKuyF,kBAAkB/qF,EAAUwmF,EAAarX,SAGnE9wE,EAAO2B,SAAW,SAOtB,IAAIgrF,EAAkB,GAClBruB,EAAUnkE,KAAKmwF,WAAW3oF,EAAU,KACpC48D,EAAUpkE,KAAKmwF,WAAW3oF,EAAU,KACpC28D,IACAquB,GAAmB,cAAcruB,SAEjCC,IACAouB,GAAmB,cAAcpuB,QAErCv+D,EAAO0+D,UAAYiuB,EAAgBpxE,OAM/BpgB,EAAOmqF,YACHiH,EACAvsF,EAAOslF,UAAY57B,GAAoBvuD,EAAOmqF,WAEzCkH,IACLxsF,EAAOslF,UAAY,KAGvBnqF,EAAOkqF,WACHkH,EACAvsF,EAAOqlF,SAAW37B,GAAoBvuD,EAAOkqF,UAExCmH,IACLxsF,EAAOqlF,SAAW,KAG1BgE,GAAalvF,KAAKqpF,MAAMx7E,MAAOhI,GAGnC,kBAAkB2B,EAAUwmF,EAAarX,GAGrC,IAAI9wE,EAAS,CAAE69D,IAAK,GAAIO,OAAQ,IAC5BiqB,EAAeluF,KAAKmuF,iBAAiBH,EAAahuF,KAAK2tF,aAAcnmF,GACrExH,KAAKgsF,YACLkC,EAAeluF,KAAKyyF,qBAAqBvE,EAAcluF,KAAK2tF,aAAchX,IAE9E,IAAI+b,EAAwB1yF,KAAK8rF,kBAAkB6G,sBAAsBtvB,wBAAwBK,IAiBjG,OAZAwqB,EAAahrB,GAAKwvB,EAGQ,WAAtBlrF,EAAS4gF,SAITviF,EAAOo+D,OADgBjkE,KAAKq3D,UAAUuH,gBAAgBoe,cACjBkR,EAAahrB,EAAIljE,KAAK2tF,aAAahqB,QAAxD,KAGhB99D,EAAO69D,IAAMnU,GAAoB2+B,EAAahrB,GAE3Cr9D,EAGX,kBAAkB2B,EAAUwmF,EAAarX,GAGrC,IASIic,EATA/sF,EAAS,CAAE29D,KAAM,GAAIO,MAAO,IAC5BmqB,EAAeluF,KAAKmuF,iBAAiBH,EAAahuF,KAAK2tF,aAAcnmF,GAwBzE,OAvBIxH,KAAKgsF,YACLkC,EAAeluF,KAAKyyF,qBAAqBvE,EAAcluF,KAAK2tF,aAAchX,IAQ1Eic,EADA5yF,KAAK8vF,SAC2C,QAAtBtoF,EAAS2gF,SAAqB,OAAS,QAGjB,QAAtB3gF,EAAS2gF,SAAqB,QAAU,OAItC,UAA5ByK,EAEA/sF,EAAOk+D,MADe/jE,KAAKq3D,UAAUuH,gBAAgBi0B,aAClB3E,EAAa1xD,EAAIx8B,KAAK2tF,aAAalqB,OAAvD,KAGf59D,EAAO29D,KAAOjU,GAAoB2+B,EAAa1xD,GAE5C32B,EAMX,uBAEI,MAAMitF,EAAe9yF,KAAK0tF,iBACpBqF,EAAgB/yF,KAAKqpF,MAAMhmB,wBAI3B2vB,EAAwBhzF,KAAKssF,aAAazgF,IAAIypE,GACzCA,EAAWc,gBAAgB5vB,cAAc6c,yBAEpD,MAAO,CACH4vB,gBAAiBpM,GAA4BiM,EAAcE,GAC3DE,oBAAqBvM,GAA6BmM,EAAcE,GAChEG,iBAAkBtM,GAA4BkM,EAAeC,GAC7DI,qBAAsBzM,GAA6BoM,EAAeC,IAI1E,mBAAmB9vF,KAAWmwF,GAC1B,OAAOA,EAAU9qF,OAAO,CAAC+qF,EAAcC,IAC5BD,EAAe7qF,KAAKC,IAAI6qF,EAAiB,GACjDrwF,GAGP,2BAMI,MAAMugE,EAAQzjE,KAAKq3D,UAAUuH,gBAAgBi0B,YACvClvB,EAAS3jE,KAAKq3D,UAAUuH,gBAAgBoe,aACxCrG,EAAiB32E,KAAKogF,eAAexJ,4BAC3C,MAAO,CACHlT,IAAKiT,EAAejT,IAAM1jE,KAAKqsF,gBAC/B7oB,KAAMmT,EAAenT,KAAOxjE,KAAKqsF,gBACjCtoB,MAAO4S,EAAenT,KAAOC,EAAQzjE,KAAKqsF,gBAC1CpoB,OAAQ0S,EAAejT,IAAMC,EAAS3jE,KAAKqsF,gBAC3C5oB,MAAOA,EAAS,EAAIzjE,KAAKqsF,gBACzB1oB,OAAQA,EAAU,EAAI3jE,KAAKqsF,iBAInC,SACI,MAA2C,QAApCrsF,KAAKqmF,YAAY2E,eAG5B,oBACI,OAAQhrF,KAAKmsF,wBAA0BnsF,KAAKgsF,UAGhD,WAAWxkF,EAAUgsF,GACjB,MAAa,MAATA,EAG2B,MAApBhsF,EAAS28D,QAAkBnkE,KAAK0sF,SAAWllF,EAAS28D,QAEpC,MAApB38D,EAAS48D,QAAkBpkE,KAAK2sF,SAAWnlF,EAAS48D,QAG/D,qBACI,IAAKpkE,KAAKusF,oBAAoBrpF,OAC1B,MAAM9B,MAAM,yEAIhBpB,KAAKusF,oBAAoBpsF,QAAQszF,IAC7BhL,GAA2B,UAAWgL,EAAKxL,SAC3CO,GAAyB,UAAWiL,EAAKvL,SACzCO,GAA2B,WAAYgL,EAAKtL,UAC5CK,GAAyB,WAAYiL,EAAKrL,YAIlD,iBAAiBqD,GACTzrF,KAAKqpF,OACL/5B,GAAYm8B,GAAYtrF,QAAQwrF,IACX,KAAbA,IAAoE,IAAjD3rF,KAAK4sF,qBAAqB1gF,QAAQy/E,KACrD3rF,KAAK4sF,qBAAqBnsF,KAAKkrF,GAC/B3rF,KAAKqpF,MAAM33D,UAAUrb,IAAIs1E,MAMzC,qBACQ3rF,KAAKqpF,QACLrpF,KAAK4sF,qBAAqBzsF,QAAQwrF,IAC9B3rF,KAAKqpF,MAAM33D,UAAUE,OAAO+5D,KAEhC3rF,KAAK4sF,qBAAuB,IAIpC,iBACI,MAAM92B,EAAS91D,KAAK61D,QACpB,GAAIC,aAAkB,EAAA,WAClB,OAAOA,EAAOtP,cAAc6c,wBAGhC,GAAIvN,aAAkBlpD,QAClB,OAAOkpD,EAAOuN,wBAElB,MAAMI,EAAQ3N,EAAO2N,OAAS,EACxBE,EAAS7N,EAAO6N,QAAU,EAEhC,MAAO,CACHD,IAAK5N,EAAOoN,EACZe,OAAQnO,EAAOoN,EAAIS,EACnBH,KAAM1N,EAAOt5B,EACbunC,MAAOjO,EAAOt5B,EAAIinC,EAClBE,OAAAA,EACAF,MAAAA,IAKZ,SAASyrB,GAAat/E,EAAa4vB,GAC/B,IAAK,IAAInhC,KAAOmhC,EACRA,EAAO7gC,eAAeN,KACtBuR,EAAYvR,GAAOmhC,EAAOnhC,IAGlC,OAAOuR,EAMX,SAASihF,GAAc5+E,GACnB,GAAqB,iBAAVA,GAA+B,MAATA,EAAe,CAC5C,MAAOlU,EAAO21F,GAASzhF,EAAM8B,MAAM63E,IACnC,OAAS8H,GAAmB,OAAVA,EAAsC,KAApB1kF,WAAWjR,GAEnD,OAAOkU,GAAS,KAmBpB,MAAM0hF,GACF,YAAYC,EAAWC,EAAYhI,EAAa/H,EAAeriF,EAAUohE,EAAUixB,GAE/E9zF,KAAKusF,oBAAsB,GAK3BvsF,KAAK8pF,kBAAoB,IAAI,GAAkC+B,EAAa/H,EAAeriF,EAAUohE,EAAUixB,GAC1GC,wBAAuB,GACvBC,UAAS,GACTC,mBAAmB,GACxBj0F,KAAKk0F,qBAAqBN,EAAWC,GAGzC,aACI,MAA2C,QAApC7zF,KAAKqmF,YAAY2E,eAG5B,uBACI,OAAOhrF,KAAK8pF,kBAAkB+C,gBAGlC,gBACI,OAAO7sF,KAAKusF,oBAGhB,OAAOjG,GACHtmF,KAAKqmF,YAAcC,EACnBtmF,KAAK8pF,kBAAkBz0C,OAAOixC,GAC1BtmF,KAAKm0F,aACL7N,EAAW8N,aAAap0F,KAAKm0F,YAC7Bn0F,KAAKm0F,WAAa,MAI1B,UACIn0F,KAAK8pF,kBAAkBrlC,UAG3B,SACIzkD,KAAK8pF,kBAAkBp1C,SAO3B,QACI10C,KAAK8pF,kBAAkBz8E,QAO3B,0BACIrN,KAAK8pF,kBAAkBqD,sBAO3B,yBAAyBmC,GACrBtvF,KAAK8pF,kBAAkBuK,yBAAyB/E,GAOpD,qBAAqBsE,EAAWC,EAAY1vB,EAASC,GACjD,MAAM58D,EAAW,IAAIugF,GAAuB6L,EAAWC,EAAY1vB,EAASC,GAG5E,OAFApkE,KAAKusF,oBAAoB9rF,KAAK+G,GAC9BxH,KAAK8pF,kBAAkBwK,cAAct0F,KAAKusF,qBACnCvsF,KAMX,cAAc6+D,GAUV,OANI7+D,KAAKqmF,YACLrmF,KAAKqmF,YAAY+N,aAAav1B,GAG9B7+D,KAAKm0F,WAAat1B,EAEf7+D,KAMX,YAAYiG,GAER,OADAjG,KAAK8pF,kBAAkByK,mBAAmBtuF,GACnCjG,KAMX,YAAYiG,GAER,OADAjG,KAAK8pF,kBAAkB0K,mBAAmBvuF,GACnCjG,KAQX,mBAAmB2vF,GAEf,OADA3vF,KAAK8pF,kBAAkB2K,mBAAmB9E,GACnC3vF,KAMX,cAAcw6E,GAGV,OAFAx6E,KAAKusF,oBAAsB/R,EAAUj8D,QACrCve,KAAK8pF,kBAAkBwK,cAAct0F,KAAKusF,qBACnCvsF,KAMX,UAAU81D,GAEN,OADA91D,KAAK8pF,kBAAkBgD,UAAUh3B,GAC1B91D,MAmBf,MAAM00F,GACF,cACI10F,KAAK20F,aAAe,SACpB30F,KAAK40F,WAAa,GAClB50F,KAAK60F,cAAgB,GACrB70F,KAAK80F,YAAc,GACnB90F,KAAK+0F,aAAe,GACpB/0F,KAAKg1F,YAAc,GACnBh1F,KAAKi1F,gBAAkB,GACvBj1F,KAAKk1F,OAAS,GACdl1F,KAAKm1F,QAAU,GAEnB,OAAO7O,GACH,MAAMtlF,EAASslF,EAAWwK,YAC1B9wF,KAAKqmF,YAAcC,EACftmF,KAAKk1F,SAAWl0F,EAAOyiE,OACvB6iB,EAAW8O,WAAW,CAAE3xB,MAAOzjE,KAAKk1F,SAEpCl1F,KAAKm1F,UAAYn0F,EAAO2iE,QACxB2iB,EAAW8O,WAAW,CAAEzxB,OAAQ3jE,KAAKm1F,UAEzC7O,EAAW5gE,YAAYgM,UAAUrb,IA5BpB,8BA6BbrW,KAAK2xE,aAAc,EAMvB,IAAI5zE,EAAQ,IAIR,OAHAiC,KAAK60F,cAAgB,GACrB70F,KAAK40F,WAAa72F,EAClBiC,KAAKg1F,YAAc,aACZh1F,KAMX,KAAKjC,EAAQ,IAIT,OAHAiC,KAAK+0F,aAAe,GACpB/0F,KAAK80F,YAAc/2F,EACnBiC,KAAKi1F,gBAAkB,aAChBj1F,KAMX,OAAOjC,EAAQ,IAIX,OAHAiC,KAAK40F,WAAa,GAClB50F,KAAK60F,cAAgB92F,EACrBiC,KAAKg1F,YAAc,WACZh1F,KAMX,MAAMjC,EAAQ,IAIV,OAHAiC,KAAK80F,YAAc,GACnB90F,KAAK+0F,aAAeh3F,EACpBiC,KAAKi1F,gBAAkB,WAChBj1F,KAQX,MAAMjC,EAAQ,IAOV,OANIiC,KAAKqmF,YACLrmF,KAAKqmF,YAAY+O,WAAW,CAAE3xB,MAAO1lE,IAGrCiC,KAAKk1F,OAASn3F,EAEXiC,KAQX,OAAOjC,EAAQ,IAOX,OANIiC,KAAKqmF,YACLrmF,KAAKqmF,YAAY+O,WAAW,CAAEzxB,OAAQ5lE,IAGtCiC,KAAKm1F,QAAUp3F,EAEZiC,KAQX,mBAAmBiG,EAAS,IAGxB,OAFAjG,KAAKwjE,KAAKv9D,GACVjG,KAAKi1F,gBAAkB,SAChBj1F,KAQX,iBAAiBiG,EAAS,IAGtB,OAFAjG,KAAK0jE,IAAIz9D,GACTjG,KAAKg1F,YAAc,SACZh1F,KAMX,QAII,IAAKA,KAAKqmF,cAAgBrmF,KAAKqmF,YAAYjV,cACvC,OAEJ,MAAMvrE,EAAS7F,KAAKqmF,YAAYc,eAAet5E,MACzCwnF,EAAer1F,KAAKqmF,YAAY3gE,YAAY7X,MAC5C7M,EAAShB,KAAKqmF,YAAYyK,aAC1B,MAAErtB,EAAK,OAAEE,EAAM,SAAEunB,EAAQ,UAAEC,GAAcnqF,EACzCs0F,IAAuC,SAAV7xB,GAA8B,UAAVA,GACjDynB,GAAyB,SAAbA,GAAoC,UAAbA,GACnCqK,IAAsC,SAAX5xB,GAAgC,UAAXA,GAChDwnB,GAA2B,SAAdA,GAAsC,UAAdA,GAC3CtlF,EAAO2B,SAAWxH,KAAK20F,aACvB9uF,EAAO2vF,WAAaF,EAA4B,IAAMt1F,KAAK80F,YAC3DjvF,EAAO4vF,UAAYF,EAA0B,IAAMv1F,KAAK40F,WACxD/uF,EAAO6vF,aAAe11F,KAAK60F,cAC3BhvF,EAAO8vF,YAAc31F,KAAK+0F,aACtBO,EACAD,EAAajG,eAAiB,aAEA,WAAzBpvF,KAAKi1F,gBACVI,EAAajG,eAAiB,SAEkB,QAA3CpvF,KAAKqmF,YAAYyK,YAAY98B,UAKL,eAAzBh0D,KAAKi1F,gBACLI,EAAajG,eAAiB,WAEA,aAAzBpvF,KAAKi1F,kBACVI,EAAajG,eAAiB,cAIlCiG,EAAajG,eAAiBpvF,KAAKi1F,gBAEvCI,EAAalG,WAAaoG,EAA0B,aAAev1F,KAAKg1F,YAM5E,UACI,GAAIh1F,KAAK2xE,cAAgB3xE,KAAKqmF,YAC1B,OAEJ,MAAMxgF,EAAS7F,KAAKqmF,YAAYc,eAAet5E,MACzC+a,EAAS5oB,KAAKqmF,YAAY3gE,YAC1B2vE,EAAezsE,EAAO/a,MAC5B+a,EAAO8I,UAAUE,OArLJ,8BAsLbyjE,EAAajG,eAAiBiG,EAAalG,WAAatpF,EAAO4vF,UAC3D5vF,EAAO6vF,aAAe7vF,EAAO2vF,WAAa3vF,EAAO8vF,YAAc9vF,EAAO2B,SAAW,GACrFxH,KAAKqmF,YAAc,KACnBrmF,KAAK2xE,aAAc,GAY3B,IAAI,GAAuC,MACvC,MAAMikB,EACF,YAAYxV,EAAgB/oB,EAAWpB,EAAW61B,GAC9C9rF,KAAKogF,eAAiBA,EACtBpgF,KAAKq3D,UAAYA,EACjBr3D,KAAKi2D,UAAYA,EACjBj2D,KAAK8rF,kBAAoBA,EAK7B,SACI,OAAO,IAAI4I,GAUf,YAAYjnB,EAAYmmB,EAAWC,GAC/B,OAAO,IAAIF,GAA0BC,EAAWC,EAAYpmB,EAAYztE,KAAKogF,eAAgBpgF,KAAKq3D,UAAWr3D,KAAKi2D,UAAWj2D,KAAK8rF,mBAMtI,oBAAoBh2B,GAChB,OAAO,IAAI,GAAkCA,EAAQ91D,KAAKogF,eAAgBpgF,KAAKq3D,UAAWr3D,KAAKi2D,UAAWj2D,KAAK8rF,oBAkBvH,OAfJ8J,EAAuBpzF,UAAO,SAAwCxE,GAAK,OAAO,IAAKA,GAAK43F,GAAwB,EAAA,sBAAgB,IAAuB,EAAA,sBAAgB,EAAA,UAAW,EAAA,sBAAgB,IAAkB,EAAA,sBAAgB,MACpOA,EAAuBnzF,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA4C,OAAO,IAAIk2F,EAAuB,OAAA,EAAA,sBAAA,CAAS,IAAgB,OAAA,EAAA,sBAAA,CAAS,EAAA,UAAW,OAAA,EAAA,sBAAA,CAAS,IAAW,OAAA,EAAA,sBAAA,CAAS,MAAuBlzF,MAAOkzF,EAAwBn2F,WAAY,SAchRm2F,GAhDgC,GA2DvCC,GAAe,EAWf,GAAwB,MACxB,MAAMC,EACF,YAEAC,EAAkBjK,EAAmBxZ,EAA2B0jB,EAAkB1M,EAAqB2M,EAAWxjC,EAAS4E,EAAW6+B,EAEtIlpB,GACIhtE,KAAK+1F,iBAAmBA,EACxB/1F,KAAK8rF,kBAAoBA,EACzB9rF,KAAKsyE,0BAA4BA,EACjCtyE,KAAKg2F,iBAAmBA,EACxBh2F,KAAKspF,oBAAsBA,EAC3BtpF,KAAKi2F,UAAYA,EACjBj2F,KAAKyyD,QAAUA,EACfzyD,KAAKq3D,UAAYA,EACjBr3D,KAAKk2F,gBAAkBA,EACvBl2F,KAAKgtE,UAAYA,EAOrB,OAAOhsE,GACH,MAAMmwE,EAAOnxE,KAAKm2F,qBACZC,EAAOp2F,KAAKq2F,mBAAmBllB,GAC/BmlB,EAAet2F,KAAKu2F,oBAAoBH,GACxCI,EAAgB,IAAIhP,GAAcxmF,GAExC,OADAw1F,EAAcxiC,UAAYwiC,EAAcxiC,WAAah0D,KAAKk2F,gBAAgBn4F,MACnE,IAAI,GAAWu4F,EAAcnlB,EAAMilB,EAAMI,EAAex2F,KAAKyyD,QAASzyD,KAAKspF,oBAAqBtpF,KAAKq3D,UAAWr3D,KAAKgtE,WAOhI,WACI,OAAOhtE,KAAKg2F,iBAMhB,mBAAmB7kB,GACf,MAAMilB,EAAOp2F,KAAKq3D,UAAU31D,cAAc,OAI1C,OAHA00F,EAAK/xE,GAAK,eAAewxE,KACzBO,EAAK1kE,UAAUrb,IAAI,oBACnB86D,EAAKjvE,YAAYk0F,GACVA,EAOX,qBACI,MAAMjlB,EAAOnxE,KAAKq3D,UAAU31D,cAAc,OAE1C,OADA1B,KAAK8rF,kBAAkB6G,sBAAsBzwF,YAAYivE,GAClDA,EAOX,oBAAoBilB,GAMhB,OAHKp2F,KAAKuyE,UACNvyE,KAAKuyE,QAAUvyE,KAAKi2F,UAAUt4F,IAAI,EAAA,iBAE/B,IAAIy0E,GAAgBgkB,EAAMp2F,KAAKsyE,0BAA2BtyE,KAAKuyE,QAASvyE,KAAKi2F,UAAWj2F,KAAKq3D,YAyB5G,OAtBJy+B,EAAQtzF,UAAO,SAAyBxE,GAAK,OAAO,IAAKA,GAAK83F,GAAS,EAAA,sBAAgB,IAAwB,EAAA,sBAAgB,IAAmB,EAAA,sBAAgB,EAAA,0BAAkC,EAAA,sBAAgB,IAAyB,EAAA,sBAAgB,IAA4B,EAAA,sBAAgB,EAAA,UAAkB,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,EAAA,UAAW,EAAA,sBAAgB,IAAwB,EAAA,sBAAgB,EAAA,SAAiB,KAC/bA,EAAQrzF,WAAQ,EAAA,gCAA0B,CAAEC,MAAOozF,EAASp2F,QAAS,SAAU1B,GAAK,OAAO83F,EAAQtzF,UAAKxE,MAqB7F83F,GAhGiB,GA2G5B,MAgYMW,GAAiD,CACnD3xF,QAtW0C,IAAI,EAAA,eAAe,yCAuW7DM,KAAM,CAAC,IACPD,WAPJ,SAAgE6iF,GAC5D,MAAO,IAAMA,EAAQ+N,iBAAiBxO,eAgB1C,IAAI,GAA8B,MAC9B,MAAMmP,GAoBN,OAlBJA,EAAcrxF,UAAO,EAAA,8BAAwB,CAAE1D,KAAM+0F,IACrDA,EAAcpxF,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAK04F,IAAqB7xF,UAAW,CACrI,GACA4xF,IACDlxF,QAAS,CAAC,CAAC,GAAY,GAAc,IAAkB,MAcnDmxF,GArBuB,GC33FlC,MAAM,GAAM,CAAC,aAAc,IACrB,GAAM,CAAC,KAMPC,GAAyB,CAC3B,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAIJ,MAAMC,GACF,YAAYpkC,GACRxyD,KAAKwyD,YAAcA,GAG3B,MAAMqkC,GAAsBp2B,GAAWF,GAAcO,GAAmB81B,MAIxE,IAAI,GAA0B,MAC1B,MAAME,UAAkBD,GACpB,YAAYppB,EAAY/P,EAAe4I,GACnClmD,MAAMqtD,GACNztE,KAAK09D,cAAgBA,EACrB19D,KAAKsmE,eAAiBA,EAEtBtmE,KAAK+2F,cAAgB/2F,KAAKg3F,mBAAmB,UAAW,gBAExDh3F,KAAKi3F,aAAej3F,KAAKg3F,mBAAmB,mBAG5C,IAAK,MAAM1pB,KAAQqpB,GACX32F,KAAKg3F,mBAAmB1pB,IACxBttE,KAAKk3F,kBAAkBxlE,UAAUrb,IAAIi3D,GAM7CG,EAAWjnB,cAAc90B,UAAUrb,IAAI,mBACnCrW,KAAK+2F,gBACL/2F,KAAK2gE,MA/Cc,UAkD3B,kBACI3gE,KAAK09D,cAAcG,QAAQ79D,KAAKwyD,aAAa,GAEjD,cACIxyD,KAAK09D,cAAcf,eAAe38D,KAAKwyD,aAG3C,MAAMsD,EAAS,UAAW/1D,GACtBC,KAAK09D,cAAcy5B,SAASn3F,KAAKk3F,kBAAmBphC,EAAQ/1D,GAEhE,kBACI,OAAOC,KAAKwyD,YAAYhM,cAE5B,oBACI,OAAOxmD,KAAK+4E,eAAiB/4E,KAAK0L,SAGtC,sBAAsB0gE,GAClB,OAAOA,EAAWn1D,KAAKmgF,GAAap3F,KAAKk3F,kBAAkBhhC,aAAakhC,KA2DhF,OAxDJN,EAAUt0F,UAAO,SAA2BxE,GAAK,OAAO,IAAKA,GAAK84F,GAAW,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,IAAsB,EAAA,+BAAyBl7D,GAAuB,KACzNk7D,EAAU9uD,UAAO,EAAA,+BAAyB,CAAErmC,KAAMm1F,EAAW3yF,UAAW,CAAC,CAAC,SAAU,aAAc,IAAK,CAAC,SAAU,oBAAqB,IAAK,CAAC,SAAU,kBAAmB,IAAK,CAAC,SAAU,UAAW,IAAK,CAAC,SAAU,eAAgB,IAAK,CAAC,SAAU,qBAAsB,IAAK,CAAC,SAAU,kBAAmB,KAAMo3E,UAAW,SAAyBpzC,EAAIrsB,GAGpV,IAAI0sC,EAHgW,EAALrgB,GAC/V,EAAA,yBAAmB,IAAW,GACvB,EAALA,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIuoD,OAAS7b,EAAG7jB,QACpEmiC,UAAW,CAAC,EAAG,uBAAwBtf,SAAU,EAAGb,aAAc,SAAgCxe,EAAIrsB,GAAgB,EAALqsB,IAClH,EAAA,yBAAmB,WAAYrsB,EAAIpQ,UAAY,MAC/C,EAAA,yBAAmB,0BAAkD,mBAAvBoQ,EAAIwqD,kBACjDliE,OAAQ,CAAEsH,SAAU,WAAYqtE,cAAe,gBAAiBpY,MAAO,SAAWjY,SAAU,CAAC,aAAchB,SAAU,CAAC,EAAA,yCAAoCkoB,MAAO,GAAKG,mBAAoB,GAAK9nC,MAAO,EAAGC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,EAAG,sBAAuB,CAAC,YAAa,GAAI,EAAG,oBAAqB,EAAG,oBAAqB,oBAAqB,oBAAqB,CAAC,EAAG,6BAA8Bp6E,SAAU,SAA4BmlC,EAAIrsB,GAAgB,EAALqsB,IAC1b,EAAA,+BACA,EAAA,4BAAsB,EAAG,OAAQ,GACjC,EAAA,0BAAoB,GACpB,EAAA,4BACA,EAAA,uBAAiB,EAAG,MAAO,GAC3B,EAAA,uBAAiB,EAAG,MAAO,IACpB,EAALA,IACF,EAAA,uBAAiB,GACjB,EAAA,yBAAmB,0BAA2BrsB,EAAIi7E,eAAiBj7E,EAAIm7E,cACvE,EAAA,wBAAkB,oBAAqBn7E,EAAIu7E,oBAA3C,CAAgE,oBAAqBv7E,EAAIm7E,aAAzF,CAAuG,mBAAoBn7E,EAAIo7E,qBAC9H9uD,WAAY,CAAC,IAAmBviC,OAAQ,CAAC,61MAA81MkzB,cAAe,EAAGi3C,gBAAiB,IAoCx6M8mB,GAtGmB,GA2L1B,GAAgC,MAChC,MAAMQ,GA2BN,OAzBJA,EAAgBjyF,UAAO,EAAA,8BAAwB,CAAE1D,KAAM21F,IACvDA,EAAgBhyF,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAKs5F,IAAuB/xF,QAAS,CAAC,CACtI,GACA,IACD,MAqBA+xF,GA5ByB,GCnOpC,MAAMC,GACF,YAAYtvF,GACRjI,KAAKiI,MAAQA,EAEjB,KAAK22B,EAAYY,GACb,OAAOA,EAAOG,UAAU,IAAI,GAAef,EAAY5+B,KAAKiI,SAGpE,MAAM,WAAuB,GACzB,YAAY2H,EAAa3H,GACrBmY,MAAMxQ,GACN5P,KAAKiI,MAAQA,EACbjI,KAAKy0B,MAAQ,EAEjB,MAAM+H,KACIx8B,KAAKy0B,MAAQz0B,KAAKiI,OACpBjI,KAAK4P,YAAYkC,KAAK0qB,ICLlC,IAAI,GAA6B,MAC7B,MAAMg7D,GAQN,OANJA,EAAanyF,UAAO,EAAA,8BAAwB,CAAE1D,KAAM61F,IACpDA,EAAalyF,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA8B1B,GAAK,OAAO,IAAKA,GAAKw5F,MAKhGA,GATsB,GAoBjC,MAAMC,GAAqC,IAAIpjF,IAE/C,IAAIqjF,GAEA,GAA6B,MAC7B,MAAMC,EACF,YAAY1hC,GACRj2D,KAAKi2D,UAAYA,EACjBj2D,KAAK43F,YAAc53F,KAAKi2D,UAAU/F,WAAax8C,OAAOmkF,WAGlDnkF,OAAOmkF,WAAWv5F,KAAKoV,QACvBokF,GAQR,WAAWx5E,GAIP,OAHIte,KAAKi2D,UAAUvF,QAqB/B,SAA8BpyC,GAC1B,IAAIm5E,GAAmCn1F,IAAIgc,GAG3C,IACSo5E,KACDA,GAAsBj2F,SAASC,cAAc,SAC7Cg2F,GAAoBpnF,aAAa,OAAQ,YACzC7O,SAASyvD,KAAKhvD,YAAYw1F,KAE1BA,GAAoBK,QACpBL,GAAoBK,MACfC,WAAW,UAAU15E,wBAA6B,GACvDm5E,GAAmCphF,IAAIiI,IAG/C,MAAOjT,GACH9K,QAAQwD,MAAMsH,IAjBtB,CApBqCiT,GAElBte,KAAK43F,YAAYt5E,IAYhC,OATJq5E,EAAan1F,UAAO,SAA8BxE,GAAK,OAAO,IAAKA,GAAK25F,GAAc,EAAA,sBAAgB,MAClGA,EAAal1F,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAkC,OAAO,IAAIi4F,EAAa,OAAA,EAAA,sBAAA,CAAS,MAAej1F,MAAOi1F,EAAcl4F,WAAY,SAQ/Jk4F,GAhCsB,GA2DjC,SAASG,GAAex5E,GAGpB,MAAO,CACHxR,QAAmB,QAAVwR,GAA6B,KAAVA,EAC5B25E,MAAO35E,EACP45E,YAAa,OACbC,eAAgB,QAYxB,IAAI,GAAmC,MACnC,MAAMC,EACF,YAAYC,EAAe7+D,GACvBx5B,KAAKq4F,cAAgBA,EACrBr4F,KAAKw5B,MAAQA,EAEbx5B,KAAKs4F,SAAW,IAAI34F,IAEpBK,KAAKu4F,gBAAkB,IAAI,GAAA,QAG/B,cACIv4F,KAAKu4F,gBAAgBzmF,OACrB9R,KAAKu4F,gBAAgBj6D,WAOzB,UAAUvgC,GAEN,OADgBy6F,GAAalpC,GAAYvxD,IAC1BkZ,KAAKwhF,GAAcz4F,KAAK04F,eAAeD,GAAYE,IAAI7rF,SAQ1E,QAAQ/O,GACJ,MACMwnC,EADUizD,GAAalpC,GAAYvxD,IACb8N,IAAIyS,GAASte,KAAK04F,eAAep6E,GAAOgiB,YACpE,IAAIs4D,EAAkB,OAAA,GAAA,cAAA,CAAcrzD,GAGpC,OADAqzD,EAAkB,OAAA,GAAA,OAAA,CAAOA,EAAgBn2D,KAAKiC,GAAK,IAAKk0D,EAAgBn2D,KDtJxEjD,GAAWA,EAAOC,KAAK,IAAI83D,GCsJuD,IAAI7oC,GAAa,KAC5FkqC,EAAgBn2D,KAAK52B,GAAKgtF,IAC7B,MAAMC,EAAW,CACbhsF,SAAS,EACTisF,YAAa,IAMjB,OAJAF,EAAiB14F,QAASymC,IACtBkyD,EAAShsF,QAAUgsF,EAAShsF,SAAW85B,EAAM95B,QAC7CgsF,EAASC,YAAYnyD,EAAMtoB,OAASsoB,EAAM95B,UAEvCgsF,KAIf,eAAex6E,GAEX,GAAIte,KAAKs4F,SAASh2F,IAAIgc,GAClB,OAAOte,KAAKs4F,SAAS36F,IAAI2gB,GAE7B,MAAMq6E,EAAM34F,KAAKq4F,cAAcR,WAAWv5E,GAepCo4D,EAAS,CAAEp2C,WAbO,IAAI,GAAA,WAAYe,IAMpC,MAAMs6B,EAAWtwD,GAAMrL,KAAKw5B,MAAMU,IAAI,IAAMmH,EAASvvB,KAAKzG,IAE1D,OADAstF,EAAIT,YAAYv8B,GACT,KACHg9B,EAAIR,eAAex8B,MAExBl5B,KAAKgD,GAAUkzD,GAAM9sF,GAAKmtF,IAAAA,CAAe16E,MAAAA,EAAOxR,QAASksF,EAAQlsF,WAAaqnE,GAAUn0E,KAAKu4F,kBAElDI,IAAAA,GAE9C,OADA34F,KAAKs4F,SAASl2F,IAAIkc,EAAOo4D,GAClBA,GAaf,OAVJ0hB,EAAmB51F,UAAO,SAAoCxE,GAAK,OAAO,IAAKA,GAAKo6F,GAAoB,EAAA,sBAAgB,IAAe,EAAA,sBAAgB,EAAA,UACnJA,EAAmB31F,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAwC,OAAO,IAAI04F,EAAmB,OAAA,EAAA,sBAAA,CAAS,IAAe,OAAA,EAAA,sBAAA,CAAS,EAAA,UAAa11F,MAAO01F,EAAoB34F,WAAY,SAS7M24F,GApF4B,GA0FvC,SAASI,GAAaS,GAClB,OAAOA,EAAQptF,IAAKyS,GAAUA,EAAMvK,MAAM,MACrCxL,OAAO,CAACqvE,EAAIshB,IAAOthB,EAAGllD,OAAOwmE,IAC7BrtF,IAAIyS,GAASA,EAAM8C,QCtL5B,SAAS+3E,GAA8BhxD,EAAIrsB,GAAO,GAAS,EAALqsB,EAAQ,CAC1D,MAAMixD,EAAM,EAAA,gCACZ,EAAA,4BAAsB,EAAG,MAAO,GAChC,EAAA,4BAAsB,EAAG,SAAU,GACnC,EAAA,wBAAkB,SAAA,WAA8I,OAAlE,EAAA,2BAAqBA,GAAqB,EAAA,6BAAsC7mE,YAC9K,EAAA,oBAAc,GACd,EAAA,4BACA,EAAA,4BACF,GAAS,EAAL4V,EAAQ,CACV,MAAMkxD,EAAS,EAAA,6BACf,EAAA,uBAAiB,GACjB,EAAA,+BAAyBA,EAAO1tF,KAAK4mB,SAEzC,SAAS+mE,GAA4CnxD,EAAIrsB,IACzD,MAAMy9E,GAAc9wF,KAAKmY,IAAI,EAAG,IAAM,EAItC,MAAM,GACF,YAAY44E,EAAmBnT,GAC3BrmF,KAAKqmF,YAAcA,EAEnBrmF,KAAKy5F,gBAAkB,IAAI,GAAA,QAE3Bz5F,KAAK05F,aAAe,IAAI,GAAA,QAExB15F,KAAK25F,UAAY,IAAI,GAAA,QAErB35F,KAAK45F,oBAAqB,EAC1B55F,KAAKw5F,kBAAoBA,EAEzBx5F,KAAK65F,WAAWl6D,UAAU,IAAM3/B,KAAK85F,WACrCN,EAAkBO,QAAQp6D,UAAU,IAAM3/B,KAAKg6F,kBAGnD,UACSh6F,KAAKy5F,gBAAgBz8D,QACtBh9B,KAAKw5F,kBAAkBS,OAE3BhgC,aAAaj6D,KAAKk6F,oBAGtB,oBACSl6F,KAAK25F,UAAU38D,SAChBh9B,KAAK45F,oBAAqB,EAC1B55F,KAAK25F,UAAU7nF,OACf9R,KAAK25F,UAAUr7D,YAQvB,kBACIt+B,KAAKm6F,oBAGT,cAAc3zF,GAGVxG,KAAKk6F,mBAAqBp9D,WAAW,IAAM98B,KAAK85F,UAAWrxF,KAAKS,IAAI1C,EAAU+yF,KAGlF,QACSv5F,KAAK05F,aAAa18D,SACnBh9B,KAAK05F,aAAa5nF,OAClB9R,KAAK05F,aAAap7D,YAI1B,iBACIt+B,KAAKqmF,YAAY5hC,UACZzkD,KAAK25F,UAAU38D,QAChBh9B,KAAK25F,UAAUr7D,WAEnBt+B,KAAKy5F,gBAAgB3nF,KAAK,CAAEsoF,kBAAmBp6F,KAAK45F,qBACpD55F,KAAKy5F,gBAAgBn7D,WACrBt+B,KAAK45F,oBAAqB,EAG9B,iBACI,OAAO55F,KAAKy5F,gBAAgBpgC,eAGhC,cACI,OAAOr5D,KAAKw5F,kBAAkBa,SAGlC,WACI,OAAOr6F,KAAK25F,UAAUtgC,gBAY9B,MAAMihC,GAAqB,IAAI,EAAA,eAAe,mBAI9C,MAAMC,GACF,cAEIv6F,KAAKg6D,WAAa,YAKlBh6D,KAAKw6F,oBAAsB,GAE3Bx6F,KAAKwG,SAAW,EAEhBxG,KAAK2L,KAAO,KAEZ3L,KAAKy6F,mBAAqB,SAE1Bz6F,KAAK06F,iBAAmB,UAehC,IAAI,GAA+B,MAC/B,MAAMC,EACF,YAAYC,EAAajvF,GACrB3L,KAAK46F,YAAcA,EACnB56F,KAAK2L,KAAOA,EAGhB,SACI3L,KAAK46F,YAAYT,oBAGrB,gBACI,QAASn6F,KAAK2L,KAAK4mB,QAmC3B,OAhCJooE,EAAen4F,UAAO,SAAgCxE,GAAK,OAAO,IAAKA,GAAK28F,GAAgB,EAAA,+BAAyB,IAAiB,EAAA,+BAAyBL,MAC/JK,EAAe3yD,UAAO,EAAA,+BAAyB,CAAErmC,KAAMg5F,EAAgBx2F,UAAW,CAAC,CAAC,qBAAsB2iE,UAAW,CAAC,EAAG,uBAAwB7+B,MAAO,EAAGC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,QAAS,6BAA8B,EAAG,QAAS,CAAC,EAAG,8BAA+B,CAAC,aAAc,GAAI,EAAG,UAAWp6E,SAAU,SAAiCmlC,EAAIrsB,GAAgB,EAALqsB,IACvV,EAAA,4BAAsB,EAAG,QACzB,EAAA,oBAAc,GACd,EAAA,4BACA,EAAA,wBAAkB,EAAGgxD,GAA+B,EAAG,EAAG,MAAO,IAC1D,EAALhxD,IACF,EAAA,uBAAiB,GACjB,EAAA,+BAAyBrsB,EAAInQ,KAAKyxB,SAClC,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,OAAQthB,EAAI++E,aAC7BzyD,WAAY,CAAC,EAAA,KAAa,IAAmBviC,OAAQ,CAAC,+TAAgUkzB,cAAe,EAAGi3C,gBAAiB,IAqBvZ2qB,GA/CwB,GA6DnC,MAAMG,GAAwB,CAE1BC,cAAet1F,EAAQ,QAAS,CAC5B,EAAM,eAAgB,EAAM,CACxB8+D,UAAW,aACXS,QAAS,KAEb,EAAM,UAAW,EAAM,CACnBT,UAAW,WACXS,QAAS,KAEb,EAAW,eAAgBr/D,EAAQ,qCACnC,EAAW,yBAA0BA,EAAQ,oCAAqC,EAAM,CACpFq/D,QAAS,SAgBrB,IAAI,GAAqC,MACrC,MAAMg2B,UAA6BtpB,GAC/B,YAAYjf,EAASD,EAAamrB,EAElCsd,GACI76E,QACApgB,KAAKyyD,QAAUA,EACfzyD,KAAKwyD,YAAcA,EACnBxyD,KAAK29E,mBAAqBA,EAC1B39E,KAAKi7F,eAAiBA,EAEtBj7F,KAAK8G,YAAa,EAElB9G,KAAK+5F,QAAU,IAAI,GAAA,QAEnB/5F,KAAKq6F,SAAW,IAAI,GAAA,QAEpBr6F,KAAKk7F,gBAAkB,OAMvBl7F,KAAK4xE,gBAAmBE,IACpB9xE,KAAKm7F,qBACLn7F,KAAKo7F,wBACEp7F,KAAKopF,cAAcxX,gBAAgBE,IAQ1C9xE,KAAKq7F,MAJyB,cAA9BJ,EAAejhC,YAA+BihC,EAAeT,oBAG1B,QAA9BS,EAAejhC,WACP,KAGA,SANA,QAUrB,sBAAsB8X,GAGlB,OAFA9xE,KAAKm7F,qBACLn7F,KAAKo7F,wBACEp7F,KAAKopF,cAAcrX,sBAAsBD,GAGpD,qBAAqBA,GAGjB,OAFA9xE,KAAKm7F,qBACLn7F,KAAKo7F,wBACEp7F,KAAKopF,cAAcpX,qBAAqBF,GAGnD,eAAe5mE,GACX,MAAM,UAAEM,EAAS,QAAEC,GAAYP,EAI/B,IAHiB,SAAZO,GAAoC,SAAdD,GAAqC,WAAZC,IAChDzL,KAAKs7F,gBAEO,YAAZ7vF,EAAuB,CAGvB,MAAM8vF,EAAUv7F,KAAKq6F,SACrBr6F,KAAKyyD,QAAQv4B,IAAI,KACbqhE,EAAQzpF,OACRypF,EAAQj9D,cAKpB,QACSt+B,KAAK8G,aACN9G,KAAKk7F,gBAAkB,UACvBl7F,KAAK29E,mBAAmBzK,iBAIhC,OASI,OALAlzE,KAAKk7F,gBAAkB,SAIvBl7F,KAAKwyD,YAAYhM,cAAcl2C,aAAa,WAAY,IACjDtQ,KAAK+5F,QAGhB,cACI/5F,KAAK8G,YAAa,EAClB9G,KAAKs7F,gBAMT,gBACIt7F,KAAKyyD,QAAQ+oC,iBAAiBniC,eAAe52B,KAAKiC,GAAK,IAAI/E,UAAU,KACjE3/B,KAAK+5F,QAAQjoF,OACb9R,KAAK+5F,QAAQz7D,aAIrB,wBACI,MAAMz0B,EAAU7J,KAAKwyD,YAAYhM,cAC3Bi1C,EAAez7F,KAAKi7F,eAAevT,WACrC+T,IACI5qF,MAAMC,QAAQ2qF,GAEdA,EAAat7F,QAAQwrF,GAAY9hF,EAAQ6nB,UAAUrb,IAAIs1E,IAGvD9hF,EAAQ6nB,UAAUrb,IAAIolF,IAGiB,WAA3Cz7F,KAAKi7F,eAAeR,oBACpB5wF,EAAQ6nB,UAAUrb,IAAI,wBAEmB,QAAzCrW,KAAKi7F,eAAeP,kBACpB7wF,EAAQ6nB,UAAUrb,IAAI,qBAI9B,qBACI,GAAIrW,KAAKopF,cAAchY,cACnB,MAAMhwE,MAAM,6EAmDxB,OA/CJ45F,EAAqBx4F,UAAO,SAAsCxE,GAAK,OAAO,IAAKA,GAAKg9F,GAAsB,EAAA,+BAAyB,EAAA,QAAgB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyBT,MACjRS,EAAqBhzD,UAAO,EAAA,+BAAyB,CAAErmC,KAAMq5F,EAAsB72F,UAAW,CAAC,CAAC,wBAAyBo3E,UAAW,SAAoCpzC,EAAIrsB,GAGpK,IAAI0sC,EAHgL,EAALrgB,GAC/K,EAAA,+BAAyB,IAAiB,GACnC,EAALA,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIstE,cAAgB5gC,EAAG7jB,QAC3EmiC,UAAW,CAAC,EAAG,2BAA4Btf,SAAU,EAAGb,aAAc,SAA2Cxe,EAAIrsB,GAAgB,EAALqsB,GACjI,EAAA,8CAAwC,eAAA,SAAqFsf,GAAU,OAAO3rC,EAAI4/E,eAAej0C,MAC1J,EAALtf,IACF,EAAA,yBAAmB,OAAQrsB,EAAIu/E,OAC/B,EAAA,0CAAoC,SAAUv/E,EAAIo/E,mBACjDxzC,SAAU,CAAC,EAAA,yCAAoCzf,MAAO,EAAGC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,kBAAmB,KAAMp6E,SAAU,SAAuCmlC,EAAIrsB,GAAgB,EAALqsB,GACtK,EAAA,wBAAkB,EAAGmxD,GAA6C,EAAG,EAAG,cAAe,IACtFlxD,WAAY,CAAC,IAAyBviC,OAAQ,CAAC,iYAAkYkzB,cAAe,EAAGptB,KAAM,CAAEvF,UAAW,CAAC00F,GAAsBC,kBAkC3eC,GAhL8B,GA0LrC,GAAkC,MAClC,MAAMW,GA8BN,OA5BJA,EAAkBt2F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMg6F,IACzDA,EAAkBr2F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAmC1B,GAAK,OAAO,IAAKA,GAAK29F,IAAyBp2F,QAAS,CAAC,CAC5I,GACA,GACA,EAAA,aACA,GACA,IACD,MAqBAo2F,GA/B2B,GA0CtC,MAAMC,GAAgC,IAAI,EAAA,eAAe,gCAAiC,CACtFn8F,WAAY,OACZC,QAGJ,WACI,OAAO,IAAI66F,MAKf,IAAI,GAA4B,MAC5B,MAAMsB,EACF,YAAYC,EAAUC,EAAO9F,EAAW+F,EAAqBC,EAAiBC,GAC1El8F,KAAK87F,SAAWA,EAChB97F,KAAK+7F,MAAQA,EACb/7F,KAAKi2F,UAAYA,EACjBj2F,KAAKg8F,oBAAsBA,EAC3Bh8F,KAAKi8F,gBAAkBA,EACvBj8F,KAAKk8F,eAAiBA,EAMtBl8F,KAAKm8F,wBAA0B,KAGnC,yBACI,MAAMvzE,EAAS5oB,KAAKi8F,gBACpB,OAAOrzE,EAASA,EAAOwzE,mBAAqBp8F,KAAKm8F,wBAErD,uBAAuBp+F,GACfiC,KAAKi8F,gBACLj8F,KAAKi8F,gBAAgBG,mBAAqBr+F,EAG1CiC,KAAKm8F,wBAA0Bp+F,EAUvC,kBAAkB0rC,EAAWzoC,GACzB,OAAOhB,KAAKq8F,QAAQ5yD,EAAWzoC,GASnC,iBAAiBgC,EAAUhC,GACvB,OAAOhB,KAAKq8F,QAAQr5F,EAAUhC,GAQlC,KAAKo8B,EAAS7K,EAAS,GAAIvxB,GACvB,MAAMklF,EAAU1oF,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAInjB,KAAKk8F,gBAAiBl7F,GAOtE,OAJAklF,EAAQv6E,KAAO,CAAEyxB,QAAAA,EAAS7K,OAAAA,GACrB2zD,EAAQsU,sBACTtU,EAAQsU,oBAAsBp9D,GAE3Bp9B,KAAKs8F,kBAAkB,GAAgBpW,GAKlD,UACQlmF,KAAKo8F,oBACLp8F,KAAKo8F,mBAAmBtC,UAGhC,cAEQ95F,KAAKm8F,yBACLn8F,KAAKm8F,wBAAwBrC,UAMrC,yBAAyBxT,EAAYtlF,GACjC,MACMi3C,EAAW,IAAI47B,GADA7yE,GAAUA,EAAOuwE,kBAAoBvwE,EAAOuwE,iBAAiBt5B,UAC9Bj4C,KAAKi2F,UAAW,IAAIxiE,QAAQ,CAC5E,CAAC8mE,GAAmBv5F,MAElBu7F,EAAkB,IAAIjrB,GAAgB,GAAsBtwE,EAAOuwE,iBAAkBt5B,GACrFukD,EAAelW,EAAWjxC,OAAOknD,GAEvC,OADAC,EAAatzC,SAAS+xC,eAAiBj6F,EAChCw7F,EAAatzC,SAKxB,QAAQ0wB,EAAS6iB,GACb,MAAMz7F,EAASxD,OAAO2lB,OAAO3lB,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI,IAAIo3E,IAAsBv6F,KAAKk8F,gBAAiBO,GACvGnW,EAAatmF,KAAK08F,eAAe17F,GACjCwpC,EAAYxqC,KAAK28F,yBAAyBrW,EAAYtlF,GACtD45F,EAAc,IAAI,GAAepwD,EAAW87C,GAClD,GAAI1M,aAAmB,EAAA,YAAa,CAChC,MAAM9H,EAAS,IAAIN,GAAeoI,EAAS,KAAM,CAC7C1B,UAAWl3E,EAAO2K,KAClBivF,YAAAA,IAEJA,EAAY1xC,SAAW1e,EAAUwnC,qBAAqBF,OAErD,CACD,MAAM75B,EAAWj4C,KAAK48F,gBAAgB57F,EAAQ45F,GACxC9oB,EAAS,IAAIR,GAAgBsI,OAASl5E,EAAWu3C,GACjD4kD,EAAaryD,EAAUunC,sBAAsBD,GAEnD8oB,EAAY1xC,SAAW2zC,EAAW3zC,SAYtC,OAPAlpD,KAAKg8F,oBAAoB/pC,QDzXhB,qDCyXqDxvB,KAAK0xC,GAAUmS,EAAWwW,gBAAgBn9D,UAAUiH,IAC9G,MAAMlV,EAAY40D,EAAWa,eAAez1D,UAE5CkV,EAAM95B,QAAU4kB,EAAUrb,IADR,yBACyBqb,EAAUE,OADnC,2BAGtB5xB,KAAK+8F,iBAAiBnC,EAAa55F,GACnChB,KAAKo8F,mBAAqBxB,EACnB56F,KAAKo8F,mBAGhB,iBAAiBxB,EAAa55F,GAE1B45F,EAAYoC,iBAAiBr9D,UAAU,KAE/B3/B,KAAKo8F,oBAAsBxB,IAC3B56F,KAAKo8F,mBAAqB,MAE1Bp7F,EAAOw5F,qBACPx6F,KAAK+7F,MAAMr4F,UAGf1D,KAAKo8F,oBAGLp8F,KAAKo8F,mBAAmBY,iBAAiBr9D,UAAU,KAC/Ci7D,EAAYpB,kBAAkByD,UAElCj9F,KAAKo8F,mBAAmBtC,WAIxBc,EAAYpB,kBAAkByD,QAG9Bj8F,EAAOwF,UAAYxF,EAAOwF,SAAW,GACrCo0F,EAAYsC,cAAcv9D,UAAU,IAAMi7D,EAAYuC,cAAcn8F,EAAOwF,WAE3ExF,EAAOw5F,qBACPx6F,KAAK+7F,MAAMqB,SAASp8F,EAAOw5F,oBAAqBx5F,EAAOg5D,YAO/D,eAAeh5D,GACX,MAAMw1F,EAAgB,IAAIhP,GAC1BgP,EAAcxiC,UAAYhzD,EAAOgzD,UACjC,IAAI+1B,EAAmB/pF,KAAK87F,SAASt0F,WAAW61F,SAEhD,MAAMtL,EAA6B,QAArB/wF,EAAOgzD,UACfspC,EAAwC,SAA9Bt8F,EAAOy5F,oBACY,UAA9Bz5F,EAAOy5F,qBAAmC1I,GACZ,QAA9B/wF,EAAOy5F,oBAAgC1I,EACtCwL,GAAWD,GAAwC,WAA9Bt8F,EAAOy5F,mBAkBlC,OAjBI6C,EACAvT,EAAiBvmB,KAAK,KAEjB+5B,EACLxT,EAAiBhmB,MAAM,KAGvBgmB,EAAiByT,qBAGW,QAA5Bx8F,EAAO05F,iBACP3Q,EAAiBrmB,IAAI,KAGrBqmB,EAAiB9lB,OAAO,KAE5BuyB,EAAczM,iBAAmBA,EAC1B/pF,KAAK87F,SAAS19F,OAAOo4F,GAOhC,gBAAgBx1F,EAAQ45F,GAEpB,OAAO,IAAI/mB,GADU7yE,GAAUA,EAAOuwE,kBAAoBvwE,EAAOuwE,iBAAiBt5B,UACxCj4C,KAAKi2F,UAAW,IAAIxiE,QAAQ,CAClE,CAAC,GAAgBmnE,GACjB,CAACN,GAAoBt5F,EAAO2K,UAyBxC,OArBJkwF,EAAYr5F,UAAO,SAA6BxE,GAAK,OAAO,IAAKA,GAAK69F,GAAa,EAAA,sBAAgB,IAAiB,EAAA,sBAAgB,IAAuB,EAAA,sBAAgB,EAAA,UAAkB,EAAA,sBAAgB,IAA4B,EAAA,sBAAgBA,EAAa,IAAK,EAAA,sBAAgBD,MACvRC,EAAYp5F,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAiC,OAAO,IAAIm8F,EAAY,OAAA,EAAA,sBAAA,CAAS,IAAU,OAAA,EAAA,sBAAA,CAAS,IAAgB,OAAA,EAAA,sBAAA,CAAS,EAAA,UAAW,OAAA,EAAA,sBAAA,CAAS,IAAqB,OAAA,EAAA,sBAAA,CAASA,EAAa,IAAK,OAAA,EAAA,sBAAA,CAASD,MAAoCl5F,MAAOm5F,EAAap8F,WAAY,KAoBzSo8F,GAjOqB,GCxezB,GAAA,YAAM4B,EAGZ,YAAoBC,GAAA,KAAAA,SAAAA,EAEpB,KAAAC,aAAkC,CACjCn3F,SAAU,IACVk0F,iBAAkB,MAClBD,mBAAoB,QAGrB,KAAKr9D,EAAiBwgE,GACrB59F,KAAK69F,KAAKzgE,EAASwgE,EAAa,QAEjC,KAAKxgE,EAAiBwgE,GACrB59F,KAAK69F,KAAKzgE,EAASwgE,EAAa,QAEjC,MAAMxgE,EAAiBwgE,GACtB59F,KAAK69F,KAAKzgE,EAASwgE,EAAa,SAEjC,QAAQxgE,EAAiBwgE,GACxB59F,KAAK69F,KAAKzgE,EAASwgE,EAAa,WAGzB,KAAKxgE,EAAiBwgE,EAAqBlW,GAClD1nF,KAAKopD,IAAMppD,KAAK09F,SAASG,KACxB,GAAGD,MAAgBxgE,IACnB,KAAI,OAAA,OAAA,OAAA,OAAA,GACCp9B,KAAK29F,cAAY,CAAEjW,WAAAA,mDA5Bd+V,GAAc,EAAA,sBAAA,4DAAdA,EAAc,QAAdA,EAAc,UAAA,WADD,YACnB,GCWP,MAAM,GAAM,CAAC,IAAK,CAAC,CAAC,qBACd,GAAM,CAAC,IAAK,mBAKlB,IAAI,GAA+B,MAC/B,MAAMK,GAWN,OATJA,EAAet7F,UAAO,SAAgCxE,GAAK,OAAO,IAAKA,GAAK8/F,IAC5EA,EAAe55F,UAAO,EAAA,+BAAyB,CAAEvC,KAAMm8F,EAAgB35F,UAAW,CAAC,CAAC,oBAAqB,CAAC,GAAI,mBAAoB,IAAK,CAAC,GAAI,iBAAkB,KAAM2iE,UAAW,CAAC,EAAG,sBAQxKg3B,GAZwB,GAkB/B,GAA6B,MAC7B,MAAMC,GAaN,OAXJA,EAAav7F,UAAO,SAA8BxE,GAAK,OAAO,IAAKA,GAAK+/F,IACxEA,EAAa75F,UAAO,EAAA,+BAAyB,CAAEvC,KAAMo8F,EAAc55F,UAAW,CAAC,CAAC,kBAAmB,CAAC,GAAI,iBAAkB,IAAK,CAAC,GAAI,eAAgB,KAAM2iE,UAAW,CAAC,EAAG,oBAU9Ji3B,GAdsB,GA8M7B,GAAwB,MACxB,MAAMC,EAEF,YAAY13B,GACRtmE,KAAKsmE,eAAiBA,GAkC9B,OA/BJ03B,EAAQx7F,UAAO,SAAyBxE,GAAK,OAAO,IAAKA,GAAKggG,GAAS,EAAA,+BAAyBpiE,GAAuB,KACvHoiE,EAAQh2D,UAAO,EAAA,+BAAyB,CAAErmC,KAAMq8F,EAAS75F,UAAW,CAAC,CAAC,aAAc2iE,UAAW,CAAC,EAAG,WAAY,uBAAwBtf,SAAU,EAAGb,aAAc,SAA8Bxe,EAAIrsB,GAAgB,EAALqsB,GACvM,EAAA,yBAAmB,0BAAkD,mBAAvBrsB,EAAIwqD,iBACjD5d,SAAU,CAAC,WAAYqnB,mBAAoB,GAAK9nC,MAAO,EAAGC,KAAM,EAAGllC,SAAU,SAA0BmlC,EAAIrsB,GAAgB,EAALqsB,IACvH,EAAA,6BAAuB,IACvB,EAAA,0BAAoB,GACpB,EAAA,0BAAoB,EAAG,KACtBtiC,OAAQ,CAAC,k8EAAm8EkzB,cAAe,EAAGi3C,gBAAiB,IAwB7+EguB,GAtCiB,GA0GxB,GAA8B,MAC9B,MAAMC,GAiCN,OA/BJA,EAAc54F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMs8F,IACrDA,EAAc34F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAKigG,IAAqB14F,QAAS,CAAC,CAAC,IAAkB,MA8BpJ04F,GAlCuB,GCtV3B,GAAA,YAAMC,EAEZ,YACSC,EACA9Z,GADA,KAAA8Z,QAAAA,EACA,KAAA9Z,WAAAA,EAGT,WAICrkF,KAAKm+F,QAAQp6F,MADG,gGACY,gFAXjBm6F,GAAc,EAAA,+BAAA,IAAA,EAAA,+BAAA,yDAAdA,EAAc,UAAA,CAAA,CAAA,cAAA,MAAA,EAAA,KAAA,EAAA,OAAA,CAAA,CAAA,QAAA,SAAA,SAAA,SAAA,EAAA,GAAA,EAAA,ICX3B,EAAA,4BAAA,EAAA,WAAA,GACC,EAAA,4BAAA,EAAA,kBAAgB,EAAA,oBAAA,EAAA,mCAAM,EAAA,4BACtB,EAAA,4BAAA,EAAA,oBACC,EAAA,4BAAA,EAAA,OAAK,EAAA,oBAAA,EAAA,yHAAsB,EAAA,4BAC3B,EAAA,4BAAA,EAAA,OAAK,EAAA,oBAAA,EAAA,wEAAa,EAAA,4BACnB,EAAA,4BACD,EAAA,oJDKO,GESP,MAAM,GAAM,CAAC,mBACb,MAAME,GACF,YAAY5rC,GACRxyD,KAAKwyD,YAAcA,GAG3B,MAAM6rC,GAA2B59B,GAAW29B,GAAoB,WAM1DE,GAA4B,IAAI,EAAA,eAAe,4BAA6B,CAAE7+F,WAAY,OAAQC,QAExG,WACI,MAAM23D,EAAY,OAAA,EAAA,OAAA,CAAO,EAAA,UACnB2V,EAAY3V,EAAYA,EAAUnY,SAAW,KACnD,MAAO,CAGH+tB,YAAa,IAAMD,EAAaA,EAAUE,SAAWF,EAAUG,OAAU,OAIjF,IAAIoxB,GAAgB,EAIhB,GAA+B,MAC/B,MAAMC,UAAuBH,GACzB,YAAY7rC,EAAaC,EAAS6T,EAKlCpnB,GACI9+B,MAAMoyC,GACNxyD,KAAKwyD,YAAcA,EACnBxyD,KAAKyyD,QAAUA,EACfzyD,KAAKsmE,eAAiBA,EAEtBtmE,KAAKy+F,kBAAmB,EACxBz+F,KAAK0+F,OAAS,EACd1+F,KAAK2+F,aAAe,EAMpB3+F,KAAK4+F,aAAe,IAAI,EAAA,aAExB5+F,KAAK6+F,0BAA4B,GAAA,aAAa/gE,MAQ9C99B,KAAK/B,KAAO,cAEZ+B,KAAKu+F,cAAgB,oBAAoBA,KAOzC,MAAMn3D,EAAO8X,EAAWA,EAAS+tB,cAAcl5D,MAAM,KAAK,GAAK,GAC/D/T,KAAK8+F,oBAAsB,QAAQ13D,KAAQpnC,KAAKu+F,kBAChDv+F,KAAKy+F,iBAAsC,mBAAnBn4B,EAG5B,YAAc,OAAOtmE,KAAK0+F,OAC1B,UAAUxnF,GACNlX,KAAK0+F,OAASK,GAAM5vC,GAAqBj4C,IAAM,GAGnD,kBAAoB,OAAOlX,KAAK2+F,aAChC,gBAAgBznF,GAAKlX,KAAK2+F,aAAeI,GAAM7nF,GAAK,GAEpD,oBAEI,MAAO,CAAEqtD,UAAW,UADNvkE,KAAKjC,MAAQ,QAO/B,mBACI,MAAkB,WAAdiC,KAAK/B,KAEE,CAAEsmE,UAAW,UADNvkE,KAAKg/F,YAAc,QAG9B,KAEX,kBAGIh/F,KAAKyyD,QAAQt4B,kBAAkB,KAC3B,MAAMtwB,EAAU7J,KAAKi/F,iBAAiBz4C,cACtCxmD,KAAK6+F,0BACD,OAAA,GAAA,UAAA,CAAUh1F,EAAS,iBACd44B,KAAKvhC,GAASmK,GAAMA,EAAE0S,SAAWlU,IACjC81B,UAAU,KACO,gBAAd3/B,KAAK/B,MAAwC,WAAd+B,KAAK/B,MACpC+B,KAAKyyD,QAAQv4B,IAAI,IAAMl6B,KAAK4+F,aAAa9sF,KAAK,CAAE/T,MAAOiC,KAAKjC,aAKhF,cACIiC,KAAK6+F,0BAA0BvhE,eA2FvC,OAxFJkhE,EAAeh8F,UAAO,SAAgCxE,GAAK,OAAO,IAAKA,GAAKwgG,GAAgB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,EAAA,QAAgB,EAAA,+BAAyB5iE,GAAuB,GAAI,EAAA,+BAAyB0iE,GAA2B,KAC1RE,EAAex2D,UAAO,EAAA,+BAAyB,CAAErmC,KAAM68F,EAAgBr6F,UAAW,CAAC,CAAC,qBAAsBo3E,UAAW,SAA8BpzC,EAAIrsB,GAG/I,IAAI0sC,EAH2J,EAALrgB,GAC1J,EAAA,yBAAmB,IAAK,GACjB,EAALA,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAImjF,iBAAmBz2C,EAAG7jB,QAC9EmiC,UAAW,CAAC,OAAQ,cAAe,gBAAiB,IAAK,gBAAiB,MAAO,EAAG,oBAAqBtf,SAAU,EAAGb,aAAc,SAAqCxe,EAAIrsB,GAAgB,EAALqsB,IACzL,EAAA,yBAAmB,gBAA8B,kBAAbrsB,EAAI7d,MAAyC,UAAb6d,EAAI7d,KAAmB,KAAO6d,EAAI/d,MAAtG,CAA6G,OAAQ+d,EAAI7d,MACzH,EAAA,yBAAmB,0BAA2B6d,EAAI2iF,oBACjDr6F,OAAQ,CAAEu8D,MAAO,QAAS1iE,KAAM,OAAQF,MAAO,QAASihG,YAAa,eAAiBr1C,QAAS,CAAEi1C,aAAc,gBAAkBl2C,SAAU,CAAC,kBAAmBhB,SAAU,CAAC,EAAA,yCAAoCzf,MAAO,EAAGC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,QAAS,OAAQ,SAAU,IAAK,YAAa,QAAS,EAAG,8BAA+B,4BAA6B,CAAC,IAAK,IAAK,IAAK,IAAK,QAAS,IAAK,SAAU,IAAK,eAAgB,iBAAkB,EAAG,MAAO,CAAC,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,CAAC,QAAS,OAAQ,SAAU,QAAS,CAAC,EAAG,0BAA2B,2BAA4B,EAAG,WAAY,CAAC,EAAG,2BAA4B,wBAAyB,2BAA4B,EAAG,WAAY,CAAC,kBAAmB,IAAK,CAAC,EAAG,6BAA8B,wBAAyB,6BAA8Bp6E,SAAU,SAAiCmlC,EAAIrsB,GAAgB,EAALqsB,IACh2B,EAAA,8BACA,EAAA,4BAAsB,EAAG,MAAO,GAChC,EAAA,4BAAsB,EAAG,QACzB,EAAA,4BAAsB,EAAG,UAAW,GACpC,EAAA,uBAAiB,EAAG,SAAU,GAC9B,EAAA,4BACA,EAAA,4BACA,EAAA,uBAAiB,EAAG,OAAQ,GAC5B,EAAA,4BACA,EAAA,+BACA,EAAA,uBAAiB,EAAG,MAAO,GAC3B,EAAA,uBAAiB,EAAG,MAAO,EAAG,GAC9B,EAAA,uBAAiB,EAAG,MAAO,IACpB,EAALA,IACF,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,KAAMrsB,EAAIyiF,eAC5B,EAAA,uBAAiB,GACjB,EAAA,yBAAmB,OAAQziF,EAAIgjF,qBAC/B,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,UAAWhjF,EAAIojF,oBACjC,EAAA,uBAAiB,GACjB,EAAA,wBAAkB,UAAWpjF,EAAIqjF,uBAChC/2D,WAAY,CAAC,EAAA,SAAiBviC,OAAQ,CAAC,k7JAAq7JkzB,cAAe,EAAGi3C,gBAAiB,IAwD7/JwuB,GA/KwB,GAkLnC,SAASO,GAAM7nF,EAAGhO,EAAM,EAAGR,EAAM,KAC7B,OAAOD,KAAKC,IAAIQ,EAAKT,KAAKS,IAAIR,EAAKwO,IAUvC,IAAI,GAAqC,MACrC,MAAMkoF,GAaN,OAXJA,EAAqB/5F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMy9F,IAC5DA,EAAqB95F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAsC1B,GAAK,OAAO,IAAKA,GAAKohG,IAA4B75F,QAAS,CAAC,CAAC,EAAA,aAAc,IAAkB,MAUvL65F,GAd8B,GCtOlC,GAAA,YAAMC,EAEX,eAEA,0DAJWA,uDAAAA,EAAgB,UAAA,CAAA,CAAA,gBAAA,MAAA,EAAA,KAAA,EAAA,OAAA,CAAA,CAAA,OAAA,kBAAA,SAAA,SAAA,EAAA,GAAA,EAAA,GCP7B,EAAA,uBAAA,EAAA,mBAAA,qCDOO,GEk9BH,GAAmC,MACnC,MAAMC,GAwCN,OAtCJA,EAAmBj6F,UAAO,EAAA,8BAAwB,CAAE1D,KAAM29F,IAC1DA,EAAmBh6F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAoC1B,GAAK,OAAO,IAAKA,GAAKshG,IAA0B/5F,QAAS,CAAC,CAC/I,EAAA,aACA,GACA,IACD,MAiCA+5F,GAzC4B,GC1qBvC,MAUMC,GAAoD,CACtDz6F,QAPqC,IAAI,EAAA,eAAe,oCAQxDM,KAAM,CAAC,IACPD,WAPJ,SAAkD6iF,GAC9C,MAAO,IAAMA,EAAQ+N,iBAAiBxO,eA0B1C,IAylBI,GAAsC,MACtC,MAAMiY,GAuBN,OArBJA,EAAsBn6F,UAAO,EAAA,8BAAwB,CAAE1D,KAAM69F,IAC7DA,EAAsBl6F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAuC1B,GAAK,OAAO,IAAKA,GAAKwhG,IAA6B36F,UAAW,CAAC06F,IAAoDh6F,QAAS,CAAC,CAAC,GAAiB,GAAe,GAAiB,EAAA,cAAe,GAC7R,GACA,MAkBGi6F,GAxB+B,GC9pBtC,GAA+B,MAC/B,MAAMC,GAoBN,OAlBJA,EAAep6F,UAAO,EAAA,8BAAwB,CAAE1D,KAAM89F,IACtDA,EAAen6F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAKyhG,IAAsBl6F,QAAS,CAAC,CACnI,GACA,IACD,MAcAk6F,GArBwB,GCuC/B,GAAqC,MACrC,MAAMC,GAwBN,OAtBJA,EAAqBr6F,UAAO,EAAA,8BAAwB,CAAE1D,KAAM+9F,IAC5DA,EAAqBp6F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAsC1B,GAAK,OAAO,IAAKA,GAAK0hG,IAA4Bn6F,QAAS,CAAC,CACrJ,GACA,GACA,IACD,MAiBAm6F,GAzB8B,GCyPrC,GAAsC,MACtC,MAAMC,GAaN,OAXJA,EAAsBt6F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMg+F,IAC7DA,EAAsBr6F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAuC1B,GAAK,OAAO,IAAKA,GAAK2hG,IAA6Bp6F,QAAS,CAAC,CAAC,GAAiB,IAAkB,MAU7Lo6F,GAd+B,GCetC,GAAoD,MACpD,MAAMC,GAYN,OAVJA,EAAoCv6F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMi+F,IAC3EA,EAAoCt6F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAqD1B,GAAK,OAAO,IAAKA,GAAK4hG,MAS9IA,GAb6C,GAepD,GAAkC,MAClC,MAAMC,GAmBN,OAjBJA,EAAkBx6F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMk+F,IACzDA,EAAkBv6F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAmC1B,GAAK,OAAO,IAAKA,GAAK6hG,IAAyBt6F,QAAS,CAAC,CAC5I,GAAiB,GAAiB,GAClC,IACD,GAAiB,MAajBs6F,GApB2B,GC5FtC,MAAMC,GAA4B,IAAI,EAAA,eAAe,6BA65B/C,GAAK,CACPC,kBAAmB,CtDh4CT,KsDk4Cd,IAAI,GAA+B,MAC/B,MAAMC,GAyBN,OAvBJA,EAAe36F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMq+F,IACtDA,EAAe16F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAKgiG,IAAsBn7F,UAAW,CACxI,GACA,CACIC,QAASg7F,GACT/6F,SAAU,OAkBXi7F,GA1BwB,GCj3CnC,SAASC,GAA0C93D,EAAIrsB,IACvD,MAAMokF,GACF,cAEIlgG,KAAKmgG,KAAO,SAEZngG,KAAK0nF,WAAa,GAElB1nF,KAAK2nF,aAAc,EAEnB3nF,KAAK4nF,cAAgB,GAErB5nF,KAAKogG,cAAe,EAEpBpgG,KAAKyjE,MAAQ,GAEbzjE,KAAK2jE,OAAS,GAEd3jE,KAAKkrF,SAAW,OAEhBlrF,KAAK2L,KAAO,KAEZ3L,KAAKqgG,gBAAkB,KAEvBrgG,KAAKsgG,eAAiB,KAEtBtgG,KAAKm5E,UAAY,KAEjBn5E,KAAKugG,WAAY,EAKjBvgG,KAAKwgG,cAAe,EAMpBxgG,KAAKygG,mBAAoB,GAgBjC,MAAMC,GAAsB,CAExBC,gBAAiBl7F,EAAQ,kBAAmB,CAIxC,EAAM,aAAc,EAAM,CAAEu/D,QAAS,EAAGT,UAAW,gBACnD,EAAM,QAAS,EAAM,CAAEA,UAAW,UAClC,EAAW,aAAc5+D,EAAQ,mCAAoC,EAAM,CAAE4+D,UAAW,OAAQS,QAAS,MACzG,EAAW,uBAAwBr/D,EAAQ,sCAAuC,EAAM,CAAEq/D,QAAS,SAgB3G,SAAS47B,KACL,MAAMx/F,MAAM,yEAOhB,IAAI,GAAmC,MACnC,MAAMy/F,UAA2BnvB,GAC7B,YAAYlf,EAAasuC,EAAmBnjB,EAAoBtmB,EAEhE6uB,GACI9lE,QACApgB,KAAKwyD,YAAcA,EACnBxyD,KAAK8gG,kBAAoBA,EACzB9gG,KAAK29E,mBAAqBA,EAC1B39E,KAAKkmF,QAAUA,EAEflmF,KAAK+gG,qCAAuC,KAE5C/gG,KAAKozB,OAAS,QAEdpzB,KAAKghG,uBAAyB,IAAI,EAAA,aAOlChhG,KAAK4xE,gBAAmBE,IAChB9xE,KAAKopF,cAAchY,eACnBwvB,KAEJ5gG,KAAKihG,kBACEjhG,KAAKopF,cAAcxX,gBAAgBE,IAE9C9xE,KAAKkhG,gBAAkBhb,EAAQoa,gBAAkB,KACjDtgG,KAAKq3D,UAAYA,EAMrB,sBAAsBya,GAKlB,OAJI9xE,KAAKopF,cAAchY,eACnBwvB,KAEJ5gG,KAAKihG,kBACEjhG,KAAKopF,cAAcrX,sBAAsBD,GAMpD,qBAAqBA,GAKjB,OAJI9xE,KAAKopF,cAAchY,eACnBwvB,KAEJ5gG,KAAKihG,kBACEjhG,KAAKopF,cAAcpX,qBAAqBF,GAGnD,kBACS9xE,KAAKmhG,oBACkBnhG,KAAKkmF,QAAQqa,YAAcvgG,KAAKohG,WAAW/oC,wBAE/Dr4D,KAAKwyD,YAAYhM,cAAcuP,QAK3C,aAIQ/1D,KAAKkmF,QAAQqa,UACbvgG,KAAKohG,WAAWC,+BAEVrhG,KAAKmhG,kBAMXnhG,KAAKwyD,YAAYhM,cAAcuP,QAIvC,gBACI,MAAMurC,EAAUthG,KAAK+gG,qCAErB,GAAI/gG,KAAKkmF,QAAQsa,cAAgBc,GAAoC,mBAAlBA,EAAQvrC,MAAsB,CAC7E,MAAMwrC,EAAgBvhG,KAAKq3D,UAAUkqC,cAC/B13F,EAAU7J,KAAKwyD,YAAYhM,cAK5B+6C,GAAiBA,IAAkBvhG,KAAKq3D,UAAUp1D,MAAQs/F,IAAkB13F,IAC7EA,EAAQgD,SAAS00F,IACjBD,EAAQvrC,QAGZ/1D,KAAKohG,YACLphG,KAAKohG,WAAWr4F,UAOxB,kBACS/I,KAAKohG,aACNphG,KAAKohG,WAAaphG,KAAK8gG,kBAAkB1iG,OAAO4B,KAAKwyD,YAAYhM,gBAEjExmD,KAAKq3D,YACLr3D,KAAK+gG,qCAAuC/gG,KAAKq3D,UAAUkqC,cAEvDvhG,KAAKwyD,YAAYhM,cAAcuP,OAI/B1zD,QAAQP,UAAU2B,KAAK,IAAMzD,KAAKwyD,YAAYhM,cAAcuP,UAKxE,iBACI,MAAMlsD,EAAU7J,KAAKwyD,YAAYhM,cAC3B+6C,EAAgBvhG,KAAKq3D,UAAUkqC,cACrC,OAAO13F,IAAY03F,GAAiB13F,EAAQgD,SAAS00F,GAGzD,iBAAiBr2F,GACS,UAAlBA,EAAMO,QACNzL,KAAKwhG,aAEkB,SAAlBt2F,EAAMO,SACXzL,KAAKyhG,gBAETzhG,KAAKghG,uBAAuBx3C,KAAKt+C,GAGrC,kBAAkBA,GACdlL,KAAKghG,uBAAuBx3C,KAAKt+C,GAGrC,sBACIlL,KAAKozB,OAAS,OAGdpzB,KAAK29E,mBAAmB95E,gBA6DhC,OA1DJg9F,EAAmBr+F,UAAO,SAAoCxE,GAAK,OAAO,IAAKA,GAAK6iG,GAAoB,EAAA,+BAAyB,EAAA,YAAoB,EAAA,+BAAyB,IAA0B,EAAA,+BAAyB,EAAA,mBAA2B,EAAA,+BAAyB,EAAA,SAAU,GAAI,EAAA,+BAAyBX,MAC5TW,EAAmB74D,UAAO,EAAA,+BAAyB,CAAErmC,KAAMk/F,EAAoB18F,UAAW,CAAC,CAAC,yBAA0Bo3E,UAAW,SAAkCpzC,EAAIrsB,GAG/J,IAAI0sC,EAH2K,EAALrgB,GAC1K,EAAA,+BAAyB,IAAiB,GACnC,EAALA,GAEF,EAAA,4BAAsBqgB,EAAK,EAAA,8BAA0B1sC,EAAIstE,cAAgB5gC,EAAG7jB,QAC3EmiC,UAAW,CAAC,WAAY,KAAM,aAAc,OAAQ,EAAG,wBAAyBtf,SAAU,EAAGb,aAAc,SAAyCxe,EAAIrsB,GAAgB,EAALqsB,GACpK,EAAA,8CAAwC,0BAAA,SAAyGsf,GAAU,OAAO3rC,EAAI4lF,kBAAkBj6C,KAAxL,CAAoM,yBAAA,SAAuGA,GAAU,OAAO3rC,EAAI6lF,iBAAiBl6C,MAC1U,EAALtf,IACF,EAAA,yBAAmB,KAAMrsB,EAAIod,IAA7B,CAAkC,OAAQpd,EAAIoqE,QAAQia,KAAtD,CAA4D,kBAAmBrkF,EAAIoqE,QAAQ/M,UAAY,KAAOr9D,EAAIolF,gBAAlH,CAAmI,aAAcplF,EAAIoqE,QAAQ/M,UAA7J,CAAwK,mBAAoBr9D,EAAIoqE,QAAQma,iBAAmB,MAC3N,EAAA,0CAAoC,mBAAoBvkF,EAAIsX,UAC3Ds0B,SAAU,CAAC,EAAA,yCAAoCzf,MAAO,EAAGC,KAAM,EAAGk1C,OAAQ,CAAC,CAAC,kBAAmB,KAAMp6E,SAAU,SAAqCmlC,EAAIrsB,GAAgB,EAALqsB,GACpK,EAAA,wBAAkB,EAAG83D,GAA2C,EAAG,EAAG,cAAe,IACpF73D,WAAY,CAAC,IAAyBviC,OAAQ,CAAC,s7BAAu7BkzB,cAAe,EAAGptB,KAAM,CAAEvF,UAAW,CAACs6F,GAAoBC,oBA6C9hCE,GA7M4B,GAyNnCe,GAAW,EAIf,MAAM,GACF,YAAYvb,EAAawb,EAAoBx9E,EAAK,cAAcu9E,MAC5D5hG,KAAKqmF,YAAcA,EACnBrmF,KAAK6hG,mBAAqBA,EAC1B7hG,KAAKqkB,GAAKA,EAEVrkB,KAAKogG,aAAepgG,KAAK6hG,mBAAmB3b,QAAQka,aAEpDpgG,KAAK05F,aAAe,IAAI,GAAA,QAExB15F,KAAK8hG,aAAe,IAAI,GAAA,QAExB9hG,KAAK+hG,cAAgB,IAAI,GAAA,QAEzB/hG,KAAKozB,OAAS,EAEdyuE,EAAmB3oE,IAAM7U,EAEzBw9E,EAAmBb,uBAAuBv+D,KAAKvhC,GAAOgK,GAA6B,SAApBA,EAAMzD,WAA0C,UAAlByD,EAAMO,SAAsBi5B,GAAK,IACzH/E,UAAU,KACX3/B,KAAK05F,aAAa5nF,OAClB9R,KAAK05F,aAAap7D,aAGtBujE,EAAmBb,uBAAuBv+D,KAAKvhC,GAAOgK,GAA6B,SAApBA,EAAMzD,WAA0C,SAAlByD,EAAMO,SAAqBi5B,GAAK,IAAI/E,UAAU,KACvIs6B,aAAaj6D,KAAKgiG,uBAClBhiG,KAAKiiG,uBAET5b,EAAYyW,cAAcn9D,UAAU,KAChC3/B,KAAK+hG,cAAcjwF,KAAK9R,KAAKkiG,SAC7BliG,KAAK+hG,cAAczjE,WACnBt+B,KAAK8hG,aAAahwF,KAAK9R,KAAKkiG,SAC5BliG,KAAK8hG,aAAaxjE,WAClBt+B,KAAKmiG,kBAAoB,KACzBniG,KAAKqmF,YAAY5hC,YAErB4hC,EAAY+b,gBACP3/D,KAAKvhC,GAAOgK,GvDrWV,KuDsWIA,EAAMypD,UAAuB30D,KAAKogG,eAAiB1yC,GAAexiD,KAExEy0B,UAAUz0B,IACXA,EAAMgqD,iBACNl1D,KAAKqnF,UAEThB,EAAYgc,gBAAgB1iE,UAAU,KAC9B3/B,KAAKogG,aACLpgG,KAAK6hG,mBAAmBS,kBAGxBtiG,KAAKqnF,UAQjB,MAAMkb,GACFviG,KAAKkiG,QAAUK,EAEfviG,KAAK6hG,mBAAmBb,uBAAuBv+D,KAAKvhC,GAAOgK,GAA6B,UAApBA,EAAMzD,WAAwBi9B,GAAK,IAClG/E,UAAUz0B,IACXlL,KAAK+hG,cAAcjwF,KAAKywF,GACxBviG,KAAK+hG,cAAczjE,WACnBt+B,KAAKqmF,YAAYoE,iBAMjBzqF,KAAKgiG,sBAAwBllE,WAAW,IAAM98B,KAAKiiG,qBAAsB/2F,EAAMjE,UAAY,OAE/FjH,KAAK6hG,mBAAmBW,sBACxBxiG,KAAKozB,OAAS,EAKlB,cACI,OAAOpzB,KAAK05F,aAAargC,eAK7B,cACI,OAAOr5D,KAAK8hG,aAAazoC,eAK7B,eACI,OAAOr5D,KAAK+hG,cAAc1oC,eAK9B,gBACI,OAAOr5D,KAAKqmF,YAAYgc,gBAK5B,gBACI,OAAOriG,KAAKqmF,YAAY+b,gBAM5B,eAAe56F,GACX,IAAIsjF,EAAW9qF,KAAKyiG,uBAcpB,OAbIj7F,IAAaA,EAASg8D,MAAQh8D,EAASu8D,OACvCv8D,EAASg8D,KAAOsnB,EAAStnB,KAAKh8D,EAASg8D,MAAQsnB,EAAS/mB,MAAMv8D,EAASu8D,OAGvE+mB,EAAS0S,qBAETh2F,IAAaA,EAASk8D,KAAOl8D,EAASy8D,QACtCz8D,EAASk8D,IAAMonB,EAASpnB,IAAIl8D,EAASk8D,KAAOonB,EAAS7mB,OAAOz8D,EAASy8D,QAGrE6mB,EAAS4X,mBAEb1iG,KAAKqmF,YAAYI,iBACVzmF,KAOX,WAAWyjE,EAAQ,GAAIE,EAAS,IAG5B,OAFA3jE,KAAKyiG,uBAAuBh/B,MAAMA,GAAOE,OAAOA,GAChD3jE,KAAKqmF,YAAYI,iBACVzmF,KAGX,cAAc2xB,GAEV,OADA3xB,KAAKqmF,YAAYsc,cAAchxE,GACxB3xB,KAGX,iBAAiB2xB,GAEb,OADA3xB,KAAKqmF,YAAYuc,iBAAiBjxE,GAC3B3xB,KAGX,WACI,OAAOA,KAAKozB,OAMhB,qBACIpzB,KAAKozB,OAAS,EACdpzB,KAAKqmF,YAAY5hC,UAGrB,uBACI,OAAOzkD,KAAKqmF,YAAYyK,YAAY/G,kBAY5C,MAAM8Y,GAAkB,IAAI,EAAA,eAAe,iBAErCC,GAA6B,IAAI,EAAA,eAAe,8BAEhDC,GAA6B,IAAI,EAAA,eAAe,8BAUhDC,GAAsC,CACxCl+F,QAASi+F,GACT39F,KAAM,CAAC,IACPD,WAPJ,SAAqD6iF,GACjD,MAAO,IAAMA,EAAQ+N,iBAAiBzO,UAW1C,IAAI,GAA0B,MAC1B,MAAM2b,EACF,YAAYnH,EAAU7F,EAKtBjpB,EAAWpT,EAAiB6tB,EAAgByb,EAAepX,GACvD9rF,KAAK87F,SAAWA,EAChB97F,KAAKi2F,UAAYA,EACjBj2F,KAAK45D,gBAAkBA,EACvB55D,KAAKkjG,cAAgBA,EACrBljG,KAAK8rF,kBAAoBA,EACzB9rF,KAAKmjG,wBAA0B,GAC/BnjG,KAAKojG,2BAA6B,IAAI,GAAA,QACtCpjG,KAAKqjG,wBAA0B,IAAI,GAAA,QACnCrjG,KAAKsjG,oBAAsB,IAAI3jG,IAM/BK,KAAKujG,eAAiB,OAAA,GAAA,MAAA,CAAM,IAAMvjG,KAAKwjG,YAAYtgG,OAC/ClD,KAAKyjG,gBACLzjG,KAAKyjG,gBAAgBhhE,KAAKgD,QAAU/kC,KACxCV,KAAK6pF,gBAAkBpC,EAG3B,kBACI,OAAOznF,KAAKkjG,cAAgBljG,KAAKkjG,cAAcM,YAAcxjG,KAAKmjG,wBAGtE,kBACI,OAAOnjG,KAAKkjG,cAAgBljG,KAAKkjG,cAAchG,YAAcl9F,KAAKqjG,wBAEtE,sBACI,MAAMz6E,EAAS5oB,KAAKkjG,cACpB,OAAOt6E,EAASA,EAAO66E,gBAAkBzjG,KAAKojG,2BASlD,KAAKM,EAAwB1iG,GAEzB,IADAA,EAsOZ,SAA8BA,EAAQ+4D,GAClC,OAAOv8D,OAAO2lB,OAAO3lB,OAAO2lB,OAAO,GAAI42C,GAAiB/4D,GAD5D,CAtO0CA,EAAQhB,KAAK45D,iBAAmB,IAAIsmC,KACvD77E,IAAMrkB,KAAK2jG,cAAc3iG,EAAOqjB,IACvC,MAAMjjB,MAAM,mBAAmBJ,EAAOqjB,qDAE1C,MAAMiiE,EAAatmF,KAAK08F,eAAe17F,GACjC2/F,EAAkB3gG,KAAK4jG,uBAAuBtd,EAAYtlF,GAC1D6iG,EAAY7jG,KAAK8jG,qBAAqBJ,EAAwB/C,EAAiBra,EAAYtlF,GAQjG,OANKhB,KAAKwjG,YAAYtgG,QAClBlD,KAAK+jG,+CAET/jG,KAAKwjG,YAAY/iG,KAAKojG,GACtBA,EAAUG,cAAcrkE,UAAU,IAAM3/B,KAAKikG,kBAAkBJ,IAC/D7jG,KAAKk9F,YAAYprF,KAAK+xF,GACfA,EAKX,WACI7jG,KAAKkkG,cAAclkG,KAAKwjG,aAM5B,cAAcn/E,GACV,OAAOrkB,KAAKwjG,YAAYziG,KAAKojG,GAAUA,EAAO9/E,KAAOA,GAEzD,cAGIrkB,KAAKkkG,cAAclkG,KAAKmjG,yBACxBnjG,KAAKojG,2BAA2B9kE,WAChCt+B,KAAKqjG,wBAAwB/kE,WAOjC,eAAet9B,GACX,MAAMw1F,EAAgBx2F,KAAKokG,kBAAkBpjG,GAC7C,OAAOhB,KAAK87F,SAAS19F,OAAOo4F,GAOhC,kBAAkB6N,GACd,MAAMz9D,EAAQ,IAAI4gD,GAAc,CAC5BuC,iBAAkB/pF,KAAK87F,SAASt0F,WAAW61F,SAC3C5V,eAAgB4c,EAAa5c,gBAAkBznF,KAAK6pF,kBACpDnC,WAAY2c,EAAa3c,WACzBC,YAAa0c,EAAa1c,YAC1B3zB,UAAWqwC,EAAarwC,UACxBi3B,SAAUoZ,EAAapZ,SACvBvP,UAAW2oB,EAAa3oB,UACxBwP,SAAUmZ,EAAanZ,SACvBC,UAAWkZ,EAAalZ,UACxBtD,oBAAqBwc,EAAa5D,oBAKtC,OAHI4D,EAAazc,gBACbhhD,EAAMghD,cAAgByc,EAAazc,eAEhChhD,EAQX,uBAAuBohD,EAAShnF,GAC5B,MACMi3C,EAAW,EAAA,SAAS75C,OAAO,CAC7BwqB,OAFiB5nB,GAAUA,EAAOuwE,kBAAoBvwE,EAAOuwE,iBAAiBt5B,UAEtDj4C,KAAKi2F,UAC7BpxF,UAAW,CAAC,CAAEC,QAASo7F,GAAiBn7F,SAAU/D,MAEhDu7F,EAAkB,IAAIjrB,GAAgB,GAAoBtwE,EAAOuwE,iBAAkBt5B,EAAUj3C,EAAOy0C,0BAE1G,OADqBuyC,EAAQ3yC,OAAOknD,GAChBrzC,SAWxB,qBAAqBw6C,EAAwB/C,EAAiBra,EAAYtlF,GAGtE,MAAM6iG,EAAY,IAAI,GAAavd,EAAYqa,EAAiB3/F,EAAOqjB,IACvE,GAAIq/E,aAAkC,EAAA,YAClC/C,EAAgB3uB,qBAAqB,IAAIR,GAAekyB,EAAwB,KAAM,CAAExrB,UAAWl3E,EAAO2K,KAAMk4F,UAAAA,SAE/G,CACD,MAAM5rD,EAAWj4C,KAAK48F,gBAAgB57F,EAAQ6iG,EAAWlD,GACnD9D,EAAa8D,EAAgB5uB,sBAAsB,IAAIT,GAAgBoyB,EAAwB1iG,EAAOuwE,iBAAkBt5B,IAC9H4rD,EAAU1B,kBAAoBtF,EAAW3zC,SAK7C,OAHA26C,EACKzO,WAAWp0F,EAAOyiE,MAAOziE,EAAO2iE,QAChC8iB,eAAezlF,EAAOwG,UACpBq8F,EAUX,gBAAgB7iG,EAAQ6iG,EAAWlD,GAC/B,MAAM2D,EAAetjG,GAAUA,EAAOuwE,kBAAoBvwE,EAAOuwE,iBAAiBt5B,SAK5EpzC,EAAY,CACd,CAAEC,QAAS,GAAoBC,SAAU47F,GACzC,CAAE77F,QAAS+9F,GAAiB99F,SAAU/D,EAAO2K,MAC7C,CAAE7G,QAAS,GAAcC,SAAU8+F,IASvC,OAPI7iG,EAAOgzD,WACLswC,GAAiBA,EAAa3mG,IAAI,GAAgB,OACpDkH,EAAUpE,KAAK,CACXqE,QAAS,GACTC,SAAU,CAAEhH,MAAOiD,EAAOgzD,UAAWzP,OAAQ,OAAA,GAAA,GAAA,MAG9C,EAAA,SAASnmD,OAAO,CAAEwqB,OAAQ07E,GAAgBtkG,KAAKi2F,UAAWpxF,UAAAA,IAMrE,kBAAkBg/F,GACd,MAAMn/E,EAAQ1kB,KAAKwjG,YAAYt3F,QAAQ23F,GACnCn/E,GAAS,IACT1kB,KAAKwjG,YAAY/zF,OAAOiV,EAAO,GAG1B1kB,KAAKwjG,YAAYtgG,SAClBlD,KAAKsjG,oBAAoBnjG,QAAQ,CAACouE,EAAe1kE,KACzC0kE,EACA1kE,EAAQyG,aAAa,cAAei+D,GAGpC1kE,EAAQsxB,gBAAgB,iBAGhCn7B,KAAKsjG,oBAAoB5/F,QACzB1D,KAAKyjG,gBAAgB3xF,SAOjC,+CACI,MAAMgiF,EAAmB9zF,KAAK8rF,kBAAkB6G,sBAEhD,GAAImB,EAAiBh4B,cAAe,CAChC,MAAMyoC,EAAWzQ,EAAiBh4B,cAAcpyB,SAChD,IAAK,IAAI5sC,EAAIynG,EAASrhG,OAAS,EAAGpG,GAAK,EAAGA,IAAK,CAC3C,IAAI0nG,EAAUD,EAASznG,GACnB0nG,IAAY1Q,GACS,WAArB0Q,EAAQ7tC,UACa,UAArB6tC,EAAQ7tC,UACP6tC,EAAQtuC,aAAa,eACtBl2D,KAAKsjG,oBAAoBlhG,IAAIoiG,EAASA,EAAQttC,aAAa,gBAC3DstC,EAAQl0F,aAAa,cAAe,WAMpD,cAAcm0F,GACV,IAAI3nG,EAAI2nG,EAAQvhG,OAChB,KAAOpG,KAKH2nG,EAAQ3nG,GAAGuqF,SAgCvB,OA5BJ4b,EAAUzgG,UAAO,SAA2BxE,GAAK,OAAO,IAAKA,GAAKilG,GAAW,EAAA,sBAAgB,IAAiB,EAAA,sBAAgB,EAAA,UAAkB,EAAA,sBAAgB,EAAA,SAAiB,GAAI,EAAA,sBAAgBH,GAA4B,GAAI,EAAA,sBAAgBC,IAA6B,EAAA,sBAAgBE,EAAW,IAAK,EAAA,sBAAgB,MAClUA,EAAUxgG,WAAQ,EAAA,gCAA0B,CAAEC,MAAOugG,EAAWvjG,QAAS,SAAU1B,GAAK,OAAOilG,EAAUzgG,UAAKxE,MA2BnGilG,GA7QmB,GAwd1B,GAAgC,MAChC,MAAMyB,GA4CN,OA1CJA,EAAgBr/F,UAAO,EAAA,8BAAwB,CAAE1D,KAAM+iG,IACvDA,EAAgBp/F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAK0mG,IAAuB7/F,UAAW,CAC3I,GACAm+F,IACDz9F,QAAS,CAAC,CACL,GACA,GACA,IACD,MAkCAm/F,GA7CyB,GCllBhC,GAAgC,MAChC,MAAMC,GAaN,OAXJA,EAAgBt/F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMgjG,IACvDA,EAAgBr/F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAK2mG,IAAuBp/F,QAAS,CAAC,CAAC,OAUxIo/F,GAdyB,GCiGhC,GAA+B,MAC/B,MAAMC,GAkCN,OAhCJA,EAAev/F,UAAO,EAAA,8BAAwB,CAAE1D,KAAMijG,IACtDA,EAAet/F,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAK4mG,IAAsB//F,UAAW,CAAC,IAAoBU,QAAS,CAAC,CACnK,GACA,IACD,GAGH,MAyBGq/F,GAnCwB,GCpV/B,GAAkC,MAClC,MAAMC,EACF,cAKI7kG,KAAKinD,QAAU,IAAI,GAAA,QAEnBjnD,KAAK8kG,cAAgB,WAErB9kG,KAAK+kG,kBAAoB,gBAEzB/kG,KAAKglG,eAAiB,iBAEtBhlG,KAAKilG,eAAiB,aAEtBjlG,KAAKklG,cAAgB,gBAErBllG,KAAKmlG,cAAgB,YAErBnlG,KAAKolG,mBAAqB,oBAE1BplG,KAAKqlG,mBAAqB,gBAE1BrlG,KAAKslG,uBAAyB,cAE9BtlG,KAAKulG,2BAA6B,wBAGtC,gBAAgB/xE,EAAO6G,GACnB,MAAO,GAAG7G,YAAgB6G,KASlC,OANJwqE,EAAkBriG,UAAO,SAAmCxE,GAAK,OAAO,IAAKA,GAAK6mG,IAC9EA,EAAkBpiG,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAuC,OAAO,IAAImlG,GAAwBniG,MAAOmiG,EAAmBplG,WAAY,SAKjKolG,GAxC2B,GAoXtC,MAAMW,GACF,YAEAhyE,EAEA6G,GACIr6B,KAAKwzB,MAAQA,EACbxzB,KAAKq6B,IAAMA,GAwJnB,MAcMorE,GAAoC,IAAI,EAAA,eAAe,qCAE7D,IAAI,GAAgD,MAChD,MAAMC,EACF,YAAYC,GACR3lG,KAAK2lG,aAAeA,EAExB,kBAAkB/jC,EAAMgkC,GACpB,IAAI,MAAEpyE,EAAK,IAAE6G,GAAQurE,EAWrB,OAVa,MAATpyE,EACAA,EAAQouC,EAEI,MAAPvnC,GAAeunC,GAAQ5hE,KAAK2lG,aAAahkC,YAAYC,EAAMpuC,IAAU,EAC1E6G,EAAMunC,GAGNpuC,EAAQouC,EACRvnC,EAAM,MAEH,IAAImrE,GAAUhyE,EAAO6G,GAEhC,cAAcwrE,EAAYD,GACtB,IAAIpyE,EAAQ,KACR6G,EAAM,KAKV,OAJIurE,EAAapyE,QAAUoyE,EAAavrE,KAAOwrE,IAC3CryE,EAAQoyE,EAAapyE,MACrB6G,EAAMwrE,GAEH,IAAIL,GAAUhyE,EAAO6G,IAWpC,OARJqrE,EAAgCljG,UAAO,SAAiDxE,GAAK,OAAO,IAAKA,GAAK0nG,GAAiC,EAAA,sBAAgB,MAC/JA,EAAgCjjG,WAAQ,EAAA,gCAA0B,CAAEC,MAAOgjG,EAAiChmG,QAAS,SAAU1B,GAAK,OAAO0nG,EAAgCljG,UAAKxE,MAOrK0nG,GArCyC,GAy/CpD,MAMMI,GAAkD,CACpDhhG,QAPmC,IAAI,EAAA,eAAe,kCAQtDM,KAAM,CAAC,IACPD,WAPJ,SAAgD6iF,GAC5C,MAAO,IAAMA,EAAQ+N,iBAAiBxO,eA4xC1C,IAokBI,GAAoC,MACpC,MAAMwe,GAoFN,OAlFJA,EAAoB1gG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMokG,IAC3DA,EAAoBzgG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAqC1B,GAAK,OAAO,IAAKA,GAAK+nG,IAA2BlhG,UAAW,CACvJ,GACAihG,GACA,CACIhhG,QAAS2gG,GACT3pE,SAAU,KAEfv2B,QAAS,CAAC,CACL,EAAA,aACA,GACA,GACA,GACA,GACA,IACD,MAmEAwgG,GArF6B,GCn+HpC,GAAiC,MACjC,MAAMC,GAaN,OAXJA,EAAiB3gG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMqkG,IACxDA,EAAiB1gG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAkC1B,GAAK,OAAO,IAAKA,GAAKgoG,IAAwBzgG,QAAS,CAAC,CAAC,IAAkB,MAU7JygG,GAd0B,GC8pBjC,GAAkC,MAClC,MAAMC,GA+BN,OA7BJA,EAAkB5gG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMskG,IACzDA,EAAkB3gG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAmC1B,GAAK,OAAO,IAAKA,GAAKioG,IAAyB1gG,QAAS,CAAC,CAAC,GAAe,IAAkB,GAClL,MA2BG0gG,GAhC2B,GCyRlC,GAA8B,MAC9B,MAAMC,GAuCN,OArCJA,EAAc7gG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMukG,IACrDA,EAAc5gG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAKkoG,IAAqB3gG,QAAS,CAAC,CAAC,GAAe,GAAiB,GAAiB,GAAyB,EAAA,cAAe,GAC9N,GACA,GACA,MAiCG2gG,GAxCuB,GCzHlC,MAMMC,GAA4C,CAC9CrhG,QAP6B,IAAI,EAAA,eAAe,4BAQhDM,KAAM,CAAC,IACPD,WAPJ,SAA0C6iF,GACtC,MAAO,IAAMA,EAAQ+N,iBAAiBxO,eAc1C,IA6eI,GAAyC,MACzC,MAAM6e,GAgBN,OAdJA,EAAyB/gG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMykG,IAChEA,EAAyB9gG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA0C1B,GAAK,OAAO,IAAKA,GAAKooG,IAAgCvhG,UAAW,CAACshG,IAA4C5gG,QAAS,CAAC,MAa1N6gG,GAjBkC,GAmBzC,GAA8B,MAC9B,MAAMC,GA6BN,OA3BJA,EAAchhG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM0kG,IACrDA,EAAc/gG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAKqoG,IAAqBxhG,UAAW,CAACshG,IAA4C5gG,QAAS,CAAC,CACxL,EAAA,aACA,GACA,GACA,GACA,IACD,GAAqB,GAAiB,MAoBtC8gG,GA9BuB,GC9tClC,MAgCMC,GAAsC,CACxCxhG,QAT+B,IAAI,EAAA,eAAe,8BAUlDM,KAAM,CAAC,IACPD,WATJ,SAAqD6iF,GACjD,MAAO,IAAMA,EAAQ+N,iBAAiBxO,eAoC1C,IA2nCI,GAAgC,MAChC,MAAMgf,GAuCN,OArCJA,EAAgBlhG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM4kG,IACvDA,EAAgBjhG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAKuoG,IAAuB1hG,UAAW,CAACyhG,IAAsC/gG,QAAS,CAAC,CACxL,EAAA,aACA,GACA,GACA,IACD,GACH,GACA,GACA,MA4BGghG,GAxCyB,GCzyCpC,MAMMC,GAA+C,CACjD1hG,QAPgC,IAAI,EAAA,eAAe,+BAQnDM,KAAM,CAAC,IACPD,WAPJ,SAA6C6iF,GACzC,MAAO,IAAMA,EAAQ+N,iBAAiBxO,WAAW,CAAEP,eArB5B,OAgD3B,IA0lBI,GAAiC,MACjC,MAAMyf,GA4BN,OA1BJA,EAAiBphG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM8kG,IACxDA,EAAiBnhG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAkC1B,GAAK,OAAO,IAAKA,GAAKyoG,IAAwB5hG,UAAW,CAAC2hG,IAA+CjhG,QAAS,CAAC,CACpM,GACA,EAAA,aACA,GACA,IACD,GAAiB,MAoBjBkhG,GA7B0B,GC9kBjC,GAAiC,MACjC,MAAMC,EACF,cAKI1mG,KAAKinD,QAAU,IAAI,GAAA,QAEnBjnD,KAAK2mG,kBAAoB,kBAEzB3mG,KAAK4mG,cAAgB,YAErB5mG,KAAK6mG,kBAAoB,gBAEzB7mG,KAAK8mG,eAAiB,aAEtB9mG,KAAK+mG,cAAgB,YAErB/mG,KAAKgnG,cAAgB,CAACC,EAAMC,EAAUhkG,KAClC,GAAc,GAAVA,GAA2B,GAAZgkG,EACf,MAAO,QAAQhkG,EAGnB,MAAMsM,EAAay3F,EAAOC,EAK1B,MAAO,GAAG13F,EAAa,YAHNA,GAHjBtM,EAASuF,KAAKC,IAAIxF,EAAQ,IAItBuF,KAAKS,IAAIsG,EAAa03F,EAAUhkG,GAChCsM,EAAa03F,QAC4BhkG,MAUzD,OANJwjG,EAAiBlkG,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAK0oG,IAC5EA,EAAiBjkG,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAsC,OAAO,IAAIgnG,GAAuBhkG,MAAOgkG,EAAkBjnG,WAAY,SAK7JinG,GAvC0B,GA8CrC,MAAMS,GAA8B,CAEhCriG,QAAS,GACTM,KAAM,CAAC,CAAC,IAAI,EAAA,SAAY,IAAI,EAAA,SAAY,KACxCD,WARJ,SAA6CiiG,GACzC,OAAOA,GAAc,IAAI,KAqC7B,IAiSI,GAAmC,MACnC,MAAMC,GA2BN,OAzBJA,EAAmBhiG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM0lG,IAC1DA,EAAmB/hG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAoC1B,GAAK,OAAO,IAAKA,GAAKqpG,IAA0BxiG,UAAW,CAACsiG,IAA8B5hG,QAAS,CAAC,CACzL,EAAA,aACA,GACA,GACA,OAoBD8hG,GA5B4B,GCtFnC,GAAyC,MACzC,MAAMC,GAoBN,OAlBJA,EAAyBjiG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM2lG,IAChEA,EAAyBhiG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA0C1B,GAAK,OAAO,IAAKA,GAAKspG,IAAgC/hG,QAAS,CAAC,CAAC,GAAiB,EAAA,cAAe,MAiBnM+hG,GArBkC,GCiSzC,GAA+B,MAC/B,MAAMC,GAaN,OAXJA,EAAeliG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM4lG,IACtDA,EAAejiG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAKupG,IAAsBhiG,QAAS,CAAC,CAAC,GAAiB,IAAkB,MAUxKgiG,GAdwB,GCub/B,GAAiC,MACjC,MAAMC,GA4CN,OA1CJA,EAAiBniG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM6lG,IACxDA,EAAiBliG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAkC1B,GAAK,OAAO,IAAKA,GAAKwpG,IAAwBjiG,QAAS,CAAC,CACzI,EAAA,aACA,GACA,GACA,IACD,GACH,MAmCGiiG,GA7C0B,GC1tBjC,GAAuD,MACvD,MAAMC,GAYN,OAVJA,EAAuCpiG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM8lG,IAC9EA,EAAuCniG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAwD1B,GAAK,OAAO,IAAKA,GAAKypG,MASpJA,GAbgD,GAevD,GAAqC,MACrC,MAAMC,GA6BN,OA3BJA,EAAqBriG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM+lG,IAC5DA,EAAqBpiG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAsC1B,GAAK,OAAO,IAAKA,GAAK0pG,IAA4BniG,QAAS,CAAC,CACrJ,GACA,GACA,GACA,IACD,GAAwC,MAqBxCmiG,GA9B8B,GCqbrC,GAAgC,MAChC,MAAMC,GAaN,OAXJA,EAAgBtiG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMgmG,IACvDA,EAAgBriG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAK2pG,IAAuBpiG,QAAS,CAAC,CAAC,EAAA,aAAc,IAAkB,MAUxKoiG,GAdyB,GC/hBhC,GAAkC,MAClC,MAAMC,EACF,cAKI5nG,KAAKinD,QAAU,IAAI,GAAA,QAEnBjnD,KAAK6nG,gBAAmBxjF,GACb,sBAAsBA,GAUzC,OANJujF,EAAkBplG,UAAO,SAAmCxE,GAAK,OAAO,IAAKA,GAAK4pG,IAC9EA,EAAkBnlG,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAuC,OAAO,IAAIkoG,GAAwBllG,MAAOklG,EAAmBnoG,WAAY,SAKjKmoG,GApB2B,GA2BtC,MAAME,GAAgC,CAElChjG,QAAS,GACTM,KAAM,CAAC,CAAC,IAAI,EAAA,SAAY,IAAI,EAAA,SAAY,KACxCD,WARJ,SAA+CiiG,GAC3C,OAAOA,GAAc,IAAI,KA+B7B,IAqQI,GAA8B,MAC9B,MAAMW,GAcN,OAZJA,EAAc1iG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMomG,IACrDA,EAAcziG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAK+pG,IAAqBljG,UAAW,CAACijG,IAAgCviG,QAAS,CAAC,CAAC,EAAA,iBAW9KwiG,GAfuB,GCoB9B,GAAiC,MACjC,MAAMC,GA2BN,OAzBJA,EAAiB3iG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMqmG,IACxDA,EAAiB1iG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAkC1B,GAAK,OAAO,IAAKA,GAAKgqG,IAAwBziG,QAAS,CAAC,CAAC,OAwB3IyiG,GA5B0B,GC9bjC,GAA+B,MAC/B,MAAMC,EACF,cAKIjoG,KAAKinD,QAAU,IAAI,GAAA,QAEnBjnD,KAAKkoG,cAAgB,YAS7B,OANJD,EAAezlG,UAAO,SAAgCxE,GAAK,OAAO,IAAKA,GAAKiqG,IACxEA,EAAexlG,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAoC,OAAO,IAAIuoG,GAAqBvlG,MAAOulG,EAAgBxoG,WAAY,SAKrJwoG,GAlBwB,GAyBnC,MAAME,GAA4B,CAC9BrjG,QAAS,GACTM,KAAM,CAAC,CAAC,IAAI,EAAA,SAAY,IAAI,EAAA,SAAY,KACxCD,WAPJ,SAA2CiiG,GACvC,OAAOA,GAAc,IAAI,KAiM7B,IAmVI,GAAiC,MACjC,MAAMgB,GAyDN,OAvDJA,EAAiB/iG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMymG,IACxDA,EAAiB9iG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAkC1B,GAAK,OAAO,IAAKA,GAAKoqG,IAAwBvjG,UAAW,CAACsjG,GAA2B,IAAoB5iG,QAAS,CAAC,CACpM,GACA,EAAA,aACA,GACA,GACA,GACA,GACA,IACD,MA8CA6iG,GA1D0B,GCg3CjC,GAA+B,MAC/B,MAAMC,GAYN,OAVJA,EAAehjG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM0mG,IACtDA,EAAe/iG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAKqqG,MASpGA,GAbwB,GCrlD/B,GAA+B,MAC/B,MAAMC,GAoBN,OAlBJA,EAAejjG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM2mG,IACtDA,EAAehjG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAKsqG,IAAsB/iG,QAAS,CAAC,CACnI,GACA,IACD,MAcA+iG,GArBwB,GC3X/B,GAAiC,MACjC,MAAMC,GAaN,OAXJA,EAAiBljG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM4mG,IACxDA,EAAiBjjG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAkC1B,GAAK,OAAO,IAAKA,GAAKuqG,IAAwBhjG,QAAS,CAAC,CAAC,IAAkB,MAU7JgjG,GAd0B,GC6FjC,GAA+B,MAC/B,MAAMC,EAEF,YAAYxlG,GACRhD,KAAKgD,SAAWA,GAiBxB,OAdJwlG,EAAehmG,UAAO,SAAgCxE,GAAK,OAAO,IAAKA,GAAKwqG,GAAgB,EAAA,+BAAyB,EAAA,eACrHA,EAAetkG,UAAO,EAAA,+BAAyB,CAAEvC,KAAM6mG,EAAgBrkG,UAAW,CAAC,CAAC,GAAI,iBAAkB,KAAMC,OAAQ,CAAEqkG,KAAM,CAAC,qBAAsB,WAa5ID,GArBwB,GAmtB/B,GAA8B,MAC9B,MAAME,GAaN,OAXJA,EAAcrjG,UAAO,EAAA,8BAAwB,CAAE1D,KAAM+mG,IACrDA,EAAcpjG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAK0qG,IAAqB7jG,UAAW,CAAC,GAAc,MAUjJ6jG,GAduB,GCplB9B,GAA8B,MAC9B,MAAMC,GAaN,OAXJA,EAActjG,UAAO,EAAA,8BAAwB,CAAE1D,KAAMgnG,IACrDA,EAAcrjG,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAA+B1B,GAAK,OAAO,IAAKA,GAAK2qG,IAAqBpjG,QAAS,CAAC,CAAC,GAAe,IAAkB,MAUnKojG,GAduB,GC7UlC,SAAS,GAAaC,EAAMppE,GACxB,IAAK,IAAInhC,KAAOmhC,EACRA,EAAO7gC,eAAeN,KACtBuqG,EAAKvqG,GAAOmhC,EAAOnhC,IAG3B,OAAOuqG,EAQX,SAASC,GAA6Bh/F,EAASwgF,GAC3C,MAAMye,EAAaze,EAAS,GAAK,OACjC,GAAaxgF,EAAQgE,MAAO,CACxBk7F,YAAa1e,EAAS,GAAK,OAC3B2e,eAAgB3e,EAAS,GAAK,OAC9B4e,wBAAyB5e,EAAS,GAAK,cACvCye,WAAYA,EACZI,aAAcJ,EACdK,iBAAkBL,EAClBM,cAAeN,IAYvB,SAASO,GAAsBtrG,GAE3B,MAAMurG,EAAavrG,EAAMsS,cAAcnE,QAAQ,OAAS,EAAI,EAAI,IAChE,OAAO8C,WAAWjR,GAASurG,EAoB/B,SAASC,GAAsBrrC,EAAe7gE,GAE1C,OADc6gE,EAAc/tD,iBAAiB9S,GAChC0W,MAAM,KAAKlI,IAAIk9B,GAAQA,EAAK3nB,QAW7C,SAASooF,GAAqB3/F,GAC1B,MAAM4/F,EAAa5/F,EAAQw5D,wBAK3B,MAAO,CACHK,IAAK+lC,EAAW/lC,IAChBK,MAAO0lC,EAAW1lC,MAClBE,OAAQwlC,EAAWxlC,OACnBT,KAAMimC,EAAWjmC,KACjBC,MAAOgmC,EAAWhmC,MAClBE,OAAQ8lC,EAAW9lC,QAS3B,SAAS+lC,GAAmBD,EAAYjtE,EAAG0mC,GACvC,MAAM,IAAEQ,EAAG,OAAEO,EAAM,KAAET,EAAI,MAAEO,GAAU0lC,EACrC,OAAOvmC,GAAKQ,GAAOR,GAAKe,GAAUznC,GAAKgnC,GAAQhnC,GAAKunC,EAQxD,SAAS4lC,GAAiBF,EAAY/lC,EAAKF,GACvCimC,EAAW/lC,KAAOA,EAClB+lC,EAAWxlC,OAASwlC,EAAW/lC,IAAM+lC,EAAW9lC,OAChD8lC,EAAWjmC,MAAQA,EACnBimC,EAAW1lC,MAAQ0lC,EAAWjmC,KAAOimC,EAAWhmC,MASpD,SAASmmC,GAAwB/lC,EAAM0iB,EAAWsjB,EAAUC,GACxD,MAAM,IAAEpmC,EAAG,MAAEK,EAAK,OAAEE,EAAM,KAAET,EAAI,MAAEC,EAAK,OAAEE,GAAWE,EAC9CkmC,EAAatmC,EAAQ8iB,EACrByjB,EAAarmC,EAAS4iB,EAC5B,OAAOujB,EAAWpmC,EAAMsmC,GAAcF,EAAW7lC,EAAS+lC,GACtDH,EAAWrmC,EAAOumC,GAAcF,EAAW9lC,EAAQgmC,EAW3D,MAAME,GACF,YAAY5yC,EAAW+oB,GACnBpgF,KAAKq3D,UAAYA,EACjBr3D,KAAKogF,eAAiBA,EAEtBpgF,KAAKw6E,UAAY,IAAI76E,IAGzB,QACIK,KAAKw6E,UAAU92E,QAGnB,MAAMzE,GACFe,KAAK0D,QACL1D,KAAKw6E,UAAUp4E,IAAIpC,KAAKq3D,UAAW,CAC/Bsf,eAAgB32E,KAAKogF,eAAexJ,8BAExC33E,EAASkB,QAAQ0J,IACb7J,KAAKw6E,UAAUp4E,IAAIyH,EAAS,CACxB8sE,eAAgB,CAAEjT,IAAK75D,EAAQktE,UAAWvT,KAAM35D,EAAQotE,YACxDwyB,WAAYD,GAAqB3/F,OAK7C,aAAaqB,GACT,MAAM6S,EAAS7S,EAAM6S,OACfmsF,EAAiBlqG,KAAKw6E,UAAU78E,IAAIogB,GAC1C,IAAKmsF,EACD,OAAO,KAKX,MAAMC,EAAqBpsF,IAAW/d,KAAKq3D,UAAYt5C,EAAO6gD,gBAAkB7gD,EAC1E44D,EAAiBuzB,EAAevzB,eACtC,IAAIyzB,EACAC,EACJ,GAAItsF,IAAW/d,KAAKq3D,UAAW,CAC3B,MAAMizC,EAAyBtqG,KAAKogF,eAAexJ,4BACnDwzB,EAASE,EAAuB5mC,IAChC2mC,EAAUC,EAAuB9mC,UAGjC4mC,EAASrsF,EAAOg5D,UAChBszB,EAAUtsF,EAAOk5D,WAErB,MAAMszB,EAAgB5zB,EAAejT,IAAM0mC,EACrCI,EAAiB7zB,EAAenT,KAAO6mC,EAU7C,OAPArqG,KAAKw6E,UAAUr6E,QAAQ,CAACqH,EAAUmL,KAC1BnL,EAASiiG,YAAc1rF,IAAWpL,GAAQw3F,EAAmBt9F,SAAS8F,IACtEg3F,GAAiBniG,EAASiiG,WAAYc,EAAeC,KAG7D7zB,EAAejT,IAAM0mC,EACrBzzB,EAAenT,KAAO6mC,EACf,CAAE3mC,IAAK6mC,EAAe/mC,KAAMgnC,IAY3C,MAAM,GAA8Bx5C,GAAgC,CAAE2J,SAAS,IAEzE8vC,GAA6Bz5C,GAAgC,CAAE2J,SAAS,IAW9E,MAAM,GACF,YAAY9wD,EAASq8E,EAAS7uB,EAAW5E,EAAS2tB,EAAgBsqB,GAC9D1qG,KAAKkmF,QAAUA,EACflmF,KAAKq3D,UAAYA,EACjBr3D,KAAKyyD,QAAUA,EACfzyD,KAAKogF,eAAiBA,EACtBpgF,KAAK0qG,kBAAoBA,EAOzB1qG,KAAK2qG,kBAAoB,CAAEnuE,EAAG,EAAG0mC,EAAG,GAEpCljE,KAAK4qG,iBAAmB,CAAEpuE,EAAG,EAAG0mC,EAAG,GAEnCljE,KAAK6qG,YAAc,IAAI,GAAA,QAEvB7qG,KAAK8qG,yBAA2B,GAAA,aAAahtE,MAE7C99B,KAAK+qG,uBAAyB,GAAA,aAAajtE,MAE3C99B,KAAKmmF,oBAAsB,GAAA,aAAaroD,MAExC99B,KAAKysF,oBAAsB,GAAA,aAAa3uD,MAExC99B,KAAKgrG,iBAAmB,KAExBhrG,KAAKirG,4BAA6B,EAElCjrG,KAAKkrG,SAAW,GAEhBlrG,KAAKmrG,iBAAmB,IAAI92F,IAE5BrU,KAAKm0F,WAAa,MAKlBn0F,KAAKorG,eAAiB,EACtBprG,KAAK0yD,WAAY,EAEjB1yD,KAAKqrG,cAAgB,IAAI,GAAA,QAEzBrrG,KAAKsrG,QAAU,IAAI,GAAA,QAEnBtrG,KAAKurG,SAAW,IAAI,GAAA,QAEpBvrG,KAAKwrG,MAAQ,IAAI,GAAA,QAEjBxrG,KAAKyrG,QAAU,IAAI,GAAA,QAEnBzrG,KAAK0rG,OAAS,IAAI,GAAA,QAElB1rG,KAAK2rG,QAAU,IAAI,GAAA,QAKnB3rG,KAAK4rG,MAAQ5rG,KAAK6qG,YAAYxxC,eAE9Br5D,KAAK6rG,aAAgB3gG,IAGjB,GAFAlL,KAAKqrG,cAAcv5F,OAEf9R,KAAKkrG,SAAShoG,OAAQ,CACtB,MAAM4oG,EAAe9rG,KAAKkrG,SAASnqG,KAAKgrG,IACpC,MAAMhuF,EAAS7S,EAAM6S,OACrB,QAASA,IAAWA,IAAWguF,GAAUA,EAAOl/F,SAASkR,OAEzD+tF,GAAiB9rG,KAAKmrG,iBAAiB7oG,IAAIwpG,IAAkB9rG,KAAK0L,UAClE1L,KAAKgsG,wBAAwBF,EAAc5gG,QAGzClL,KAAK0L,UACX1L,KAAKgsG,wBAAwBhsG,KAAKisG,aAAc/gG,IAIxDlL,KAAKksG,aAAgBhhG,IAGjBA,EAAMgqD,iBACN,MAAMi3C,EAAkBnsG,KAAKosG,0BAA0BlhG,GACvD,IAAKlL,KAAKqsG,oBAAqB,CAQ3B,GAPkB5jG,KAAKwU,IAAIkvF,EAAgB3vE,EAAIx8B,KAAKssG,sBAAsB9vE,GACxD/zB,KAAKwU,IAAIkvF,EAAgBjpC,EAAIljE,KAAKssG,sBAAsBppC,IACzBljE,KAAKkmF,QAAQqmB,mBAKzC,CAEjB,KADuB33E,KAAKC,OAAS70B,KAAKwsG,eAAiBxsG,KAAKysG,mBAAmBvhG,IAG/E,YADAlL,KAAK0sG,iBAAiBxhG,GAMrBlL,KAAK2sG,gBAAmB3sG,KAAK2sG,eAAeC,eAC7C5sG,KAAKqsG,qBAAsB,EAC3BrsG,KAAKyyD,QAAQv4B,IAAI,IAAMl6B,KAAK6sG,mBAAmB3hG,KAGvD,OAGAlL,KAAKgrG,mBAGAhrG,KAAK8sG,eAAkB9sG,KAAK8sG,aAAarpC,OAAUzjE,KAAK8sG,aAAanpC,UACtE3jE,KAAK8sG,cAAgB9sG,KAAK+sG,UAAY/sG,KAAKisG,cAAc5oC,0BAGjE,MAAM2pC,EAA6BhtG,KAAKitG,+BAA+Bd,GAGvE,GAFAnsG,KAAKktG,WAAY,EACjBltG,KAAKmtG,6BAA6BH,GAC9BhtG,KAAK2sG,eACL3sG,KAAKotG,2BAA2BJ,OAE/B,CACD,MAAMK,EAAkBrtG,KAAK4qG,iBAC7ByC,EAAgB7wE,EACZwwE,EAA2BxwE,EAAIx8B,KAAKssG,sBAAsB9vE,EAAIx8B,KAAK2qG,kBAAkBnuE,EACzF6wE,EAAgBnqC,EACZ8pC,EAA2B9pC,EAAIljE,KAAKssG,sBAAsBppC,EAAIljE,KAAK2qG,kBAAkBznC,EACzFljE,KAAKstG,2BAA2BD,EAAgB7wE,EAAG6wE,EAAgBnqC,GAEzC,oBAAfqqC,YAA8BvtG,KAAKisG,wBAAwBsB,YAElEvtG,KAAKisG,aAAa37F,aAAa,YADN,aAAa+8F,EAAgB7wE,KAAK6wE,EAAgBnqC,MAO/EljE,KAAK6qG,YAAYxjC,UAAUnkE,QAC3BlD,KAAKyyD,QAAQv4B,IAAI,KACbl6B,KAAK6qG,YAAY/4F,KAAK,CAClB0tB,OAAQx/B,KACRmsG,gBAAiBa,EACjB9hG,MAAAA,EACA04E,SAAU5jF,KAAKwtG,iBAAiBR,GAChCv3C,MAAOz1D,KAAKytG,4BAM5BztG,KAAK0tG,WAAcxiG,IACflL,KAAK0sG,iBAAiBxhG,IAE1BlL,KAAK2tG,gBAAgB9jG,GACrB7J,KAAK4tG,iBAAmB,IAAI3D,GAAsB5yC,EAAW+oB,GAC7DsqB,EAAkBmD,iBAAiB7tG,MAGvC,eACI,OAAOA,KAAK0yD,cAAgB1yD,KAAK2sG,iBAAkB3sG,KAAK2sG,eAAejhG,UAE3E,aAAa3N,GACT,MAAM+vG,EAAW5+C,GAAsBnxD,GACnC+vG,IAAa9tG,KAAK0yD,YAClB1yD,KAAK0yD,UAAYo7C,EACjB9tG,KAAK+tG,iCAOb,wBACI,OAAO/tG,KAAKguG,aAGhB,iBACI,OAAOhuG,KAAKisG,aAMhB,oBACI,OAAOjsG,KAAK4sG,aAAe5sG,KAAKiuG,wBAA0BjuG,KAAKkuG,iBAGnE,YAAYC,GAIR,OAHAnuG,KAAKkrG,SAAWiD,EAAQtiG,IAAIkgG,GAAUv8C,GAAcu8C,IACpD/rG,KAAKkrG,SAAS/qG,QAAQ4rG,GAAUlD,GAA6BkD,GAAQ,IACrE/rG,KAAK+tG,gCACE/tG,KAMX,oBAAoBgD,GAEhB,OADAhD,KAAKouG,iBAAmBprG,EACjBhD,KAMX,wBAAwBgD,GAEpB,OADAhD,KAAKquG,qBAAuBrrG,EACrBhD,KAOX,gBAAgBma,GACZ,MAAMtQ,EAAU2lD,GAAcr1C,GAY9B,OAXItQ,IAAY7J,KAAKisG,eACbjsG,KAAKisG,cACLjsG,KAAKsuG,4BAA4BtuG,KAAKisG,cAE1CjsG,KAAKyyD,QAAQt4B,kBAAkB,KAC3BtwB,EAAQ6rB,iBAAiB,YAAa11B,KAAK6rG,aAAcpB,IACzD5gG,EAAQ6rB,iBAAiB,aAAc11B,KAAK6rG,aAAc,MAE9D7rG,KAAKuuG,uBAAoB7tG,EACzBV,KAAKisG,aAAepiG,GAEjB7J,KAKX,oBAAoBwuG,GAQhB,OAPAxuG,KAAKgrG,iBAAmBwD,EAAkBh/C,GAAcg/C,GAAmB,KAC3ExuG,KAAKysF,oBAAoBnvD,cACrBkxE,IACAxuG,KAAKysF,oBAAsBzsF,KAAKogF,eAC3B77B,OAAO,IACP5kB,UAAU,IAAM3/B,KAAKyuG,mCAEvBzuG,KAGX,UACIA,KAAKsuG,4BAA4BtuG,KAAKisG,cAGlCjsG,KAAK4sG,cAGL7hF,GAAW/qB,KAAKisG,cAEpBlhF,GAAW/qB,KAAK0uG,SAChB1uG,KAAK2uG,kBACL3uG,KAAK4uG,sBACL5uG,KAAK0qG,kBAAkBmE,eAAe7uG,MACtCA,KAAK8uG,uBACL9uG,KAAKqrG,cAAc/sE,WACnBt+B,KAAKsrG,QAAQhtE,WACbt+B,KAAKurG,SAASjtE,WACdt+B,KAAKwrG,MAAMltE,WACXt+B,KAAKyrG,QAAQntE,WACbt+B,KAAK0rG,OAAOptE,WACZt+B,KAAK2rG,QAAQrtE,WACbt+B,KAAK6qG,YAAYvsE,WACjBt+B,KAAKkrG,SAAW,GAChBlrG,KAAKmrG,iBAAiBznG,QACtB1D,KAAK2sG,oBAAiBjsG,EACtBV,KAAKysF,oBAAoBnvD,cACzBt9B,KAAK4tG,iBAAiBlqG,QACtB1D,KAAKgrG,iBAAmBhrG,KAAKisG,aAAejsG,KAAKquG,qBAC7CruG,KAAKouG,iBAAmBpuG,KAAK0uG,QAAU,KAG/C,aACI,OAAO1uG,KAAKqsG,qBAAuBrsG,KAAK0qG,kBAAkBkC,WAAW5sG,MAGzE,QACIA,KAAKisG,aAAap+F,MAAM02D,UAAYvkE,KAAKuuG,mBAAqB,GAC9DvuG,KAAK4qG,iBAAmB,CAAEpuE,EAAG,EAAG0mC,EAAG,GACnCljE,KAAK2qG,kBAAoB,CAAEnuE,EAAG,EAAG0mC,EAAG,GAMxC,cAAc6oC,GACN/rG,KAAKkrG,SAASh/F,QAAQ6/F,IAAW,GACjC/rG,KAAKmrG,iBAAiB90F,IAAI01F,GAOlC,aAAaA,GACT/rG,KAAKmrG,iBAAiBrxF,OAAOiyF,GAGjC,cAAc/3C,GAEV,OADAh0D,KAAKm0F,WAAangC,EACXh0D,KAGX,mBAAmBwqC,GACfxqC,KAAK2sG,eAAiBniE,EAK1B,sBACI,MAAMhjC,EAAWxH,KAAK4sG,aAAe5sG,KAAK4qG,iBAAmB5qG,KAAK2qG,kBAClE,MAAO,CAAEnuE,EAAGh1B,EAASg1B,EAAG0mC,EAAG17D,EAAS07D,GAMxC,oBAAoBnlE,GAOhB,OANAiC,KAAK4qG,iBAAmB,CAAEpuE,EAAG,EAAG0mC,EAAG,GACnCljE,KAAK2qG,kBAAkBnuE,EAAIz+B,EAAMy+B,EACjCx8B,KAAK2qG,kBAAkBznC,EAAInlE,EAAMmlE,EAC5BljE,KAAK2sG,gBACN3sG,KAAKstG,2BAA2BvvG,EAAMy+B,EAAGz+B,EAAMmlE,GAE5CljE,KAGX,+BACI,MAAMwH,EAAWxH,KAAK+uG,sCAClBvnG,GAAYxH,KAAK2sG,gBACjB3sG,KAAKotG,2BAA2BptG,KAAKitG,+BAA+BzlG,IAI5E,uBACIxH,KAAK8qG,yBAAyBxtE,cAC9Bt9B,KAAK+qG,uBAAuBztE,cAC5Bt9B,KAAKmmF,oBAAoB7oD,cAG7B,kBACQt9B,KAAK+sG,UACLhiF,GAAW/qB,KAAK+sG,UAEhB/sG,KAAKgvG,aACLhvG,KAAKgvG,YAAYjmG,UAErB/I,KAAK+sG,SAAW/sG,KAAKgvG,YAAc,KAGvC,sBACQhvG,KAAKguG,cACLjjF,GAAW/qB,KAAKguG,cAEhBhuG,KAAKivG,iBACLjvG,KAAKivG,gBAAgBlmG,UAEzB/I,KAAKguG,aAAehuG,KAAKivG,gBAAkB,KAM/C,iBAAiB/jG,GAKRlL,KAAK0qG,kBAAkBkC,WAAW5sG,QAGvCA,KAAK8uG,uBACL9uG,KAAK0qG,kBAAkBwE,aAAalvG,MACpCA,KAAK+tG,gCACD/tG,KAAKkrG,WACLlrG,KAAKisG,aAAap+F,MAAMo7F,wBAA0BjpG,KAAKmvG,0BAEtDnvG,KAAKqsG,sBAGVrsG,KAAKurG,SAASz5F,KAAK,CAAE0tB,OAAQx/B,OACzBA,KAAK2sG,gBAEL3sG,KAAK2sG,eAAejsB,iBACpB1gF,KAAKovG,+BAA+B3rG,KAAK,KACrCzD,KAAKqvG,sBAAsBnkG,GAC3BlL,KAAKsvG,2BACLtvG,KAAK0qG,kBAAkBwE,aAAalvG,UAOxCA,KAAK2qG,kBAAkBnuE,EAAIx8B,KAAK4qG,iBAAiBpuE,EACjDx8B,KAAK2qG,kBAAkBznC,EAAIljE,KAAK4qG,iBAAiB1nC,EACjDljE,KAAKyyD,QAAQv4B,IAAI,KACbl6B,KAAKwrG,MAAM15F,KAAK,CACZ0tB,OAAQx/B,KACR4jF,SAAU5jF,KAAKwtG,iBAAiBxtG,KAAKosG,0BAA0BlhG,QAGvElL,KAAKsvG,2BACLtvG,KAAK0qG,kBAAkBwE,aAAalvG,SAI5C,mBAAmBkL,GACX,GAAaA,KACblL,KAAKuvG,oBAAsB36E,KAAKC,OAEpC70B,KAAK+tG,gCACL,MAAMyB,EAAgBxvG,KAAK2sG,eAC3B,GAAI6C,EAAe,CACf,MAAM3lG,EAAU7J,KAAKisG,aACfrjF,EAAS/e,EAAQgf,WACjB4mF,EAAUzvG,KAAK+sG,SAAW/sG,KAAK0vG,wBAC/BC,EAAc3vG,KAAKguG,aAAehuG,KAAK4vG,4BACvC9nE,EAAS9nC,KAAK0uG,QAAU1uG,KAAK0uG,SAAW1uG,KAAKq3D,UAAU98B,cAAc,IAE3E3R,EAAO+B,aAAamd,EAAQj+B,GAI5BA,EAAQgE,MAAMkjB,QAAU,OACxB/wB,KAAKq3D,UAAUp1D,KAAKC,YAAY0mB,EAAO+pD,aAAag9B,EAAa9lG,KAshB3CgmG,EArhBG7vG,KAAKq3D,UAyhB/Bw4C,EAAYC,mBACfD,EAAYE,yBACZF,EAAYG,sBACZH,EAAYI,qBACZJ,EAAY5tG,MA7hBiCC,YAAYutG,GACrDzvG,KAAKsrG,QAAQx5F,KAAK,CAAE0tB,OAAQx/B,OAC5BwvG,EAAch8E,QACdxzB,KAAKkwG,kBAAoBV,EACzBxvG,KAAKmwG,cAAgBX,EAAcY,aAAapwG,WAGhDA,KAAKsrG,QAAQx5F,KAAK,CAAE0tB,OAAQx/B,OAC5BA,KAAKkwG,kBAAoBlwG,KAAKmwG,mBAAgBzvG,EA6gB1D,IAAkCmvG,EAzgB1B7vG,KAAK4tG,iBAAiByC,MAAMb,EAAgBA,EAAcc,uBAAyB,IAQvF,wBAAwBC,EAAkBrlG,GAItCA,EAAMslG,kBACN,MAAM5D,EAAa5sG,KAAK4sG,aAClB6D,EAAkB,GAAavlG,GAC/BwlG,GAA0BD,GAAoC,IAAjBvlG,EAAMg8C,OACnD/sC,EAAcna,KAAKisG,aACnBzmC,GAAoBirC,GAAmBzwG,KAAKuvG,qBAC9CvvG,KAAKuvG,oBA/ce,IA+ciC36E,KAAKC,MAW9D,GAJI3pB,EAAM6S,QAAU7S,EAAM6S,OAAO4yF,WAA4B,cAAfzlG,EAAMvJ,MAChDuJ,EAAMgqD,iBAGN03C,GAAc8D,GAA0BlrC,EACxC,OAKAxlE,KAAKkrG,SAAShoG,SACdlD,KAAKmvG,yBAA2Bh1F,EAAYtM,MAAMo7F,yBAA2B,GAC7E9uF,EAAYtM,MAAMo7F,wBAA0B,eAEhDjpG,KAAKqsG,oBAAsBrsG,KAAKktG,WAAY,EAG5CltG,KAAK8uG,uBACL9uG,KAAK8qG,yBAA2B9qG,KAAK0qG,kBAAkBkG,YAAYjxE,UAAU3/B,KAAKksG,cAClFlsG,KAAK+qG,uBAAyB/qG,KAAK0qG,kBAAkBmG,UAAUlxE,UAAU3/B,KAAK0tG,YAC9E1tG,KAAKmmF,oBAAsBnmF,KAAK0qG,kBAAkB9kB,OAAOjmD,UAAUmxE,IAC/D9wG,KAAK+wG,gBAAgBD,KAErB9wG,KAAKgrG,mBACLhrG,KAAKgxG,cAAgBxH,GAAqBxpG,KAAKgrG,mBAKnD,MAAMiG,EAAkBjxG,KAAKouG,iBAC7BpuG,KAAKkxG,yBAA2BD,GAAmBA,EAAgBjuG,WAC9DiuG,EAAgBE,UAAY,CAAE30E,EAAG,EAAG0mC,EAAG,GACxCljE,KAAKoxG,6BAA6Bb,EAAkBrlG,GACxD,MAAMihG,EAAkBnsG,KAAKssG,sBAAwBtsG,KAAKosG,0BAA0BlhG,GACpFlL,KAAKytG,uBAAyB,CAAEjxE,EAAG,EAAG0mC,EAAG,GACzCljE,KAAK+uG,sCAAwC,CAAEvyE,EAAG2vE,EAAgB3vE,EAAG0mC,EAAGipC,EAAgBjpC,GACxFljE,KAAKwsG,eAAiB53E,KAAKC,MAC3B70B,KAAK0qG,kBAAkB2G,cAAcrxG,KAAMkL,GAG/C,sBAAsBA,GAKlBlL,KAAKisG,aAAap+F,MAAMkjB,QAAU,GAClC/wB,KAAK0uG,QAAQ7lF,WAAW8pD,aAAa3yE,KAAKisG,aAAcjsG,KAAK0uG,SAC7D1uG,KAAK2uG,kBACL3uG,KAAK4uG,sBACL5uG,KAAKgxG,cAAgBhxG,KAAK8sG,kBAAepsG,EAEzCV,KAAKyyD,QAAQv4B,IAAI,KACb,MAAMsQ,EAAYxqC,KAAK2sG,eACjB2E,EAAe9mE,EAAU4lE,aAAapwG,MACtCmsG,EAAkBnsG,KAAKosG,0BAA0BlhG,GACjD04E,EAAW5jF,KAAKwtG,iBAAiBxtG,KAAKosG,0BAA0BlhG,IAChEqmG,EAAyB/mE,EAAUgnE,iBAAiBrF,EAAgB3vE,EAAG2vE,EAAgBjpC,GAC7FljE,KAAKwrG,MAAM15F,KAAK,CAAE0tB,OAAQx/B,KAAM4jF,SAAAA,IAChC5jF,KAAK2rG,QAAQ75F,KAAK,CACd5B,KAAMlQ,KACNsxG,aAAAA,EACAG,cAAezxG,KAAKmwG,cACpB3lE,UAAWA,EACXknE,kBAAmB1xG,KAAKkwG,kBACxBqB,uBAAAA,EACA3tB,SAAAA,IAEJp5C,EAAUmnE,KAAK3xG,KAAMsxG,EAActxG,KAAKkwG,kBAAmBqB,EAAwB3tB,EAAU5jF,KAAKmwG,eAClGnwG,KAAK2sG,eAAiB3sG,KAAKkwG,oBAOnC,4BAA2B,EAAE1zE,EAAC,EAAE0mC,IAE5B,IAAI0uC,EAAe5xG,KAAKkwG,kBAAkB2B,iCAAiC7xG,KAAMw8B,EAAG0mC,IAK/E0uC,GAAgB5xG,KAAK2sG,iBAAmB3sG,KAAKkwG,mBAC9ClwG,KAAKkwG,kBAAkBsB,iBAAiBh1E,EAAG0mC,KAC3C0uC,EAAe5xG,KAAKkwG,mBAEpB0B,GAAgBA,IAAiB5xG,KAAK2sG,gBACtC3sG,KAAKyyD,QAAQv4B,IAAI,KAEbl6B,KAAK0rG,OAAO55F,KAAK,CAAE5B,KAAMlQ,KAAMwqC,UAAWxqC,KAAK2sG,iBAC/C3sG,KAAK2sG,eAAe1S,KAAKj6F,MAEzBA,KAAK2sG,eAAiBiF,EACtB5xG,KAAK2sG,eAAe1P,MAAMj9F,KAAMw8B,EAAG0mC,EAAG0uC,IAAiB5xG,KAAKkwG,mBAGxD0B,EAAaE,gBAAkB9xG,KAAKmwG,mBAAgBzvG,GACxDV,KAAKyrG,QAAQ35F,KAAK,CACd5B,KAAMlQ,KACNwqC,UAAWonE,EACXN,aAAcM,EAAaxB,aAAapwG,UAIpDA,KAAK2sG,eAAeoF,2BAA2Bv1E,EAAG0mC,GAClDljE,KAAK2sG,eAAeqF,UAAUhyG,KAAMw8B,EAAG0mC,EAAGljE,KAAKytG,wBAC/CztG,KAAK+sG,SAASl/F,MAAM02D,UAChB0tC,GAAaz1E,EAAIx8B,KAAKkxG,yBAAyB10E,EAAG0mC,EAAIljE,KAAKkxG,yBAAyBhuC,GAM5F,wBACI,MAAMgvC,EAAgBlyG,KAAKouG,iBACrB+D,EAAenyG,KAAKmyG,aACpBlB,EAAkBiB,EAAgBA,EAAclvG,SAAW,KACjE,IAAIysG,EACJ,GAAIwB,GAAmBiB,EAAe,CAGlC,MAAME,EAAWF,EAAcf,UAAYnxG,KAAKisG,aAAa5oC,wBAA0B,KACjF4P,EAAUi/B,EAAcl/B,cAAc1vE,mBAAmB2tG,EAAiBiB,EAAct/F,SAC9FqgE,EAAQC,gBACRu8B,EAAUp+C,GAAY4hB,EAASjzE,KAAKq3D,WACpCr3D,KAAKgvG,YAAc/7B,EACfi/B,EAAcf,UACdkB,GAAiB5C,EAAS2C,GAG1B3C,EAAQ5hG,MAAM02D,UACV0tC,GAAajyG,KAAKssG,sBAAsB9vE,EAAGx8B,KAAKssG,sBAAsBppC,OAG7E,CACD,MAAMr5D,EAAU7J,KAAKisG,aACrBwD,EAAU6C,GAAczoG,GACxBwoG,GAAiB5C,EAAS5lG,EAAQw5D,yBAwBtC,OAtBA,GAAaosC,EAAQ5hG,MAAO,CAGxBw9E,cAAe,OAEfkE,OAAQ,IACR/nF,SAAU,QACVk8D,IAAK,IACLF,KAAM,IACN+uC,OAAQ,IAAGvyG,KAAKkmF,QAAQqsB,QAAU,OAEtC1J,GAA6B4G,GAAS,GACtCA,EAAQ/9E,UAAUrb,IAAI,oBACtBo5F,EAAQn/F,aAAa,MAAOtQ,KAAKm0F,YAC7Bge,IACIthG,MAAMC,QAAQqhG,GACdA,EAAahyG,QAAQssB,GAAagjF,EAAQ/9E,UAAUrb,IAAIoW,IAGxDgjF,EAAQ/9E,UAAUrb,IAAI87F,IAGvB1C,EAMX,+BAEI,IAAKzvG,KAAKktG,UACN,OAAO7qG,QAAQP,UAEnB,MAAM0wG,EAAkBxyG,KAAKguG,aAAa3qC,wBAE1CrjE,KAAK+sG,SAASr7E,UAAUrb,IAAI,sBAE5BrW,KAAK+sG,SAASl/F,MAAM02D,UAAY0tC,GAAaO,EAAgBhvC,KAAMgvC,EAAgB9uC,KAKnF,MAAMl9D,EApzBd,SAA4CqD,GACxC,MAAMq0D,EAAgBvqD,iBAAiB9J,GACjC4oG,EAAyBlJ,GAAsBrrC,EAAe,uBAC9Dz/D,EAAWg0G,EAAuB1xG,KAAK0J,GAAiB,cAATA,GAAiC,QAATA,GAE7E,IAAKhM,EACD,OAAO,EAIX,MAAMi0G,EAAgBD,EAAuBvmG,QAAQzN,GAC/Ck0G,EAAepJ,GAAsBrrC,EAAe,uBACpD00C,EAAYrJ,GAAsBrrC,EAAe,oBACvD,OAAOmrC,GAAsBsJ,EAAaD,IACtCrJ,GAAsBuJ,EAAUF,IAdxC,CAozB4D1yG,KAAK+sG,UACzD,OAAiB,IAAbvmG,EACOnE,QAAQP,UAEZ9B,KAAKyyD,QAAQt4B,kBAAkB,IAC3B,IAAI93B,QAAQP,IACf,MAAM65D,EAAYzwD,MACTA,GAAUA,EAAM6S,SAAW/d,KAAK+sG,UAAmC,cAAvB7hG,EAAM8V,gBACnDhhB,KAAK+sG,SAASt3E,oBAAoB,gBAAiBkmC,GACnD75D,IACAm4D,aAAa44C,KAMfA,EAAU/1E,WAAW6+B,EAAoB,IAAXn1D,GACpCxG,KAAK+sG,SAASr3E,iBAAiB,gBAAiBimC,MAK5D,4BACI,MAAMm3C,EAAoB9yG,KAAKquG,qBACzB0E,EAAsBD,EAAoBA,EAAkB9vG,SAAW,KAC7E,IAAI2sG,EAUJ,OATIoD,GACA/yG,KAAKivG,gBAAkB6D,EAAkB9/B,cAAc1vE,mBAAmByvG,EAAqBD,EAAkBlgG,SACjH5S,KAAKivG,gBAAgB/7B,gBACrBy8B,EAAct+C,GAAYrxD,KAAKivG,gBAAiBjvG,KAAKq3D,YAGrDs4C,EAAc2C,GAActyG,KAAKisG,cAErC0D,EAAYj+E,UAAUrb,IAAI,wBACnBs5F,EAOX,6BAA6BY,EAAkBrlG,GAC3C,MAAM8nG,EAAchzG,KAAKisG,aAAa5oC,wBAChC4vC,EAAgB1C,IAAqBvwG,KAAKisG,aAAe,KAAOsE,EAChE2C,EAAgBD,EAAgBA,EAAc5vC,wBAA0B2vC,EACxE9iB,EAAQ,GAAahlF,GAASA,EAAMioG,cAAc,GAAKjoG,EACvDyrE,EAAiB32E,KAAKozG,6BAG5B,MAAO,CACH52E,EAAG02E,EAAc1vC,KAAOwvC,EAAYxvC,MAH9B0sB,EAAMmjB,MAAQH,EAAc1vC,KAAOmT,EAAenT,MAIxDN,EAAGgwC,EAAcxvC,IAAMsvC,EAAYtvC,KAH7BwsB,EAAMojB,MAAQJ,EAAcxvC,IAAMiT,EAAejT,MAO/D,0BAA0Bx4D,GACtB,MAAMyrE,EAAiB32E,KAAKozG,6BACtBljB,EAAQ,GAAahlF,GAQtBA,EAAM66D,QAAQ,IAAM76D,EAAM86D,eAAe,IAAM,CAAEqtC,MAAO,EAAGC,MAAO,GAAOpoG,EAC9E,MAAO,CACHsxB,EAAG0zD,EAAMmjB,MAAQ18B,EAAenT,KAChCN,EAAGgtB,EAAMojB,MAAQ38B,EAAejT,KAIxC,+BAA+BwsB,GAC3B,MAAMqjB,EAAmBvzG,KAAKwzG,kBAAoBxzG,KAAKwzG,kBAAkBtjB,EAAOlwF,MAAQkwF,EAClFujB,EAAoBzzG,KAAK2sG,eAAiB3sG,KAAK2sG,eAAe+G,SAAW,KAO/E,GANsB,MAAlB1zG,KAAK0zG,UAA0C,MAAtBD,EACzBF,EAAiBrwC,EAAIljE,KAAKssG,sBAAsBppC,EAEzB,MAAlBljE,KAAK0zG,UAA0C,MAAtBD,IAC9BF,EAAiB/2E,EAAIx8B,KAAKssG,sBAAsB9vE,GAEhDx8B,KAAKgxG,cAAe,CACpB,MAAQx0E,EAAGm3E,EAASzwC,EAAG0wC,GAAY5zG,KAAKkxG,yBAClC2C,EAAe7zG,KAAKgxG,cACpB8C,EAAc9zG,KAAK8sG,aACnBiH,EAAOF,EAAanwC,IAAMkwC,EAC1BI,EAAOH,EAAa5vC,QAAU6vC,EAAYnwC,OAASiwC,GAGzDL,EAAiB/2E,EAAI,GAAM+2E,EAAiB/2E,EAF/Bq3E,EAAarwC,KAAOmwC,EACpBE,EAAa9vC,OAAS+vC,EAAYrwC,MAAQkwC,IAEvDJ,EAAiBrwC,EAAI,GAAMqwC,EAAiBrwC,EAAG6wC,EAAMC,GAEzD,OAAOT,EAGX,6BAA6BU,GACzB,MAAM,EAAEz3E,EAAC,EAAE0mC,GAAM+wC,EACXx+C,EAAQz1D,KAAKytG,uBACbyG,EAA0Bl0G,KAAK+uG,sCAE/BoF,EAAU1rG,KAAKwU,IAAIuf,EAAI03E,EAAwB13E,GAC/C43E,EAAU3rG,KAAKwU,IAAIimD,EAAIgxC,EAAwBhxC,GAarD,OARIixC,EAAUn0G,KAAKkmF,QAAQmuB,kCACvB5+C,EAAMj5B,EAAIA,EAAI03E,EAAwB13E,EAAI,GAAK,EAC/C03E,EAAwB13E,EAAIA,GAE5B43E,EAAUp0G,KAAKkmF,QAAQmuB,kCACvB5+C,EAAMyN,EAAIA,EAAIgxC,EAAwBhxC,EAAI,GAAK,EAC/CgxC,EAAwBhxC,EAAIA,GAEzBzN,EAGX,gCACI,IAAKz1D,KAAKisG,eAAiBjsG,KAAKkrG,SAC5B,OAEJ,MAAMoJ,EAAet0G,KAAKkrG,SAAShoG,OAAS,IAAMlD,KAAK4sG,aACnD0H,IAAiBt0G,KAAKirG,6BACtBjrG,KAAKirG,2BAA6BqJ,EAClCzL,GAA6B7oG,KAAKisG,aAAcqI,IAIxD,4BAA4BzqG,GACxBA,EAAQ4rB,oBAAoB,YAAaz1B,KAAK6rG,aAAcpB,IAC5D5gG,EAAQ4rB,oBAAoB,aAAcz1B,KAAK6rG,aAAc,IAOjE,2BAA2BrvE,EAAG0mC,GAC1B,MAAMqB,EAAY0tC,GAAaz1E,EAAG0mC,GAGJ,MAA1BljE,KAAKuuG,oBACLvuG,KAAKuuG,kBAAoBvuG,KAAKisG,aAAap+F,MAAM02D,WAAa,IAKlEvkE,KAAKisG,aAAap+F,MAAM02D,UAAYvkE,KAAKuuG,kBACrChqC,EAAY,IAAMvkE,KAAKuuG,kBAAoBhqC,EAMnD,iBAAiBgwC,GACb,MAAMC,EAAiBx0G,KAAKssG,sBAC5B,OAAIkI,EACO,CAAEh4E,EAAG+3E,EAAgB/3E,EAAIg4E,EAAeh4E,EAAG0mC,EAAGqxC,EAAgBrxC,EAAIsxC,EAAetxC,GAErF,CAAE1mC,EAAG,EAAG0mC,EAAG,GAGtB,2BACIljE,KAAKgxG,cAAgBhxG,KAAK8sG,kBAAepsG,EACzCV,KAAK4tG,iBAAiBlqG,QAM1B,iCACI,IAAI,EAAE84B,EAAC,EAAE0mC,GAAMljE,KAAK2qG,kBACpB,GAAW,IAANnuE,GAAiB,IAAN0mC,GAAYljE,KAAK4sG,eAAiB5sG,KAAKgrG,iBACnD,OAEJ,MAAM6I,EAAe7zG,KAAKgrG,iBAAiB3nC,wBACrC2vC,EAAchzG,KAAKisG,aAAa5oC,wBAGtC,GAA4B,IAAvBwwC,EAAapwC,OAAuC,IAAxBowC,EAAalwC,QACnB,IAAtBqvC,EAAYvvC,OAAsC,IAAvBuvC,EAAYrvC,OACxC,OAEJ,MAAM8wC,EAAeZ,EAAarwC,KAAOwvC,EAAYxvC,KAC/CkxC,EAAgB1B,EAAYjvC,MAAQ8vC,EAAa9vC,MACjDqsB,EAAcyjB,EAAanwC,IAAMsvC,EAAYtvC,IAC7C2sB,EAAiB2iB,EAAY/uC,OAAS4vC,EAAa5vC,OAGrD4vC,EAAapwC,MAAQuvC,EAAYvvC,OAC7BgxC,EAAe,IACfj4E,GAAKi4E,GAELC,EAAgB,IAChBl4E,GAAKk4E,IAITl4E,EAAI,EAIJq3E,EAAalwC,OAASqvC,EAAYrvC,QAC9BysB,EAAc,IACdltB,GAAKktB,GAELC,EAAiB,IACjBntB,GAAKmtB,IAITntB,EAAI,EAEJ1mC,IAAMx8B,KAAK2qG,kBAAkBnuE,GAAK0mC,IAAMljE,KAAK2qG,kBAAkBznC,GAC/DljE,KAAK20G,oBAAoB,CAAEzxC,EAAAA,EAAG1mC,EAAAA,IAItC,mBAAmBtxB,GACf,MAAMnN,EAAQiC,KAAKorG,eACnB,MAAqB,iBAAVrtG,EACAA,EAEF,GAAamN,GACXnN,EAAM62G,MAEV72G,EAAQA,EAAM82G,MAAQ,EAGjC,gBAAgB3pG,GACZ,MAAM4pG,EAAmB90G,KAAK4tG,iBAAiBmH,aAAa7pG,GACxD4pG,IAGI90G,KAAKgxG,eACLrH,GAAiB3pG,KAAKgxG,cAAe8D,EAAiBpxC,IAAKoxC,EAAiBtxC,MAEhFxjE,KAAKssG,sBAAsB9vE,GAAKs4E,EAAiBtxC,KACjDxjE,KAAKssG,sBAAsBppC,GAAK4xC,EAAiBpxC,IAG5C1jE,KAAK2sG,iBACN3sG,KAAK4qG,iBAAiBpuE,GAAKs4E,EAAiBtxC,KAC5CxjE,KAAK4qG,iBAAiB1nC,GAAK4xC,EAAiBpxC,IAC5C1jE,KAAKstG,2BAA2BttG,KAAK4qG,iBAAiBpuE,EAAGx8B,KAAK4qG,iBAAiB1nC,KAK3F,6BACI,MAAMgnC,EAAiBlqG,KAAK4tG,iBAAiBpzB,UAAU78E,IAAIqC,KAAKq3D,WAChE,OAAO6yC,EAAiBA,EAAevzB,eACnC32E,KAAKogF,eAAexJ,6BAQhC,SAASq7B,GAAaz1E,EAAG0mC,GAGrB,MAAO,eAAez6D,KAAKoY,MAAM2b,SAAS/zB,KAAKoY,MAAMqiD,WAGzD,SAASovC,GAAc3/F,GACnB,MAAMqiG,EAAQriG,EAAKs5D,WAAU,GACvBgpC,EAAoBD,EAAMznG,iBAAiB,QAC3C2nG,EAAqBviG,EAAKpF,iBAAiB,UAEjDynG,EAAM75E,gBAAgB,MACtB,IAAK,IAAIr+B,EAAI,EAAGA,EAAIm4G,EAAkB/xG,OAAQpG,IAC1Cm4G,EAAkBn4G,GAAGq+B,gBAAgB,MAIzC,GAAI+5E,EAAmBhyG,OAAQ,CAC3B,MAAMiyG,EAAgBH,EAAMznG,iBAAiB,UAC7C,IAAK,IAAIzQ,EAAI,EAAGA,EAAIo4G,EAAmBhyG,OAAQpG,IAAK,CAChD,MAAMs4G,EAA4BD,EAAcr4G,GAAGu3C,WAAW,MAC9D,GAAI+gE,EAGA,IACIA,EAA0BC,UAAUH,EAAmBp4G,GAAI,EAAG,GAElE,MAAO+yD,OAInB,OAAOmlD,EAGX,SAAS,GAAMj3G,EAAOmL,EAAKR,GACvB,OAAOD,KAAKC,IAAIQ,EAAKT,KAAKS,IAAIR,EAAK3K,IAMvC,SAASgtB,GAAWpY,GACZA,GAAQA,EAAKkW,YACblW,EAAKkW,WAAW0O,YAAY5kB,GAIpC,SAAS,GAAazH,GAIlB,MAAyB,MAAlBA,EAAMvJ,KAAK,GAiBtB,SAAS0vD,GAAY4hB,EAAS5b,GAC1B,MAAM8b,EAAYF,EAAQE,UAC1B,GAAyB,IAArBA,EAAUjwE,QAAgBiwE,EAAU,GAAGna,WAAa3B,EAAU4B,aAC9D,OAAOka,EAAU,GAErB,MAAMoM,EAAUloB,EAAU31D,cAAc,OAExC,OADAyxE,EAAUhzE,QAAQwS,GAAQ4sE,EAAQr9E,YAAYyQ,IACvC4sE,EAOX,SAAS8yB,GAAiBt0F,EAAQu3F,GAC9Bv3F,EAAOlQ,MAAM41D,MAAW6xC,EAAW7xC,MAAd,KACrB1lD,EAAOlQ,MAAM81D,OAAY2xC,EAAW3xC,OAAd,KACtB5lD,EAAOlQ,MAAM02D,UAAY0tC,GAAaqD,EAAW9xC,KAAM8xC,EAAW5xC,KA2DtE,SAAS6xC,GAAQx3G,EAAO2K,GACpB,OAAOD,KAAKC,IAAI,EAAGD,KAAKS,IAAIR,EAAK3K,IA4BrC,MAAM,GACF,YAAY8L,EAAS6gG,EAAmBrzC,EAAW5E,EAAS2tB,GACxDpgF,KAAK0qG,kBAAoBA,EACzB1qG,KAAKyyD,QAAUA,EACfzyD,KAAKogF,eAAiBA,EAEtBpgF,KAAK0L,UAAW,EAEhB1L,KAAK8xG,iBAAkB,EAKvB9xG,KAAKw1G,oBAAqB,EAK1Bx1G,KAAKy1G,eAAiB,KAAM,EAE5Bz1G,KAAKqrG,cAAgB,IAAI,GAAA,QAIzBrrG,KAAKyrG,QAAU,IAAI,GAAA,QAKnBzrG,KAAK0rG,OAAS,IAAI,GAAA,QAElB1rG,KAAK2rG,QAAU,IAAI,GAAA,QAEnB3rG,KAAK01G,OAAS,IAAI,GAAA,QAElB11G,KAAK21G,aAAc,EAEnB31G,KAAK41G,eAAiB,GAMtB51G,KAAK61G,cAAgB,CAAEC,KAAM,KAAMrgD,MAAO,EAAGsgD,UAAU,GAEvD/1G,KAAKg2G,UAAY,GAEjBh2G,KAAKi2G,aAAe,WAEpBj2G,KAAKk2G,gBAAkB,IAAI7hG,IAE3BrU,KAAKm0F,WAAa,MAElBn0F,KAAKm2G,4BAA8B,GAAA,aAAar4E,MAEhD99B,KAAKo2G,yBAA2B,EAEhCp2G,KAAKq2G,2BAA6B,EAElCr2G,KAAKs2G,kBAAoB,IAAI,GAAA,QAE7Bt2G,KAAKu2G,kBAAoB,KAEzBv2G,KAAKw2G,qBAAuB,KACxBx2G,KAAK0gF,iBACL,OAAA,GAAA,SAAA,CAAS,EAAG,GAAA,yBACPj+C,KAAK0xC,GAAUn0E,KAAKs2G,oBACpB32E,UAAU,KACX,MAAMhtB,EAAO3S,KAAKy2G,YACoB,IAAlCz2G,KAAKo2G,yBACLM,GAAwB/jG,GA1EnB,GA4EkC,IAAlC3S,KAAKo2G,0BACVM,GAAwB/jG,EA7EnB,GA+E+B,IAApC3S,KAAKq2G,2BACLM,GAA0BhkG,GAhFrB,GAkFoC,IAApC3S,KAAKq2G,4BACVM,GAA0BhkG,EAnFrB,MAuFjB3S,KAAK6J,QAAU2lD,GAAc3lD,GAC7B7J,KAAKq3D,UAAYA,EACjBr3D,KAAK42G,sBAAsB,CAAC52G,KAAK6J,UACjC6gG,EAAkBmM,sBAAsB72G,MACxCA,KAAK4tG,iBAAmB,IAAI3D,GAAsB5yC,EAAW+oB,GAGjE,UACIpgF,KAAK0gF,iBACL1gF,KAAKs2G,kBAAkBh4E,WACvBt+B,KAAKm2G,4BAA4B74E,cACjCt9B,KAAKqrG,cAAc/sE,WACnBt+B,KAAKyrG,QAAQntE,WACbt+B,KAAK0rG,OAAOptE,WACZt+B,KAAK2rG,QAAQrtE,WACbt+B,KAAK01G,OAAOp3E,WACZt+B,KAAKk2G,gBAAgBxyG,QACrB1D,KAAKy2G,YAAc,KACnBz2G,KAAK4tG,iBAAiBlqG,QACtB1D,KAAK0qG,kBAAkBoM,oBAAoB92G,MAG/C,aACI,OAAOA,KAAK21G,YAGhB,QACI,MAAM9vG,EAAS2pD,GAAcxvD,KAAK6J,SAASgE,MAC3C7N,KAAKqrG,cAAcv5F,OACnB9R,KAAK21G,aAAc,EAInB31G,KAAK+2G,mBAAqBlxG,EAAOmxG,kBAAoBnxG,EAAOoxG,gBAAkB,GAC9EpxG,EAAOoxG,eAAiBpxG,EAAOmxG,iBAAmB,OAClDh3G,KAAKk3G,cACLl3G,KAAKg2G,UAAU71G,QAAQqkG,GAAWA,EAAQ2S,gBAAgBn3G,OAC1DA,KAAKm2G,4BAA4B74E,cACjCt9B,KAAKo3G,wBAUT,MAAMlnG,EAAM25F,EAAUC,EAAUplF,GAI5B,IAAIkvC,EAHJ5zD,KAAKwzB,QAIQ,MAAT9O,GACAkvC,EAAW5zD,KAAK8xG,gBAAkB9xG,KAAKq3G,YAAYnrG,QAAQgE,IAAS,GAClD,IAAd0jD,IAGAA,EAAW5zD,KAAKs3G,iCAAiCpnG,EAAM25F,EAAUC,KAIrEl2C,EAAWlvC,EAEf,MAAM6yF,EAAmBv3G,KAAKw3G,kBACxBlG,EAAeiG,EAAiBrrG,QAAQgE,GACxCy/F,EAAcz/F,EAAK+9F,wBACzB,IAAIwJ,EAAuBF,EAAiB3jD,GAc5C,GAVI6jD,IAAyBvnG,IACzBunG,EAAuBF,EAAiB3jD,EAAW,IAInD09C,GAAgB,GAChBiG,EAAiB9nG,OAAO6hG,EAAc,GAItCmG,IAAyBz3G,KAAK0qG,kBAAkBkC,WAAW6K,GAAuB,CAClF,MAAM5tG,EAAU4tG,EAAqBvJ,iBACrCrkG,EAAQiyD,cAAcnxC,aAAaglF,EAAa9lG,GAChD0tG,EAAiB9nG,OAAOmkD,EAAU,EAAG1jD,QAEpC,GAAIlQ,KAAK03G,yBAAyB7N,EAAUC,GAAW,CACxD,MAAM6N,EAAYJ,EAAiB,GAAGrJ,iBACtCyJ,EAAU9uF,WAAW8B,aAAaglF,EAAagI,GAC/CJ,EAAiBtoE,QAAQ/+B,QAGzBs/C,GAAcxvD,KAAK6J,SAAS3H,YAAYytG,GACxC4H,EAAiB92G,KAAKyP,GAG1By/F,EAAY9hG,MAAM02D,UAAY,GAG9BvkE,KAAK43G,sBACL53G,KAAK63G,wBACL73G,KAAKyrG,QAAQ35F,KAAK,CAAE5B,KAAAA,EAAMs6B,UAAWxqC,KAAMsxG,aAActxG,KAAKowG,aAAalgG,KAM/E,KAAKA,GACDlQ,KAAK83G,SACL93G,KAAK0rG,OAAO55F,KAAK,CAAE5B,KAAAA,EAAMs6B,UAAWxqC,OAcxC,KAAKkQ,EAAMohG,EAAcI,EAAmBH,EAAwB3tB,EAAU6tB,GAC1EzxG,KAAK83G,SAEgB,MAAjBrG,IACAA,EAAgBC,EAAkBtB,aAAalgG,IAEnDlQ,KAAK2rG,QAAQ75F,KAAK,CAAE5B,KAAAA,EAChBohG,aAAAA,EACAG,cAAAA,EACAjnE,UAAWxqC,KACX0xG,kBAAAA,EACAH,uBAAAA,EACA3tB,SAAAA,IAOR,UAAUtvB,GACN,MAAMyjD,EAAgB/3G,KAAKq3G,YAc3B,OAbAr3G,KAAKq3G,YAAc/iD,EACnBA,EAAMn0D,QAAQ+P,GAAQA,EAAK8nG,mBAAmBh4G,OAC1CA,KAAK4sG,eACgBmL,EAAc72G,OAAOgP,GAAQA,EAAK08F,cAGtCziE,MAAMj6B,IAAiC,IAAzBokD,EAAMpoD,QAAQgE,IACzClQ,KAAK83G,SAGL93G,KAAKk3G,eAGNl3G,KAGX,cAAcg0D,GAEV,OADAh0D,KAAKm0F,WAAangC,EACXh0D,KAOX,YAAY6rF,GAER,OADA7rF,KAAKg2G,UAAYnqB,EAAYttE,QACtBve,KAMX,gBAAgBi4G,GAEZ,OADAj4G,KAAKi2G,aAAegC,EACbj4G,KAMX,sBAAsBf,GAClB,MAAM4K,EAAU2lD,GAAcxvD,KAAK6J,SAKnC,OAFA7J,KAAKk4G,qBAC8B,IAA/Bj5G,EAASiN,QAAQrC,GAAkB,CAACA,KAAY5K,GAAYA,EAASsf,QAClEve,KAGX,uBACI,OAAOA,KAAKk4G,oBAMhB,aAAahoG,GACT,OAAKlQ,KAAK21G,YAQHwC,GAF6B,eAAtBn4G,KAAKi2G,cAAqD,QAApBj2G,KAAKm0F,WACrDn0F,KAAK41G,eAAer3F,QAAQu9B,UAAY97C,KAAK41G,eACzBwC,GAAeA,EAAYtC,OAAS5lG,GAPjDlQ,KAAKq3G,YAAYnrG,QAAQgE,GAaxC,cACI,OAAOlQ,KAAKk2G,gBAAgB5/F,KAAO,EASvC,UAAUpG,EAAM25F,EAAUC,EAAUuO,GAEhC,GAAIr4G,KAAK8xG,kBACJlI,GAAwB5pG,KAAKs4G,YAtUT,IAsUgDzO,EAAUC,GAC/E,OAEJ,MAAMvF,EAAWvkG,KAAK41G,eAChBhiD,EAAW5zD,KAAKs3G,iCAAiCpnG,EAAM25F,EAAUC,EAAUuO,GACjF,IAAkB,IAAdzkD,GAAmB2wC,EAASrhG,OAAS,EACrC,OAEJ,MAAMq1G,EAAqC,eAAtBv4G,KAAKi2G,aACpB3E,EAAe6G,GAAU5T,EAAU6T,GAAeA,EAAYtC,OAAS5lG,GACvEsoG,EAAuBjU,EAAS3wC,GAEhC6kD,EAAcD,EAAqB/O,WACnCh0C,EAAQ67C,EAAe19C,EAAW,GAAK,EAEvC8kD,EAAa14G,KAAK24G,iBAJApU,EAAS+M,GAAc7H,WAIWgP,EAAahjD,GAEjEmjD,EAAgB54G,KAAK64G,oBAAoBvH,EAAc/M,EAAU9uC,GAGjEqjD,EAAWvU,EAAShmF,SApZlC,SAAyB6hB,EAAO24E,EAAWC,GACvC,MAAM7sF,EAAOopF,GAAQwD,EAAW34E,EAAMl9B,OAAS,GACzC+1G,EAAK1D,GAAQyD,EAAS54E,EAAMl9B,OAAS,GAC3C,GAAIipB,IAAS8sF,EACT,OAEJ,MAAMl7F,EAASqiB,EAAMjU,GACfspC,EAAQwjD,EAAK9sF,GAAQ,EAAI,EAC/B,IAAK,IAAIrvB,EAAIqvB,EAAMrvB,IAAMm8G,EAAIn8G,GAAK24D,EAC9Br1B,EAAMtjC,GAAKsjC,EAAMtjC,EAAI24D,GAEzBr1B,EAAM64E,GAAMl7F,EAXhB,CAsZwBwmF,EAAU+M,EAAc19C,GACxC5zD,KAAK01G,OAAO5jG,KAAK,CACb2/F,cAAeH,EACfA,aAAc19C,EACdppB,UAAWxqC,KACXkQ,KAAAA,IAEJq0F,EAASpkG,QAAQ,CAACqkG,EAAS9/E,KAEvB,GAAIo0F,EAASp0F,KAAW8/E,EACpB,OAEJ,MAAM0U,EAAgB1U,EAAQsR,OAAS5lG,EACjCjK,EAASizG,EAAgBR,EAAaE,EACtCO,EAAkBD,EAAgBhpG,EAAK+9F,wBACzCzJ,EAAQsR,KAAK5H,iBAEjB1J,EAAQv+F,QAAUA,EAKdsyG,GAGAY,EAAgBtrG,MAAM02D,UAAY,eAAe97D,KAAKoY,MAAM2jF,EAAQv+F,mBACpE0jG,GAAiBnF,EAAQiF,WAAY,EAAGxjG,KAGxCkzG,EAAgBtrG,MAAM02D,UAAY,kBAAkB97D,KAAKoY,MAAM2jF,EAAQv+F,gBACvE0jG,GAAiBnF,EAAQiF,WAAYxjG,EAAQ,MAIrDjG,KAAK61G,cAAcE,SAAWrM,GAAmB+O,EAAa5O,EAAUC,GACxE9pG,KAAK61G,cAAcC,KAAO0C,EAAqB1C,KAC/C91G,KAAK61G,cAAcpgD,MAAQ8iD,EAAeF,EAAa77E,EAAI67E,EAAan1C,EAQ5E,2BAA2B2mC,EAAUC,GACjC,GAAI9pG,KAAKw1G,mBACL,OAEJ,IAAI4D,EACAC,EAA0B,EAC1BC,EAA4B,EAgBhC,GAdAt5G,KAAK4tG,iBAAiBpzB,UAAUr6E,QAAQ,CAACqH,EAAUqC,KAG3CA,IAAY7J,KAAKq3D,WAAc7vD,EAASiiG,aAAc2P,GAGtDxP,GAAwBpiG,EAASiiG,WAtZhB,IAsZsDI,EAAUC,MAChFuP,EAAyBC,GAiX1C,SAAoCzvG,EAAS4/F,EAAYI,EAAUC,GAC/D,MAAMyP,EAAmBC,GAA2B/P,EAAYK,GAC1D2P,EAAqBC,GAA6BjQ,EAAYI,GACpE,IAAIwP,EAA0B,EAC1BC,EAA4B,EAKhC,GAAIC,EAAkB,CAClB,MAAMxiC,EAAYltE,EAAQktE,UACD,IAArBwiC,EACIxiC,EAAY,IACZsiC,EAA0B,GAGzBxvG,EAAQi8E,aAAe/O,EAAYltE,EAAQmzE,eAChDq8B,EAA0B,GAGlC,GAAII,EAAoB,CACpB,MAAMxiC,EAAaptE,EAAQotE,WACA,IAAvBwiC,EACIxiC,EAAa,IACbqiC,EAA4B,GAG3BzvG,EAAQ04E,YAActL,EAAaptE,EAAQgpF,cAChDymB,EAA4B,GAGpC,MAAO,CAACD,EAAyBC,GA/BrC,CAjXkGzvG,EAASrC,EAASiiG,WAAYI,EAAUC,IACtHuP,GAA2BC,KAC3BF,EAAavvG,OAKpBwvG,IAA4BC,EAA2B,CACxD,MAAM,MAAE71C,EAAK,OAAEE,GAAW3jE,KAAKogF,eAAevJ,kBACxC4yB,EAAa,CAAEhmC,MAAAA,EAAOE,OAAAA,EAAQD,IAAK,EAAGK,MAAON,EAAOQ,OAAQN,EAAQH,KAAM,GAChF61C,EAA0BG,GAA2B/P,EAAYK,GACjEwP,EAA4BI,GAA6BjQ,EAAYI,GACrEuP,EAAa1lG,QAEb0lG,GAAeC,IAA4Br5G,KAAKo2G,0BAChDkD,IAA8Bt5G,KAAKq2G,4BACnC+C,IAAep5G,KAAKy2G,cACpBz2G,KAAKo2G,yBAA2BiD,EAChCr5G,KAAKq2G,2BAA6BiD,EAClCt5G,KAAKy2G,YAAc2C,GACdC,GAA2BC,IAA8BF,EAC1Dp5G,KAAKyyD,QAAQt4B,kBAAkBn6B,KAAKw2G,sBAGpCx2G,KAAK0gF,kBAKjB,iBACI1gF,KAAKs2G,kBAAkBxkG,OAG3B,wBACI,MAAMjI,EAAU2lD,GAAcxvD,KAAK6J,SACnC7J,KAAK4tG,iBAAiByC,MAAMrwG,KAAKk4G,qBAGjCl4G,KAAKs4G,YAAct4G,KAAK4tG,iBAAiBpzB,UAAU78E,IAAIkM,GAAS4/F,WAGpE,sBACI,MAAM8O,EAAqC,eAAtBv4G,KAAKi2G,aAC1Bj2G,KAAK41G,eAAiB51G,KAAKw3G,kBAAkB3rG,IAAIiqG,IAC7C,MAAM6D,EAAmB7D,EAAK8D,oBAC9B,MAAO,CAAE9D,KAAAA,EAAM7vG,OAAQ,EAAGwjG,WAAYD,GAAqBmQ,MAC5DtwF,KAAK,CAAC3C,EAAGC,IACD4xF,EAAe7xF,EAAE+iF,WAAWjmC,KAAO78C,EAAE8iF,WAAWjmC,KACnD98C,EAAE+iF,WAAW/lC,IAAM/8C,EAAE8iF,WAAW/lC,KAI5C,SACI1jE,KAAK21G,aAAc,EACnB,MAAM9vG,EAAS2pD,GAAcxvD,KAAK6J,SAASgE,MAC3ChI,EAAOoxG,eAAiBpxG,EAAOmxG,iBAAmBh3G,KAAK+2G,mBAEvD/2G,KAAKw3G,kBAAkBr3G,QAAQ+P,IAC3B,MAAMiK,EAAcjK,EAAKg+F,iBACrB/zF,IACAA,EAAYtM,MAAM02D,UAAY,MAGtCvkE,KAAKg2G,UAAU71G,QAAQqkG,GAAWA,EAAQqV,eAAe75G,OACzDA,KAAKw3G,kBAAoB,GACzBx3G,KAAK41G,eAAiB,GACtB51G,KAAK61G,cAAcC,KAAO,KAC1B91G,KAAK61G,cAAcpgD,MAAQ,EAC3Bz1D,KAAK61G,cAAcE,UAAW,EAC9B/1G,KAAK0gF,iBACL1gF,KAAKm2G,4BAA4B74E,cACjCt9B,KAAK4tG,iBAAiBlqG,QAQ1B,oBAAoB4tG,EAAc/M,EAAU9uC,GACxC,MAAM8iD,EAAqC,eAAtBv4G,KAAKi2G,aACpB1B,EAAkBhQ,EAAS+M,GAAc7H,WACzCqQ,EAAmBvV,EAAS+M,GAAwB,EAAT77C,GACjD,IAAImjD,EAAgBrE,EAAgBgE,EAAe,QAAU,UAAY9iD,EACzE,GAAIqkD,EAAkB,CAClB,MAAMtmF,EAAQ+kF,EAAe,OAAS,MAChCl+E,EAAMk+E,EAAe,QAAU,UAKtB,IAAX9iD,EACAmjD,GAAiBkB,EAAiBrQ,WAAWj2E,GAAS+gF,EAAgBl6E,GAGtEu+E,GAAiBrE,EAAgB/gF,GAASsmF,EAAiBrQ,WAAWpvE,GAG9E,OAAOu+E,EAQX,iBAAiBrE,EAAiBkE,EAAahjD,GAC3C,MAAM8iD,EAAqC,eAAtBv4G,KAAKi2G,aAC1B,IAAIyC,EAAaH,EAAeE,EAAYj1C,KAAO+wC,EAAgB/wC,KAC/Di1C,EAAY/0C,IAAM6wC,EAAgB7wC,IAMtC,OAJe,IAAXjO,IACAijD,GAAcH,EAAeE,EAAYh1C,MAAQ8wC,EAAgB9wC,MAC7Dg1C,EAAY90C,OAAS4wC,EAAgB5wC,QAEtC+0C,EAOX,yBAAyB7O,EAAUC,GAC/B,IAAK9pG,KAAKw3G,kBAAkBt0G,OACxB,OAAO,EAEX,MAAM62G,EAAgB/5G,KAAK41G,eACrB2C,EAAqC,eAAtBv4G,KAAKi2G,aAI1B,GADiB8D,EAAc,GAAGjE,OAAS91G,KAAKw3G,kBAAkB,GACpD,CACV,MAAMwC,EAAeD,EAAcA,EAAc72G,OAAS,GAAGumG,WAC7D,OAAO8O,EAAe1O,GAAYmQ,EAAaj2C,MAAQ+lC,GAAYkQ,EAAa/1C,OAE/E,CACD,MAAMg2C,EAAgBF,EAAc,GAAGtQ,WACvC,OAAO8O,EAAe1O,GAAYoQ,EAAcz2C,KAAOsmC,GAAYmQ,EAAcv2C,KAUzF,iCAAiCxzD,EAAM25F,EAAUC,EAAUr0C,GACvD,MAAM8iD,EAAqC,eAAtBv4G,KAAKi2G,aAC1B,OAAOkC,GAAUn4G,KAAK41G,eAAgB,EAAGE,KAAAA,EAAMrM,WAAAA,GAAcj4F,EAAG4uB,KAC5D,GAAI01E,IAAS5lG,EAGT,OAAOkwB,EAAMl9B,OAAS,EAE1B,GAAIuyD,EAAO,CACP,MAAMzB,EAAYukD,EAAe9iD,EAAMj5B,EAAIi5B,EAAMyN,EAIjD,GAAI4yC,IAAS91G,KAAK61G,cAAcC,MAAQ91G,KAAK61G,cAAcE,UACvD/hD,IAAch0D,KAAK61G,cAAcpgD,MACjC,OAAO,EAGf,OAAO8iD,EAGH1O,GAAYphG,KAAKyxG,MAAMzQ,EAAWjmC,OAASqmC,EAAWphG,KAAKyxG,MAAMzQ,EAAW1lC,OAC5E+lC,GAAYrhG,KAAKyxG,MAAMzQ,EAAW/lC,MAAQomC,EAAWrhG,KAAKyxG,MAAMzQ,EAAWxlC,UAIvF,cACIjkE,KAAKw3G,kBAAoBx3G,KAAKq3G,YAAY94F,QAC1Cve,KAAK43G,sBACL53G,KAAK63G,wBAOT,iBAAiBr7E,EAAG0mC,GAChB,OAAOwmC,GAAmB1pG,KAAKs4G,YAAa97E,EAAG0mC,GASnD,iCAAiChzD,EAAMssB,EAAG0mC,GACtC,OAAOljE,KAAKg2G,UAAUj1G,KAAKyjG,GAAWA,EAAQ2V,YAAYjqG,EAAMssB,EAAG0mC,IAQvE,YAAYhzD,EAAMssB,EAAG0mC,GACjB,IAAKwmC,GAAmB1pG,KAAKs4G,YAAa97E,EAAG0mC,KAAOljE,KAAKy1G,eAAevlG,EAAMlQ,MAC1E,OAAO,EAEX,MAAMo6G,EAAmBp6G,KAAKixD,iBAAiBmpD,iBAAiB59E,EAAG0mC,GAGnE,IAAKk3C,EACD,OAAO,EAEX,MAAM5zD,EAAgBgJ,GAAcxvD,KAAK6J,SAOzC,OAAOuwG,IAAqB5zD,GAAiBA,EAAc35C,SAASutG,GAMxE,gBAAgB5V,GACZ,MAAM6V,EAAiBr6G,KAAKk2G,gBACvBmE,EAAe/3G,IAAIkiG,KACpB6V,EAAehkG,IAAImuF,GACnBxkG,KAAK63G,wBACL73G,KAAKo3G,yBAOb,eAAe5S,GACXxkG,KAAKk2G,gBAAgBp8F,OAAO0qF,GAC5BxkG,KAAKm2G,4BAA4B74E,cAMrC,wBACIt9B,KAAKm2G,4BAA8Bn2G,KAAK0qG,kBAAkB9kB,OAAOjmD,UAAUz0B,IACvE,GAAIlL,KAAK4sG,aAAc,CACnB,MAAMkI,EAAmB90G,KAAK4tG,iBAAiBmH,aAAa7pG,GACxD4pG,IAKA90G,KAAK41G,eAAez1G,QAAQ,EAAGspG,WAAAA,MAC3BE,GAAiBF,EAAYqL,EAAiBpxC,IAAKoxC,EAAiBtxC,QAIxExjE,KAAK41G,eAAez1G,QAAQ,EAAG21G,KAAAA,MACvB91G,KAAK0qG,kBAAkBkC,WAAWkJ,IAGlCA,EAAKwE,uCAKZt6G,KAAKu6G,eACVv6G,KAAK63G,0BAUjB,iBACI,IAAK73G,KAAKu2G,kBAAmB,CACzB,MAAMiE,EAAavpD,GAAezB,GAAcxvD,KAAK6J,UACrD7J,KAAKu2G,kBAAoBiE,GAAcx6G,KAAKq3D,UAEhD,OAAOr3D,KAAKu2G,mBASpB,SAAS4B,GAAU/3E,EAAOR,GACtB,IAAK,IAAI9iC,EAAI,EAAGA,EAAIsjC,EAAMl9B,OAAQpG,IAC9B,GAAI8iC,EAAUQ,EAAMtjC,GAAIA,EAAGsjC,GACvB,OAAOtjC,EAGf,OAAQ,EAOZ,SAAS45G,GAAwB/jG,EAAM8nG,GAC/B9nG,IAASe,OACTf,EAAK+nG,SAAS,EAAGD,GAIjB9nG,EAAKokE,WAAa0jC,EAQ1B,SAAS9D,GAA0BhkG,EAAM8nG,GACjC9nG,IAASe,OACTf,EAAK+nG,SAASD,EAAQ,GAItB9nG,EAAKskE,YAAcwjC,EAQ3B,SAASjB,GAA2B/P,EAAYK,GAC5C,MAAM,IAAEpmC,EAAG,OAAEO,EAAM,OAAEN,GAAW8lC,EAC1BO,EAluByB,IAkuBZrmC,EACnB,OAAImmC,GAAYpmC,EAAMsmC,GAAcF,GAAYpmC,EAAMsmC,EAC3C,EAEFF,GAAY7lC,EAAS+lC,GAAcF,GAAY7lC,EAAS+lC,EACtD,EAEJ,EAOX,SAAS0P,GAA6BjQ,EAAYI,GAC9C,MAAM,KAAErmC,EAAI,MAAEO,EAAK,MAAEN,GAAUgmC,EACzBM,EAlvByB,IAkvBZtmC,EACnB,OAAIomC,GAAYrmC,EAAOumC,GAAcF,GAAYrmC,EAAOumC,EAC7C,EAEFF,GAAY9lC,EAAQgmC,GAAcF,GAAY9lC,EAAQgmC,EACpD,EAEJ,EAoDX,MAAM4Q,GAA8B3pD,GAAgC,CAChE2J,SAAS,EACT1sB,SAAS,IAUb,IAAI,GAAiC,MACjC,MAAM2sE,EACF,YAAYnoD,EAAS4E,GACjBr3D,KAAKyyD,QAAUA,EAEfzyD,KAAK66G,eAAiB,IAAIxmG,IAE1BrU,KAAK86G,eAAiB,IAAIzmG,IAE1BrU,KAAK+6G,qBAAuB,IAAI1mG,IAEhCrU,KAAKg7G,iBAAmB,IAAIr7G,IAK5BK,KAAK4wG,YAAc,IAAI,GAAA,QAKvB5wG,KAAK6wG,UAAY,IAAI,GAAA,QAErB7wG,KAAK4lF,OAAS,IAAI,GAAA,QAKlB5lF,KAAKi7G,6BAAgC/vG,IAC7BlL,KAAK+6G,qBAAqBzkG,MAC1BpL,EAAMgqD,kBAGdl1D,KAAKq3D,UAAYA,EAGrB,sBAAsBs6C,GACb3xG,KAAK66G,eAAev4G,IAAIqvG,IACzB3xG,KAAK66G,eAAexkG,IAAIs7F,GAIhC,iBAAiBmE,GACb91G,KAAK86G,eAAezkG,IAAIy/F,GAIS,IAA7B91G,KAAK86G,eAAexkG,MACpBtW,KAAKyyD,QAAQt4B,kBAAkB,KAG3Bn6B,KAAKq3D,UAAU3hC,iBAAiB,YAAa11B,KAAKi7G,6BAA8BN,MAK5F,oBAAoBhJ,GAChB3xG,KAAK66G,eAAe/gG,OAAO63F,GAG/B,eAAemE,GACX91G,KAAK86G,eAAehhG,OAAOg8F,GAC3B91G,KAAKkvG,aAAa4G,GACe,IAA7B91G,KAAK86G,eAAexkG,MACpBtW,KAAKq3D,UAAU5hC,oBAAoB,YAAaz1B,KAAKi7G,6BAA8BN,IAQ3F,cAAc7E,EAAM5qG,GAEhB,IAAIlL,KAAK+6G,qBAAqBz4G,IAAIwzG,KAGlC91G,KAAK+6G,qBAAqB1kG,IAAIy/F,GACS,IAAnC91G,KAAK+6G,qBAAqBzkG,MAAY,CACtC,MAAM4kG,EAAehwG,EAAMvJ,KAAKyO,WAAW,SAErC+qG,EAAUD,EAAe,WAAa,UAI5Cl7G,KAAKg7G,iBACA54G,IANa84G,EAAe,YAAc,YAM3B,CAChBv/C,QAAUtwD,GAAMrL,KAAK4wG,YAAY9+F,KAAKzG,GACtCtL,QAAS46G,KAERv4G,IAAI+4G,EAAS,CACdx/C,QAAUtwD,GAAMrL,KAAK6wG,UAAU/+F,KAAKzG,GACpCtL,SAAS,IAERqC,IAAI,SAAU,CACfu5D,QAAUtwD,GAAMrL,KAAK4lF,OAAO9zE,KAAKzG,GAGjCtL,SAAS,IAMRqC,IAAI,cAAe,CACpBu5D,QAAS37D,KAAKi7G,6BACdl7G,QAAS46G,KAEb36G,KAAKyyD,QAAQt4B,kBAAkB,KAC3Bn6B,KAAKg7G,iBAAiB76G,QAAQ,CAACa,EAAQ3D,KACnC2C,KAAKq3D,UAAU3hC,iBAAiBr4B,EAAM2D,EAAO26D,QAAS36D,EAAOjB,cAM7E,aAAa+1G,GACT91G,KAAK+6G,qBAAqBjhG,OAAOg8F,GACM,IAAnC91G,KAAK+6G,qBAAqBzkG,MAC1BtW,KAAKo7G,wBAIb,WAAWtF,GACP,OAAO91G,KAAK+6G,qBAAqBz4G,IAAIwzG,GAEzC,cACI91G,KAAK86G,eAAe36G,QAAQ+oD,GAAYlpD,KAAK6uG,eAAe3lD,IAC5DlpD,KAAK66G,eAAe16G,QAAQ+oD,GAAYlpD,KAAK82G,oBAAoB5tD,IACjElpD,KAAKo7G,wBACLp7G,KAAK4wG,YAAYtyE,WACjBt+B,KAAK6wG,UAAUvyE,WAGnB,wBACIt+B,KAAKg7G,iBAAiB76G,QAAQ,CAACa,EAAQ3D,KACnC2C,KAAKq3D,UAAU5hC,oBAAoBp4B,EAAM2D,EAAO26D,QAAS36D,EAAOjB,WAEpEC,KAAKg7G,iBAAiBt3G,SAgB9B,OAbJk3G,EAAiBp4G,UAAO,SAAkCxE,GAAK,OAAO,IAAKA,GAAK48G,GAAkB,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,EAAA,YAC9IA,EAAiBn4G,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAAsC,OAAO,IAAIk7G,EAAiB,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,EAAA,YAAel4G,MAAOk4G,EAAkBn7G,WAAY,SAYjMm7G,GA1J0B,GAqKrC,MAAMS,GAAiB,CACnB9O,mBAAoB,EACpB8H,gCAAiC,GAKrC,IAAI,GAAyB,MACzB,MAAMiH,EACF,YAAYjkD,EAAW5E,EAAS2tB,EAAgBsqB,GAC5C1qG,KAAKq3D,UAAYA,EACjBr3D,KAAKyyD,QAAUA,EACfzyD,KAAKogF,eAAiBA,EACtBpgF,KAAK0qG,kBAAoBA,EAO7B,WAAW7gG,EAAS7I,EAASq6G,IACzB,OAAO,IAAI,GAAQxxG,EAAS7I,EAAQhB,KAAKq3D,UAAWr3D,KAAKyyD,QAASzyD,KAAKogF,eAAgBpgF,KAAK0qG,mBAMhG,eAAe7gG,GACX,OAAO,IAAI,GAAYA,EAAS7J,KAAK0qG,kBAAmB1qG,KAAKq3D,UAAWr3D,KAAKyyD,QAASzyD,KAAKogF,iBAkBnG,OAfJk7B,EAAS94G,UAAO,SAA0BxE,GAAK,OAAO,IAAKA,GAAKs9G,GAAU,EAAA,sBAAgB,EAAA,UAAW,EAAA,sBAAgB,EAAA,QAAgB,EAAA,sBAAgB,IAAuB,EAAA,sBAAgB,MACxLA,EAAS74G,WAAQ,OAAA,EAAA,gCAAA,CAAmB,CAAE/C,QAAS,WAA8B,OAAO,IAAI47G,EAAS,OAAA,EAAA,sBAAA,CAAS,EAAA,UAAW,OAAA,EAAA,sBAAA,CAAS,EAAA,QAAS,OAAA,EAAA,sBAAA,CAAS,IAAgB,OAAA,EAAA,sBAAA,CAAS,MAAuB54G,MAAO44G,EAAU77G,WAAY,SActN67G,GAvCkB,GA6gCzB,GAA+B,MAC/B,MAAMC,GAgCN,OA9BJA,EAAel2G,UAAO,EAAA,8BAAwB,CAAE1D,KAAM45G,IACtDA,EAAej2G,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAgC1B,GAAK,OAAO,IAAKA,GAAKu9G,IAAsB12G,UAAW,CACxI,IACDU,QAAS,CAAC,MA2BNg2G,GAjCwB,GC5hG/B,GAAgC,MAChC,MAAMC,GAYN,OAVJA,EAAgBn2G,UAAO,EAAA,8BAAwB,CAAE1D,KAAM65G,IACvDA,EAAgBl2G,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAiC1B,GAAK,OAAO,IAAKA,GAAKw9G,MAStGA,GAbyB,GCAhC,GAAmC,MACnC,MAAMC,GAYN,OAVJA,EAAmBp2G,UAAO,EAAA,8BAAwB,CAAE1D,KAAM85G,IAC1DA,EAAmBn2G,UAAO,EAAA,8BAAwB,CAAE5F,QAAS,SAAoC1B,GAAK,OAAO,IAAKA,GAAKy9G,MAS5GA,GAb4B,GCvJhC,GAAA,YAAMC,4DAAAA,mFAAAA,IAAc,QAAA,CA5CzB,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,SAGK,GClFA,GAAA,YAAMC,4DAAAA,mFAAAA,IAAY,QAAA,CAHvB,SAGK,6BCTN,EAAA,uBAAA,EAAA,kBAAA,kFAAmE,EAAA,wBAAA,QAAA,EAAA,yBAAA,EAAA,EAAA,EAAA,oCADpE,EAAA,qCAAA,GACC,EAAA,wBAAA,EAAA,GAAA,EAAA,EAAA,kBAAA,GAED,EAAA,0DAFkB,EAAA,uBAAA,GAAA,EAAA,wBAAA,uBAAA,EAAA,QAAA,CAAiD,0BAAA,EAAA,MCGnE,MAAM,GAAiB,CACtB,CAAEv0E,KAAM,QAASqC,UCSX,YAAMmyE,EAEZ,YACSv3B,EACAC,GADA,KAAAD,WAAAA,EACA,KAAAC,aAAAA,EAGT,WACC,OAAOtkF,KAAKqkF,WAAWG,YAGxB,aACC,OAAOxkF,KAAKskF,aAAaC,qDAZdq3B,GAAqB,EAAA,+BAAA,IAAA,EAAA,+BAAA,yDAArBA,EAAqB,UAAA,CAAA,CAAA,sBAAA,MAAA,EAAA,KAAA,EAAA,OAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,QAAA,EAAA,uBAAA,2BAAA,CAAA,EAAA,UAAA,SAAA,SAAA,EAAA,GAAA,EAAA,IFdlC,EAAA,wBAAA,EAAA,GAAA,EAAA,EAAA,eAAA,0CAAc,EAAA,wBAAA,OAAA,EAAA,yBAAA,EAAA,EAAA,EAAA,mEEcP,IDRN,CAAEx0E,KAAM,GAAIwB,UAAW,OAAQiB,WAAY,SAC3C,CAAEzC,KAAM,KAAMyC,WAAY,UASpB,IAAA,GAAA,YAAMgyE,4DAAAA,mFAAAA,IAAgB,QAAA,CALnB,CACR,GAAaC,QAAQ,KAEZ,SAEJ,GEwBA,GAAA,YAAMC,EACZ,YAAoB9jE,GAAA,KAAAA,SAAAA,EAEpB,cAAc+jE,GACb,CACC,MAAMnyG,EAAU,OAAA,EAAA,oBAAA,CAAoB,GAAc,CAAEouC,SAAUj4C,KAAKi4C,WACnEgkE,eAAeC,OAAO,aAAcryG,8DAN1BkyG,mFAAAA,GAAS,EAAA,sBAAA,EAAA,YAAA,QAAA,CAjBZ,CACR,EAAA,cACA,GACA,GAAA,iBACA,GACA,GACA,EAAmBD,QAAQ,CAC1B52G,YAAa,CACZlB,eAAgB,GAChBZ,iBAAkB,GAClBtC,UAAU,YAOP,GChCN,OAAA,EAAA,eAAA,GAGD,EAAA,kBAAyBq7G,gBAAgB,IACvCr4G,MAAM+4B,GAAOt8B,QAAQwD,MAAM84B","sourceRoot":"webpack:///","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = ng.common;","module.exports = rxjs;","module.exports = ng.elements;","module.exports = ng.common.http;","module.exports = ng.platformBrowser;","module.exports = ng.core;","import { InjectionToken, Injectable, Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Directive, ViewContainerRef, TemplateRef, ComponentFactoryResolver, ChangeDetectorRef, Input, Renderer2, SkipSelf, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nconst LAZY_ELEMENT_CONFIGS = new InjectionToken('LAZY_ELEMENT_CONFIGS');\n/** @type {?} */\nconst LAZY_ELEMENT_ROOT_OPTIONS = new InjectionToken('LAZY_ELEMENT_ROOT_OPTIONS');\n/** @type {?} */\nconst LAZY_ELEMENT_ROOT_GUARD = new InjectionToken('LAZY_ELEMENT_ROOT_GUARD');\n/** @type {?} */\nconst LAZY_ELEMENTS_REGISTRY = new InjectionToken('LAZY_ELEMENTS_REGISTRY', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => new Map())\n});\n/**\n * @record\n */\nfunction LazyElementsRegistry() { }\nif (false) {\n    /** @type {?} */\n    LazyElementsRegistry.prototype.get;\n    /** @type {?} */\n    LazyElementsRegistry.prototype.set;\n    /** @type {?} */\n    LazyElementsRegistry.prototype.has;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LOG_PREFIX = '@angular-extensions/elements';\n/**\n * @record\n */\nfunction ElementConfig() { }\nif (false) {\n    /** @type {?} */\n    ElementConfig.prototype.tag;\n    /** @type {?} */\n    ElementConfig.prototype.url;\n    /** @type {?|undefined} */\n    ElementConfig.prototype.isModule;\n    /** @type {?|undefined} */\n    ElementConfig.prototype.loadingComponent;\n    /** @type {?|undefined} */\n    ElementConfig.prototype.errorComponent;\n    /** @type {?|undefined} */\n    ElementConfig.prototype.preload;\n}\nclass LazyElementsLoaderService {\n    /**\n     * @param {?} registry\n     * @param {?} options\n     */\n    constructor(registry, options) {\n        this.registry = registry;\n        this.options = options;\n        this.configs = [];\n        if (!options) {\n            this.options = {};\n        }\n    }\n    /**\n     * @param {?} newConfigs\n     * @return {?}\n     */\n    addConfigs(newConfigs) {\n        newConfigs.forEach((/**\n         * @param {?} newConfig\n         * @return {?}\n         */\n        newConfig => {\n            /** @type {?} */\n            const existingConfig = this.getElementConfig(newConfig.tag);\n            if (existingConfig) {\n                console.warn(`${LOG_PREFIX} - ElementConfig for tag '${newConfig.tag}' was previously added, it will not be added multiple times, continue...`);\n            }\n            else {\n                this.configs.push(newConfig);\n                /** @type {?} */\n                const shouldPreload = newConfig.preload !== undefined\n                    ? newConfig.preload\n                    : this.options.preload;\n                if (shouldPreload) {\n                    this.loadElement(newConfig.url, newConfig.tag, newConfig.isModule);\n                }\n            }\n        }));\n    }\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    getElementConfig(tag) {\n        return this.configs.find((/**\n         * @param {?} config\n         * @return {?}\n         */\n        config => config.tag === tag));\n    }\n    /**\n     * @param {?=} tags\n     * @return {?}\n     */\n    preload(tags) {\n        /** @type {?} */\n        let configs = this.configs;\n        if (tags) {\n            configs = this.configs.filter((/**\n             * @param {?} config\n             * @return {?}\n             */\n            config => tags.includes(config.tag)));\n        }\n        configs.forEach((/**\n         * @param {?} config\n         * @return {?}\n         */\n        config => this.loadElement(config.url, config.tag, config.isModule)));\n    }\n    /**\n     * @param {?} url\n     * @param {?} tag\n     * @param {?=} isModule\n     * @return {?}\n     */\n    loadElement(url, tag, isModule) {\n        /** @type {?} */\n        const config = this.getElementConfig(tag);\n        if (!url) {\n            if (!config || !config.url) {\n                throw new Error(`${LOG_PREFIX} - url for <${tag}> not found`);\n            }\n            url = config.url;\n        }\n        if (isModule === undefined) {\n            isModule =\n                config && config.isModule !== undefined\n                    ? config.isModule\n                    : this.options.isModule;\n        }\n        if (!tag) {\n            throw new Error(`${LOG_PREFIX} - tag for '${url}' not found, the *axLazyElement has to be used on HTML element`);\n        }\n        if (!this.hasElement(url)) {\n            /** @type {?} */\n            const notifier = this.addElement(url);\n            /** @type {?} */\n            const script = (/** @type {?} */ (document.createElement('script')));\n            if (isModule) {\n                script.type = 'module';\n            }\n            script.src = url;\n            script.onload = notifier.resolve;\n            script.onerror = notifier.reject;\n            document.body.appendChild(script);\n        }\n        return this.registry.get(this.stripUrlProtocol(url));\n    }\n    /**\n     * @private\n     * @param {?} url\n     * @return {?}\n     */\n    addElement(url) {\n        /** @type {?} */\n        let notifier;\n        this.registry.set(this.stripUrlProtocol(url), new Promise((/**\n         * @param {?} resolve\n         * @param {?} reject\n         * @return {?}\n         */\n        (resolve, reject) => (notifier = { resolve, reject }))));\n        return notifier;\n    }\n    /**\n     * @private\n     * @param {?} url\n     * @return {?}\n     */\n    hasElement(url) {\n        return this.registry.has(this.stripUrlProtocol(url));\n    }\n    /**\n     * @private\n     * @param {?} url\n     * @return {?}\n     */\n    stripUrlProtocol(url) {\n        return url.replace(/https?:\\/\\//, '');\n    }\n}\nLazyElementsLoaderService.ɵfac = function LazyElementsLoaderService_Factory(t) { return new (t || LazyElementsLoaderService)(ɵngcc0.ɵɵinject(LAZY_ELEMENTS_REGISTRY), ɵngcc0.ɵɵinject(LAZY_ELEMENT_ROOT_OPTIONS, 8)); };\n/** @nocollapse */\nLazyElementsLoaderService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [LAZY_ELEMENTS_REGISTRY,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_ELEMENT_ROOT_OPTIONS,] }] }\n];\n/** @nocollapse */ LazyElementsLoaderService.ɵprov = ɵɵdefineInjectable({ factory: function LazyElementsLoaderService_Factory() { return new LazyElementsLoaderService(ɵɵinject(LAZY_ELEMENTS_REGISTRY), ɵɵinject(LAZY_ELEMENT_ROOT_OPTIONS, 8)); }, token: LazyElementsLoaderService, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyElementsLoaderService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [LAZY_ELEMENTS_REGISTRY]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LAZY_ELEMENT_ROOT_OPTIONS]\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    LazyElementsLoaderService.prototype.configs;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementsLoaderService.prototype.registry;\n    /** @type {?} */\n    LazyElementsLoaderService.prototype.options;\n}\n/**\n * @record\n */\nfunction Notifier() { }\nif (false) {\n    /** @type {?} */\n    Notifier.prototype.resolve;\n    /** @type {?} */\n    Notifier.prototype.reject;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LOG_PREFIX$1 = '@angular-extensions/elements';\nclass LazyElementDirective {\n    // tslint:disable-line:no-input-rename\n    /**\n     * @param {?} vcr\n     * @param {?} template\n     * @param {?} elementsLoaderService\n     * @param {?} cfr\n     * @param {?} cdr\n     */\n    constructor(vcr, template, elementsLoaderService, cfr, cdr) {\n        this.vcr = vcr;\n        this.template = template;\n        this.elementsLoaderService = elementsLoaderService;\n        this.cfr = cfr;\n        this.cdr = cdr;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const tpl = (/** @type {?} */ (this.template));\n        /** @type {?} */\n        const elementTag = tpl._declarationTContainer\n            ? tpl._declarationTContainer.tagName\n            : tpl._def.element.template.nodes[0].element.name;\n        /** @type {?} */\n        const elementConfig = this.elementsLoaderService.getElementConfig(elementTag) ||\n            ((/** @type {?} */ ({})));\n        /** @type {?} */\n        const options = this.elementsLoaderService.options;\n        /** @type {?} */\n        const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;\n        if (this.loadingTemplateRef) {\n            this.vcr.createEmbeddedView(this.loadingTemplateRef);\n        }\n        else if (loadingComponent) {\n            /** @type {?} */\n            const factory = this.cfr.resolveComponentFactory(loadingComponent);\n            this.vcr.createComponent(factory);\n        }\n        this.elementsLoaderService\n            .loadElement(this.url, elementTag, this.isModule)\n            .then((/**\n         * @return {?}\n         */\n        () => {\n            this.vcr.clear();\n            this.vcr.createEmbeddedView(this.template);\n            this.cdr.markForCheck();\n        }))\n            .catch((/**\n         * @return {?}\n         */\n        () => {\n            this.vcr.clear();\n            /** @type {?} */\n            const errorComponent = elementConfig.errorComponent || options.errorComponent;\n            if (this.errorTemplateRef) {\n                this.vcr.createEmbeddedView(this.errorTemplateRef);\n                this.cdr.markForCheck();\n            }\n            else if (errorComponent) {\n                /** @type {?} */\n                const factory = this.cfr.resolveComponentFactory(errorComponent);\n                this.vcr.createComponent(factory);\n                this.cdr.markForCheck();\n            }\n            else {\n                console.error(`${LOG_PREFIX$1} - Loading of element <${elementTag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element`);\n            }\n        }));\n    }\n}\nLazyElementDirective.ɵfac = function LazyElementDirective_Factory(t) { return new (t || LazyElementDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(LazyElementsLoaderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nLazyElementDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LazyElementDirective, selectors: [[\"\", \"axLazyElement\", \"\"]], inputs: { url: [\"axLazyElement\", \"url\"], loadingTemplateRef: [\"axLazyElementLoadingTemplate\", \"loadingTemplateRef\"], errorTemplateRef: [\"axLazyElementErrorTemplate\", \"errorTemplateRef\"], isModule: [\"axLazyElementModule\", \"isModule\"] } });\n/** @nocollapse */\nLazyElementDirective.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: LazyElementsLoaderService },\n    { type: ComponentFactoryResolver },\n    { type: ChangeDetectorRef }\n];\nLazyElementDirective.propDecorators = {\n    url: [{ type: Input, args: ['axLazyElement',] }],\n    loadingTemplateRef: [{ type: Input, args: ['axLazyElementLoadingTemplate',] }],\n    errorTemplateRef: [{ type: Input, args: ['axLazyElementErrorTemplate',] }],\n    isModule: [{ type: Input, args: ['axLazyElementModule',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyElementDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[axLazyElement]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: LazyElementsLoaderService }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ChangeDetectorRef }]; }, { url: [{\n            type: Input,\n            args: ['axLazyElement']\n        }], loadingTemplateRef: [{\n            type: Input,\n            args: ['axLazyElementLoadingTemplate']\n        }], errorTemplateRef: [{\n            type: Input,\n            args: ['axLazyElementErrorTemplate']\n        }], isModule: [{\n            type: Input,\n            args: ['axLazyElementModule']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    LazyElementDirective.prototype.url;\n    /** @type {?} */\n    LazyElementDirective.prototype.loadingTemplateRef;\n    /** @type {?} */\n    LazyElementDirective.prototype.errorTemplateRef;\n    /** @type {?} */\n    LazyElementDirective.prototype.isModule;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDirective.prototype.vcr;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDirective.prototype.template;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDirective.prototype.elementsLoaderService;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDirective.prototype.cfr;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDirective.prototype.cdr;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LOG_PREFIX$2 = '@angular-extensions/elements';\n/**\n * \\@dynamic\n */\nclass LazyElementDynamicDirective {\n    // tslint:disable-line:no-input-rename\n    /**\n     * @param {?} document\n     * @param {?} renderer\n     * @param {?} vcr\n     * @param {?} cfr\n     * @param {?} cdr\n     * @param {?} template\n     * @param {?} elementsLoaderService\n     */\n    constructor(document, renderer, vcr, cfr, cdr, template, elementsLoaderService) {\n        this.document = document;\n        this.renderer = renderer;\n        this.vcr = vcr;\n        this.cfr = cfr;\n        this.cdr = cdr;\n        this.template = template;\n        this.elementsLoaderService = elementsLoaderService;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.tag || this.tag.length === 0 || !this.tag.includes('-')) {\n            throw new Error(`${LOG_PREFIX$2} - Valid tag has to be specified when using *axLazyElementDynamic directive (use *axLazyElementDynamic=\"'some-tag'\"), got: \"${this.tag}\"`);\n        }\n        /** @type {?} */\n        const elementConfig = this.elementsLoaderService.getElementConfig(this.tag) ||\n            ((/** @type {?} */ ({})));\n        /** @type {?} */\n        const options = this.elementsLoaderService.options;\n        /** @type {?} */\n        const loadingComponent = elementConfig.loadingComponent || options.loadingComponent;\n        if (this.loadingTemplateRef) {\n            this.vcr.createEmbeddedView(this.loadingTemplateRef);\n        }\n        else if (loadingComponent) {\n            /** @type {?} */\n            const factory = this.cfr.resolveComponentFactory(loadingComponent);\n            this.vcr.createComponent(factory);\n        }\n        this.elementsLoaderService\n            .loadElement(this.url, this.tag, this.isModule)\n            .then((/**\n         * @return {?}\n         */\n        () => {\n            this.vcr.clear();\n            /** @type {?} */\n            const originalCreateElement = this.renderer.createElement;\n            this.renderer.createElement = (/**\n             * @param {?} name\n             * @param {?} namespace\n             * @return {?}\n             */\n            (name, namespace) => {\n                if (name === 'ax-lazy-element') {\n                    name = this.tag;\n                }\n                return this.document.createElement(name);\n            });\n            this.vcr.createEmbeddedView(this.template);\n            this.renderer.createElement = originalCreateElement;\n            this.cdr.markForCheck();\n        }))\n            .catch((/**\n         * @param {?} error\n         * @return {?}\n         */\n        error => {\n            /** @type {?} */\n            const errorComponent = elementConfig.errorComponent || options.errorComponent;\n            this.vcr.clear();\n            if (this.errorTemplateRef) {\n                this.vcr.createEmbeddedView(this.errorTemplateRef);\n                this.cdr.markForCheck();\n            }\n            else if (errorComponent) {\n                /** @type {?} */\n                const factory = this.cfr.resolveComponentFactory(errorComponent);\n                this.vcr.createComponent(factory);\n                this.cdr.markForCheck();\n            }\n            else {\n                console.error(`${LOG_PREFIX$2} - Loading of element <${this.tag}> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElementDynamic=\"errorTemplate: error\" to display customized error message in place of element\\n\\n`, error);\n            }\n        }));\n    }\n}\nLazyElementDynamicDirective.ɵfac = function LazyElementDynamicDirective_Factory(t) { return new (t || LazyElementDynamicDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(LazyElementsLoaderService)); };\nLazyElementDynamicDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LazyElementDynamicDirective, selectors: [[\"\", \"axLazyElementDynamic\", \"\"]], inputs: { tag: [\"axLazyElementDynamic\", \"tag\"], url: [\"axLazyElementDynamicUrl\", \"url\"], loadingTemplateRef: [\"axLazyElementDynamicLoadingTemplate\", \"loadingTemplateRef\"], errorTemplateRef: [\"axLazyElementDynamicErrorTemplate\", \"errorTemplateRef\"], isModule: [\"axLazyElementDynamicModule\", \"isModule\"] } });\n/** @nocollapse */\nLazyElementDynamicDirective.ctorParameters = () => [\n    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Renderer2 },\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver },\n    { type: ChangeDetectorRef },\n    { type: TemplateRef },\n    { type: LazyElementsLoaderService }\n];\nLazyElementDynamicDirective.propDecorators = {\n    tag: [{ type: Input, args: ['axLazyElementDynamic',] }],\n    url: [{ type: Input, args: ['axLazyElementDynamicUrl',] }],\n    loadingTemplateRef: [{ type: Input, args: ['axLazyElementDynamicLoadingTemplate',] }],\n    errorTemplateRef: [{ type: Input, args: ['axLazyElementDynamicErrorTemplate',] }],\n    isModule: [{ type: Input, args: ['axLazyElementDynamicModule',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyElementDynamicDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[axLazyElementDynamic]'\n            }]\n    }], function () { return [{ type: Document, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.TemplateRef }, { type: LazyElementsLoaderService }]; }, { tag: [{\n            type: Input,\n            args: ['axLazyElementDynamic']\n        }], url: [{\n            type: Input,\n            args: ['axLazyElementDynamicUrl']\n        }], loadingTemplateRef: [{\n            type: Input,\n            args: ['axLazyElementDynamicLoadingTemplate']\n        }], errorTemplateRef: [{\n            type: Input,\n            args: ['axLazyElementDynamicErrorTemplate']\n        }], isModule: [{\n            type: Input,\n            args: ['axLazyElementDynamicModule']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    LazyElementDynamicDirective.prototype.tag;\n    /** @type {?} */\n    LazyElementDynamicDirective.prototype.url;\n    /** @type {?} */\n    LazyElementDynamicDirective.prototype.loadingTemplateRef;\n    /** @type {?} */\n    LazyElementDynamicDirective.prototype.errorTemplateRef;\n    /** @type {?} */\n    LazyElementDynamicDirective.prototype.isModule;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDynamicDirective.prototype.document;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDynamicDirective.prototype.renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDynamicDirective.prototype.vcr;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDynamicDirective.prototype.cfr;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDynamicDirective.prototype.cdr;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDynamicDirective.prototype.template;\n    /**\n     * @type {?}\n     * @private\n     */\n    LazyElementDynamicDirective.prototype.elementsLoaderService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} options\n * @return {?}\n */\nfunction createLazyElementRootGuard(options) {\n    if (options) {\n        throw new TypeError(`LazyElementsModule.forRoot() called twice. Feature modules should use LazyElementsModule.forFeature() instead.`);\n    }\n    return 'guarded';\n}\nclass LazyElementsModule {\n    /**\n     * @param {?} lazyElementsLoaderService\n     * @param {?} elementConfigsMultiProvider\n     * @param {?} guard\n     */\n    constructor(lazyElementsLoaderService, elementConfigsMultiProvider, guard) {\n        if (elementConfigsMultiProvider && elementConfigsMultiProvider.length) {\n            /** @type {?} */\n            const lastAddedConfigs = elementConfigsMultiProvider[elementConfigsMultiProvider.length - 1];\n            lazyElementsLoaderService.addConfigs(lastAddedConfigs);\n        }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    static forRoot(options) {\n        return {\n            ngModule: LazyElementsModule,\n            providers: [\n                {\n                    provide: LAZY_ELEMENT_CONFIGS,\n                    useValue: options && options.elementConfigs ? options.elementConfigs : [],\n                    multi: true\n                },\n                {\n                    provide: LAZY_ELEMENT_ROOT_OPTIONS,\n                    useValue: options.rootOptions ? options.rootOptions : {}\n                },\n                {\n                    provide: LAZY_ELEMENT_ROOT_GUARD,\n                    useFactory: createLazyElementRootGuard,\n                    deps: [[LAZY_ELEMENT_CONFIGS, new Optional(), new SkipSelf()]]\n                }\n            ]\n        };\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    static forFeature(options) {\n        return {\n            ngModule: LazyElementsModule,\n            providers: [\n                {\n                    provide: LAZY_ELEMENT_CONFIGS,\n                    useValue: options && options.elementConfigs ? options.elementConfigs : [],\n                    multi: true\n                }\n            ]\n        };\n    }\n}\nLazyElementsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LazyElementsModule });\nLazyElementsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LazyElementsModule_Factory(t) { return new (t || LazyElementsModule)(ɵngcc0.ɵɵinject(LazyElementsLoaderService), ɵngcc0.ɵɵinject(LAZY_ELEMENT_CONFIGS, 8), ɵngcc0.ɵɵinject(LAZY_ELEMENT_ROOT_GUARD, 8)); }, providers: [], imports: [[CommonModule]] });\n/** @nocollapse */\nLazyElementsModule.ctorParameters = () => [\n    { type: LazyElementsLoaderService },\n    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_ELEMENT_CONFIGS,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_ELEMENT_ROOT_GUARD,] }] }\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LazyElementsModule, { declarations: function () { return [LazyElementDirective, LazyElementDynamicDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [LazyElementDirective, LazyElementDynamicDirective]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LazyElementsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [LazyElementDirective, LazyElementDynamicDirective],\n                imports: [CommonModule],\n                exports: [LazyElementDirective, LazyElementDynamicDirective],\n                providers: []\n            }]\n    }], function () { return [{ type: LazyElementsLoaderService }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LAZY_ELEMENT_CONFIGS]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LAZY_ELEMENT_ROOT_GUARD]\n            }] }]; }, null); })();\n/**\n * @record\n */\nfunction LazyElementModuleOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    LazyElementModuleOptions.prototype.elementConfigs;\n}\n/**\n * @record\n */\nfunction LazyElementModuleRootOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    LazyElementModuleRootOptions.prototype.elementConfigs;\n    /** @type {?|undefined} */\n    LazyElementModuleRootOptions.prototype.rootOptions;\n}\n/**\n * @record\n */\nfunction LazyElementRootOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    LazyElementRootOptions.prototype.loadingComponent;\n    /** @type {?|undefined} */\n    LazyElementRootOptions.prototype.errorComponent;\n    /** @type {?|undefined} */\n    LazyElementRootOptions.prototype.isModule;\n    /** @type {?|undefined} */\n    LazyElementRootOptions.prototype.preload;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { LAZY_ELEMENTS_REGISTRY, LAZY_ELEMENT_CONFIGS, LAZY_ELEMENT_ROOT_GUARD, LAZY_ELEMENT_ROOT_OPTIONS, LazyElementDirective, LazyElementDynamicDirective, LazyElementsLoaderService, LazyElementsModule, createLazyElementRootGuard };\n\n//# sourceMappingURL=angular-extensions-elements.js.map","/**\n * @license Angular v10.0.3\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * @usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the `build()` method to create a programmatic animation using the\n * `animate()` function. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass AnimationBuilder {\n}\n/**\n * A factory object returned from the `AnimationBuilder`.`build()` method.\n *\n * @publicApi\n */\nclass AnimationFactory {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Specifies automatic styling.\n *\n * @publicApi\n */\nconst AUTO_STYLE = '*';\n/**\n * Creates a named animation trigger, containing a  list of `state()`\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * @param name An identifying string.\n * @param definitions  An animation definition object, containing an array of `state()`\n * and `transition()` declarations.\n *\n * @return An object that encapsulates the trigger data.\n *\n * @usageNotes\n * Define an animation trigger in the `animations` section of `@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```typescript\n * @Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```typescript\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *\n * @Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```typescript\n * @Component({\n *   selector: 'my-component',\n *   template: `\n *     <div [@.disabled]=\"isDisabled\">\n *       <div [@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\n *\n * ```typescript\n * import {Component, HostBinding} from '@angular/core';\n *\n * @Component({\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   @HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * @publicApi\n */\nfunction trigger(name, definitions) {\n    return { type: 7 /* Trigger */, name, definitions, options: {} };\n}\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * @param timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @returns An object that encapsulates the animation step.\n *\n * @usageNotes\n * Call within an animation `sequence()`, `{@link animations/group group()}`, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```typescript\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```typescript\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n *  ])\n * ```\n *\n * @publicApi\n */\nfunction animate(timings, styles = null) {\n    return { type: 4 /* Animate */, styles, timings };\n}\n/**\n * @description Defines a list of animation steps to be run in parallel.\n *\n * @param steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```typescript\n * group([\n *   animate(\"1s\", style({ background: \"black\" })),\n *   animate(\"2s\", style({ color: \"white\" }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the group data.\n *\n * @usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n *\n * @publicApi\n */\nfunction group(steps, options = null) {\n    return { type: 3 /* Group */, steps, options };\n}\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * @param steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(\"1s\", style({ opacity: 1 }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the sequence data.\n *\n * @usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the `{@link animations/group group()}` call, which runs animation steps in\n *parallel.\n *\n * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n * @publicApi\n **/\nfunction sequence(steps, options = null) {\n    return { type: 2 /* Sequence */, steps, options };\n}\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation `state`, within an animation `sequence`,\n * or as styling data for calls to `animate()` and `keyframes()`.\n *\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return An object that encapsulates the style data.\n *\n * @usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```typescript\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow a component to animate from\n * a height of 0 up to the height of the parent element:\n *\n * ```\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * @publicApi\n **/\nfunction style(tokens) {\n    return { type: 6 /* Style */, styles: tokens, offset: null };\n}\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * @param name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return An object that encapsulates the new state data.\n *\n * @usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n *\n * @publicApi\n **/\nfunction state(name, styles, options) {\n    return { type: 0 /* State */, name, styles, options };\n}\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * @param steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @returns An object that encapsulates the keyframes data.\n *\n * @usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```typescript\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n *```\n\n * @publicApi\n */\nfunction keyframes(steps) {\n    return { type: 5 /* Keyframes */, steps };\n}\n/**\n * Declares an animation transition as a sequence of animation steps to run when a given\n * condition is satisfied. The condition is a Boolean expression or function that compares\n * the previous and current animation states, and returns true if this transition should occur.\n * When the state criteria of a defined transition are met, the associated animation is\n * triggered.\n *\n * @param stateChangeExpr A Boolean expression or function that compares the previous and current\n * animation states, and returns true if this transition should occur. Note that  \"true\" and \"false\"\n * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the\n * animation trigger element.\n * The animation steps run when the expression evaluates to true.\n *\n * - A state-change string takes the form \"state1 => state2\", where each side is a defined animation\n * state, or an asterix (*) to refer to a dynamic start or end state.\n *   - The expression string can contain multiple comma-separated statements;\n * for example \"state1 => state2, state3 => state4\".\n *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,\n * equivalent to  \"void => *\"  and \"* => void\".\n *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has\n * increased or decreased in value.\n * - A function is executed each time a state change occurs in the animation trigger element.\n * The animation steps run when the function returns true.\n *\n * @param steps One or more animation objects, as returned by the `animate()` or\n * `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the animation,\n * and additional developer-defined parameters. Provided values for additional parameters are used\n * as defaults, and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the transition data.\n *\n * @usageNotes\n * The template associated with a component binds an animation trigger to an element.\n *\n * ```HTML\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * All transitions are defined within an animation trigger,\n * along with named states that the transitions change to and from.\n *\n * ```typescript\n * trigger(\"myAnimationTrigger\", [\n *  // define states\n *  state(\"on\", style({ background: \"green\" })),\n *  state(\"off\", style({ background: \"grey\" })),\n *  ...]\n * ```\n *\n * Note that when you call the `sequence()` function within a `{@link animations/group group()}`\n * or a `transition()` call, execution does not continue to the next instruction\n * until each of the inner animation steps have completed.\n *\n * ### Syntax examples\n *\n * The following examples define transitions between the two defined states (and default states),\n * using various options:\n *\n * ```typescript\n * // Transition occurs when the state value\n * // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n * transition(\"on => off\", animate(500))\n * // Run the same animation for both directions\n * transition(\"on <=> off\", animate(500))\n * // Define multiple state-change pairs separated by commas\n * transition(\"on => off, off => void\", animate(500))\n * ```\n *\n * ### Special values for state-change expressions\n *\n * - Catch-all state change for when an element is inserted into the page and the\n * destination state is unknown:\n *\n * ```typescript\n * transition(\"void => *\", [\n *  style({ opacity: 0 }),\n *  animate(500)\n *  ])\n * ```\n *\n * - Capture a state change between any states:\n *\n *  `transition(\"* => *\", animate(\"1s 0s\"))`\n *\n * - Entry and exit transitions:\n *\n * ```typescript\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n *   ]),\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n *   ])\n * ```\n *\n * - Use `:increment` and `:decrement` to initiate transitions:\n *\n * ```typescript\n * transition(\":increment\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n *\n * transition(\":decrement\", group([\n *  query(':enter', [\n *     style({ left: '100%' }),\n *     animate('0.5s ease-out', style('*'))\n *   ]),\n *  query(':leave', [\n *     animate('0.5s ease-out', style({ left: '-100%' }))\n *  ])\n * ]))\n * ```\n *\n * ### State-change functions\n *\n * Here is an example of a `fromState` specified as a state-change function that invokes an\n * animation when true:\n *\n * ```typescript\n * transition((fromState, toState) =>\n *  {\n *   return fromState == \"off\" && toState == \"on\";\n *  },\n *  animate(\"1s 0s\"))\n * ```\n *\n * ### Animating to the final state\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no style data, that step is automatically considered the final animation arc,\n * for the element to reach the final state. Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n * The following example defines a transition that starts by hiding the element,\n * then makes sure that it animates properly to whatever state is currently active for trigger:\n *\n * ```typescript\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n *  ])\n * ```\n * ### Boolean value matching\n * If a trigger binding value is a Boolean, it can be matched using a transition expression\n * that compares true and false or 1 and 0. For example:\n *\n * ```\n * // in the template\n * <div [@openClose]=\"open ? true : false\">...</div>\n * // in the component metadata\n * trigger('openClose', [\n *   state('true', style({ height: '*' })),\n *   state('false', style({ height: '0px' })),\n *   transition('false <=> true', animate(500))\n * ])\n * ```\n *\n * @publicApi\n **/\nfunction transition(stateChangeExpr, steps, options = null) {\n    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options };\n}\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * @param steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the animation data.\n *\n * @usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```typescript\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n *\n * @publicApi\n */\nfunction animation(steps, options = null) {\n    return { type: 8 /* Reference */, animation: steps, options };\n}\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return An object that encapsulates the child animation data.\n *\n * @usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature is designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n *\n * @publicApi\n */\nfunction animateChild(options = null) {\n    return { type: 9 /* AnimateChild */, options };\n}\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * @param animation The reusable animation to start.\n * @param options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return An object that contains the animation parameters.\n *\n * @publicApi\n */\nfunction useAnimation(animation, options = null) {\n    return { type: 10 /* AnimateRef */, animation, options };\n}\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animate()`.\n *\n * @param selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements.\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return An object that encapsulates the query data.\n *\n * @usageNotes\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```typescript\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animate()`.\n *\n * ```typescript\n * @Component({\n *   selector: 'inner',\n *   template: `\n *     <div [@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 }))),\n *        query('.content', animate(1000, style({ opacity: 1 }))),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction query(selector, animation, options = null) {\n    return { type: 11 /* Query */, selector, animation, options };\n}\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * @param timings A delay value.\n * @param animation One ore more animation steps.\n * @returns An object that encapsulates the stagger data.\n *\n * @usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `ngFor`. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```typescript\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\n * @Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```typescript\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * @publicApi\n */\nfunction stagger(timings, animation) {\n    return { type: 12 /* Stagger */, timings, animation };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see `animate()`\n * @see `AnimationPlayer`\n * @see `GroupPlayer`\n *\n * @publicApi\n */\nclass NoopAnimationPlayer {\n    constructor(duration = 0, delay = 0) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this.parentPlayer = null;\n        this.totalTime = duration + delay;\n    }\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    onStart(fn) {\n        this._onStartFns.push(fn);\n    }\n    onDone(fn) {\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    hasStarted() {\n        return this._started;\n    }\n    init() { }\n    play() {\n        if (!this.hasStarted()) {\n            this._onStart();\n            this.triggerMicrotask();\n        }\n        this._started = true;\n    }\n    /** @internal */\n    triggerMicrotask() {\n        scheduleMicroTask(() => this._onFinish());\n    }\n    _onStart() {\n        this._onStartFns.forEach(fn => fn());\n        this._onStartFns = [];\n    }\n    pause() { }\n    restart() { }\n    finish() {\n        this._onFinish();\n    }\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    reset() { }\n    setPosition(position) { }\n    getPosition() {\n        return 0;\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see `AnimationPlayer`\n * @see `{@link animations/group group()}`\n *\n */\nclass AnimationGroupPlayer {\n    constructor(_players) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        this.totalTime = 0;\n        this.players = _players;\n        let doneCount = 0;\n        let destroyCount = 0;\n        let startCount = 0;\n        const total = this.players.length;\n        if (total == 0) {\n            scheduleMicroTask(() => this._onFinish());\n        }\n        else {\n            this.players.forEach(player => {\n                player.onDone(() => {\n                    if (++doneCount == total) {\n                        this._onFinish();\n                    }\n                });\n                player.onDestroy(() => {\n                    if (++destroyCount == total) {\n                        this._onDestroy();\n                    }\n                });\n                player.onStart(() => {\n                    if (++startCount == total) {\n                        this._onStart();\n                    }\n                });\n            });\n        }\n        this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n    }\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    init() {\n        this.players.forEach(player => player.init());\n    }\n    onStart(fn) {\n        this._onStartFns.push(fn);\n    }\n    _onStart() {\n        if (!this.hasStarted()) {\n            this._started = true;\n            this._onStartFns.forEach(fn => fn());\n            this._onStartFns = [];\n        }\n    }\n    onDone(fn) {\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    hasStarted() {\n        return this._started;\n    }\n    play() {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        this._onStart();\n        this.players.forEach(player => player.play());\n    }\n    pause() {\n        this.players.forEach(player => player.pause());\n    }\n    restart() {\n        this.players.forEach(player => player.restart());\n    }\n    finish() {\n        this._onFinish();\n        this.players.forEach(player => player.finish());\n    }\n    destroy() {\n        this._onDestroy();\n    }\n    _onDestroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._onFinish();\n            this.players.forEach(player => player.destroy());\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    reset() {\n        this.players.forEach(player => player.reset());\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    setPosition(p) {\n        const timeAtPosition = p * this.totalTime;\n        this.players.forEach(player => {\n            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n            player.setPosition(position);\n        });\n    }\n    getPosition() {\n        let min = 0;\n        this.players.forEach(player => {\n            const p = player.getPosition();\n            min = Math.min(p, min);\n        });\n        return min;\n    }\n    beforeDestroy() {\n        this.players.forEach(player => {\n            if (player.beforeDestroy) {\n                player.beforeDestroy();\n            }\n        });\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ɵPRE_STYLE = '!';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTO_STYLE, AnimationBuilder, AnimationFactory, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, AnimationGroupPlayer as ɵAnimationGroupPlayer, ɵPRE_STYLE };\n\n//# sourceMappingURL=animations.js.map","/**\n * @license Angular v10.0.3\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵAnimationGroupPlayer, NoopAnimationPlayer, AUTO_STYLE, ɵPRE_STYLE, sequence, style } from '@angular/animations';\nimport { Injectable } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction isBrowser() {\n    return (typeof window !== 'undefined' && typeof window.document !== 'undefined');\n}\nfunction isNode() {\n    // Checking only for `process` isn't enough to identify whether or not we're in a Node\n    // environment, because Webpack by default will polyfill the `process`. While we can discern\n    // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and\n    // might not be future-proof. Instead we look at the stringified version of `process` which\n    // is `[object process]` in Node and `[object Object]` when polyfilled.\n    return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n}\nfunction optimizeGroupPlayer(players) {\n    switch (players.length) {\n        case 0:\n            return new NoopAnimationPlayer();\n        case 1:\n            return players[0];\n        default:\n            return new ɵAnimationGroupPlayer(players);\n    }\n}\nfunction normalizeKeyframes(driver, normalizer, element, keyframes, preStyles = {}, postStyles = {}) {\n    const errors = [];\n    const normalizedKeyframes = [];\n    let previousOffset = -1;\n    let previousKeyframe = null;\n    keyframes.forEach(kf => {\n        const offset = kf['offset'];\n        const isSameOffset = offset == previousOffset;\n        const normalizedKeyframe = (isSameOffset && previousKeyframe) || {};\n        Object.keys(kf).forEach(prop => {\n            let normalizedProp = prop;\n            let normalizedValue = kf[prop];\n            if (prop !== 'offset') {\n                normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);\n                switch (normalizedValue) {\n                    case ɵPRE_STYLE:\n                        normalizedValue = preStyles[prop];\n                        break;\n                    case AUTO_STYLE:\n                        normalizedValue = postStyles[prop];\n                        break;\n                    default:\n                        normalizedValue =\n                            normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);\n                        break;\n                }\n            }\n            normalizedKeyframe[normalizedProp] = normalizedValue;\n        });\n        if (!isSameOffset) {\n            normalizedKeyframes.push(normalizedKeyframe);\n        }\n        previousKeyframe = normalizedKeyframe;\n        previousOffset = offset;\n    });\n    if (errors.length) {\n        const LINE_START = '\\n - ';\n        throw new Error(`Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);\n    }\n    return normalizedKeyframes;\n}\nfunction listenOnPlayer(player, eventName, event, callback) {\n    switch (eventName) {\n        case 'start':\n            player.onStart(() => callback(event && copyAnimationEvent(event, 'start', player)));\n            break;\n        case 'done':\n            player.onDone(() => callback(event && copyAnimationEvent(event, 'done', player)));\n            break;\n        case 'destroy':\n            player.onDestroy(() => callback(event && copyAnimationEvent(event, 'destroy', player)));\n            break;\n    }\n}\nfunction copyAnimationEvent(e, phaseName, player) {\n    const totalTime = player.totalTime;\n    const disabled = player.disabled ? true : false;\n    const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);\n    const data = e['_data'];\n    if (data != null) {\n        event['_data'] = data;\n    }\n    return event;\n}\nfunction makeAnimationEvent(element, triggerName, fromState, toState, phaseName = '', totalTime = 0, disabled) {\n    return { element, triggerName, fromState, toState, phaseName, totalTime, disabled: !!disabled };\n}\nfunction getOrSetAsInMap(map, key, defaultValue) {\n    let value;\n    if (map instanceof Map) {\n        value = map.get(key);\n        if (!value) {\n            map.set(key, value = defaultValue);\n        }\n    }\n    else {\n        value = map[key];\n        if (!value) {\n            value = map[key] = defaultValue;\n        }\n    }\n    return value;\n}\nfunction parseTimelineCommand(command) {\n    const separatorPos = command.indexOf(':');\n    const id = command.substring(1, separatorPos);\n    const action = command.substr(separatorPos + 1);\n    return [id, action];\n}\nlet _contains = (elm1, elm2) => false;\nconst ɵ0 = _contains;\nlet _matches = (element, selector) => false;\nconst ɵ1 = _matches;\nlet _query = (element, selector, multi) => {\n    return [];\n};\nconst ɵ2 = _query;\n// Define utility methods for browsers and platform-server(domino) where Element\n// and utility methods exist.\nconst _isNode = isNode();\nif (_isNode || typeof Element !== 'undefined') {\n    // this is well supported in all browsers\n    _contains = (elm1, elm2) => {\n        return elm1.contains(elm2);\n    };\n    _matches = (() => {\n        if (_isNode || Element.prototype.matches) {\n            return (element, selector) => element.matches(selector);\n        }\n        else {\n            const proto = Element.prototype;\n            const fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||\n                proto.oMatchesSelector || proto.webkitMatchesSelector;\n            if (fn) {\n                return (element, selector) => fn.apply(element, [selector]);\n            }\n            else {\n                return _matches;\n            }\n        }\n    })();\n    _query = (element, selector, multi) => {\n        let results = [];\n        if (multi) {\n            results.push(...element.querySelectorAll(selector));\n        }\n        else {\n            const elm = element.querySelector(selector);\n            if (elm) {\n                results.push(elm);\n            }\n        }\n        return results;\n    };\n}\nfunction containsVendorPrefix(prop) {\n    // Webkit is the only real popular vendor prefix nowadays\n    // cc: http://shouldiprefix.com/\n    return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit\n}\nlet _CACHED_BODY = null;\nlet _IS_WEBKIT = false;\nfunction validateStyleProperty(prop) {\n    if (!_CACHED_BODY) {\n        _CACHED_BODY = getBodyNode() || {};\n        _IS_WEBKIT = _CACHED_BODY.style ? ('WebkitAppearance' in _CACHED_BODY.style) : false;\n    }\n    let result = true;\n    if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {\n        result = prop in _CACHED_BODY.style;\n        if (!result && _IS_WEBKIT) {\n            const camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);\n            result = camelProp in _CACHED_BODY.style;\n        }\n    }\n    return result;\n}\nfunction getBodyNode() {\n    if (typeof document != 'undefined') {\n        return document.body;\n    }\n    return null;\n}\nconst matchesElement = _matches;\nconst containsElement = _contains;\nconst invokeQuery = _query;\nfunction hypenatePropsObject(object) {\n    const newObj = {};\n    Object.keys(object).forEach(prop => {\n        const newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');\n        newObj[newProp] = object[prop];\n    });\n    return newObj;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nclass NoopAnimationDriver {\n    validateStyleProperty(prop) {\n        return validateStyleProperty(prop);\n    }\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    containsElement(elm1, elm2) {\n        return containsElement(elm1, elm2);\n    }\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    computeStyle(element, prop, defaultValue) {\n        return defaultValue || '';\n    }\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        return new NoopAnimationPlayer(duration, delay);\n    }\n}\nNoopAnimationDriver.ɵfac = function NoopAnimationDriver_Factory(t) { return new (t || NoopAnimationDriver)(); };\nNoopAnimationDriver.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopAnimationDriver, factory: NoopAnimationDriver.ɵfac });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopAnimationDriver, [{\n        type: Injectable\n    }], null, null); })();\n/**\n * @publicApi\n */\nclass AnimationDriver {\n}\nAnimationDriver.NOOP = new NoopAnimationDriver();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ONE_SECOND = 1000;\nconst SUBSTITUTION_EXPR_START = '{{';\nconst SUBSTITUTION_EXPR_END = '}}';\nconst ENTER_CLASSNAME = 'ng-enter';\nconst LEAVE_CLASSNAME = 'ng-leave';\nconst ENTER_SELECTOR = '.ng-enter';\nconst LEAVE_SELECTOR = '.ng-leave';\nconst NG_TRIGGER_CLASSNAME = 'ng-trigger';\nconst NG_TRIGGER_SELECTOR = '.ng-trigger';\nconst NG_ANIMATING_CLASSNAME = 'ng-animating';\nconst NG_ANIMATING_SELECTOR = '.ng-animating';\nfunction resolveTimingValue(value) {\n    if (typeof value == 'number')\n        return value;\n    const matches = value.match(/^(-?[\\.\\d]+)(m?s)/);\n    if (!matches || matches.length < 2)\n        return 0;\n    return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n}\nfunction _convertTimeValueToMS(value, unit) {\n    switch (unit) {\n        case 's':\n            return value * ONE_SECOND;\n        default: // ms or something else\n            return value;\n    }\n}\nfunction resolveTiming(timings, errors, allowNegativeValues) {\n    return timings.hasOwnProperty('duration') ?\n        timings :\n        parseTimeExpression(timings, errors, allowNegativeValues);\n}\nfunction parseTimeExpression(exp, errors, allowNegativeValues) {\n    const regex = /^(-?[\\.\\d]+)(m?s)(?:\\s+(-?[\\.\\d]+)(m?s))?(?:\\s+([-a-z]+(?:\\(.+?\\))?))?$/i;\n    let duration;\n    let delay = 0;\n    let easing = '';\n    if (typeof exp === 'string') {\n        const matches = exp.match(regex);\n        if (matches === null) {\n            errors.push(`The provided timing value \"${exp}\" is invalid.`);\n            return { duration: 0, delay: 0, easing: '' };\n        }\n        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);\n        const delayMatch = matches[3];\n        if (delayMatch != null) {\n            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);\n        }\n        const easingVal = matches[5];\n        if (easingVal) {\n            easing = easingVal;\n        }\n    }\n    else {\n        duration = exp;\n    }\n    if (!allowNegativeValues) {\n        let containsErrors = false;\n        let startIndex = errors.length;\n        if (duration < 0) {\n            errors.push(`Duration values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (delay < 0) {\n            errors.push(`Delay values below 0 are not allowed for this animation step.`);\n            containsErrors = true;\n        }\n        if (containsErrors) {\n            errors.splice(startIndex, 0, `The provided timing value \"${exp}\" is invalid.`);\n        }\n    }\n    return { duration, delay, easing };\n}\nfunction copyObj(obj, destination = {}) {\n    Object.keys(obj).forEach(prop => {\n        destination[prop] = obj[prop];\n    });\n    return destination;\n}\nfunction normalizeStyles(styles) {\n    const normalizedStyles = {};\n    if (Array.isArray(styles)) {\n        styles.forEach(data => copyStyles(data, false, normalizedStyles));\n    }\n    else {\n        copyStyles(styles, false, normalizedStyles);\n    }\n    return normalizedStyles;\n}\nfunction copyStyles(styles, readPrototype, destination = {}) {\n    if (readPrototype) {\n        // we make use of a for-in loop so that the\n        // prototypically inherited properties are\n        // revealed from the backFill map\n        for (let prop in styles) {\n            destination[prop] = styles[prop];\n        }\n    }\n    else {\n        copyObj(styles, destination);\n    }\n    return destination;\n}\nfunction getStyleAttributeString(element, key, value) {\n    // Return the key-value pair string to be added to the style attribute for the\n    // given CSS style key.\n    if (value) {\n        return key + ':' + value + ';';\n    }\n    else {\n        return '';\n    }\n}\nfunction writeStyleAttribute(element) {\n    // Read the style property of the element and manually reflect it to the\n    // style attribute. This is needed because Domino on platform-server doesn't\n    // understand the full set of allowed CSS properties and doesn't reflect some\n    // of them automatically.\n    let styleAttrValue = '';\n    for (let i = 0; i < element.style.length; i++) {\n        const key = element.style.item(i);\n        styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));\n    }\n    for (const key in element.style) {\n        // Skip internal Domino properties that don't need to be reflected.\n        if (!element.style.hasOwnProperty(key) || key.startsWith('_')) {\n            continue;\n        }\n        const dashKey = camelCaseToDashCase(key);\n        styleAttrValue += getStyleAttributeString(element, dashKey, element.style[key]);\n    }\n    element.setAttribute('style', styleAttrValue);\n}\nfunction setStyles(element, styles, formerStyles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(prop => {\n            const camelProp = dashCaseToCamelCase(prop);\n            if (formerStyles && !formerStyles.hasOwnProperty(prop)) {\n                formerStyles[prop] = element.style[camelProp];\n            }\n            element.style[camelProp] = styles[prop];\n        });\n        // On the server set the 'style' attribute since it's not automatically reflected.\n        if (isNode()) {\n            writeStyleAttribute(element);\n        }\n    }\n}\nfunction eraseStyles(element, styles) {\n    if (element['style']) {\n        Object.keys(styles).forEach(prop => {\n            const camelProp = dashCaseToCamelCase(prop);\n            element.style[camelProp] = '';\n        });\n        // On the server set the 'style' attribute since it's not automatically reflected.\n        if (isNode()) {\n            writeStyleAttribute(element);\n        }\n    }\n}\nfunction normalizeAnimationEntry(steps) {\n    if (Array.isArray(steps)) {\n        if (steps.length == 1)\n            return steps[0];\n        return sequence(steps);\n    }\n    return steps;\n}\nfunction validateStyleParams(value, options, errors) {\n    const params = options.params || {};\n    const matches = extractStyleParams(value);\n    if (matches.length) {\n        matches.forEach(varName => {\n            if (!params.hasOwnProperty(varName)) {\n                errors.push(`Unable to resolve the local animation param ${varName} in the given list of values`);\n            }\n        });\n    }\n}\nconst PARAM_REGEX = new RegExp(`${SUBSTITUTION_EXPR_START}\\\\s*(.+?)\\\\s*${SUBSTITUTION_EXPR_END}`, 'g');\nfunction extractStyleParams(value) {\n    let params = [];\n    if (typeof value === 'string') {\n        let match;\n        while (match = PARAM_REGEX.exec(value)) {\n            params.push(match[1]);\n        }\n        PARAM_REGEX.lastIndex = 0;\n    }\n    return params;\n}\nfunction interpolateParams(value, params, errors) {\n    const original = value.toString();\n    const str = original.replace(PARAM_REGEX, (_, varName) => {\n        let localVal = params[varName];\n        // this means that the value was never overridden by the data passed in by the user\n        if (!params.hasOwnProperty(varName)) {\n            errors.push(`Please provide a value for the animation param ${varName}`);\n            localVal = '';\n        }\n        return localVal.toString();\n    });\n    // we do this to assert that numeric values stay as they are\n    return str == original ? value : str;\n}\nfunction iteratorToArray(iterator) {\n    const arr = [];\n    let item = iterator.next();\n    while (!item.done) {\n        arr.push(item.value);\n        item = iterator.next();\n    }\n    return arr;\n}\nfunction mergeAnimationOptions(source, destination) {\n    if (source.params) {\n        const p0 = source.params;\n        if (!destination.params) {\n            destination.params = {};\n        }\n        const p1 = destination.params;\n        Object.keys(p0).forEach(param => {\n            if (!p1.hasOwnProperty(param)) {\n                p1[param] = p0[param];\n            }\n        });\n    }\n    return destination;\n}\nconst DASH_CASE_REGEXP = /-+([a-z0-9])/g;\nfunction dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());\n}\nfunction camelCaseToDashCase(input) {\n    return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\nfunction allowPreviousPlayerStylesMerge(duration, delay) {\n    return duration === 0 || delay === 0;\n}\nfunction balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {\n    const previousStyleProps = Object.keys(previousStyles);\n    if (previousStyleProps.length && keyframes.length) {\n        let startingKeyframe = keyframes[0];\n        let missingStyleProps = [];\n        previousStyleProps.forEach(prop => {\n            if (!startingKeyframe.hasOwnProperty(prop)) {\n                missingStyleProps.push(prop);\n            }\n            startingKeyframe[prop] = previousStyles[prop];\n        });\n        if (missingStyleProps.length) {\n            // tslint:disable-next-line\n            for (var i = 1; i < keyframes.length; i++) {\n                let kf = keyframes[i];\n                missingStyleProps.forEach(function (prop) {\n                    kf[prop] = computeStyle(element, prop);\n                });\n            }\n        }\n    }\n    return keyframes;\n}\nfunction visitDslNode(visitor, node, context) {\n    switch (node.type) {\n        case 7 /* Trigger */:\n            return visitor.visitTrigger(node, context);\n        case 0 /* State */:\n            return visitor.visitState(node, context);\n        case 1 /* Transition */:\n            return visitor.visitTransition(node, context);\n        case 2 /* Sequence */:\n            return visitor.visitSequence(node, context);\n        case 3 /* Group */:\n            return visitor.visitGroup(node, context);\n        case 4 /* Animate */:\n            return visitor.visitAnimate(node, context);\n        case 5 /* Keyframes */:\n            return visitor.visitKeyframes(node, context);\n        case 6 /* Style */:\n            return visitor.visitStyle(node, context);\n        case 8 /* Reference */:\n            return visitor.visitReference(node, context);\n        case 9 /* AnimateChild */:\n            return visitor.visitAnimateChild(node, context);\n        case 10 /* AnimateRef */:\n            return visitor.visitAnimateRef(node, context);\n        case 11 /* Query */:\n            return visitor.visitQuery(node, context);\n        case 12 /* Stagger */:\n            return visitor.visitStagger(node, context);\n        default:\n            throw new Error(`Unable to resolve animation metadata node #${node.type}`);\n    }\n}\nfunction computeStyle(element, prop) {\n    return window.getComputedStyle(element)[prop];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ANY_STATE = '*';\nfunction parseTransitionExpr(transitionValue, errors) {\n    const expressions = [];\n    if (typeof transitionValue == 'string') {\n        transitionValue.split(/\\s*,\\s*/).forEach(str => parseInnerTransitionStr(str, expressions, errors));\n    }\n    else {\n        expressions.push(transitionValue);\n    }\n    return expressions;\n}\nfunction parseInnerTransitionStr(eventStr, expressions, errors) {\n    if (eventStr[0] == ':') {\n        const result = parseAnimationAlias(eventStr, errors);\n        if (typeof result == 'function') {\n            expressions.push(result);\n            return;\n        }\n        eventStr = result;\n    }\n    const match = eventStr.match(/^(\\*|[-\\w]+)\\s*(<?[=-]>)\\s*(\\*|[-\\w]+)$/);\n    if (match == null || match.length < 4) {\n        errors.push(`The provided transition expression \"${eventStr}\" is not supported`);\n        return expressions;\n    }\n    const fromState = match[1];\n    const separator = match[2];\n    const toState = match[3];\n    expressions.push(makeLambdaFromStates(fromState, toState));\n    const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;\n    if (separator[0] == '<' && !isFullAnyStateExpr) {\n        expressions.push(makeLambdaFromStates(toState, fromState));\n    }\n}\nfunction parseAnimationAlias(alias, errors) {\n    switch (alias) {\n        case ':enter':\n            return 'void => *';\n        case ':leave':\n            return '* => void';\n        case ':increment':\n            return (fromState, toState) => parseFloat(toState) > parseFloat(fromState);\n        case ':decrement':\n            return (fromState, toState) => parseFloat(toState) < parseFloat(fromState);\n        default:\n            errors.push(`The transition alias value \"${alias}\" is not supported`);\n            return '* => *';\n    }\n}\n// DO NOT REFACTOR ... keep the follow set instantiations\n// with the values intact (closure compiler for some reason\n// removes follow-up lines that add the values outside of\n// the constructor...\nconst TRUE_BOOLEAN_VALUES = new Set(['true', '1']);\nconst FALSE_BOOLEAN_VALUES = new Set(['false', '0']);\nfunction makeLambdaFromStates(lhs, rhs) {\n    const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);\n    const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);\n    return (fromState, toState) => {\n        let lhsMatch = lhs == ANY_STATE || lhs == fromState;\n        let rhsMatch = rhs == ANY_STATE || rhs == toState;\n        if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {\n            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);\n        }\n        if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {\n            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);\n        }\n        return lhsMatch && rhsMatch;\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SELF_TOKEN = ':self';\nconst SELF_TOKEN_REGEX = new RegExp(`\\s*${SELF_TOKEN}\\s*,?`, 'g');\n/*\n * [Validation]\n * The visitor code below will traverse the animation AST generated by the animation verb functions\n * (the output is a tree of objects) and attempt to perform a series of validations on the data. The\n * following corner-cases will be validated:\n *\n * 1. Overlap of animations\n * Given that a CSS property cannot be animated in more than one place at the same time, it's\n * important that this behavior is detected and validated. The way in which this occurs is that\n * each time a style property is examined, a string-map containing the property will be updated with\n * the start and end times for when the property is used within an animation step.\n *\n * If there are two or more parallel animations that are currently running (these are invoked by the\n * group()) on the same element then the validator will throw an error. Since the start/end timing\n * values are collected for each property then if the current animation step is animating the same\n * property and its timing values fall anywhere into the window of time that the property is\n * currently being animated within then this is what causes an error.\n *\n * 2. Timing values\n * The validator will validate to see if a timing value of `duration delay easing` or\n * `durationNumber` is valid or not.\n *\n * (note that upon validation the code below will replace the timing data with an object containing\n * {duration,delay,easing}.\n *\n * 3. Offset Validation\n * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().\n * Offsets within keyframes() are considered valid when:\n *\n *   - No offsets are used at all\n *   - Each style() entry contains an offset value\n *   - Each offset is between 0 and 1\n *   - Each offset is greater to or equal than the previous one\n *\n * Otherwise an error will be thrown.\n */\nfunction buildAnimationAst(driver, metadata, errors) {\n    return new AnimationAstBuilderVisitor(driver).build(metadata, errors);\n}\nconst ROOT_SELECTOR = '';\nclass AnimationAstBuilderVisitor {\n    constructor(_driver) {\n        this._driver = _driver;\n    }\n    build(metadata, errors) {\n        const context = new AnimationAstBuilderContext(errors);\n        this._resetContextStyleTimingState(context);\n        return visitDslNode(this, normalizeAnimationEntry(metadata), context);\n    }\n    _resetContextStyleTimingState(context) {\n        context.currentQuerySelector = ROOT_SELECTOR;\n        context.collectedStyles = {};\n        context.collectedStyles[ROOT_SELECTOR] = {};\n        context.currentTime = 0;\n    }\n    visitTrigger(metadata, context) {\n        let queryCount = context.queryCount = 0;\n        let depCount = context.depCount = 0;\n        const states = [];\n        const transitions = [];\n        if (metadata.name.charAt(0) == '@') {\n            context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\\'@foo\\', [...]))');\n        }\n        metadata.definitions.forEach(def => {\n            this._resetContextStyleTimingState(context);\n            if (def.type == 0 /* State */) {\n                const stateDef = def;\n                const name = stateDef.name;\n                name.toString().split(/\\s*,\\s*/).forEach(n => {\n                    stateDef.name = n;\n                    states.push(this.visitState(stateDef, context));\n                });\n                stateDef.name = name;\n            }\n            else if (def.type == 1 /* Transition */) {\n                const transition = this.visitTransition(def, context);\n                queryCount += transition.queryCount;\n                depCount += transition.depCount;\n                transitions.push(transition);\n            }\n            else {\n                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');\n            }\n        });\n        return {\n            type: 7 /* Trigger */,\n            name: metadata.name,\n            states,\n            transitions,\n            queryCount,\n            depCount,\n            options: null\n        };\n    }\n    visitState(metadata, context) {\n        const styleAst = this.visitStyle(metadata.styles, context);\n        const astParams = (metadata.options && metadata.options.params) || null;\n        if (styleAst.containsDynamicStyles) {\n            const missingSubs = new Set();\n            const params = astParams || {};\n            styleAst.styles.forEach(value => {\n                if (isObject(value)) {\n                    const stylesObj = value;\n                    Object.keys(stylesObj).forEach(prop => {\n                        extractStyleParams(stylesObj[prop]).forEach(sub => {\n                            if (!params.hasOwnProperty(sub)) {\n                                missingSubs.add(sub);\n                            }\n                        });\n                    });\n                }\n            });\n            if (missingSubs.size) {\n                const missingSubsArr = iteratorToArray(missingSubs.values());\n                context.errors.push(`state(\"${metadata\n                    .name}\", ...) must define default values for all the following style substitutions: ${missingSubsArr.join(', ')}`);\n            }\n        }\n        return {\n            type: 0 /* State */,\n            name: metadata.name,\n            style: styleAst,\n            options: astParams ? { params: astParams } : null\n        };\n    }\n    visitTransition(metadata, context) {\n        context.queryCount = 0;\n        context.depCount = 0;\n        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        const matchers = parseTransitionExpr(metadata.expr, context.errors);\n        return {\n            type: 1 /* Transition */,\n            matchers,\n            animation,\n            queryCount: context.queryCount,\n            depCount: context.depCount,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    visitSequence(metadata, context) {\n        return {\n            type: 2 /* Sequence */,\n            steps: metadata.steps.map(s => visitDslNode(this, s, context)),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    visitGroup(metadata, context) {\n        const currentTime = context.currentTime;\n        let furthestTime = 0;\n        const steps = metadata.steps.map(step => {\n            context.currentTime = currentTime;\n            const innerAst = visitDslNode(this, step, context);\n            furthestTime = Math.max(furthestTime, context.currentTime);\n            return innerAst;\n        });\n        context.currentTime = furthestTime;\n        return {\n            type: 3 /* Group */,\n            steps,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    visitAnimate(metadata, context) {\n        const timingAst = constructTimingAst(metadata.timings, context.errors);\n        context.currentAnimateTimings = timingAst;\n        let styleAst;\n        let styleMetadata = metadata.styles ? metadata.styles : style({});\n        if (styleMetadata.type == 5 /* Keyframes */) {\n            styleAst = this.visitKeyframes(styleMetadata, context);\n        }\n        else {\n            let styleMetadata = metadata.styles;\n            let isEmpty = false;\n            if (!styleMetadata) {\n                isEmpty = true;\n                const newStyleData = {};\n                if (timingAst.easing) {\n                    newStyleData['easing'] = timingAst.easing;\n                }\n                styleMetadata = style(newStyleData);\n            }\n            context.currentTime += timingAst.duration + timingAst.delay;\n            const _styleAst = this.visitStyle(styleMetadata, context);\n            _styleAst.isEmptyStep = isEmpty;\n            styleAst = _styleAst;\n        }\n        context.currentAnimateTimings = null;\n        return {\n            type: 4 /* Animate */,\n            timings: timingAst,\n            style: styleAst,\n            options: null\n        };\n    }\n    visitStyle(metadata, context) {\n        const ast = this._makeStyleAst(metadata, context);\n        this._validateStyleAst(ast, context);\n        return ast;\n    }\n    _makeStyleAst(metadata, context) {\n        const styles = [];\n        if (Array.isArray(metadata.styles)) {\n            metadata.styles.forEach(styleTuple => {\n                if (typeof styleTuple == 'string') {\n                    if (styleTuple == AUTO_STYLE) {\n                        styles.push(styleTuple);\n                    }\n                    else {\n                        context.errors.push(`The provided style string value ${styleTuple} is not allowed.`);\n                    }\n                }\n                else {\n                    styles.push(styleTuple);\n                }\n            });\n        }\n        else {\n            styles.push(metadata.styles);\n        }\n        let containsDynamicStyles = false;\n        let collectedEasing = null;\n        styles.forEach(styleData => {\n            if (isObject(styleData)) {\n                const styleMap = styleData;\n                const easing = styleMap['easing'];\n                if (easing) {\n                    collectedEasing = easing;\n                    delete styleMap['easing'];\n                }\n                if (!containsDynamicStyles) {\n                    for (let prop in styleMap) {\n                        const value = styleMap[prop];\n                        if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {\n                            containsDynamicStyles = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        });\n        return {\n            type: 6 /* Style */,\n            styles,\n            easing: collectedEasing,\n            offset: metadata.offset,\n            containsDynamicStyles,\n            options: null\n        };\n    }\n    _validateStyleAst(ast, context) {\n        const timings = context.currentAnimateTimings;\n        let endTime = context.currentTime;\n        let startTime = context.currentTime;\n        if (timings && startTime > 0) {\n            startTime -= timings.duration + timings.delay;\n        }\n        ast.styles.forEach(tuple => {\n            if (typeof tuple == 'string')\n                return;\n            Object.keys(tuple).forEach(prop => {\n                if (!this._driver.validateStyleProperty(prop)) {\n                    context.errors.push(`The provided animation property \"${prop}\" is not a supported CSS property for animations`);\n                    return;\n                }\n                const collectedStyles = context.collectedStyles[context.currentQuerySelector];\n                const collectedEntry = collectedStyles[prop];\n                let updateCollectedStyle = true;\n                if (collectedEntry) {\n                    if (startTime != endTime && startTime >= collectedEntry.startTime &&\n                        endTime <= collectedEntry.endTime) {\n                        context.errors.push(`The CSS property \"${prop}\" that exists between the times of \"${collectedEntry.startTime}ms\" and \"${collectedEntry\n                            .endTime}ms\" is also being animated in a parallel animation between the times of \"${startTime}ms\" and \"${endTime}ms\"`);\n                        updateCollectedStyle = false;\n                    }\n                    // we always choose the smaller start time value since we\n                    // want to have a record of the entire animation window where\n                    // the style property is being animated in between\n                    startTime = collectedEntry.startTime;\n                }\n                if (updateCollectedStyle) {\n                    collectedStyles[prop] = { startTime, endTime };\n                }\n                if (context.options) {\n                    validateStyleParams(tuple[prop], context.options, context.errors);\n                }\n            });\n        });\n    }\n    visitKeyframes(metadata, context) {\n        const ast = { type: 5 /* Keyframes */, styles: [], options: null };\n        if (!context.currentAnimateTimings) {\n            context.errors.push(`keyframes() must be placed inside of a call to animate()`);\n            return ast;\n        }\n        const MAX_KEYFRAME_OFFSET = 1;\n        let totalKeyframesWithOffsets = 0;\n        const offsets = [];\n        let offsetsOutOfOrder = false;\n        let keyframesOutOfRange = false;\n        let previousOffset = 0;\n        const keyframes = metadata.steps.map(styles => {\n            const style = this._makeStyleAst(styles, context);\n            let offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);\n            let offset = 0;\n            if (offsetVal != null) {\n                totalKeyframesWithOffsets++;\n                offset = style.offset = offsetVal;\n            }\n            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;\n            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;\n            previousOffset = offset;\n            offsets.push(offset);\n            return style;\n        });\n        if (keyframesOutOfRange) {\n            context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);\n        }\n        if (offsetsOutOfOrder) {\n            context.errors.push(`Please ensure that all keyframe offsets are in order`);\n        }\n        const length = metadata.steps.length;\n        let generatedOffset = 0;\n        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {\n            context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);\n        }\n        else if (totalKeyframesWithOffsets == 0) {\n            generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);\n        }\n        const limit = length - 1;\n        const currentTime = context.currentTime;\n        const currentAnimateTimings = context.currentAnimateTimings;\n        const animateDuration = currentAnimateTimings.duration;\n        keyframes.forEach((kf, i) => {\n            const offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];\n            const durationUpToThisFrame = offset * animateDuration;\n            context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;\n            currentAnimateTimings.duration = durationUpToThisFrame;\n            this._validateStyleAst(kf, context);\n            kf.offset = offset;\n            ast.styles.push(kf);\n        });\n        return ast;\n    }\n    visitReference(metadata, context) {\n        return {\n            type: 8 /* Reference */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    visitAnimateChild(metadata, context) {\n        context.depCount++;\n        return {\n            type: 9 /* AnimateChild */,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    visitAnimateRef(metadata, context) {\n        return {\n            type: 10 /* AnimateRef */,\n            animation: this.visitReference(metadata.animation, context),\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    visitQuery(metadata, context) {\n        const parentSelector = context.currentQuerySelector;\n        const options = (metadata.options || {});\n        context.queryCount++;\n        context.currentQuery = metadata;\n        const [selector, includeSelf] = normalizeSelector(metadata.selector);\n        context.currentQuerySelector =\n            parentSelector.length ? (parentSelector + ' ' + selector) : selector;\n        getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});\n        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);\n        context.currentQuery = null;\n        context.currentQuerySelector = parentSelector;\n        return {\n            type: 11 /* Query */,\n            selector,\n            limit: options.limit || 0,\n            optional: !!options.optional,\n            includeSelf,\n            animation,\n            originalSelector: metadata.selector,\n            options: normalizeAnimationOptions(metadata.options)\n        };\n    }\n    visitStagger(metadata, context) {\n        if (!context.currentQuery) {\n            context.errors.push(`stagger() can only be used inside of query()`);\n        }\n        const timings = metadata.timings === 'full' ?\n            { duration: 0, delay: 0, easing: 'full' } :\n            resolveTiming(metadata.timings, context.errors, true);\n        return {\n            type: 12 /* Stagger */,\n            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),\n            timings,\n            options: null\n        };\n    }\n}\nfunction normalizeSelector(selector) {\n    const hasAmpersand = selector.split(/\\s*,\\s*/).find(token => token == SELF_TOKEN) ? true : false;\n    if (hasAmpersand) {\n        selector = selector.replace(SELF_TOKEN_REGEX, '');\n    }\n    // the :enter and :leave selectors are filled in at runtime during timeline building\n    selector = selector.replace(/@\\*/g, NG_TRIGGER_SELECTOR)\n        .replace(/@\\w+/g, match => NG_TRIGGER_SELECTOR + '-' + match.substr(1))\n        .replace(/:animating/g, NG_ANIMATING_SELECTOR);\n    return [selector, hasAmpersand];\n}\nfunction normalizeParams(obj) {\n    return obj ? copyObj(obj) : null;\n}\nclass AnimationAstBuilderContext {\n    constructor(errors) {\n        this.errors = errors;\n        this.queryCount = 0;\n        this.depCount = 0;\n        this.currentTransition = null;\n        this.currentQuery = null;\n        this.currentQuerySelector = null;\n        this.currentAnimateTimings = null;\n        this.currentTime = 0;\n        this.collectedStyles = {};\n        this.options = null;\n    }\n}\nfunction consumeOffset(styles) {\n    if (typeof styles == 'string')\n        return null;\n    let offset = null;\n    if (Array.isArray(styles)) {\n        styles.forEach(styleTuple => {\n            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {\n                const obj = styleTuple;\n                offset = parseFloat(obj['offset']);\n                delete obj['offset'];\n            }\n        });\n    }\n    else if (isObject(styles) && styles.hasOwnProperty('offset')) {\n        const obj = styles;\n        offset = parseFloat(obj['offset']);\n        delete obj['offset'];\n    }\n    return offset;\n}\nfunction isObject(value) {\n    return !Array.isArray(value) && typeof value == 'object';\n}\nfunction constructTimingAst(value, errors) {\n    let timings = null;\n    if (value.hasOwnProperty('duration')) {\n        timings = value;\n    }\n    else if (typeof value == 'number') {\n        const duration = resolveTiming(value, errors).duration;\n        return makeTimingAst(duration, 0, '');\n    }\n    const strValue = value;\n    const isDynamic = strValue.split(/\\s+/).some(v => v.charAt(0) == '{' && v.charAt(1) == '{');\n    if (isDynamic) {\n        const ast = makeTimingAst(0, 0, '');\n        ast.dynamic = true;\n        ast.strValue = strValue;\n        return ast;\n    }\n    timings = timings || resolveTiming(strValue, errors);\n    return makeTimingAst(timings.duration, timings.delay, timings.easing);\n}\nfunction normalizeAnimationOptions(options) {\n    if (options) {\n        options = copyObj(options);\n        if (options['params']) {\n            options['params'] = normalizeParams(options['params']);\n        }\n    }\n    else {\n        options = {};\n    }\n    return options;\n}\nfunction makeTimingAst(duration, delay, easing) {\n    return { duration, delay, easing };\n}\n\nfunction createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {\n    return {\n        type: 1 /* TimelineAnimation */,\n        element,\n        keyframes,\n        preStyleProps,\n        postStyleProps,\n        duration,\n        delay,\n        totalTime: duration + delay,\n        easing,\n        subTimeline\n    };\n}\n\nclass ElementInstructionMap {\n    constructor() {\n        this._map = new Map();\n    }\n    consume(element) {\n        let instructions = this._map.get(element);\n        if (instructions) {\n            this._map.delete(element);\n        }\n        else {\n            instructions = [];\n        }\n        return instructions;\n    }\n    append(element, instructions) {\n        let existingInstructions = this._map.get(element);\n        if (!existingInstructions) {\n            this._map.set(element, existingInstructions = []);\n        }\n        existingInstructions.push(...instructions);\n    }\n    has(element) {\n        return this._map.has(element);\n    }\n    clear() {\n        this._map.clear();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ONE_FRAME_IN_MILLISECONDS = 1;\nconst ENTER_TOKEN = ':enter';\nconst ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');\nconst LEAVE_TOKEN = ':leave';\nconst LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');\n/*\n * The code within this file aims to generate web-animations-compatible keyframes from Angular's\n * animation DSL code.\n *\n * The code below will be converted from:\n *\n * ```\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(1000, style({ opacity: 0 }))\n * ])\n * ```\n *\n * To:\n * ```\n * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]\n * duration = 1000\n * delay = 0\n * easing = ''\n * ```\n *\n * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a\n * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.\n *\n * [AST Traversal]\n * Each of the animation verbs, when executed, will return an string-map object representing what\n * type of action it is (style, animate, group, etc...) and the data associated with it. This means\n * that when functional composition mix of these functions is evaluated (like in the example above)\n * then it will end up producing a tree of objects representing the animation itself.\n *\n * When this animation object tree is processed by the visitor code below it will visit each of the\n * verb statements within the visitor. And during each visit it will build the context of the\n * animation keyframes by interacting with the `TimelineBuilder`.\n *\n * [TimelineBuilder]\n * This class is responsible for tracking the styles and building a series of keyframe objects for a\n * timeline between a start and end time. The builder starts off with an initial timeline and each\n * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a\n * `sequence()` then it will generate a sub timeline for each step as well as a new one after\n * they are complete.\n *\n * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub\n * timeline was created (based on one of the cases above) then the parent timeline will attempt to\n * merge the styles used within the sub timelines into itself (only with group() this will happen).\n * This happens with a merge operation (much like how the merge works in mergesort) and it will only\n * copy the most recently used styles from the sub timelines into the parent timeline. This ensures\n * that if the styles are used later on in another phase of the animation then they will be the most\n * up-to-date values.\n *\n * [How Missing Styles Are Updated]\n * Each timeline has a `backFill` property which is responsible for filling in new styles into\n * already processed keyframes if a new style shows up later within the animation sequence.\n *\n * ```\n * sequence([\n *   style({ width: 0 }),\n *   animate(1000, style({ width: 100 })),\n *   animate(1000, style({ width: 200 })),\n *   animate(1000, style({ width: 300 }))\n *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere\n * else\n * ])\n * ```\n *\n * What is happening here is that the `height` value is added later in the sequence, but is missing\n * from all previous animation steps. Therefore when a keyframe is created it would also be missing\n * from all previous keyframes up until where it is first used. For the timeline keyframe generation\n * to properly fill in the style it will place the previous value (the value from the parent\n * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe\n * styles are objects that prototypically inhert from the backFill object, this means that if a\n * value is added into the backFill then it will automatically propagate any missing values to all\n * keyframes. Therefore the missing `height` value will be properly filled into the already\n * processed keyframes.\n *\n * When a sub-timeline is created it will have its own backFill property. This is done so that\n * styles present within the sub-timeline do not accidentally seep into the previous/future timeline\n * keyframes\n *\n * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)\n *\n * [Validation]\n * The code in this file is not responsible for validation. That functionality happens with within\n * the `AnimationValidatorVisitor` code.\n */\nfunction buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = {}, finalStyles = {}, options, subInstructions, errors = []) {\n    return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);\n}\nclass AnimationTimelineBuilderVisitor {\n    buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {\n        subInstructions = subInstructions || new ElementInstructionMap();\n        const context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);\n        context.options = options;\n        context.currentTimeline.setStyles([startingStyles], null, context.errors, options);\n        visitDslNode(this, ast, context);\n        // this checks to see if an actual animation happened\n        const timelines = context.timelines.filter(timeline => timeline.containsAnimation());\n        if (timelines.length && Object.keys(finalStyles).length) {\n            const tl = timelines[timelines.length - 1];\n            if (!tl.allowOnlyTimelineStyles()) {\n                tl.setStyles([finalStyles], null, context.errors, options);\n            }\n        }\n        return timelines.length ? timelines.map(timeline => timeline.buildKeyframes()) :\n            [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];\n    }\n    visitTrigger(ast, context) {\n        // these values are not visited in this AST\n    }\n    visitState(ast, context) {\n        // these values are not visited in this AST\n    }\n    visitTransition(ast, context) {\n        // these values are not visited in this AST\n    }\n    visitAnimateChild(ast, context) {\n        const elementInstructions = context.subInstructions.consume(context.element);\n        if (elementInstructions) {\n            const innerContext = context.createSubContext(ast.options);\n            const startTime = context.currentTimeline.currentTime;\n            const endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);\n            if (startTime != endTime) {\n                // we do this on the upper context because we created a sub context for\n                // the sub child animations\n                context.transformIntoNewTimeline(endTime);\n            }\n        }\n        context.previousNode = ast;\n    }\n    visitAnimateRef(ast, context) {\n        const innerContext = context.createSubContext(ast.options);\n        innerContext.transformIntoNewTimeline();\n        this.visitReference(ast.animation, innerContext);\n        context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);\n        context.previousNode = ast;\n    }\n    _visitSubInstructions(instructions, context, options) {\n        const startTime = context.currentTimeline.currentTime;\n        let furthestTime = startTime;\n        // this is a special-case for when a user wants to skip a sub\n        // animation from being fired entirely.\n        const duration = options.duration != null ? resolveTimingValue(options.duration) : null;\n        const delay = options.delay != null ? resolveTimingValue(options.delay) : null;\n        if (duration !== 0) {\n            instructions.forEach(instruction => {\n                const instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);\n                furthestTime =\n                    Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);\n            });\n        }\n        return furthestTime;\n    }\n    visitReference(ast, context) {\n        context.updateOptions(ast.options, true);\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n    }\n    visitSequence(ast, context) {\n        const subContextCount = context.subContextCount;\n        let ctx = context;\n        const options = ast.options;\n        if (options && (options.params || options.delay)) {\n            ctx = context.createSubContext(options);\n            ctx.transformIntoNewTimeline();\n            if (options.delay != null) {\n                if (ctx.previousNode.type == 6 /* Style */) {\n                    ctx.currentTimeline.snapshotCurrentStyles();\n                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n                }\n                const delay = resolveTimingValue(options.delay);\n                ctx.delayNextStep(delay);\n            }\n        }\n        if (ast.steps.length) {\n            ast.steps.forEach(s => visitDslNode(this, s, ctx));\n            // this is here just incase the inner steps only contain or end with a style() call\n            ctx.currentTimeline.applyStylesToKeyframe();\n            // this means that some animation function within the sequence\n            // ended up creating a sub timeline (which means the current\n            // timeline cannot overlap with the contents of the sequence)\n            if (ctx.subContextCount > subContextCount) {\n                ctx.transformIntoNewTimeline();\n            }\n        }\n        context.previousNode = ast;\n    }\n    visitGroup(ast, context) {\n        const innerTimelines = [];\n        let furthestTime = context.currentTimeline.currentTime;\n        const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;\n        ast.steps.forEach(s => {\n            const innerContext = context.createSubContext(ast.options);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            visitDslNode(this, s, innerContext);\n            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);\n            innerTimelines.push(innerContext.currentTimeline);\n        });\n        // this operation is run after the AST loop because otherwise\n        // if the parent timeline's collected styles were updated then\n        // it would pass in invalid data into the new-to-be forked items\n        innerTimelines.forEach(timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));\n        context.transformIntoNewTimeline(furthestTime);\n        context.previousNode = ast;\n    }\n    _visitTiming(ast, context) {\n        if (ast.dynamic) {\n            const strValue = ast.strValue;\n            const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;\n            return resolveTiming(timingValue, context.errors);\n        }\n        else {\n            return { duration: ast.duration, delay: ast.delay, easing: ast.easing };\n        }\n    }\n    visitAnimate(ast, context) {\n        const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);\n        const timeline = context.currentTimeline;\n        if (timings.delay) {\n            context.incrementTime(timings.delay);\n            timeline.snapshotCurrentStyles();\n        }\n        const style = ast.style;\n        if (style.type == 5 /* Keyframes */) {\n            this.visitKeyframes(style, context);\n        }\n        else {\n            context.incrementTime(timings.duration);\n            this.visitStyle(style, context);\n            timeline.applyStylesToKeyframe();\n        }\n        context.currentAnimateTimings = null;\n        context.previousNode = ast;\n    }\n    visitStyle(ast, context) {\n        const timeline = context.currentTimeline;\n        const timings = context.currentAnimateTimings;\n        // this is a special case for when a style() call\n        // directly follows  an animate() call (but not inside of an animate() call)\n        if (!timings && timeline.getCurrentStyleProperties().length) {\n            timeline.forwardFrame();\n        }\n        const easing = (timings && timings.easing) || ast.easing;\n        if (ast.isEmptyStep) {\n            timeline.applyEmptyStep(easing);\n        }\n        else {\n            timeline.setStyles(ast.styles, easing, context.errors, context.options);\n        }\n        context.previousNode = ast;\n    }\n    visitKeyframes(ast, context) {\n        const currentAnimateTimings = context.currentAnimateTimings;\n        const startTime = (context.currentTimeline).duration;\n        const duration = currentAnimateTimings.duration;\n        const innerContext = context.createSubContext();\n        const innerTimeline = innerContext.currentTimeline;\n        innerTimeline.easing = currentAnimateTimings.easing;\n        ast.styles.forEach(step => {\n            const offset = step.offset || 0;\n            innerTimeline.forwardTime(offset * duration);\n            innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);\n            innerTimeline.applyStylesToKeyframe();\n        });\n        // this will ensure that the parent timeline gets all the styles from\n        // the child even if the new timeline below is not used\n        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);\n        // we do this because the window between this timeline and the sub timeline\n        // should ensure that the styles within are exactly the same as they were before\n        context.transformIntoNewTimeline(startTime + duration);\n        context.previousNode = ast;\n    }\n    visitQuery(ast, context) {\n        // in the event that the first step before this is a style step we need\n        // to ensure the styles are applied before the children are animated\n        const startTime = context.currentTimeline.currentTime;\n        const options = (ast.options || {});\n        const delay = options.delay ? resolveTimingValue(options.delay) : 0;\n        if (delay &&\n            (context.previousNode.type === 6 /* Style */ ||\n                (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {\n            context.currentTimeline.snapshotCurrentStyles();\n            context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        }\n        let furthestTime = startTime;\n        const elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);\n        context.currentQueryTotal = elms.length;\n        let sameElementTimeline = null;\n        elms.forEach((element, i) => {\n            context.currentQueryIndex = i;\n            const innerContext = context.createSubContext(ast.options, element);\n            if (delay) {\n                innerContext.delayNextStep(delay);\n            }\n            if (element === context.element) {\n                sameElementTimeline = innerContext.currentTimeline;\n            }\n            visitDslNode(this, ast.animation, innerContext);\n            // this is here just incase the inner steps only contain or end\n            // with a style() call (which is here to signal that this is a preparatory\n            // call to style an element before it is animated again)\n            innerContext.currentTimeline.applyStylesToKeyframe();\n            const endTime = innerContext.currentTimeline.currentTime;\n            furthestTime = Math.max(furthestTime, endTime);\n        });\n        context.currentQueryIndex = 0;\n        context.currentQueryTotal = 0;\n        context.transformIntoNewTimeline(furthestTime);\n        if (sameElementTimeline) {\n            context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);\n            context.currentTimeline.snapshotCurrentStyles();\n        }\n        context.previousNode = ast;\n    }\n    visitStagger(ast, context) {\n        const parentContext = context.parentContext;\n        const tl = context.currentTimeline;\n        const timings = ast.timings;\n        const duration = Math.abs(timings.duration);\n        const maxTime = duration * (context.currentQueryTotal - 1);\n        let delay = duration * context.currentQueryIndex;\n        let staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;\n        switch (staggerTransformer) {\n            case 'reverse':\n                delay = maxTime - delay;\n                break;\n            case 'full':\n                delay = parentContext.currentStaggerTime;\n                break;\n        }\n        const timeline = context.currentTimeline;\n        if (delay) {\n            timeline.delayNextStep(delay);\n        }\n        const startingTime = timeline.currentTime;\n        visitDslNode(this, ast.animation, context);\n        context.previousNode = ast;\n        // time = duration + delay\n        // the reason why this computation is so complex is because\n        // the inner timeline may either have a delay value or a stretched\n        // keyframe depending on if a subtimeline is not used or is used.\n        parentContext.currentStaggerTime =\n            (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);\n    }\n}\nconst DEFAULT_NOOP_PREVIOUS_NODE = {};\nclass AnimationTimelineContext {\n    constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {\n        this._driver = _driver;\n        this.element = element;\n        this.subInstructions = subInstructions;\n        this._enterClassName = _enterClassName;\n        this._leaveClassName = _leaveClassName;\n        this.errors = errors;\n        this.timelines = timelines;\n        this.parentContext = null;\n        this.currentAnimateTimings = null;\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.subContextCount = 0;\n        this.options = {};\n        this.currentQueryIndex = 0;\n        this.currentQueryTotal = 0;\n        this.currentStaggerTime = 0;\n        this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);\n        timelines.push(this.currentTimeline);\n    }\n    get params() {\n        return this.options.params;\n    }\n    updateOptions(options, skipIfExists) {\n        if (!options)\n            return;\n        const newOptions = options;\n        let optionsToUpdate = this.options;\n        // NOTE: this will get patched up when other animation methods support duration overrides\n        if (newOptions.duration != null) {\n            optionsToUpdate.duration = resolveTimingValue(newOptions.duration);\n        }\n        if (newOptions.delay != null) {\n            optionsToUpdate.delay = resolveTimingValue(newOptions.delay);\n        }\n        const newParams = newOptions.params;\n        if (newParams) {\n            let paramsToUpdate = optionsToUpdate.params;\n            if (!paramsToUpdate) {\n                paramsToUpdate = this.options.params = {};\n            }\n            Object.keys(newParams).forEach(name => {\n                if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {\n                    paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);\n                }\n            });\n        }\n    }\n    _copyOptions() {\n        const options = {};\n        if (this.options) {\n            const oldParams = this.options.params;\n            if (oldParams) {\n                const params = options['params'] = {};\n                Object.keys(oldParams).forEach(name => {\n                    params[name] = oldParams[name];\n                });\n            }\n        }\n        return options;\n    }\n    createSubContext(options = null, element, newTime) {\n        const target = element || this.element;\n        const context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));\n        context.previousNode = this.previousNode;\n        context.currentAnimateTimings = this.currentAnimateTimings;\n        context.options = this._copyOptions();\n        context.updateOptions(options);\n        context.currentQueryIndex = this.currentQueryIndex;\n        context.currentQueryTotal = this.currentQueryTotal;\n        context.parentContext = this;\n        this.subContextCount++;\n        return context;\n    }\n    transformIntoNewTimeline(newTime) {\n        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;\n        this.currentTimeline = this.currentTimeline.fork(this.element, newTime);\n        this.timelines.push(this.currentTimeline);\n        return this.currentTimeline;\n    }\n    appendInstructionToTimeline(instruction, duration, delay) {\n        const updatedTimings = {\n            duration: duration != null ? duration : instruction.duration,\n            delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,\n            easing: ''\n        };\n        const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);\n        this.timelines.push(builder);\n        return updatedTimings;\n    }\n    incrementTime(time) {\n        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);\n    }\n    delayNextStep(delay) {\n        // negative delays are not yet supported\n        if (delay > 0) {\n            this.currentTimeline.delayNextStep(delay);\n        }\n    }\n    invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {\n        let results = [];\n        if (includeSelf) {\n            results.push(this.element);\n        }\n        if (selector.length > 0) { // if :self is only used then the selector is empty\n            selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);\n            selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);\n            const multi = limit != 1;\n            let elements = this._driver.query(this.element, selector, multi);\n            if (limit !== 0) {\n                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :\n                    elements.slice(0, limit);\n            }\n            results.push(...elements);\n        }\n        if (!optional && results.length == 0) {\n            errors.push(`\\`query(\"${originalSelector}\")\\` returned zero elements. (Use \\`query(\"${originalSelector}\", { optional: true })\\` if you wish to allow this.)`);\n        }\n        return results;\n    }\n}\nclass TimelineBuilder {\n    constructor(_driver, element, startTime, _elementTimelineStylesLookup) {\n        this._driver = _driver;\n        this.element = element;\n        this.startTime = startTime;\n        this._elementTimelineStylesLookup = _elementTimelineStylesLookup;\n        this.duration = 0;\n        this._previousKeyframe = {};\n        this._currentKeyframe = {};\n        this._keyframes = new Map();\n        this._styleSummary = {};\n        this._pendingStyles = {};\n        this._backFill = {};\n        this._currentEmptyStepKeyframe = null;\n        if (!this._elementTimelineStylesLookup) {\n            this._elementTimelineStylesLookup = new Map();\n        }\n        this._localTimelineStyles = Object.create(this._backFill, {});\n        this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);\n        if (!this._globalTimelineStyles) {\n            this._globalTimelineStyles = this._localTimelineStyles;\n            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);\n        }\n        this._loadKeyframe();\n    }\n    containsAnimation() {\n        switch (this._keyframes.size) {\n            case 0:\n                return false;\n            case 1:\n                return this.getCurrentStyleProperties().length > 0;\n            default:\n                return true;\n        }\n    }\n    getCurrentStyleProperties() {\n        return Object.keys(this._currentKeyframe);\n    }\n    get currentTime() {\n        return this.startTime + this.duration;\n    }\n    delayNextStep(delay) {\n        // in the event that a style() step is placed right before a stagger()\n        // and that style() step is the very first style() value in the animation\n        // then we need to make a copy of the keyframe [0, copy, 1] so that the delay\n        // properly applies the style() values to work with the stagger...\n        const hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;\n        if (this.duration || hasPreStyleStep) {\n            this.forwardTime(this.currentTime + delay);\n            if (hasPreStyleStep) {\n                this.snapshotCurrentStyles();\n            }\n        }\n        else {\n            this.startTime += delay;\n        }\n    }\n    fork(element, currentTime) {\n        this.applyStylesToKeyframe();\n        return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);\n    }\n    _loadKeyframe() {\n        if (this._currentKeyframe) {\n            this._previousKeyframe = this._currentKeyframe;\n        }\n        this._currentKeyframe = this._keyframes.get(this.duration);\n        if (!this._currentKeyframe) {\n            this._currentKeyframe = Object.create(this._backFill, {});\n            this._keyframes.set(this.duration, this._currentKeyframe);\n        }\n    }\n    forwardFrame() {\n        this.duration += ONE_FRAME_IN_MILLISECONDS;\n        this._loadKeyframe();\n    }\n    forwardTime(time) {\n        this.applyStylesToKeyframe();\n        this.duration = time;\n        this._loadKeyframe();\n    }\n    _updateStyle(prop, value) {\n        this._localTimelineStyles[prop] = value;\n        this._globalTimelineStyles[prop] = value;\n        this._styleSummary[prop] = { time: this.currentTime, value };\n    }\n    allowOnlyTimelineStyles() {\n        return this._currentEmptyStepKeyframe !== this._currentKeyframe;\n    }\n    applyEmptyStep(easing) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        // special case for animate(duration):\n        // all missing styles are filled with a `*` value then\n        // if any destination styles are filled in later on the same\n        // keyframe then they will override the overridden styles\n        // We use `_globalTimelineStyles` here because there may be\n        // styles in previous keyframes that are not present in this timeline\n        Object.keys(this._globalTimelineStyles).forEach(prop => {\n            this._backFill[prop] = this._globalTimelineStyles[prop] || AUTO_STYLE;\n            this._currentKeyframe[prop] = AUTO_STYLE;\n        });\n        this._currentEmptyStepKeyframe = this._currentKeyframe;\n    }\n    setStyles(input, easing, errors, options) {\n        if (easing) {\n            this._previousKeyframe['easing'] = easing;\n        }\n        const params = (options && options.params) || {};\n        const styles = flattenStyles(input, this._globalTimelineStyles);\n        Object.keys(styles).forEach(prop => {\n            const val = interpolateParams(styles[prop], params, errors);\n            this._pendingStyles[prop] = val;\n            if (!this._localTimelineStyles.hasOwnProperty(prop)) {\n                this._backFill[prop] = this._globalTimelineStyles.hasOwnProperty(prop) ?\n                    this._globalTimelineStyles[prop] :\n                    AUTO_STYLE;\n            }\n            this._updateStyle(prop, val);\n        });\n    }\n    applyStylesToKeyframe() {\n        const styles = this._pendingStyles;\n        const props = Object.keys(styles);\n        if (props.length == 0)\n            return;\n        this._pendingStyles = {};\n        props.forEach(prop => {\n            const val = styles[prop];\n            this._currentKeyframe[prop] = val;\n        });\n        Object.keys(this._localTimelineStyles).forEach(prop => {\n            if (!this._currentKeyframe.hasOwnProperty(prop)) {\n                this._currentKeyframe[prop] = this._localTimelineStyles[prop];\n            }\n        });\n    }\n    snapshotCurrentStyles() {\n        Object.keys(this._localTimelineStyles).forEach(prop => {\n            const val = this._localTimelineStyles[prop];\n            this._pendingStyles[prop] = val;\n            this._updateStyle(prop, val);\n        });\n    }\n    getFinalKeyframe() {\n        return this._keyframes.get(this.duration);\n    }\n    get properties() {\n        const properties = [];\n        for (let prop in this._currentKeyframe) {\n            properties.push(prop);\n        }\n        return properties;\n    }\n    mergeTimelineCollectedStyles(timeline) {\n        Object.keys(timeline._styleSummary).forEach(prop => {\n            const details0 = this._styleSummary[prop];\n            const details1 = timeline._styleSummary[prop];\n            if (!details0 || details1.time > details0.time) {\n                this._updateStyle(prop, details1.value);\n            }\n        });\n    }\n    buildKeyframes() {\n        this.applyStylesToKeyframe();\n        const preStyleProps = new Set();\n        const postStyleProps = new Set();\n        const isEmpty = this._keyframes.size === 1 && this.duration === 0;\n        let finalKeyframes = [];\n        this._keyframes.forEach((keyframe, time) => {\n            const finalKeyframe = copyStyles(keyframe, true);\n            Object.keys(finalKeyframe).forEach(prop => {\n                const value = finalKeyframe[prop];\n                if (value == ɵPRE_STYLE) {\n                    preStyleProps.add(prop);\n                }\n                else if (value == AUTO_STYLE) {\n                    postStyleProps.add(prop);\n                }\n            });\n            if (!isEmpty) {\n                finalKeyframe['offset'] = time / this.duration;\n            }\n            finalKeyframes.push(finalKeyframe);\n        });\n        const preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];\n        const postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];\n        // special case for a 0-second animation (which is designed just to place styles onscreen)\n        if (isEmpty) {\n            const kf0 = finalKeyframes[0];\n            const kf1 = copyObj(kf0);\n            kf0['offset'] = 0;\n            kf1['offset'] = 1;\n            finalKeyframes = [kf0, kf1];\n        }\n        return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);\n    }\n}\nclass SubTimelineBuilder extends TimelineBuilder {\n    constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {\n        super(driver, element, timings.delay);\n        this.element = element;\n        this.keyframes = keyframes;\n        this.preStyleProps = preStyleProps;\n        this.postStyleProps = postStyleProps;\n        this._stretchStartingKeyframe = _stretchStartingKeyframe;\n        this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };\n    }\n    containsAnimation() {\n        return this.keyframes.length > 1;\n    }\n    buildKeyframes() {\n        let keyframes = this.keyframes;\n        let { delay, duration, easing } = this.timings;\n        if (this._stretchStartingKeyframe && delay) {\n            const newKeyframes = [];\n            const totalTime = duration + delay;\n            const startingGap = delay / totalTime;\n            // the original starting keyframe now starts once the delay is done\n            const newFirstKeyframe = copyStyles(keyframes[0], false);\n            newFirstKeyframe['offset'] = 0;\n            newKeyframes.push(newFirstKeyframe);\n            const oldFirstKeyframe = copyStyles(keyframes[0], false);\n            oldFirstKeyframe['offset'] = roundOffset(startingGap);\n            newKeyframes.push(oldFirstKeyframe);\n            /*\n              When the keyframe is stretched then it means that the delay before the animation\n              starts is gone. Instead the first keyframe is placed at the start of the animation\n              and it is then copied to where it starts when the original delay is over. This basically\n              means nothing animates during that delay, but the styles are still renderered. For this\n              to work the original offset values that exist in the original keyframes must be \"warped\"\n              so that they can take the new keyframe + delay into account.\n      \n              delay=1000, duration=1000, keyframes = 0 .5 1\n      \n              turns into\n      \n              delay=0, duration=2000, keyframes = 0 .33 .66 1\n             */\n            // offsets between 1 ... n -1 are all warped by the keyframe stretch\n            const limit = keyframes.length - 1;\n            for (let i = 1; i <= limit; i++) {\n                let kf = copyStyles(keyframes[i], false);\n                const oldOffset = kf['offset'];\n                const timeAtKeyframe = delay + oldOffset * duration;\n                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);\n                newKeyframes.push(kf);\n            }\n            // the new starting keyframe should be added at the start\n            duration = totalTime;\n            delay = 0;\n            easing = '';\n            keyframes = newKeyframes;\n        }\n        return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);\n    }\n}\nfunction roundOffset(offset, decimalPoints = 3) {\n    const mult = Math.pow(10, decimalPoints - 1);\n    return Math.round(offset * mult) / mult;\n}\nfunction flattenStyles(input, allStyles) {\n    const styles = {};\n    let allProperties;\n    input.forEach(token => {\n        if (token === '*') {\n            allProperties = allProperties || Object.keys(allStyles);\n            allProperties.forEach(prop => {\n                styles[prop] = AUTO_STYLE;\n            });\n        }\n        else {\n            copyStyles(token, false, styles);\n        }\n    });\n    return styles;\n}\n\nclass Animation {\n    constructor(_driver, input) {\n        this._driver = _driver;\n        const errors = [];\n        const ast = buildAnimationAst(_driver, input, errors);\n        if (errors.length) {\n            const errorMessage = `animation validation failed:\\n${errors.join('\\n')}`;\n            throw new Error(errorMessage);\n        }\n        this._animationAst = ast;\n    }\n    buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {\n        const start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) :\n            startingStyles;\n        const dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) :\n            destinationStyles;\n        const errors = [];\n        subInstructions = subInstructions || new ElementInstructionMap();\n        const result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);\n        if (errors.length) {\n            const errorMessage = `animation building failed:\\n${errors.join('\\n')}`;\n            throw new Error(errorMessage);\n        }\n        return result;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nclass AnimationStyleNormalizer {\n}\n/**\n * @publicApi\n */\nclass NoopAnimationStyleNormalizer {\n    normalizePropertyName(propertyName, errors) {\n        return propertyName;\n    }\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        return value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {\n    normalizePropertyName(propertyName, errors) {\n        return dashCaseToCamelCase(propertyName);\n    }\n    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {\n        let unit = '';\n        const strVal = value.toString().trim();\n        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {\n            if (typeof value === 'number') {\n                unit = 'px';\n            }\n            else {\n                const valAndSuffixMatch = value.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);\n                }\n            }\n        }\n        return strVal + unit;\n    }\n}\nconst ɵ0$1 = () => makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'\n    .split(','));\nconst DIMENSIONAL_PROP_MAP = (ɵ0$1)();\nfunction makeBooleanMap(keys) {\n    const map = {};\n    keys.forEach(key => map[key] = true);\n    return map;\n}\n\nfunction createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {\n    return {\n        type: 0 /* TransitionAnimation */,\n        element,\n        triggerName,\n        isRemovalTransition,\n        fromState,\n        fromStyles,\n        toState,\n        toStyles,\n        timelines,\n        queriedElements,\n        preStyleProps,\n        postStyleProps,\n        totalTime,\n        errors\n    };\n}\n\nconst EMPTY_OBJECT = {};\nclass AnimationTransitionFactory {\n    constructor(_triggerName, ast, _stateStyles) {\n        this._triggerName = _triggerName;\n        this.ast = ast;\n        this._stateStyles = _stateStyles;\n    }\n    match(currentState, nextState, element, params) {\n        return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);\n    }\n    buildStyles(stateName, params, errors) {\n        const backupStateStyler = this._stateStyles['*'];\n        const stateStyler = this._stateStyles[stateName];\n        const backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};\n        return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;\n    }\n    build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {\n        const errors = [];\n        const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;\n        const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;\n        const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);\n        const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;\n        const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);\n        const queriedElements = new Set();\n        const preStyleMap = new Map();\n        const postStyleMap = new Map();\n        const isRemoval = nextState === 'void';\n        const animationOptions = { params: Object.assign(Object.assign({}, transitionAnimationParams), nextAnimationParams) };\n        const timelines = skipAstBuild ?\n            [] :\n            buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);\n        let totalTime = 0;\n        timelines.forEach(tl => {\n            totalTime = Math.max(tl.duration + tl.delay, totalTime);\n        });\n        if (errors.length) {\n            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);\n        }\n        timelines.forEach(tl => {\n            const elm = tl.element;\n            const preProps = getOrSetAsInMap(preStyleMap, elm, {});\n            tl.preStyleProps.forEach(prop => preProps[prop] = true);\n            const postProps = getOrSetAsInMap(postStyleMap, elm, {});\n            tl.postStyleProps.forEach(prop => postProps[prop] = true);\n            if (elm !== element) {\n                queriedElements.add(elm);\n            }\n        });\n        const queriedElementsList = iteratorToArray(queriedElements.values());\n        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);\n    }\n}\nfunction oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {\n    return matchFns.some(fn => fn(currentState, nextState, element, params));\n}\nclass AnimationStateStyles {\n    constructor(styles, defaultParams) {\n        this.styles = styles;\n        this.defaultParams = defaultParams;\n    }\n    buildStyles(params, errors) {\n        const finalStyles = {};\n        const combinedParams = copyObj(this.defaultParams);\n        Object.keys(params).forEach(key => {\n            const value = params[key];\n            if (value != null) {\n                combinedParams[key] = value;\n            }\n        });\n        this.styles.styles.forEach(value => {\n            if (typeof value !== 'string') {\n                const styleObj = value;\n                Object.keys(styleObj).forEach(prop => {\n                    let val = styleObj[prop];\n                    if (val.length > 1) {\n                        val = interpolateParams(val, combinedParams, errors);\n                    }\n                    finalStyles[prop] = val;\n                });\n            }\n        });\n        return finalStyles;\n    }\n}\n\n/**\n * @publicApi\n */\nfunction buildTrigger(name, ast) {\n    return new AnimationTrigger(name, ast);\n}\n/**\n * @publicApi\n */\nclass AnimationTrigger {\n    constructor(name, ast) {\n        this.name = name;\n        this.ast = ast;\n        this.transitionFactories = [];\n        this.states = {};\n        ast.states.forEach(ast => {\n            const defaultParams = (ast.options && ast.options.params) || {};\n            this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);\n        });\n        balanceProperties(this.states, 'true', '1');\n        balanceProperties(this.states, 'false', '0');\n        ast.transitions.forEach(ast => {\n            this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));\n        });\n        this.fallbackTransition = createFallbackTransition(name, this.states);\n    }\n    get containsQueries() {\n        return this.ast.queryCount > 0;\n    }\n    matchTransition(currentState, nextState, element, params) {\n        const entry = this.transitionFactories.find(f => f.match(currentState, nextState, element, params));\n        return entry || null;\n    }\n    matchStyles(currentState, params, errors) {\n        return this.fallbackTransition.buildStyles(currentState, params, errors);\n    }\n}\nfunction createFallbackTransition(triggerName, states) {\n    const matchers = [(fromState, toState) => true];\n    const animation = { type: 2 /* Sequence */, steps: [], options: null };\n    const transition = {\n        type: 1 /* Transition */,\n        animation,\n        matchers,\n        options: null,\n        queryCount: 0,\n        depCount: 0\n    };\n    return new AnimationTransitionFactory(triggerName, transition, states);\n}\nfunction balanceProperties(obj, key1, key2) {\n    if (obj.hasOwnProperty(key1)) {\n        if (!obj.hasOwnProperty(key2)) {\n            obj[key2] = obj[key1];\n        }\n    }\n    else if (obj.hasOwnProperty(key2)) {\n        obj[key1] = obj[key2];\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();\nclass TimelineAnimationEngine {\n    constructor(bodyNode, _driver, _normalizer) {\n        this.bodyNode = bodyNode;\n        this._driver = _driver;\n        this._normalizer = _normalizer;\n        this._animations = {};\n        this._playersById = {};\n        this.players = [];\n    }\n    register(id, metadata) {\n        const errors = [];\n        const ast = buildAnimationAst(this._driver, metadata, errors);\n        if (errors.length) {\n            throw new Error(`Unable to build the animation due to the following errors: ${errors.join('\\n')}`);\n        }\n        else {\n            this._animations[id] = ast;\n        }\n    }\n    _buildPlayer(i, preStyles, postStyles) {\n        const element = i.element;\n        const keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);\n        return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);\n    }\n    create(id, element, options = {}) {\n        const errors = [];\n        const ast = this._animations[id];\n        let instructions;\n        const autoStylesMap = new Map();\n        if (ast) {\n            instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);\n            instructions.forEach(inst => {\n                const styles = getOrSetAsInMap(autoStylesMap, inst.element, {});\n                inst.postStyleProps.forEach(prop => styles[prop] = null);\n            });\n        }\n        else {\n            errors.push('The requested animation doesn\\'t exist or has already been destroyed');\n            instructions = [];\n        }\n        if (errors.length) {\n            throw new Error(`Unable to create the animation due to the following errors: ${errors.join('\\n')}`);\n        }\n        autoStylesMap.forEach((styles, element) => {\n            Object.keys(styles).forEach(prop => {\n                styles[prop] = this._driver.computeStyle(element, prop, AUTO_STYLE);\n            });\n        });\n        const players = instructions.map(i => {\n            const styles = autoStylesMap.get(i.element);\n            return this._buildPlayer(i, {}, styles);\n        });\n        const player = optimizeGroupPlayer(players);\n        this._playersById[id] = player;\n        player.onDestroy(() => this.destroy(id));\n        this.players.push(player);\n        return player;\n    }\n    destroy(id) {\n        const player = this._getPlayer(id);\n        player.destroy();\n        delete this._playersById[id];\n        const index = this.players.indexOf(player);\n        if (index >= 0) {\n            this.players.splice(index, 1);\n        }\n    }\n    _getPlayer(id) {\n        const player = this._playersById[id];\n        if (!player) {\n            throw new Error(`Unable to find the timeline player referenced by ${id}`);\n        }\n        return player;\n    }\n    listen(id, element, eventName, callback) {\n        // triggerName, fromState, toState are all ignored for timeline animations\n        const baseEvent = makeAnimationEvent(element, '', '', '');\n        listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);\n        return () => { };\n    }\n    command(id, element, command, args) {\n        if (command == 'register') {\n            this.register(id, args[0]);\n            return;\n        }\n        if (command == 'create') {\n            const options = (args[0] || {});\n            this.create(id, element, options);\n            return;\n        }\n        const player = this._getPlayer(id);\n        switch (command) {\n            case 'play':\n                player.play();\n                break;\n            case 'pause':\n                player.pause();\n                break;\n            case 'reset':\n                player.reset();\n                break;\n            case 'restart':\n                player.restart();\n                break;\n            case 'finish':\n                player.finish();\n                break;\n            case 'init':\n                player.init();\n                break;\n            case 'setPosition':\n                player.setPosition(parseFloat(args[0]));\n                break;\n            case 'destroy':\n                this.destroy(id);\n                break;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst QUEUED_CLASSNAME = 'ng-animate-queued';\nconst QUEUED_SELECTOR = '.ng-animate-queued';\nconst DISABLED_CLASSNAME = 'ng-animate-disabled';\nconst DISABLED_SELECTOR = '.ng-animate-disabled';\nconst STAR_CLASSNAME = 'ng-star-inserted';\nconst STAR_SELECTOR = '.ng-star-inserted';\nconst EMPTY_PLAYER_ARRAY = [];\nconst NULL_REMOVAL_STATE = {\n    namespaceId: '',\n    setForRemoval: false,\n    setForMove: false,\n    hasAnimation: false,\n    removedBeforeQueried: false\n};\nconst NULL_REMOVED_QUERIED_STATE = {\n    namespaceId: '',\n    setForMove: false,\n    setForRemoval: false,\n    hasAnimation: false,\n    removedBeforeQueried: true\n};\nconst REMOVAL_FLAG = '__ng_removed';\nclass StateValue {\n    constructor(input, namespaceId = '') {\n        this.namespaceId = namespaceId;\n        const isObj = input && input.hasOwnProperty('value');\n        const value = isObj ? input['value'] : input;\n        this.value = normalizeTriggerValue(value);\n        if (isObj) {\n            const options = copyObj(input);\n            delete options['value'];\n            this.options = options;\n        }\n        else {\n            this.options = {};\n        }\n        if (!this.options.params) {\n            this.options.params = {};\n        }\n    }\n    get params() {\n        return this.options.params;\n    }\n    absorbOptions(options) {\n        const newParams = options.params;\n        if (newParams) {\n            const oldParams = this.options.params;\n            Object.keys(newParams).forEach(prop => {\n                if (oldParams[prop] == null) {\n                    oldParams[prop] = newParams[prop];\n                }\n            });\n        }\n    }\n}\nconst VOID_VALUE = 'void';\nconst DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);\nclass AnimationTransitionNamespace {\n    constructor(id, hostElement, _engine) {\n        this.id = id;\n        this.hostElement = hostElement;\n        this._engine = _engine;\n        this.players = [];\n        this._triggers = {};\n        this._queue = [];\n        this._elementListeners = new Map();\n        this._hostClassName = 'ng-tns-' + id;\n        addClass(hostElement, this._hostClassName);\n    }\n    listen(element, name, phase, callback) {\n        if (!this._triggers.hasOwnProperty(name)) {\n            throw new Error(`Unable to listen on the animation trigger event \"${phase}\" because the animation trigger \"${name}\" doesn\\'t exist!`);\n        }\n        if (phase == null || phase.length == 0) {\n            throw new Error(`Unable to listen on the animation trigger \"${name}\" because the provided event is undefined!`);\n        }\n        if (!isTriggerEventValid(phase)) {\n            throw new Error(`The provided animation trigger event \"${phase}\" for the animation trigger \"${name}\" is not supported!`);\n        }\n        const listeners = getOrSetAsInMap(this._elementListeners, element, []);\n        const data = { name, phase, callback };\n        listeners.push(data);\n        const triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});\n        if (!triggersWithStates.hasOwnProperty(name)) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);\n            triggersWithStates[name] = DEFAULT_STATE_VALUE;\n        }\n        return () => {\n            // the event listener is removed AFTER the flush has occurred such\n            // that leave animations callbacks can fire (otherwise if the node\n            // is removed in between then the listeners would be deregistered)\n            this._engine.afterFlush(() => {\n                const index = listeners.indexOf(data);\n                if (index >= 0) {\n                    listeners.splice(index, 1);\n                }\n                if (!this._triggers[name]) {\n                    delete triggersWithStates[name];\n                }\n            });\n        };\n    }\n    register(name, ast) {\n        if (this._triggers[name]) {\n            // throw\n            return false;\n        }\n        else {\n            this._triggers[name] = ast;\n            return true;\n        }\n    }\n    _getTrigger(name) {\n        const trigger = this._triggers[name];\n        if (!trigger) {\n            throw new Error(`The provided animation trigger \"${name}\" has not been registered!`);\n        }\n        return trigger;\n    }\n    trigger(element, triggerName, value, defaultToFallback = true) {\n        const trigger = this._getTrigger(triggerName);\n        const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n        let triggersWithStates = this._engine.statesByElement.get(element);\n        if (!triggersWithStates) {\n            addClass(element, NG_TRIGGER_CLASSNAME);\n            addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);\n            this._engine.statesByElement.set(element, triggersWithStates = {});\n        }\n        let fromState = triggersWithStates[triggerName];\n        const toState = new StateValue(value, this.id);\n        const isObj = value && value.hasOwnProperty('value');\n        if (!isObj && fromState) {\n            toState.absorbOptions(fromState.options);\n        }\n        triggersWithStates[triggerName] = toState;\n        if (!fromState) {\n            fromState = DEFAULT_STATE_VALUE;\n        }\n        const isRemoval = toState.value === VOID_VALUE;\n        // normally this isn't reached by here, however, if an object expression\n        // is passed in then it may be a new object each time. Comparing the value\n        // is important since that will stay the same despite there being a new object.\n        // The removal arc here is special cased because the same element is triggered\n        // twice in the event that it contains animations on the outer/inner portions\n        // of the host container\n        if (!isRemoval && fromState.value === toState.value) {\n            // this means that despite the value not changing, some inner params\n            // have changed which means that the animation final styles need to be applied\n            if (!objEquals(fromState.params, toState.params)) {\n                const errors = [];\n                const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);\n                const toStyles = trigger.matchStyles(toState.value, toState.params, errors);\n                if (errors.length) {\n                    this._engine.reportError(errors);\n                }\n                else {\n                    this._engine.afterFlush(() => {\n                        eraseStyles(element, fromStyles);\n                        setStyles(element, toStyles);\n                    });\n                }\n            }\n            return;\n        }\n        const playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);\n        playersOnElement.forEach(player => {\n            // only remove the player if it is queued on the EXACT same trigger/namespace\n            // we only also deal with queued players here because if the animation has\n            // started then we want to keep the player alive until the flush happens\n            // (which is where the previousPlayers are passed into the new palyer)\n            if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {\n                player.destroy();\n            }\n        });\n        let transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);\n        let isFallbackTransition = false;\n        if (!transition) {\n            if (!defaultToFallback)\n                return;\n            transition = trigger.fallbackTransition;\n            isFallbackTransition = true;\n        }\n        this._engine.totalQueuedPlayers++;\n        this._queue.push({ element, triggerName, transition, fromState, toState, player, isFallbackTransition });\n        if (!isFallbackTransition) {\n            addClass(element, QUEUED_CLASSNAME);\n            player.onStart(() => {\n                removeClass(element, QUEUED_CLASSNAME);\n            });\n        }\n        player.onDone(() => {\n            let index = this.players.indexOf(player);\n            if (index >= 0) {\n                this.players.splice(index, 1);\n            }\n            const players = this._engine.playersByElement.get(element);\n            if (players) {\n                let index = players.indexOf(player);\n                if (index >= 0) {\n                    players.splice(index, 1);\n                }\n            }\n        });\n        this.players.push(player);\n        playersOnElement.push(player);\n        return player;\n    }\n    deregister(name) {\n        delete this._triggers[name];\n        this._engine.statesByElement.forEach((stateMap, element) => {\n            delete stateMap[name];\n        });\n        this._elementListeners.forEach((listeners, element) => {\n            this._elementListeners.set(element, listeners.filter(entry => {\n                return entry.name != name;\n            }));\n        });\n    }\n    clearElementCache(element) {\n        this._engine.statesByElement.delete(element);\n        this._elementListeners.delete(element);\n        const elementPlayers = this._engine.playersByElement.get(element);\n        if (elementPlayers) {\n            elementPlayers.forEach(player => player.destroy());\n            this._engine.playersByElement.delete(element);\n        }\n    }\n    _signalRemovalForInnerTriggers(rootElement, context) {\n        const elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true);\n        // emulate a leave animation for all inner nodes within this node.\n        // If there are no animations found for any of the nodes then clear the cache\n        // for the element.\n        elements.forEach(elm => {\n            // this means that an inner remove() operation has already kicked off\n            // the animation on this element...\n            if (elm[REMOVAL_FLAG])\n                return;\n            const namespaces = this._engine.fetchNamespacesByElement(elm);\n            if (namespaces.size) {\n                namespaces.forEach(ns => ns.triggerLeaveAnimation(elm, context, false, true));\n            }\n            else {\n                this.clearElementCache(elm);\n            }\n        });\n        // If the child elements were removed along with the parent, their animations might not\n        // have completed. Clear all the elements from the cache so we don't end up with a memory leak.\n        this._engine.afterFlushAnimationsDone(() => elements.forEach(elm => this.clearElementCache(elm)));\n    }\n    triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {\n        const triggerStates = this._engine.statesByElement.get(element);\n        if (triggerStates) {\n            const players = [];\n            Object.keys(triggerStates).forEach(triggerName => {\n                // this check is here in the event that an element is removed\n                // twice (both on the host level and the component level)\n                if (this._triggers[triggerName]) {\n                    const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);\n                    if (player) {\n                        players.push(player);\n                    }\n                }\n            });\n            if (players.length) {\n                this._engine.markElementAsRemoved(this.id, element, true, context);\n                if (destroyAfterComplete) {\n                    optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    prepareLeaveAnimationListeners(element) {\n        const listeners = this._elementListeners.get(element);\n        if (listeners) {\n            const visitedTriggers = new Set();\n            listeners.forEach(listener => {\n                const triggerName = listener.name;\n                if (visitedTriggers.has(triggerName))\n                    return;\n                visitedTriggers.add(triggerName);\n                const trigger = this._triggers[triggerName];\n                const transition = trigger.fallbackTransition;\n                const elementStates = this._engine.statesByElement.get(element);\n                const fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;\n                const toState = new StateValue(VOID_VALUE);\n                const player = new TransitionAnimationPlayer(this.id, triggerName, element);\n                this._engine.totalQueuedPlayers++;\n                this._queue.push({\n                    element,\n                    triggerName,\n                    transition,\n                    fromState,\n                    toState,\n                    player,\n                    isFallbackTransition: true\n                });\n            });\n        }\n    }\n    removeNode(element, context) {\n        const engine = this._engine;\n        if (element.childElementCount) {\n            this._signalRemovalForInnerTriggers(element, context);\n        }\n        // this means that a * => VOID animation was detected and kicked off\n        if (this.triggerLeaveAnimation(element, context, true))\n            return;\n        // find the player that is animating and make sure that the\n        // removal is delayed until that player has completed\n        let containsPotentialParentTransition = false;\n        if (engine.totalAnimations) {\n            const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];\n            // when this `if statement` does not continue forward it means that\n            // a previous animation query has selected the current element and\n            // is animating it. In this situation want to continue forwards and\n            // allow the element to be queued up for animation later.\n            if (currentPlayers && currentPlayers.length) {\n                containsPotentialParentTransition = true;\n            }\n            else {\n                let parent = element;\n                while (parent = parent.parentNode) {\n                    const triggers = engine.statesByElement.get(parent);\n                    if (triggers) {\n                        containsPotentialParentTransition = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // at this stage we know that the element will either get removed\n        // during flush or will be picked up by a parent query. Either way\n        // we need to fire the listeners for this element when it DOES get\n        // removed (once the query parent animation is done or after flush)\n        this.prepareLeaveAnimationListeners(element);\n        // whether or not a parent has an animation we need to delay the deferral of the leave\n        // operation until we have more information (which we do after flush() has been called)\n        if (containsPotentialParentTransition) {\n            engine.markElementAsRemoved(this.id, element, false, context);\n        }\n        else {\n            const removalFlag = element[REMOVAL_FLAG];\n            if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {\n                // we do this after the flush has occurred such\n                // that the callbacks can be fired\n                engine.afterFlush(() => this.clearElementCache(element));\n                engine.destroyInnerAnimations(element);\n                engine._onRemovalComplete(element, context);\n            }\n        }\n    }\n    insertNode(element, parent) {\n        addClass(element, this._hostClassName);\n    }\n    drainQueuedTransitions(microtaskId) {\n        const instructions = [];\n        this._queue.forEach(entry => {\n            const player = entry.player;\n            if (player.destroyed)\n                return;\n            const element = entry.element;\n            const listeners = this._elementListeners.get(element);\n            if (listeners) {\n                listeners.forEach((listener) => {\n                    if (listener.name == entry.triggerName) {\n                        const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);\n                        baseEvent['_data'] = microtaskId;\n                        listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);\n                    }\n                });\n            }\n            if (player.markedForDestroy) {\n                this._engine.afterFlush(() => {\n                    // now we can destroy the element properly since the event listeners have\n                    // been bound to the player\n                    player.destroy();\n                });\n            }\n            else {\n                instructions.push(entry);\n            }\n        });\n        this._queue = [];\n        return instructions.sort((a, b) => {\n            // if depCount == 0 them move to front\n            // otherwise if a contains b then move back\n            const d0 = a.transition.ast.depCount;\n            const d1 = b.transition.ast.depCount;\n            if (d0 == 0 || d1 == 0) {\n                return d0 - d1;\n            }\n            return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;\n        });\n    }\n    destroy(context) {\n        this.players.forEach(p => p.destroy());\n        this._signalRemovalForInnerTriggers(this.hostElement, context);\n    }\n    elementContainsData(element) {\n        let containsData = false;\n        if (this._elementListeners.has(element))\n            containsData = true;\n        containsData =\n            (this._queue.find(entry => entry.element === element) ? true : false) || containsData;\n        return containsData;\n    }\n}\nclass TransitionAnimationEngine {\n    constructor(bodyNode, driver, _normalizer) {\n        this.bodyNode = bodyNode;\n        this.driver = driver;\n        this._normalizer = _normalizer;\n        this.players = [];\n        this.newHostElements = new Map();\n        this.playersByElement = new Map();\n        this.playersByQueriedElement = new Map();\n        this.statesByElement = new Map();\n        this.disabledNodes = new Set();\n        this.totalAnimations = 0;\n        this.totalQueuedPlayers = 0;\n        this._namespaceLookup = {};\n        this._namespaceList = [];\n        this._flushFns = [];\n        this._whenQuietFns = [];\n        this.namespacesByHostElement = new Map();\n        this.collectedEnterElements = [];\n        this.collectedLeaveElements = [];\n        // this method is designed to be overridden by the code that uses this engine\n        this.onRemovalComplete = (element, context) => { };\n    }\n    /** @internal */\n    _onRemovalComplete(element, context) {\n        this.onRemovalComplete(element, context);\n    }\n    get queuedPlayers() {\n        const players = [];\n        this._namespaceList.forEach(ns => {\n            ns.players.forEach(player => {\n                if (player.queued) {\n                    players.push(player);\n                }\n            });\n        });\n        return players;\n    }\n    createNamespace(namespaceId, hostElement) {\n        const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);\n        if (hostElement.parentNode) {\n            this._balanceNamespaceList(ns, hostElement);\n        }\n        else {\n            // defer this later until flush during when the host element has\n            // been inserted so that we know exactly where to place it in\n            // the namespace list\n            this.newHostElements.set(hostElement, ns);\n            // given that this host element is apart of the animation code, it\n            // may or may not be inserted by a parent node that is an of an\n            // animation renderer type. If this happens then we can still have\n            // access to this item when we query for :enter nodes. If the parent\n            // is a renderer then the set data-structure will normalize the entry\n            this.collectEnterElement(hostElement);\n        }\n        return this._namespaceLookup[namespaceId] = ns;\n    }\n    _balanceNamespaceList(ns, hostElement) {\n        const limit = this._namespaceList.length - 1;\n        if (limit >= 0) {\n            let found = false;\n            for (let i = limit; i >= 0; i--) {\n                const nextNamespace = this._namespaceList[i];\n                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {\n                    this._namespaceList.splice(i + 1, 0, ns);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                this._namespaceList.splice(0, 0, ns);\n            }\n        }\n        else {\n            this._namespaceList.push(ns);\n        }\n        this.namespacesByHostElement.set(hostElement, ns);\n        return ns;\n    }\n    register(namespaceId, hostElement) {\n        let ns = this._namespaceLookup[namespaceId];\n        if (!ns) {\n            ns = this.createNamespace(namespaceId, hostElement);\n        }\n        return ns;\n    }\n    registerTrigger(namespaceId, name, trigger) {\n        let ns = this._namespaceLookup[namespaceId];\n        if (ns && ns.register(name, trigger)) {\n            this.totalAnimations++;\n        }\n    }\n    destroy(namespaceId, context) {\n        if (!namespaceId)\n            return;\n        const ns = this._fetchNamespace(namespaceId);\n        this.afterFlush(() => {\n            this.namespacesByHostElement.delete(ns.hostElement);\n            delete this._namespaceLookup[namespaceId];\n            const index = this._namespaceList.indexOf(ns);\n            if (index >= 0) {\n                this._namespaceList.splice(index, 1);\n            }\n        });\n        this.afterFlushAnimationsDone(() => ns.destroy(context));\n    }\n    _fetchNamespace(id) {\n        return this._namespaceLookup[id];\n    }\n    fetchNamespacesByElement(element) {\n        // normally there should only be one namespace per element, however\n        // if @triggers are placed on both the component element and then\n        // its host element (within the component code) then there will be\n        // two namespaces returned. We use a set here to simply the dedupe\n        // of namespaces incase there are multiple triggers both the elm and host\n        const namespaces = new Set();\n        const elementStates = this.statesByElement.get(element);\n        if (elementStates) {\n            const keys = Object.keys(elementStates);\n            for (let i = 0; i < keys.length; i++) {\n                const nsId = elementStates[keys[i]].namespaceId;\n                if (nsId) {\n                    const ns = this._fetchNamespace(nsId);\n                    if (ns) {\n                        namespaces.add(ns);\n                    }\n                }\n            }\n        }\n        return namespaces;\n    }\n    trigger(namespaceId, element, name, value) {\n        if (isElementNode(element)) {\n            const ns = this._fetchNamespace(namespaceId);\n            if (ns) {\n                ns.trigger(element, name, value);\n                return true;\n            }\n        }\n        return false;\n    }\n    insertNode(namespaceId, element, parent, insertBefore) {\n        if (!isElementNode(element))\n            return;\n        // special case for when an element is removed and reinserted (move operation)\n        // when this occurs we do not want to use the element for deletion later\n        const details = element[REMOVAL_FLAG];\n        if (details && details.setForRemoval) {\n            details.setForRemoval = false;\n            details.setForMove = true;\n            const index = this.collectedLeaveElements.indexOf(element);\n            if (index >= 0) {\n                this.collectedLeaveElements.splice(index, 1);\n            }\n        }\n        // in the event that the namespaceId is blank then the caller\n        // code does not contain any animation code in it, but it is\n        // just being called so that the node is marked as being inserted\n        if (namespaceId) {\n            const ns = this._fetchNamespace(namespaceId);\n            // This if-statement is a workaround for router issue #21947.\n            // The router sometimes hits a race condition where while a route\n            // is being instantiated a new navigation arrives, triggering leave\n            // animation of DOM that has not been fully initialized, until this\n            // is resolved, we need to handle the scenario when DOM is not in a\n            // consistent state during the animation.\n            if (ns) {\n                ns.insertNode(element, parent);\n            }\n        }\n        // only *directives and host elements are inserted before\n        if (insertBefore) {\n            this.collectEnterElement(element);\n        }\n    }\n    collectEnterElement(element) {\n        this.collectedEnterElements.push(element);\n    }\n    markElementAsDisabled(element, value) {\n        if (value) {\n            if (!this.disabledNodes.has(element)) {\n                this.disabledNodes.add(element);\n                addClass(element, DISABLED_CLASSNAME);\n            }\n        }\n        else if (this.disabledNodes.has(element)) {\n            this.disabledNodes.delete(element);\n            removeClass(element, DISABLED_CLASSNAME);\n        }\n    }\n    removeNode(namespaceId, element, isHostElement, context) {\n        if (isElementNode(element)) {\n            const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;\n            if (ns) {\n                ns.removeNode(element, context);\n            }\n            else {\n                this.markElementAsRemoved(namespaceId, element, false, context);\n            }\n            if (isHostElement) {\n                const hostNS = this.namespacesByHostElement.get(element);\n                if (hostNS && hostNS.id !== namespaceId) {\n                    hostNS.removeNode(element, context);\n                }\n            }\n        }\n        else {\n            this._onRemovalComplete(element, context);\n        }\n    }\n    markElementAsRemoved(namespaceId, element, hasAnimation, context) {\n        this.collectedLeaveElements.push(element);\n        element[REMOVAL_FLAG] =\n            { namespaceId, setForRemoval: context, hasAnimation, removedBeforeQueried: false };\n    }\n    listen(namespaceId, element, name, phase, callback) {\n        if (isElementNode(element)) {\n            return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);\n        }\n        return () => { };\n    }\n    _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {\n        return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);\n    }\n    destroyInnerAnimations(containerElement) {\n        let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);\n        elements.forEach(element => this.destroyActiveAnimationsForElement(element));\n        if (this.playersByQueriedElement.size == 0)\n            return;\n        elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);\n        elements.forEach(element => this.finishActiveQueriedAnimationOnElement(element));\n    }\n    destroyActiveAnimationsForElement(element) {\n        const players = this.playersByElement.get(element);\n        if (players) {\n            players.forEach(player => {\n                // special case for when an element is set for destruction, but hasn't started.\n                // in this situation we want to delay the destruction until the flush occurs\n                // so that any event listeners attached to the player are triggered.\n                if (player.queued) {\n                    player.markedForDestroy = true;\n                }\n                else {\n                    player.destroy();\n                }\n            });\n        }\n    }\n    finishActiveQueriedAnimationOnElement(element) {\n        const players = this.playersByQueriedElement.get(element);\n        if (players) {\n            players.forEach(player => player.finish());\n        }\n    }\n    whenRenderingDone() {\n        return new Promise(resolve => {\n            if (this.players.length) {\n                return optimizeGroupPlayer(this.players).onDone(() => resolve());\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n    processLeaveNode(element) {\n        const details = element[REMOVAL_FLAG];\n        if (details && details.setForRemoval) {\n            // this will prevent it from removing it twice\n            element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;\n            if (details.namespaceId) {\n                this.destroyInnerAnimations(element);\n                const ns = this._fetchNamespace(details.namespaceId);\n                if (ns) {\n                    ns.clearElementCache(element);\n                }\n            }\n            this._onRemovalComplete(element, details.setForRemoval);\n        }\n        if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {\n            this.markElementAsDisabled(element, false);\n        }\n        this.driver.query(element, DISABLED_SELECTOR, true).forEach(node => {\n            this.markElementAsDisabled(node, false);\n        });\n    }\n    flush(microtaskId = -1) {\n        let players = [];\n        if (this.newHostElements.size) {\n            this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));\n            this.newHostElements.clear();\n        }\n        if (this.totalAnimations && this.collectedEnterElements.length) {\n            for (let i = 0; i < this.collectedEnterElements.length; i++) {\n                const elm = this.collectedEnterElements[i];\n                addClass(elm, STAR_CLASSNAME);\n            }\n        }\n        if (this._namespaceList.length &&\n            (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {\n            const cleanupFns = [];\n            try {\n                players = this._flushAnimations(cleanupFns, microtaskId);\n            }\n            finally {\n                for (let i = 0; i < cleanupFns.length; i++) {\n                    cleanupFns[i]();\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n                const element = this.collectedLeaveElements[i];\n                this.processLeaveNode(element);\n            }\n        }\n        this.totalQueuedPlayers = 0;\n        this.collectedEnterElements.length = 0;\n        this.collectedLeaveElements.length = 0;\n        this._flushFns.forEach(fn => fn());\n        this._flushFns = [];\n        if (this._whenQuietFns.length) {\n            // we move these over to a variable so that\n            // if any new callbacks are registered in another\n            // flush they do not populate the existing set\n            const quietFns = this._whenQuietFns;\n            this._whenQuietFns = [];\n            if (players.length) {\n                optimizeGroupPlayer(players).onDone(() => {\n                    quietFns.forEach(fn => fn());\n                });\n            }\n            else {\n                quietFns.forEach(fn => fn());\n            }\n        }\n    }\n    reportError(errors) {\n        throw new Error(`Unable to process animations due to the following failed trigger transitions\\n ${errors.join('\\n')}`);\n    }\n    _flushAnimations(cleanupFns, microtaskId) {\n        const subTimelines = new ElementInstructionMap();\n        const skippedPlayers = [];\n        const skippedPlayersMap = new Map();\n        const queuedInstructions = [];\n        const queriedElements = new Map();\n        const allPreStyleElements = new Map();\n        const allPostStyleElements = new Map();\n        const disabledElementsSet = new Set();\n        this.disabledNodes.forEach(node => {\n            disabledElementsSet.add(node);\n            const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);\n            for (let i = 0; i < nodesThatAreDisabled.length; i++) {\n                disabledElementsSet.add(nodesThatAreDisabled[i]);\n            }\n        });\n        const bodyNode = this.bodyNode;\n        const allTriggerElements = Array.from(this.statesByElement.keys());\n        const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);\n        // this must occur before the instructions are built below such that\n        // the :enter queries match the elements (since the timeline queries\n        // are fired during instruction building).\n        const enterNodeMapIds = new Map();\n        let i = 0;\n        enterNodeMap.forEach((nodes, root) => {\n            const className = ENTER_CLASSNAME + i++;\n            enterNodeMapIds.set(root, className);\n            nodes.forEach(node => addClass(node, className));\n        });\n        const allLeaveNodes = [];\n        const mergedLeaveNodes = new Set();\n        const leaveNodesWithoutAnimations = new Set();\n        for (let i = 0; i < this.collectedLeaveElements.length; i++) {\n            const element = this.collectedLeaveElements[i];\n            const details = element[REMOVAL_FLAG];\n            if (details && details.setForRemoval) {\n                allLeaveNodes.push(element);\n                mergedLeaveNodes.add(element);\n                if (details.hasAnimation) {\n                    this.driver.query(element, STAR_SELECTOR, true).forEach(elm => mergedLeaveNodes.add(elm));\n                }\n                else {\n                    leaveNodesWithoutAnimations.add(element);\n                }\n            }\n        }\n        const leaveNodeMapIds = new Map();\n        const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));\n        leaveNodeMap.forEach((nodes, root) => {\n            const className = LEAVE_CLASSNAME + i++;\n            leaveNodeMapIds.set(root, className);\n            nodes.forEach(node => addClass(node, className));\n        });\n        cleanupFns.push(() => {\n            enterNodeMap.forEach((nodes, root) => {\n                const className = enterNodeMapIds.get(root);\n                nodes.forEach(node => removeClass(node, className));\n            });\n            leaveNodeMap.forEach((nodes, root) => {\n                const className = leaveNodeMapIds.get(root);\n                nodes.forEach(node => removeClass(node, className));\n            });\n            allLeaveNodes.forEach(element => {\n                this.processLeaveNode(element);\n            });\n        });\n        const allPlayers = [];\n        const erroneousTransitions = [];\n        for (let i = this._namespaceList.length - 1; i >= 0; i--) {\n            const ns = this._namespaceList[i];\n            ns.drainQueuedTransitions(microtaskId).forEach(entry => {\n                const player = entry.player;\n                const element = entry.element;\n                allPlayers.push(player);\n                if (this.collectedEnterElements.length) {\n                    const details = element[REMOVAL_FLAG];\n                    // move animations are currently not supported...\n                    if (details && details.setForMove) {\n                        player.destroy();\n                        return;\n                    }\n                }\n                const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);\n                const leaveClassName = leaveNodeMapIds.get(element);\n                const enterClassName = enterNodeMapIds.get(element);\n                const instruction = this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);\n                if (instruction.errors && instruction.errors.length) {\n                    erroneousTransitions.push(instruction);\n                    return;\n                }\n                // even though the element may not be apart of the DOM, it may\n                // still be added at a later point (due to the mechanics of content\n                // projection and/or dynamic component insertion) therefore it's\n                // important we still style the element.\n                if (nodeIsOrphaned) {\n                    player.onStart(() => eraseStyles(element, instruction.fromStyles));\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // if a unmatched transition is queued to go then it SHOULD NOT render\n                // an animation and cancel the previously running animations.\n                if (entry.isFallbackTransition) {\n                    player.onStart(() => eraseStyles(element, instruction.fromStyles));\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this means that if a parent animation uses this animation as a sub trigger\n                // then it will instruct the timeline builder to not add a player delay, but\n                // instead stretch the first keyframe gap up until the animation starts. The\n                // reason this is important is to prevent extra initialization styles from being\n                // required by the user in the animation.\n                instruction.timelines.forEach(tl => tl.stretchStartingKeyframe = true);\n                subTimelines.append(element, instruction.timelines);\n                const tuple = { instruction, player, element };\n                queuedInstructions.push(tuple);\n                instruction.queriedElements.forEach(element => getOrSetAsInMap(queriedElements, element, []).push(player));\n                instruction.preStyleProps.forEach((stringMap, element) => {\n                    const props = Object.keys(stringMap);\n                    if (props.length) {\n                        let setVal = allPreStyleElements.get(element);\n                        if (!setVal) {\n                            allPreStyleElements.set(element, setVal = new Set());\n                        }\n                        props.forEach(prop => setVal.add(prop));\n                    }\n                });\n                instruction.postStyleProps.forEach((stringMap, element) => {\n                    const props = Object.keys(stringMap);\n                    let setVal = allPostStyleElements.get(element);\n                    if (!setVal) {\n                        allPostStyleElements.set(element, setVal = new Set());\n                    }\n                    props.forEach(prop => setVal.add(prop));\n                });\n            });\n        }\n        if (erroneousTransitions.length) {\n            const errors = [];\n            erroneousTransitions.forEach(instruction => {\n                errors.push(`@${instruction.triggerName} has failed due to:\\n`);\n                instruction.errors.forEach(error => errors.push(`- ${error}\\n`));\n            });\n            allPlayers.forEach(player => player.destroy());\n            this.reportError(errors);\n        }\n        const allPreviousPlayersMap = new Map();\n        // this map works to tell which element in the DOM tree is contained by\n        // which animation. Further down below this map will get populated once\n        // the players are built and in doing so it can efficiently figure out\n        // if a sub player is skipped due to a parent player having priority.\n        const animationElementMap = new Map();\n        queuedInstructions.forEach(entry => {\n            const element = entry.element;\n            if (subTimelines.has(element)) {\n                animationElementMap.set(element, element);\n                this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);\n            }\n        });\n        skippedPlayers.forEach(player => {\n            const element = player.element;\n            const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);\n            previousPlayers.forEach(prevPlayer => {\n                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);\n                prevPlayer.destroy();\n            });\n        });\n        // this is a special case for nodes that will be removed (either by)\n        // having their own leave animations or by being queried in a container\n        // that will be removed once a parent animation is complete. The idea\n        // here is that * styles must be identical to ! styles because of\n        // backwards compatibility (* is also filled in by default in many places).\n        // Otherwise * styles will return an empty value or auto since the element\n        // that is being getComputedStyle'd will not be visible (since * = destination)\n        const replaceNodes = allLeaveNodes.filter(node => {\n            return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);\n        });\n        // POST STAGE: fill the * styles\n        const postStylesMap = new Map();\n        const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);\n        allLeaveQueriedNodes.forEach(node => {\n            if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {\n                replaceNodes.push(node);\n            }\n        });\n        // PRE STAGE: fill the ! styles\n        const preStylesMap = new Map();\n        enterNodeMap.forEach((nodes, root) => {\n            cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, ɵPRE_STYLE);\n        });\n        replaceNodes.forEach(node => {\n            const post = postStylesMap.get(node);\n            const pre = preStylesMap.get(node);\n            postStylesMap.set(node, Object.assign(Object.assign({}, post), pre));\n        });\n        const rootPlayers = [];\n        const subPlayers = [];\n        const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};\n        queuedInstructions.forEach(entry => {\n            const { element, player, instruction } = entry;\n            // this means that it was never consumed by a parent animation which\n            // means that it is independent and therefore should be set for animation\n            if (subTimelines.has(element)) {\n                if (disabledElementsSet.has(element)) {\n                    player.onDestroy(() => setStyles(element, instruction.toStyles));\n                    player.disabled = true;\n                    player.overrideTotalTime(instruction.totalTime);\n                    skippedPlayers.push(player);\n                    return;\n                }\n                // this will flow up the DOM and query the map to figure out\n                // if a parent animation has priority over it. In the situation\n                // that a parent is detected then it will cancel the loop. If\n                // nothing is detected, or it takes a few hops to find a parent,\n                // then it will fill in the missing nodes and signal them as having\n                // a detected parent (or a NO_PARENT value via a special constant).\n                let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;\n                if (animationElementMap.size > 1) {\n                    let elm = element;\n                    const parentsToAdd = [];\n                    while (elm = elm.parentNode) {\n                        const detectedParent = animationElementMap.get(elm);\n                        if (detectedParent) {\n                            parentWithAnimation = detectedParent;\n                            break;\n                        }\n                        parentsToAdd.push(elm);\n                    }\n                    parentsToAdd.forEach(parent => animationElementMap.set(parent, parentWithAnimation));\n                }\n                const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);\n                player.setRealPlayer(innerPlayer);\n                if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {\n                    rootPlayers.push(player);\n                }\n                else {\n                    const parentPlayers = this.playersByElement.get(parentWithAnimation);\n                    if (parentPlayers && parentPlayers.length) {\n                        player.parentPlayer = optimizeGroupPlayer(parentPlayers);\n                    }\n                    skippedPlayers.push(player);\n                }\n            }\n            else {\n                eraseStyles(element, instruction.fromStyles);\n                player.onDestroy(() => setStyles(element, instruction.toStyles));\n                // there still might be a ancestor player animating this\n                // element therefore we will still add it as a sub player\n                // even if its animation may be disabled\n                subPlayers.push(player);\n                if (disabledElementsSet.has(element)) {\n                    skippedPlayers.push(player);\n                }\n            }\n        });\n        // find all of the sub players' corresponding inner animation player\n        subPlayers.forEach(player => {\n            // even if any players are not found for a sub animation then it\n            // will still complete itself after the next tick since it's Noop\n            const playersForElement = skippedPlayersMap.get(player.element);\n            if (playersForElement && playersForElement.length) {\n                const innerPlayer = optimizeGroupPlayer(playersForElement);\n                player.setRealPlayer(innerPlayer);\n            }\n        });\n        // the reason why we don't actually play the animation is\n        // because all that a skipped player is designed to do is to\n        // fire the start/done transition callback events\n        skippedPlayers.forEach(player => {\n            if (player.parentPlayer) {\n                player.syncPlayerEvents(player.parentPlayer);\n            }\n            else {\n                player.destroy();\n            }\n        });\n        // run through all of the queued removals and see if they\n        // were picked up by a query. If not then perform the removal\n        // operation right away unless a parent animation is ongoing.\n        for (let i = 0; i < allLeaveNodes.length; i++) {\n            const element = allLeaveNodes[i];\n            const details = element[REMOVAL_FLAG];\n            removeClass(element, LEAVE_CLASSNAME);\n            // this means the element has a removal animation that is being\n            // taken care of and therefore the inner elements will hang around\n            // until that animation is over (or the parent queried animation)\n            if (details && details.hasAnimation)\n                continue;\n            let players = [];\n            // if this element is queried or if it contains queried children\n            // then we want for the element not to be removed from the page\n            // until the queried animations have finished\n            if (queriedElements.size) {\n                let queriedPlayerResults = queriedElements.get(element);\n                if (queriedPlayerResults && queriedPlayerResults.length) {\n                    players.push(...queriedPlayerResults);\n                }\n                let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);\n                for (let j = 0; j < queriedInnerElements.length; j++) {\n                    let queriedPlayers = queriedElements.get(queriedInnerElements[j]);\n                    if (queriedPlayers && queriedPlayers.length) {\n                        players.push(...queriedPlayers);\n                    }\n                }\n            }\n            const activePlayers = players.filter(p => !p.destroyed);\n            if (activePlayers.length) {\n                removeNodesAfterAnimationDone(this, element, activePlayers);\n            }\n            else {\n                this.processLeaveNode(element);\n            }\n        }\n        // this is required so the cleanup method doesn't remove them\n        allLeaveNodes.length = 0;\n        rootPlayers.forEach(player => {\n            this.players.push(player);\n            player.onDone(() => {\n                player.destroy();\n                const index = this.players.indexOf(player);\n                this.players.splice(index, 1);\n            });\n            player.play();\n        });\n        return rootPlayers;\n    }\n    elementContainsData(namespaceId, element) {\n        let containsData = false;\n        const details = element[REMOVAL_FLAG];\n        if (details && details.setForRemoval)\n            containsData = true;\n        if (this.playersByElement.has(element))\n            containsData = true;\n        if (this.playersByQueriedElement.has(element))\n            containsData = true;\n        if (this.statesByElement.has(element))\n            containsData = true;\n        return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;\n    }\n    afterFlush(callback) {\n        this._flushFns.push(callback);\n    }\n    afterFlushAnimationsDone(callback) {\n        this._whenQuietFns.push(callback);\n    }\n    _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {\n        let players = [];\n        if (isQueriedElement) {\n            const queriedElementPlayers = this.playersByQueriedElement.get(element);\n            if (queriedElementPlayers) {\n                players = queriedElementPlayers;\n            }\n        }\n        else {\n            const elementPlayers = this.playersByElement.get(element);\n            if (elementPlayers) {\n                const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;\n                elementPlayers.forEach(player => {\n                    if (player.queued)\n                        return;\n                    if (!isRemovalAnimation && player.triggerName != triggerName)\n                        return;\n                    players.push(player);\n                });\n            }\n        }\n        if (namespaceId || triggerName) {\n            players = players.filter(player => {\n                if (namespaceId && namespaceId != player.namespaceId)\n                    return false;\n                if (triggerName && triggerName != player.triggerName)\n                    return false;\n                return true;\n            });\n        }\n        return players;\n    }\n    _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {\n        const triggerName = instruction.triggerName;\n        const rootElement = instruction.element;\n        // when a removal animation occurs, ALL previous players are collected\n        // and destroyed (even if they are outside of the current namespace)\n        const targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;\n        const targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;\n        for (const timelineInstruction of instruction.timelines) {\n            const element = timelineInstruction.element;\n            const isQueriedElement = element !== rootElement;\n            const players = getOrSetAsInMap(allPreviousPlayersMap, element, []);\n            const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);\n            previousPlayers.forEach(player => {\n                const realPlayer = player.getRealPlayer();\n                if (realPlayer.beforeDestroy) {\n                    realPlayer.beforeDestroy();\n                }\n                player.destroy();\n                players.push(player);\n            });\n        }\n        // this needs to be done so that the PRE/POST styles can be\n        // computed properly without interfering with the previous animation\n        eraseStyles(rootElement, instruction.fromStyles);\n    }\n    _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {\n        const triggerName = instruction.triggerName;\n        const rootElement = instruction.element;\n        // we first run this so that the previous animation player\n        // data can be passed into the successive animation players\n        const allQueriedPlayers = [];\n        const allConsumedElements = new Set();\n        const allSubElements = new Set();\n        const allNewPlayers = instruction.timelines.map(timelineInstruction => {\n            const element = timelineInstruction.element;\n            allConsumedElements.add(element);\n            // FIXME (matsko): make sure to-be-removed animations are removed properly\n            const details = element[REMOVAL_FLAG];\n            if (details && details.removedBeforeQueried)\n                return new NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);\n            const isQueriedElement = element !== rootElement;\n            const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)\n                .map(p => p.getRealPlayer()))\n                .filter(p => {\n                // the `element` is not apart of the AnimationPlayer definition, but\n                // Mock/WebAnimations\n                // use the element within their implementation. This will be added in Angular5 to\n                // AnimationPlayer\n                const pp = p;\n                return pp.element ? pp.element === element : false;\n            });\n            const preStyles = preStylesMap.get(element);\n            const postStyles = postStylesMap.get(element);\n            const keyframes = normalizeKeyframes(this.driver, this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);\n            const player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);\n            // this means that this particular player belongs to a sub trigger. It is\n            // important that we match this player up with the corresponding (@trigger.listener)\n            if (timelineInstruction.subTimeline && skippedPlayersMap) {\n                allSubElements.add(element);\n            }\n            if (isQueriedElement) {\n                const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);\n                wrappedPlayer.setRealPlayer(player);\n                allQueriedPlayers.push(wrappedPlayer);\n            }\n            return player;\n        });\n        allQueriedPlayers.forEach(player => {\n            getOrSetAsInMap(this.playersByQueriedElement, player.element, []).push(player);\n            player.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player));\n        });\n        allConsumedElements.forEach(element => addClass(element, NG_ANIMATING_CLASSNAME));\n        const player = optimizeGroupPlayer(allNewPlayers);\n        player.onDestroy(() => {\n            allConsumedElements.forEach(element => removeClass(element, NG_ANIMATING_CLASSNAME));\n            setStyles(rootElement, instruction.toStyles);\n        });\n        // this basically makes all of the callbacks for sub element animations\n        // be dependent on the upper players for when they finish\n        allSubElements.forEach(element => {\n            getOrSetAsInMap(skippedPlayersMap, element, []).push(player);\n        });\n        return player;\n    }\n    _buildPlayer(instruction, keyframes, previousPlayers) {\n        if (keyframes.length > 0) {\n            return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);\n        }\n        // special case for when an empty transition|definition is provided\n        // ... there is no point in rendering an empty animation\n        return new NoopAnimationPlayer(instruction.duration, instruction.delay);\n    }\n}\nclass TransitionAnimationPlayer {\n    constructor(namespaceId, triggerName, element) {\n        this.namespaceId = namespaceId;\n        this.triggerName = triggerName;\n        this.element = element;\n        this._player = new NoopAnimationPlayer();\n        this._containsRealPlayer = false;\n        this._queuedCallbacks = {};\n        this.destroyed = false;\n        this.markedForDestroy = false;\n        this.disabled = false;\n        this.queued = true;\n        this.totalTime = 0;\n    }\n    setRealPlayer(player) {\n        if (this._containsRealPlayer)\n            return;\n        this._player = player;\n        Object.keys(this._queuedCallbacks).forEach(phase => {\n            this._queuedCallbacks[phase].forEach(callback => listenOnPlayer(player, phase, undefined, callback));\n        });\n        this._queuedCallbacks = {};\n        this._containsRealPlayer = true;\n        this.overrideTotalTime(player.totalTime);\n        this.queued = false;\n    }\n    getRealPlayer() {\n        return this._player;\n    }\n    overrideTotalTime(totalTime) {\n        this.totalTime = totalTime;\n    }\n    syncPlayerEvents(player) {\n        const p = this._player;\n        if (p.triggerCallback) {\n            player.onStart(() => p.triggerCallback('start'));\n        }\n        player.onDone(() => this.finish());\n        player.onDestroy(() => this.destroy());\n    }\n    _queueEvent(name, callback) {\n        getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);\n    }\n    onDone(fn) {\n        if (this.queued) {\n            this._queueEvent('done', fn);\n        }\n        this._player.onDone(fn);\n    }\n    onStart(fn) {\n        if (this.queued) {\n            this._queueEvent('start', fn);\n        }\n        this._player.onStart(fn);\n    }\n    onDestroy(fn) {\n        if (this.queued) {\n            this._queueEvent('destroy', fn);\n        }\n        this._player.onDestroy(fn);\n    }\n    init() {\n        this._player.init();\n    }\n    hasStarted() {\n        return this.queued ? false : this._player.hasStarted();\n    }\n    play() {\n        !this.queued && this._player.play();\n    }\n    pause() {\n        !this.queued && this._player.pause();\n    }\n    restart() {\n        !this.queued && this._player.restart();\n    }\n    finish() {\n        this._player.finish();\n    }\n    destroy() {\n        this.destroyed = true;\n        this._player.destroy();\n    }\n    reset() {\n        !this.queued && this._player.reset();\n    }\n    setPosition(p) {\n        if (!this.queued) {\n            this._player.setPosition(p);\n        }\n    }\n    getPosition() {\n        return this.queued ? 0 : this._player.getPosition();\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const p = this._player;\n        if (p.triggerCallback) {\n            p.triggerCallback(phaseName);\n        }\n    }\n}\nfunction deleteOrUnsetInMap(map, key, value) {\n    let currentValues;\n    if (map instanceof Map) {\n        currentValues = map.get(key);\n        if (currentValues) {\n            if (currentValues.length) {\n                const index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                map.delete(key);\n            }\n        }\n    }\n    else {\n        currentValues = map[key];\n        if (currentValues) {\n            if (currentValues.length) {\n                const index = currentValues.indexOf(value);\n                currentValues.splice(index, 1);\n            }\n            if (currentValues.length == 0) {\n                delete map[key];\n            }\n        }\n    }\n    return currentValues;\n}\nfunction normalizeTriggerValue(value) {\n    // we use `!= null` here because it's the most simple\n    // way to test against a \"falsy\" value without mixing\n    // in empty strings or a zero value. DO NOT OPTIMIZE.\n    return value != null ? value : null;\n}\nfunction isElementNode(node) {\n    return node && node['nodeType'] === 1;\n}\nfunction isTriggerEventValid(eventName) {\n    return eventName == 'start' || eventName == 'done';\n}\nfunction cloakElement(element, value) {\n    const oldValue = element.style.display;\n    element.style.display = value != null ? value : 'none';\n    return oldValue;\n}\nfunction cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {\n    const cloakVals = [];\n    elements.forEach(element => cloakVals.push(cloakElement(element)));\n    const failedElements = [];\n    elementPropsMap.forEach((props, element) => {\n        const styles = {};\n        props.forEach(prop => {\n            const value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);\n            // there is no easy way to detect this because a sub element could be removed\n            // by a parent animation element being detached.\n            if (!value || value.length == 0) {\n                element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;\n                failedElements.push(element);\n            }\n        });\n        valuesMap.set(element, styles);\n    });\n    // we use a index variable here since Set.forEach(a, i) does not return\n    // an index value for the closure (but instead just the value)\n    let i = 0;\n    elements.forEach(element => cloakElement(element, cloakVals[i++]));\n    return failedElements;\n}\n/*\nSince the Angular renderer code will return a collection of inserted\nnodes in all areas of a DOM tree, it's up to this algorithm to figure\nout which nodes are roots for each animation @trigger.\n\nBy placing each inserted node into a Set and traversing upwards, it\nis possible to find the @trigger elements and well any direct *star\ninsertion nodes, if a @trigger root is found then the enter element\nis placed into the Map[@trigger] spot.\n */\nfunction buildRootMap(roots, nodes) {\n    const rootMap = new Map();\n    roots.forEach(root => rootMap.set(root, []));\n    if (nodes.length == 0)\n        return rootMap;\n    const NULL_NODE = 1;\n    const nodeSet = new Set(nodes);\n    const localRootMap = new Map();\n    function getRoot(node) {\n        if (!node)\n            return NULL_NODE;\n        let root = localRootMap.get(node);\n        if (root)\n            return root;\n        const parent = node.parentNode;\n        if (rootMap.has(parent)) { // ngIf inside @trigger\n            root = parent;\n        }\n        else if (nodeSet.has(parent)) { // ngIf inside ngIf\n            root = NULL_NODE;\n        }\n        else { // recurse upwards\n            root = getRoot(parent);\n        }\n        localRootMap.set(node, root);\n        return root;\n    }\n    nodes.forEach(node => {\n        const root = getRoot(node);\n        if (root !== NULL_NODE) {\n            rootMap.get(root).push(node);\n        }\n    });\n    return rootMap;\n}\nconst CLASSES_CACHE_KEY = '$$classes';\nfunction containsClass(element, className) {\n    if (element.classList) {\n        return element.classList.contains(className);\n    }\n    else {\n        const classes = element[CLASSES_CACHE_KEY];\n        return classes && classes[className];\n    }\n}\nfunction addClass(element, className) {\n    if (element.classList) {\n        element.classList.add(className);\n    }\n    else {\n        let classes = element[CLASSES_CACHE_KEY];\n        if (!classes) {\n            classes = element[CLASSES_CACHE_KEY] = {};\n        }\n        classes[className] = true;\n    }\n}\nfunction removeClass(element, className) {\n    if (element.classList) {\n        element.classList.remove(className);\n    }\n    else {\n        let classes = element[CLASSES_CACHE_KEY];\n        if (classes) {\n            delete classes[className];\n        }\n    }\n}\nfunction removeNodesAfterAnimationDone(engine, element, players) {\n    optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));\n}\nfunction flattenGroupPlayers(players) {\n    const finalPlayers = [];\n    _flattenGroupPlayersRecur(players, finalPlayers);\n    return finalPlayers;\n}\nfunction _flattenGroupPlayersRecur(players, finalPlayers) {\n    for (let i = 0; i < players.length; i++) {\n        const player = players[i];\n        if (player instanceof ɵAnimationGroupPlayer) {\n            _flattenGroupPlayersRecur(player.players, finalPlayers);\n        }\n        else {\n            finalPlayers.push(player);\n        }\n    }\n}\nfunction objEquals(a, b) {\n    const k1 = Object.keys(a);\n    const k2 = Object.keys(b);\n    if (k1.length != k2.length)\n        return false;\n    for (let i = 0; i < k1.length; i++) {\n        const prop = k1[i];\n        if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])\n            return false;\n    }\n    return true;\n}\nfunction replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {\n    const postEntry = allPostStyleElements.get(element);\n    if (!postEntry)\n        return false;\n    let preEntry = allPreStyleElements.get(element);\n    if (preEntry) {\n        postEntry.forEach(data => preEntry.add(data));\n    }\n    else {\n        allPreStyleElements.set(element, postEntry);\n    }\n    allPostStyleElements.delete(element);\n    return true;\n}\n\nclass AnimationEngine {\n    constructor(bodyNode, _driver, normalizer) {\n        this.bodyNode = bodyNode;\n        this._driver = _driver;\n        this._triggerCache = {};\n        // this method is designed to be overridden by the code that uses this engine\n        this.onRemovalComplete = (element, context) => { };\n        this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);\n        this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);\n        this._transitionEngine.onRemovalComplete = (element, context) => this.onRemovalComplete(element, context);\n    }\n    registerTrigger(componentId, namespaceId, hostElement, name, metadata) {\n        const cacheKey = componentId + '-' + name;\n        let trigger = this._triggerCache[cacheKey];\n        if (!trigger) {\n            const errors = [];\n            const ast = buildAnimationAst(this._driver, metadata, errors);\n            if (errors.length) {\n                throw new Error(`The animation trigger \"${name}\" has failed to build due to the following errors:\\n - ${errors.join('\\n - ')}`);\n            }\n            trigger = buildTrigger(name, ast);\n            this._triggerCache[cacheKey] = trigger;\n        }\n        this._transitionEngine.registerTrigger(namespaceId, name, trigger);\n    }\n    register(namespaceId, hostElement) {\n        this._transitionEngine.register(namespaceId, hostElement);\n    }\n    destroy(namespaceId, context) {\n        this._transitionEngine.destroy(namespaceId, context);\n    }\n    onInsert(namespaceId, element, parent, insertBefore) {\n        this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);\n    }\n    onRemove(namespaceId, element, context, isHostElement) {\n        this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);\n    }\n    disableAnimations(element, disable) {\n        this._transitionEngine.markElementAsDisabled(element, disable);\n    }\n    process(namespaceId, element, property, value) {\n        if (property.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(property);\n            const args = value;\n            this._timelineEngine.command(id, element, action, args);\n        }\n        else {\n            this._transitionEngine.trigger(namespaceId, element, property, value);\n        }\n    }\n    listen(namespaceId, element, eventName, eventPhase, callback) {\n        // @@listen\n        if (eventName.charAt(0) == '@') {\n            const [id, action] = parseTimelineCommand(eventName);\n            return this._timelineEngine.listen(id, element, action, callback);\n        }\n        return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);\n    }\n    flush(microtaskId = -1) {\n        this._transitionEngine.flush(microtaskId);\n    }\n    get players() {\n        return this._transitionEngine.players\n            .concat(this._timelineEngine.players);\n    }\n    whenRenderingDone() {\n        return this._transitionEngine.whenRenderingDone();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are\n * detected.\n *\n * In CSS there exist properties that cannot be animated within a keyframe animation\n * (whether it be via CSS keyframes or web-animations) and the animation implementation\n * will ignore them. This function is designed to detect those special cased styles and\n * return a container that will be executed at the start and end of the animation.\n *\n * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`\n */\nfunction packageNonAnimatableStyles(element, styles) {\n    let startStyles = null;\n    let endStyles = null;\n    if (Array.isArray(styles) && styles.length) {\n        startStyles = filterNonAnimatableStyles(styles[0]);\n        if (styles.length > 1) {\n            endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);\n        }\n    }\n    else if (styles) {\n        startStyles = filterNonAnimatableStyles(styles);\n    }\n    return (startStyles || endStyles) ? new SpecialCasedStyles(element, startStyles, endStyles) :\n        null;\n}\n/**\n * Designed to be executed during a keyframe-based animation to apply any special-cased styles.\n *\n * When started (when the `start()` method is run) then the provided `startStyles`\n * will be applied. When finished (when the `finish()` method is called) the\n * `endStyles` will be applied as well any any starting styles. Finally when\n * `destroy()` is called then all styles will be removed.\n */\nclass SpecialCasedStyles {\n    constructor(_element, _startStyles, _endStyles) {\n        this._element = _element;\n        this._startStyles = _startStyles;\n        this._endStyles = _endStyles;\n        this._state = 0 /* Pending */;\n        let initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);\n        if (!initialStyles) {\n            SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});\n        }\n        this._initialStyles = initialStyles;\n    }\n    start() {\n        if (this._state < 1 /* Started */) {\n            if (this._startStyles) {\n                setStyles(this._element, this._startStyles, this._initialStyles);\n            }\n            this._state = 1 /* Started */;\n        }\n    }\n    finish() {\n        this.start();\n        if (this._state < 2 /* Finished */) {\n            setStyles(this._element, this._initialStyles);\n            if (this._endStyles) {\n                setStyles(this._element, this._endStyles);\n                this._endStyles = null;\n            }\n            this._state = 1 /* Started */;\n        }\n    }\n    destroy() {\n        this.finish();\n        if (this._state < 3 /* Destroyed */) {\n            SpecialCasedStyles.initialStylesByElement.delete(this._element);\n            if (this._startStyles) {\n                eraseStyles(this._element, this._startStyles);\n                this._endStyles = null;\n            }\n            if (this._endStyles) {\n                eraseStyles(this._element, this._endStyles);\n                this._endStyles = null;\n            }\n            setStyles(this._element, this._initialStyles);\n            this._state = 3 /* Destroyed */;\n        }\n    }\n}\nSpecialCasedStyles.initialStylesByElement = new WeakMap();\nfunction filterNonAnimatableStyles(styles) {\n    let result = null;\n    const props = Object.keys(styles);\n    for (let i = 0; i < props.length; i++) {\n        const prop = props[i];\n        if (isNonAnimatableStyle(prop)) {\n            result = result || {};\n            result[prop] = styles[prop];\n        }\n    }\n    return result;\n}\nfunction isNonAnimatableStyle(prop) {\n    return prop === 'display' || prop === 'position';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nconst ANIMATION_PROP = 'animation';\nconst ANIMATIONEND_EVENT = 'animationend';\nconst ONE_SECOND$1 = 1000;\nclass ElementAnimationStyleHandler {\n    constructor(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {\n        this._element = _element;\n        this._name = _name;\n        this._duration = _duration;\n        this._delay = _delay;\n        this._easing = _easing;\n        this._fillMode = _fillMode;\n        this._onDoneFn = _onDoneFn;\n        this._finished = false;\n        this._destroyed = false;\n        this._startTime = 0;\n        this._position = 0;\n        this._eventFn = (e) => this._handleCallback(e);\n    }\n    apply() {\n        applyKeyframeAnimation(this._element, `${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${this._name}`);\n        addRemoveAnimationEvent(this._element, this._eventFn, false);\n        this._startTime = Date.now();\n    }\n    pause() {\n        playPauseAnimation(this._element, this._name, 'paused');\n    }\n    resume() {\n        playPauseAnimation(this._element, this._name, 'running');\n    }\n    setPosition(position) {\n        const index = findIndexForAnimation(this._element, this._name);\n        this._position = position * this._duration;\n        setAnimationStyle(this._element, 'Delay', `-${this._position}ms`, index);\n    }\n    getPosition() {\n        return this._position;\n    }\n    _handleCallback(event) {\n        const timestamp = event._ngTestManualTimestamp || Date.now();\n        const elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;\n        if (event.animationName == this._name &&\n            Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {\n            this.finish();\n        }\n    }\n    finish() {\n        if (this._finished)\n            return;\n        this._finished = true;\n        this._onDoneFn();\n        addRemoveAnimationEvent(this._element, this._eventFn, true);\n    }\n    destroy() {\n        if (this._destroyed)\n            return;\n        this._destroyed = true;\n        this.finish();\n        removeKeyframeAnimation(this._element, this._name);\n    }\n}\nfunction playPauseAnimation(element, name, status) {\n    const index = findIndexForAnimation(element, name);\n    setAnimationStyle(element, 'PlayState', status, index);\n}\nfunction applyKeyframeAnimation(element, value) {\n    const anim = getAnimationStyle(element, '').trim();\n    let index = 0;\n    if (anim.length) {\n        index = countChars(anim, ',') + 1;\n        value = `${anim}, ${value}`;\n    }\n    setAnimationStyle(element, '', value);\n    return index;\n}\nfunction removeKeyframeAnimation(element, name) {\n    const anim = getAnimationStyle(element, '');\n    const tokens = anim.split(',');\n    const index = findMatchingTokenIndex(tokens, name);\n    if (index >= 0) {\n        tokens.splice(index, 1);\n        const newValue = tokens.join(',');\n        setAnimationStyle(element, '', newValue);\n    }\n}\nfunction findIndexForAnimation(element, value) {\n    const anim = getAnimationStyle(element, '');\n    if (anim.indexOf(',') > 0) {\n        const tokens = anim.split(',');\n        return findMatchingTokenIndex(tokens, value);\n    }\n    return findMatchingTokenIndex([anim], value);\n}\nfunction findMatchingTokenIndex(tokens, searchToken) {\n    for (let i = 0; i < tokens.length; i++) {\n        if (tokens[i].indexOf(searchToken) >= 0) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction addRemoveAnimationEvent(element, fn, doRemove) {\n    doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) :\n        element.addEventListener(ANIMATIONEND_EVENT, fn);\n}\nfunction setAnimationStyle(element, name, value, index) {\n    const prop = ANIMATION_PROP + name;\n    if (index != null) {\n        const oldValue = element.style[prop];\n        if (oldValue.length) {\n            const tokens = oldValue.split(',');\n            tokens[index] = value;\n            value = tokens.join(',');\n        }\n    }\n    element.style[prop] = value;\n}\nfunction getAnimationStyle(element, name) {\n    return element.style[ANIMATION_PROP + name];\n}\nfunction countChars(value, char) {\n    let count = 0;\n    for (let i = 0; i < value.length; i++) {\n        const c = value.charAt(i);\n        if (c === char)\n            count++;\n    }\n    return count;\n}\n\nconst DEFAULT_FILL_MODE = 'forwards';\nconst DEFAULT_EASING = 'linear';\nclass CssKeyframesPlayer {\n    constructor(element, keyframes, animationName, _duration, _delay, easing, _finalStyles, _specialStyles) {\n        this.element = element;\n        this.keyframes = keyframes;\n        this.animationName = animationName;\n        this._duration = _duration;\n        this._delay = _delay;\n        this._finalStyles = _finalStyles;\n        this._specialStyles = _specialStyles;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this.currentSnapshot = {};\n        this._state = 0;\n        this.easing = easing || DEFAULT_EASING;\n        this.totalTime = _duration + _delay;\n        this._buildStyler();\n    }\n    onStart(fn) {\n        this._onStartFns.push(fn);\n    }\n    onDone(fn) {\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    destroy() {\n        this.init();\n        if (this._state >= 4 /* DESTROYED */)\n            return;\n        this._state = 4 /* DESTROYED */;\n        this._styler.destroy();\n        this._flushStartFns();\n        this._flushDoneFns();\n        if (this._specialStyles) {\n            this._specialStyles.destroy();\n        }\n        this._onDestroyFns.forEach(fn => fn());\n        this._onDestroyFns = [];\n    }\n    _flushDoneFns() {\n        this._onDoneFns.forEach(fn => fn());\n        this._onDoneFns = [];\n    }\n    _flushStartFns() {\n        this._onStartFns.forEach(fn => fn());\n        this._onStartFns = [];\n    }\n    finish() {\n        this.init();\n        if (this._state >= 3 /* FINISHED */)\n            return;\n        this._state = 3 /* FINISHED */;\n        this._styler.finish();\n        this._flushStartFns();\n        if (this._specialStyles) {\n            this._specialStyles.finish();\n        }\n        this._flushDoneFns();\n    }\n    setPosition(value) {\n        this._styler.setPosition(value);\n    }\n    getPosition() {\n        return this._styler.getPosition();\n    }\n    hasStarted() {\n        return this._state >= 2 /* STARTED */;\n    }\n    init() {\n        if (this._state >= 1 /* INITIALIZED */)\n            return;\n        this._state = 1 /* INITIALIZED */;\n        const elm = this.element;\n        this._styler.apply();\n        if (this._delay) {\n            this._styler.pause();\n        }\n    }\n    play() {\n        this.init();\n        if (!this.hasStarted()) {\n            this._flushStartFns();\n            this._state = 2 /* STARTED */;\n            if (this._specialStyles) {\n                this._specialStyles.start();\n            }\n        }\n        this._styler.resume();\n    }\n    pause() {\n        this.init();\n        this._styler.pause();\n    }\n    restart() {\n        this.reset();\n        this.play();\n    }\n    reset() {\n        this._styler.destroy();\n        this._buildStyler();\n        this._styler.apply();\n    }\n    _buildStyler() {\n        this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, () => this.finish());\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n    beforeDestroy() {\n        this.init();\n        const styles = {};\n        if (this.hasStarted()) {\n            const finished = this._state >= 3 /* FINISHED */;\n            Object.keys(this._finalStyles).forEach(prop => {\n                if (prop != 'offset') {\n                    styles[prop] = finished ? this._finalStyles[prop] : computeStyle(this.element, prop);\n                }\n            });\n        }\n        this.currentSnapshot = styles;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DirectStylePlayer extends NoopAnimationPlayer {\n    constructor(element, styles) {\n        super();\n        this.element = element;\n        this._startingStyles = {};\n        this.__initialized = false;\n        this._styles = hypenatePropsObject(styles);\n    }\n    init() {\n        if (this.__initialized || !this._startingStyles)\n            return;\n        this.__initialized = true;\n        Object.keys(this._styles).forEach(prop => {\n            this._startingStyles[prop] = this.element.style[prop];\n        });\n        super.init();\n    }\n    play() {\n        if (!this._startingStyles)\n            return;\n        this.init();\n        Object.keys(this._styles)\n            .forEach(prop => this.element.style.setProperty(prop, this._styles[prop]));\n        super.play();\n    }\n    destroy() {\n        if (!this._startingStyles)\n            return;\n        Object.keys(this._startingStyles).forEach(prop => {\n            const value = this._startingStyles[prop];\n            if (value) {\n                this.element.style.setProperty(prop, value);\n            }\n            else {\n                this.element.style.removeProperty(prop);\n            }\n        });\n        this._startingStyles = null;\n        super.destroy();\n    }\n}\n\nconst KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';\nconst TAB_SPACE = ' ';\nclass CssKeyframesDriver {\n    constructor() {\n        this._count = 0;\n        this._head = document.querySelector('head');\n        this._warningIssued = false;\n    }\n    validateStyleProperty(prop) {\n        return validateStyleProperty(prop);\n    }\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    containsElement(elm1, elm2) {\n        return containsElement(elm1, elm2);\n    }\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    computeStyle(element, prop, defaultValue) {\n        return window.getComputedStyle(element)[prop];\n    }\n    buildKeyframeElement(element, name, keyframes) {\n        keyframes = keyframes.map(kf => hypenatePropsObject(kf));\n        let keyframeStr = `@keyframes ${name} {\\n`;\n        let tab = '';\n        keyframes.forEach(kf => {\n            tab = TAB_SPACE;\n            const offset = parseFloat(kf['offset']);\n            keyframeStr += `${tab}${offset * 100}% {\\n`;\n            tab += TAB_SPACE;\n            Object.keys(kf).forEach(prop => {\n                const value = kf[prop];\n                switch (prop) {\n                    case 'offset':\n                        return;\n                    case 'easing':\n                        if (value) {\n                            keyframeStr += `${tab}animation-timing-function: ${value};\\n`;\n                        }\n                        return;\n                    default:\n                        keyframeStr += `${tab}${prop}: ${value};\\n`;\n                        return;\n                }\n            });\n            keyframeStr += `${tab}}\\n`;\n        });\n        keyframeStr += `}\\n`;\n        const kfElm = document.createElement('style');\n        kfElm.innerHTML = keyframeStr;\n        return kfElm;\n    }\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        if (scrubberAccessRequested) {\n            this._notifyFaultyScrubber();\n        }\n        const previousCssKeyframePlayers = previousPlayers.filter(player => player instanceof CssKeyframesPlayer);\n        const previousStyles = {};\n        if (allowPreviousPlayerStylesMerge(duration, delay)) {\n            previousCssKeyframePlayers.forEach(player => {\n                let styles = player.currentSnapshot;\n                Object.keys(styles).forEach(prop => previousStyles[prop] = styles[prop]);\n            });\n        }\n        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n        const finalStyles = flattenKeyframesIntoStyles(keyframes);\n        // if there is no animation then there is no point in applying\n        // styles and waiting for an event to get fired. This causes lag.\n        // It's better to just directly apply the styles to the element\n        // via the direct styling animation player.\n        if (duration == 0) {\n            return new DirectStylePlayer(element, finalStyles);\n        }\n        const animationName = `${KEYFRAMES_NAME_PREFIX}${this._count++}`;\n        const kfElm = this.buildKeyframeElement(element, animationName, keyframes);\n        document.querySelector('head').appendChild(kfElm);\n        const specialStyles = packageNonAnimatableStyles(element, keyframes);\n        const player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);\n        player.onDestroy(() => removeElement(kfElm));\n        return player;\n    }\n    _notifyFaultyScrubber() {\n        if (!this._warningIssued) {\n            console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\\n', '  visit http://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');\n            this._warningIssued = true;\n        }\n    }\n}\nfunction flattenKeyframesIntoStyles(keyframes) {\n    let flatKeyframes = {};\n    if (keyframes) {\n        const kfs = Array.isArray(keyframes) ? keyframes : [keyframes];\n        kfs.forEach(kf => {\n            Object.keys(kf).forEach(prop => {\n                if (prop == 'offset' || prop == 'easing')\n                    return;\n                flatKeyframes[prop] = kf[prop];\n            });\n        });\n    }\n    return flatKeyframes;\n}\nfunction removeElement(node) {\n    node.parentNode.removeChild(node);\n}\n\nclass WebAnimationsPlayer {\n    constructor(element, keyframes, options, _specialStyles) {\n        this.element = element;\n        this.keyframes = keyframes;\n        this.options = options;\n        this._specialStyles = _specialStyles;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._initialized = false;\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this.time = 0;\n        this.parentPlayer = null;\n        this.currentSnapshot = {};\n        this._duration = options['duration'];\n        this._delay = options['delay'] || 0;\n        this.time = this._duration + this._delay;\n    }\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    init() {\n        this._buildPlayer();\n        this._preparePlayerBeforeStart();\n    }\n    _buildPlayer() {\n        if (this._initialized)\n            return;\n        this._initialized = true;\n        const keyframes = this.keyframes;\n        this.domPlayer =\n            this._triggerWebAnimation(this.element, keyframes, this.options);\n        this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};\n        this.domPlayer.addEventListener('finish', () => this._onFinish());\n    }\n    _preparePlayerBeforeStart() {\n        // this is required so that the player doesn't start to animate right away\n        if (this._delay) {\n            this._resetDomPlayerState();\n        }\n        else {\n            this.domPlayer.pause();\n        }\n    }\n    /** @internal */\n    _triggerWebAnimation(element, keyframes, options) {\n        // jscompiler doesn't seem to know animate is a native property because it's not fully\n        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]\n        return element['animate'](keyframes, options);\n    }\n    onStart(fn) {\n        this._onStartFns.push(fn);\n    }\n    onDone(fn) {\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    play() {\n        this._buildPlayer();\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(fn => fn());\n            this._onStartFns = [];\n            this._started = true;\n            if (this._specialStyles) {\n                this._specialStyles.start();\n            }\n        }\n        this.domPlayer.play();\n    }\n    pause() {\n        this.init();\n        this.domPlayer.pause();\n    }\n    finish() {\n        this.init();\n        if (this._specialStyles) {\n            this._specialStyles.finish();\n        }\n        this._onFinish();\n        this.domPlayer.finish();\n    }\n    reset() {\n        this._resetDomPlayerState();\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    _resetDomPlayerState() {\n        if (this.domPlayer) {\n            this.domPlayer.cancel();\n        }\n    }\n    restart() {\n        this.reset();\n        this.play();\n    }\n    hasStarted() {\n        return this._started;\n    }\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._resetDomPlayerState();\n            this._onFinish();\n            if (this._specialStyles) {\n                this._specialStyles.destroy();\n            }\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    setPosition(p) {\n        this.domPlayer.currentTime = p * this.time;\n    }\n    getPosition() {\n        return this.domPlayer.currentTime / this.time;\n    }\n    get totalTime() {\n        return this._delay + this._duration;\n    }\n    beforeDestroy() {\n        const styles = {};\n        if (this.hasStarted()) {\n            Object.keys(this._finalKeyframe).forEach(prop => {\n                if (prop != 'offset') {\n                    styles[prop] =\n                        this._finished ? this._finalKeyframe[prop] : computeStyle(this.element, prop);\n                }\n            });\n        }\n        this.currentSnapshot = styles;\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\nclass WebAnimationsDriver {\n    constructor() {\n        this._isNativeImpl = /\\{\\s*\\[native\\s+code\\]\\s*\\}/.test(getElementAnimateFn().toString());\n        this._cssKeyframesDriver = new CssKeyframesDriver();\n    }\n    validateStyleProperty(prop) {\n        return validateStyleProperty(prop);\n    }\n    matchesElement(element, selector) {\n        return matchesElement(element, selector);\n    }\n    containsElement(elm1, elm2) {\n        return containsElement(elm1, elm2);\n    }\n    query(element, selector, multi) {\n        return invokeQuery(element, selector, multi);\n    }\n    computeStyle(element, prop, defaultValue) {\n        return window.getComputedStyle(element)[prop];\n    }\n    overrideWebAnimationsSupport(supported) {\n        this._isNativeImpl = supported;\n    }\n    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {\n        const useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;\n        if (useKeyframes) {\n            return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);\n        }\n        const fill = delay == 0 ? 'both' : 'forwards';\n        const playerOptions = { duration, delay, fill };\n        // we check for this to avoid having a null|undefined value be present\n        // for the easing (which results in an error for certain browsers #9752)\n        if (easing) {\n            playerOptions['easing'] = easing;\n        }\n        const previousStyles = {};\n        const previousWebAnimationPlayers = previousPlayers.filter(player => player instanceof WebAnimationsPlayer);\n        if (allowPreviousPlayerStylesMerge(duration, delay)) {\n            previousWebAnimationPlayers.forEach(player => {\n                let styles = player.currentSnapshot;\n                Object.keys(styles).forEach(prop => previousStyles[prop] = styles[prop]);\n            });\n        }\n        keyframes = keyframes.map(styles => copyStyles(styles, false));\n        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);\n        const specialStyles = packageNonAnimatableStyles(element, keyframes);\n        return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);\n    }\n}\nfunction supportsWebAnimations() {\n    return typeof getElementAnimateFn() === 'function';\n}\nfunction getElementAnimateFn() {\n    return (isBrowser() && Element.prototype['animate']) || {};\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnimationDriver, Animation as ɵAnimation, AnimationEngine as ɵAnimationEngine, AnimationStyleNormalizer as ɵAnimationStyleNormalizer, CssKeyframesDriver as ɵCssKeyframesDriver, CssKeyframesPlayer as ɵCssKeyframesPlayer, NoopAnimationDriver as ɵNoopAnimationDriver, NoopAnimationStyleNormalizer as ɵNoopAnimationStyleNormalizer, WebAnimationsDriver as ɵWebAnimationsDriver, WebAnimationsPlayer as ɵWebAnimationsPlayer, WebAnimationsStyleNormalizer as ɵWebAnimationsStyleNormalizer, allowPreviousPlayerStylesMerge as ɵallowPreviousPlayerStylesMerge, SpecialCasedStyles as ɵangular_packages_animations_browser_browser_a, containsElement as ɵcontainsElement, invokeQuery as ɵinvokeQuery, matchesElement as ɵmatchesElement, supportsWebAnimations as ɵsupportsWebAnimations, validateStyleProperty as ɵvalidateStyleProperty };\n\n//# sourceMappingURL=browser.js.map","/**\n * @license Angular v10.0.3\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ViewEncapsulation, Injectable, RendererFactory2, Inject, NgZone, InjectionToken, NgModule } from '@angular/core';\nimport { ɵDomRendererFactory2, BrowserModule } from '@angular/platform-browser';\nimport { AnimationBuilder, sequence, AnimationFactory } from '@angular/animations';\nimport { ɵAnimationEngine, AnimationDriver, ɵAnimationStyleNormalizer, ɵsupportsWebAnimations, ɵWebAnimationsDriver, ɵCssKeyframesDriver, ɵWebAnimationsStyleNormalizer, ɵNoopAnimationDriver } from '@angular/animations/browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/animations/browser';\nclass BrowserAnimationBuilder extends AnimationBuilder {\n    constructor(rootRenderer, doc) {\n        super();\n        this._nextAnimationId = 0;\n        const typeData = { id: '0', encapsulation: ViewEncapsulation.None, styles: [], data: { animation: [] } };\n        this._renderer = rootRenderer.createRenderer(doc.body, typeData);\n    }\n    build(animation) {\n        const id = this._nextAnimationId.toString();\n        this._nextAnimationId++;\n        const entry = Array.isArray(animation) ? sequence(animation) : animation;\n        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n        return new BrowserAnimationFactory(id, this._renderer);\n    }\n}\nBrowserAnimationBuilder.ɵfac = function BrowserAnimationBuilder_Factory(t) { return new (t || BrowserAnimationBuilder)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(DOCUMENT)); };\nBrowserAnimationBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserAnimationBuilder, factory: BrowserAnimationBuilder.ɵfac });\nBrowserAnimationBuilder.ctorParameters = () => [\n    { type: RendererFactory2 },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserAnimationBuilder, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.RendererFactory2 }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nclass BrowserAnimationFactory extends AnimationFactory {\n    constructor(_id, _renderer) {\n        super();\n        this._id = _id;\n        this._renderer = _renderer;\n    }\n    create(element, options) {\n        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n    }\n}\nclass RendererAnimationPlayer {\n    constructor(id, element, options, _renderer) {\n        this.id = id;\n        this.element = element;\n        this._renderer = _renderer;\n        this.parentPlayer = null;\n        this._started = false;\n        this.totalTime = 0;\n        this._command('create', options);\n    }\n    _listen(eventName, callback) {\n        return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n    }\n    _command(command, ...args) {\n        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n    }\n    onDone(fn) {\n        this._listen('done', fn);\n    }\n    onStart(fn) {\n        this._listen('start', fn);\n    }\n    onDestroy(fn) {\n        this._listen('destroy', fn);\n    }\n    init() {\n        this._command('init');\n    }\n    hasStarted() {\n        return this._started;\n    }\n    play() {\n        this._command('play');\n        this._started = true;\n    }\n    pause() {\n        this._command('pause');\n    }\n    restart() {\n        this._command('restart');\n    }\n    finish() {\n        this._command('finish');\n    }\n    destroy() {\n        this._command('destroy');\n    }\n    reset() {\n        this._command('reset');\n    }\n    setPosition(p) {\n        this._command('setPosition', p);\n    }\n    getPosition() {\n        return 0;\n    }\n}\nfunction issueAnimationCommand(renderer, element, id, command, args) {\n    return renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n\nconst ANIMATION_PREFIX = '@';\nconst DISABLE_ANIMATIONS_FLAG = '@.disabled';\nclass AnimationRendererFactory {\n    constructor(delegate, engine, _zone) {\n        this.delegate = delegate;\n        this.engine = engine;\n        this._zone = _zone;\n        this._currentId = 0;\n        this._microtaskId = 1;\n        this._animationCallbacksBuffer = [];\n        this._rendererCache = new Map();\n        this._cdRecurDepth = 0;\n        this.promise = Promise.resolve(0);\n        engine.onRemovalComplete = (element, delegate) => {\n            // Note: if an component element has a leave animation, and the component\n            // a host leave animation, the view engine will call `removeChild` for the parent\n            // component renderer as well as for the child component renderer.\n            // Therefore, we need to check if we already removed the element.\n            if (delegate && delegate.parentNode(element)) {\n                delegate.removeChild(element.parentNode, element);\n            }\n        };\n    }\n    createRenderer(hostElement, type) {\n        const EMPTY_NAMESPACE_ID = '';\n        // cache the delegates to find out which cached delegate can\n        // be used by which cached renderer\n        const delegate = this.delegate.createRenderer(hostElement, type);\n        if (!hostElement || !type || !type.data || !type.data['animation']) {\n            let renderer = this._rendererCache.get(delegate);\n            if (!renderer) {\n                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);\n                // only cache this result when the base renderer is used\n                this._rendererCache.set(delegate, renderer);\n            }\n            return renderer;\n        }\n        const componentId = type.id;\n        const namespaceId = type.id + '-' + this._currentId;\n        this._currentId++;\n        this.engine.register(namespaceId, hostElement);\n        const registerTrigger = (trigger) => {\n            if (Array.isArray(trigger)) {\n                trigger.forEach(registerTrigger);\n            }\n            else {\n                this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);\n            }\n        };\n        const animationTriggers = type.data['animation'];\n        animationTriggers.forEach(registerTrigger);\n        return new AnimationRenderer(this, namespaceId, delegate, this.engine);\n    }\n    begin() {\n        this._cdRecurDepth++;\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    }\n    _scheduleCountTask() {\n        // always use promise to schedule microtask instead of use Zone\n        this.promise.then(() => {\n            this._microtaskId++;\n        });\n    }\n    /** @internal */\n    scheduleListenerCallback(count, fn, data) {\n        if (count >= 0 && count < this._microtaskId) {\n            this._zone.run(() => fn(data));\n            return;\n        }\n        if (this._animationCallbacksBuffer.length == 0) {\n            Promise.resolve(null).then(() => {\n                this._zone.run(() => {\n                    this._animationCallbacksBuffer.forEach(tuple => {\n                        const [fn, data] = tuple;\n                        fn(data);\n                    });\n                    this._animationCallbacksBuffer = [];\n                });\n            });\n        }\n        this._animationCallbacksBuffer.push([fn, data]);\n    }\n    end() {\n        this._cdRecurDepth--;\n        // this is to prevent animations from running twice when an inner\n        // component does CD when a parent component instead has inserted it\n        if (this._cdRecurDepth == 0) {\n            this._zone.runOutsideAngular(() => {\n                this._scheduleCountTask();\n                this.engine.flush(this._microtaskId);\n            });\n        }\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    }\n    whenRenderingDone() {\n        return this.engine.whenRenderingDone();\n    }\n}\nAnimationRendererFactory.ɵfac = function AnimationRendererFactory_Factory(t) { return new (t || AnimationRendererFactory)(ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(ɵngcc1.ɵAnimationEngine), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAnimationRendererFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AnimationRendererFactory, factory: AnimationRendererFactory.ɵfac });\nAnimationRendererFactory.ctorParameters = () => [\n    { type: RendererFactory2 },\n    { type: ɵAnimationEngine },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AnimationRendererFactory, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.RendererFactory2 }, { type: ɵngcc1.ɵAnimationEngine }, { type: ɵngcc0.NgZone }]; }, null); })();\nclass BaseAnimationRenderer {\n    constructor(namespaceId, delegate, engine) {\n        this.namespaceId = namespaceId;\n        this.delegate = delegate;\n        this.engine = engine;\n        this.destroyNode = this.delegate.destroyNode ? (n) => delegate.destroyNode(n) : null;\n    }\n    get data() {\n        return this.delegate.data;\n    }\n    destroy() {\n        this.engine.destroy(this.namespaceId, this.delegate);\n        this.delegate.destroy();\n    }\n    createElement(name, namespace) {\n        return this.delegate.createElement(name, namespace);\n    }\n    createComment(value) {\n        return this.delegate.createComment(value);\n    }\n    createText(value) {\n        return this.delegate.createText(value);\n    }\n    appendChild(parent, newChild) {\n        this.delegate.appendChild(parent, newChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, false);\n    }\n    insertBefore(parent, newChild, refChild) {\n        this.delegate.insertBefore(parent, newChild, refChild);\n        this.engine.onInsert(this.namespaceId, newChild, parent, true);\n    }\n    removeChild(parent, oldChild, isHostElement) {\n        this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);\n    }\n    selectRootElement(selectorOrNode, preserveContent) {\n        return this.delegate.selectRootElement(selectorOrNode, preserveContent);\n    }\n    parentNode(node) {\n        return this.delegate.parentNode(node);\n    }\n    nextSibling(node) {\n        return this.delegate.nextSibling(node);\n    }\n    setAttribute(el, name, value, namespace) {\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    removeAttribute(el, name, namespace) {\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    addClass(el, name) {\n        this.delegate.addClass(el, name);\n    }\n    removeClass(el, name) {\n        this.delegate.removeClass(el, name);\n    }\n    setStyle(el, style, value, flags) {\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    removeStyle(el, style, flags) {\n        this.delegate.removeStyle(el, style, flags);\n    }\n    setProperty(el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {\n            this.disableAnimations(el, !!value);\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    }\n    setValue(node, value) {\n        this.delegate.setValue(node, value);\n    }\n    listen(target, eventName, callback) {\n        return this.delegate.listen(target, eventName, callback);\n    }\n    disableAnimations(element, value) {\n        this.engine.disableAnimations(element, value);\n    }\n}\nclass AnimationRenderer extends BaseAnimationRenderer {\n    constructor(factory, namespaceId, delegate, engine) {\n        super(namespaceId, delegate, engine);\n        this.factory = factory;\n        this.namespaceId = namespaceId;\n    }\n    setProperty(el, name, value) {\n        if (name.charAt(0) == ANIMATION_PREFIX) {\n            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {\n                value = value === undefined ? true : !!value;\n                this.disableAnimations(el, value);\n            }\n            else {\n                this.engine.process(this.namespaceId, el, name.substr(1), value);\n            }\n        }\n        else {\n            this.delegate.setProperty(el, name, value);\n        }\n    }\n    listen(target, eventName, callback) {\n        if (eventName.charAt(0) == ANIMATION_PREFIX) {\n            const element = resolveElementFromTarget(target);\n            let name = eventName.substr(1);\n            let phase = '';\n            // @listener.phase is for trigger animation callbacks\n            // @@listener is for animation builder callbacks\n            if (name.charAt(0) != ANIMATION_PREFIX) {\n                [name, phase] = parseTriggerCallbackName(name);\n            }\n            return this.engine.listen(this.namespaceId, element, name, phase, event => {\n                const countId = event['_data'] || -1;\n                this.factory.scheduleListenerCallback(countId, callback, event);\n            });\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n}\nfunction resolveElementFromTarget(target) {\n    switch (target) {\n        case 'body':\n            return document.body;\n        case 'document':\n            return document;\n        case 'window':\n            return window;\n        default:\n            return target;\n    }\n}\nfunction parseTriggerCallbackName(triggerName) {\n    const dotIndex = triggerName.indexOf('.');\n    const trigger = triggerName.substring(0, dotIndex);\n    const phase = triggerName.substr(dotIndex + 1);\n    return [trigger, phase];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass InjectableAnimationEngine extends ɵAnimationEngine {\n    constructor(doc, driver, normalizer) {\n        super(doc.body, driver, normalizer);\n    }\n}\nInjectableAnimationEngine.ɵfac = function InjectableAnimationEngine_Factory(t) { return new (t || InjectableAnimationEngine)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.AnimationDriver), ɵngcc0.ɵɵinject(ɵngcc1.ɵAnimationStyleNormalizer)); };\nInjectableAnimationEngine.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InjectableAnimationEngine, factory: InjectableAnimationEngine.ɵfac });\nInjectableAnimationEngine.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: AnimationDriver },\n    { type: ɵAnimationStyleNormalizer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InjectableAnimationEngine, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.AnimationDriver }, { type: ɵngcc1.ɵAnimationStyleNormalizer }]; }, null); })();\nfunction instantiateSupportedAnimationDriver() {\n    return ɵsupportsWebAnimations() ? new ɵWebAnimationsDriver() : new ɵCssKeyframesDriver();\n}\nfunction instantiateDefaultStyleNormalizer() {\n    return new ɵWebAnimationsStyleNormalizer();\n}\nfunction instantiateRendererFactory(renderer, engine, zone) {\n    return new AnimationRendererFactory(renderer, engine, zone);\n}\n/**\n * @publicApi\n */\nconst ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');\nconst SHARED_ANIMATION_PROVIDERS = [\n    { provide: AnimationBuilder, useClass: BrowserAnimationBuilder },\n    { provide: ɵAnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },\n    { provide: ɵAnimationEngine, useClass: InjectableAnimationEngine }, {\n        provide: RendererFactory2,\n        useFactory: instantiateRendererFactory,\n        deps: [ɵDomRendererFactory2, ɵAnimationEngine, NgZone]\n    }\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserModule.\n */\nconst BROWSER_ANIMATIONS_PROVIDERS = [\n    { provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver },\n    { provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations' }, ...SHARED_ANIMATION_PROVIDERS\n];\n/**\n * Separate providers from the actual module so that we can do a local modification in Google3 to\n * include them in the BrowserTestingModule.\n */\nconst BROWSER_NOOP_ANIMATIONS_PROVIDERS = [\n    { provide: AnimationDriver, useClass: ɵNoopAnimationDriver },\n    { provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations' }, ...SHARED_ANIMATION_PROVIDERS\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)\n * for use with animations. See [Animations](guide/animations).\n * @publicApi\n */\nclass BrowserAnimationsModule {\n}\nBrowserAnimationsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BrowserAnimationsModule });\nBrowserAnimationsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BrowserAnimationsModule_Factory(t) { return new (t || BrowserAnimationsModule)(); }, providers: BROWSER_ANIMATIONS_PROVIDERS, imports: [BrowserModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BrowserAnimationsModule, { exports: function () { return [BrowserModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BrowserAnimationsModule, [{\n        type: NgModule,\n        args: [{\n                exports: [BrowserModule],\n                providers: BROWSER_ANIMATIONS_PROVIDERS\n            }]\n    }], null, null); })();\n/**\n * A null player that must be imported to allow disabling of animations.\n * @publicApi\n */\nclass NoopAnimationsModule {\n}\nNoopAnimationsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NoopAnimationsModule });\nNoopAnimationsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NoopAnimationsModule_Factory(t) { return new (t || NoopAnimationsModule)(); }, providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS, imports: [BrowserModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NoopAnimationsModule, { exports: function () { return [BrowserModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoopAnimationsModule, [{\n        type: NgModule,\n        args: [{\n                exports: [BrowserModule],\n                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ANIMATION_MODULE_TYPE, BrowserAnimationsModule, NoopAnimationsModule, AnimationRenderer as ɵAnimationRenderer, AnimationRendererFactory as ɵAnimationRendererFactory, BrowserAnimationBuilder as ɵBrowserAnimationBuilder, BrowserAnimationFactory as ɵBrowserAnimationFactory, InjectableAnimationEngine as ɵInjectableAnimationEngine, instantiateSupportedAnimationDriver as ɵangular_packages_platform_browser_animations_animations_a, instantiateDefaultStyleNormalizer as ɵangular_packages_platform_browser_animations_animations_b, instantiateRendererFactory as ɵangular_packages_platform_browser_animations_animations_c, BROWSER_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_d, BROWSER_NOOP_ANIMATIONS_PROVIDERS as ɵangular_packages_platform_browser_animations_animations_e, BaseAnimationRenderer as ɵangular_packages_platform_browser_animations_animations_f };\n\n//# sourceMappingURL=animations.js.map","export interface User {\r\n\tid: string;\r\n\tdisplay: string;\r\n}\r\n\r\nexport interface Topic {\r\n\tid: string;\r\n\tdisplay: string;\r\n}\r\n\r\nexport enum Permissions {\r\n\tNONE,\r\n\tREAD,\r\n\tWRITE,\r\n\tADMIN\r\n}\r\n\r\nexport interface State {\r\n\tuser: User;\r\n\ttopic: Topic;\r\n\tpermissions: Permissions;\r\n}\r\n\r\nexport const EMPTY_STATE: State = {\r\n\tuser: undefined,\r\n\ttopic: undefined,\r\n\tpermissions: Permissions.NONE\r\n};\r\n","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","let _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport const config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            const error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","export function hostReportError(err) {\n    setTimeout(() => { throw err; }, 0);\n}\n//# sourceMappingURL=hostReportError.js.map","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport const empty = {\n    closed: true,\n    next(value) { },\n    error(err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete() { }\n};\n//# sourceMappingURL=Observer.js.map","export const isArray = (() => Array.isArray || ((x) => x && typeof x.length === 'number'))();\n//# sourceMappingURL=isArray.js.map","export function isObject(x) {\n    return x !== null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","const UnsubscriptionErrorImpl = (() => {\n    function UnsubscriptionErrorImpl(errors) {\n        Error.call(this);\n        this.message = errors ?\n            `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n        return this;\n    }\n    UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n    return UnsubscriptionErrorImpl;\n})();\nexport const UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n    constructor(unsubscribe) {\n        this.closed = false;\n        this._parentOrParents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    unsubscribe() {\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parentOrParents, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parentOrParents = null;\n        this._subscriptions = null;\n        if (_parentOrParents instanceof Subscription) {\n            _parentOrParents.remove(this);\n        }\n        else if (_parentOrParents !== null) {\n            for (let index = 0; index < _parentOrParents.length; ++index) {\n                const parent = _parentOrParents[index];\n                parent.remove(this);\n            }\n        }\n        if (isFunction(_unsubscribe)) {\n            try {\n                _unsubscribe.call(this);\n            }\n            catch (e) {\n                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n            }\n        }\n        if (isArray(_subscriptions)) {\n            let index = -1;\n            let len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    try {\n                        sub.unsubscribe();\n                    }\n                    catch (e) {\n                        errors = errors || [];\n                        if (e instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n                        }\n                        else {\n                            errors.push(e);\n                        }\n                    }\n                }\n            }\n        }\n        if (errors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    add(teardown) {\n        let subscription = teardown;\n        if (!teardown) {\n            return Subscription.EMPTY;\n        }\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (!(subscription instanceof Subscription)) {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default: {\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n        }\n        let { _parentOrParents } = subscription;\n        if (_parentOrParents === null) {\n            subscription._parentOrParents = this;\n        }\n        else if (_parentOrParents instanceof Subscription) {\n            if (_parentOrParents === this) {\n                return subscription;\n            }\n            subscription._parentOrParents = [_parentOrParents, this];\n        }\n        else if (_parentOrParents.indexOf(this) === -1) {\n            _parentOrParents.push(this);\n        }\n        else {\n            return subscription;\n        }\n        const subscriptions = this._subscriptions;\n        if (subscriptions === null) {\n            this._subscriptions = [subscription];\n        }\n        else {\n            subscriptions.push(subscription);\n        }\n        return subscription;\n    }\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n}\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","export const rxSubscriber = (() => typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\nexport const $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parentOrParents } = this;\n        this._parentOrParents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parentOrParents = _parentOrParents;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport class MapOperator {\n    constructor(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    }\n}\nclass MapSubscriber extends Subscriber {\n    constructor(destination, project, thisArg) {\n        super(destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=map.js.map","import { Subscriber } from '../Subscriber';\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nclass FilterOperator {\n    constructor(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    }\n}\nclass FilterSubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=filter.js.map","import { Subscriber } from './Subscriber';\nexport class InnerSubscriber extends Subscriber {\n    constructor(parent, outerValue, outerIndex) {\n        super();\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    _next(value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    }\n    _error(error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    }\n}\n//# sourceMappingURL=InnerSubscriber.js.map","export const subscribeToArray = (array) => (subscriber) => {\n    for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n    }\n    subscriber.complete();\n};\n//# sourceMappingURL=subscribeToArray.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport const iterator = getSymbolIterator();\nexport const $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","export const observable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n//# sourceMappingURL=observable.js.map","export const isArrayLike = ((x) => x && typeof x.length === 'number' && typeof x !== 'function');\n//# sourceMappingURL=isArrayLike.js.map","export function isPromise(value) {\n    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeToObservable = (obj) => (subscriber) => {\n    const obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    }\n    else {\n        return obs.subscribe(subscriber);\n    }\n};\n//# sourceMappingURL=subscribeToObservable.js.map","import { hostReportError } from './hostReportError';\nexport const subscribeToPromise = (promise) => (subscriber) => {\n    promise.then((value) => {\n        if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n        }\n    }, (err) => subscriber.error(err))\n        .then(null, hostReportError);\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToPromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        const item = iterator.next();\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        const { closed, destination, isStopped } = observer;\n        if (closed || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map","import { noop } from './noop';\nexport function pipe(...fns) {\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn) => fn(prev), input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nimport { Observable } from '../Observable';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)) {\n    if (innerSubscriber.closed) {\n        return undefined;\n    }\n    if (result instanceof Observable) {\n        return result.subscribe(innerSubscriber);\n    }\n    return subscribeTo(result)(innerSubscriber);\n}\n//# sourceMappingURL=subscribeToResult.js.map","import { Subscriber } from './Subscriber';\nexport class OuterSubscriber extends Subscriber {\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(error, innerSub) {\n        this.destination.error(error);\n    }\n    notifyComplete(innerSub) {\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=OuterSubscriber.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function scheduleArray(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        let i = 0;\n        sub.add(scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n                return;\n            }\n            subscriber.next(input[i++]);\n            if (!subscriber.closed) {\n                sub.add(this.schedule());\n            }\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleArray.js.map","import { Observable } from '../Observable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { scheduled } from '../scheduled/scheduled';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    else {\n        return scheduled(input, scheduler);\n    }\n}\n//# sourceMappingURL=from.js.map","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return scheduleIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=scheduled.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport function isInteropObservable(input) {\n    return input && typeof input[Symbol_observable] === 'function';\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function scheduleObservable(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        sub.add(scheduler.schedule(() => {\n            const observable = input[Symbol_observable]();\n            sub.add(observable.subscribe({\n                next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n                error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n                complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function schedulePromise(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        sub.add(scheduler.schedule(() => input.then(value => {\n            sub.add(scheduler.schedule(() => {\n                subscriber.next(value);\n                sub.add(scheduler.schedule(() => subscriber.complete()));\n            }));\n        }, err => {\n            sub.add(scheduler.schedule(() => subscriber.error(err)));\n        })));\n        return sub;\n    });\n}\n//# sourceMappingURL=schedulePromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function isIterable(input) {\n    return input && typeof input[Symbol_iterator] === 'function';\n}\n//# sourceMappingURL=isIterable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        let iterator;\n        sub.add(() => {\n            if (iterator && typeof iterator.return === 'function') {\n                iterator.return();\n            }\n        });\n        sub.add(scheduler.schedule(() => {\n            iterator = input[Symbol_iterator]();\n            sub.add(scheduler.schedule(function () {\n                if (subscriber.closed) {\n                    return;\n                }\n                let value;\n                let done;\n                try {\n                    const result = iterator.next();\n                    value = result.value;\n                    done = result.done;\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map","import { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends OuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    }\n    _innerSub(ish, value, index) {\n        const innerSubscriber = new InnerSubscriber(this, value, index);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete(innerSub) {\n        const buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeMap.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent = Number.POSITIVE_INFINITY) {\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map","import { mergeAll } from './mergeAll';\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map","const EmptyErrorImpl = (() => {\n    function EmptyErrorImpl() {\n        Error.call(this);\n        this.message = 'no elements in sequence';\n        this.name = 'EmptyError';\n        return this;\n    }\n    EmptyErrorImpl.prototype = Object.create(Error.prototype);\n    return EmptyErrorImpl;\n})();\nexport const EmptyError = EmptyErrorImpl;\n//# sourceMappingURL=EmptyError.js.map","const ArgumentOutOfRangeErrorImpl = (() => {\n    function ArgumentOutOfRangeErrorImpl() {\n        Error.call(this);\n        this.message = 'argument out of range';\n        this.name = 'ArgumentOutOfRangeError';\n        return this;\n    }\n    ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\n    return ArgumentOutOfRangeErrorImpl;\n})();\nexport const ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","import { Observable } from '../Observable';\nexport const EMPTY = new Observable(subscriber => subscriber.complete());\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nfunction emptyScheduled(scheduler) {\n    return new Observable(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n//# sourceMappingURL=empty.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nclass TakeLastOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    }\n}\nclass TakeLastSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    _next(value) {\n        const ring = this.ring;\n        const total = this.total;\n        const count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            const index = count % total;\n            ring[index] = value;\n        }\n    }\n    _complete() {\n        const destination = this.destination;\n        let count = this.count;\n        if (count > 0) {\n            const total = this.count >= this.total ? this.total : this.count;\n            const ring = this.ring;\n            for (let i = 0; i < total; i++) {\n                const idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=takeLast.js.map","import { EmptyError } from '../util/EmptyError';\nimport { Subscriber } from '../Subscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n    return (source) => {\n        return source.lift(new ThrowIfEmptyOperator(errorFactory));\n    };\n}\nclass ThrowIfEmptyOperator {\n    constructor(errorFactory) {\n        this.errorFactory = errorFactory;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));\n    }\n}\nclass ThrowIfEmptySubscriber extends Subscriber {\n    constructor(destination, errorFactory) {\n        super(destination);\n        this.errorFactory = errorFactory;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.hasValue = true;\n        this.destination.next(value);\n    }\n    _complete() {\n        if (!this.hasValue) {\n            let err;\n            try {\n                err = this.errorFactory();\n            }\n            catch (e) {\n                err = e;\n            }\n            this.destination.error(err);\n        }\n        else {\n            return this.destination.complete();\n        }\n    }\n}\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n//# sourceMappingURL=throwIfEmpty.js.map","import { Subscriber } from '../Subscriber';\nexport function defaultIfEmpty(defaultValue = null) {\n    return (source) => source.lift(new DefaultIfEmptyOperator(defaultValue));\n}\nclass DefaultIfEmptyOperator {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    }\n}\nclass DefaultIfEmptySubscriber extends Subscriber {\n    constructor(destination, defaultValue) {\n        super(destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    _next(value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    }\n    _complete() {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    }\n}\n//# sourceMappingURL=defaultIfEmpty.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        const operator = new CatchOperator(selector);\n        const caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nclass CatchOperator {\n    constructor(selector) {\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    }\n}\nclass CatchSubscriber extends OuterSubscriber {\n    constructor(destination, selector, caught) {\n        super(destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let result;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                super.error(err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n            this.add(innerSubscriber);\n            const innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n            if (innerSubscription !== innerSubscriber) {\n                this.add(innerSubscription);\n            }\n        }\n    }\n}\n//# sourceMappingURL=catchError.js.map","import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=take.js.map","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\nexport function first(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n//# sourceMappingURL=first.js.map","import { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nclass DoOperator {\n    constructor(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    }\n}\nclass TapSubscriber extends Subscriber {\n    constructor(destination, observerOrNext, error, complete) {\n        super(destination);\n        this._tapNext = noop;\n        this._tapError = noop;\n        this._tapComplete = noop;\n        this._tapError = error || noop;\n        this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            this._context = this;\n            this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            this._context = observerOrNext;\n            this._tapNext = observerOrNext.next || noop;\n            this._tapError = observerOrNext.error || noop;\n            this._tapComplete = observerOrNext.complete || noop;\n        }\n    }\n    _next(value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    }\n    _error(err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    }\n}\n//# sourceMappingURL=tap.js.map","import { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\nclass EveryOperator {\n    constructor(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    call(observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    }\n}\nclass EverySubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    notifyComplete(everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    }\n    _next(value) {\n        let result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    }\n    _complete() {\n        this.notifyComplete(true);\n    }\n}\n//# sourceMappingURL=every.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(switchMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii)))));\n    }\n    return (source) => source.lift(new SwitchMapOperator(project));\n}\nclass SwitchMapOperator {\n    constructor(project) {\n        this.project = project;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    }\n}\nclass SwitchMapSubscriber extends OuterSubscriber {\n    constructor(destination, project) {\n        super(destination);\n        this.project = project;\n        this.index = 0;\n    }\n    _next(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    }\n    _innerSub(result, value, index) {\n        const innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        const innerSubscriber = new InnerSubscriber(this, value, index);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        this.innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);\n        if (this.innerSubscription !== innerSubscriber) {\n            destination.add(this.innerSubscription);\n        }\n    }\n    _complete() {\n        const { innerSubscription } = this;\n        if (!innerSubscription || innerSubscription.closed) {\n            super._complete();\n        }\n        this.unsubscribe();\n    }\n    _unsubscribe() {\n        this.innerSubscription = null;\n    }\n    notifyComplete(innerSub) {\n        const destination = this.destination;\n        destination.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            super._complete();\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    }\n}\n//# sourceMappingURL=switchMap.js.map","export function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map","import { of } from './of';\nimport { concatAll } from '../operators/concatAll';\nexport function concat(...observables) {\n    return concatAll()(of(...observables));\n}\n//# sourceMappingURL=concat.js.map","import { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nexport function of(...args) {\n    let scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n        return scheduleArray(args, scheduler);\n    }\n    else {\n        return fromArray(args);\n    }\n}\n//# sourceMappingURL=of.js.map","import { Observable } from '../Observable';\nimport { subscribeToArray } from '../util/subscribeToArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return scheduleArray(input, scheduler);\n    }\n}\n//# sourceMappingURL=fromArray.js.map","import { concat } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nexport function startWith(...array) {\n    const scheduler = array[array.length - 1];\n    if (isScheduler(scheduler)) {\n        array.pop();\n        return (source) => concat(array, source, scheduler);\n    }\n    else {\n        return (source) => concat(array, source);\n    }\n}\n//# sourceMappingURL=startWith.js.map","import { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n    let hasSeed = false;\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nclass ScanOperator {\n    constructor(accumulator, seed, hasSeed = false) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    }\n}\nclass ScanSubscriber extends Subscriber {\n    constructor(destination, accumulator, _seed, hasSeed) {\n        super(destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(value) {\n        this.hasSeed = true;\n        this._seed = value;\n    }\n    _next(value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    }\n    _tryNext(value) {\n        const index = this.index++;\n        let result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=scan.js.map","import { mergeMap } from './mergeMap';\nexport function concatMap(project, resultSelector) {\n    return mergeMap(project, resultSelector, 1);\n}\n//# sourceMappingURL=concatMap.js.map","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nexport function finalize(callback) {\n    return (source) => source.lift(new FinallyOperator(callback));\n}\nclass FinallyOperator {\n    constructor(callback) {\n        this.callback = callback;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    }\n}\nclass FinallySubscriber extends Subscriber {\n    constructor(destination, callback) {\n        super(destination);\n        this.add(new Subscription(callback));\n    }\n}\n//# sourceMappingURL=finalize.js.map","/**\n * @license Angular v10.0.3\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Location, LocationStrategy, ViewportScroller, PlatformLocation, APP_BASE_HREF, HashLocationStrategy, PathLocationStrategy, ɵgetDOM, LOCATION_INITIALIZED } from '@angular/common';\nimport { Component, ɵisObservable, ɵisPromise, NgModuleRef, InjectionToken, NgModuleFactory, ɵConsole, NgZone, isDevMode, Injectable, Type, Injector, NgModuleFactoryLoader, Compiler, Directive, Attribute, Renderer2, ElementRef, Input, HostListener, HostBinding, ChangeDetectorRef, Optional, ContentChildren, EventEmitter, ViewContainerRef, ComponentFactoryResolver, Output, SystemJsNgModuleLoader, NgProbeToken, ANALYZE_FOR_ENTRY_COMPONENTS, SkipSelf, Inject, APP_INITIALIZER, APP_BOOTSTRAP_LISTENER, NgModule, ApplicationRef, Version } from '@angular/core';\nimport { of, from, BehaviorSubject, Observable, EmptyError, combineLatest, defer, EMPTY, Subject } from 'rxjs';\nimport { map, concatAll, last as last$1, catchError, first, mergeMap, tap, every, switchMap, take, startWith, scan, filter, concatMap, takeLast, finalize, mergeAll } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * @usageNotes\n *\n * ```ts\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.pipe(\n *        filter((e: Event): e is RouterEvent => e instanceof RouterEvent)\n *     ).subscribe((e: RouterEvent) => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @see `Event`\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nclass RouterEvent {\n    constructor(\n    /** A unique ID that the router assigns to every router navigation. */\n    id, \n    /** The URL that is the destination for this navigation. */\n    url) {\n        this.id = id;\n        this.url = url;\n    }\n}\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nclass NavigationStart extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    navigationTrigger = 'imperative', \n    /** @docsNotRequired */\n    restoredState = null) {\n        super(id, url);\n        this.navigationTrigger = navigationTrigger;\n        this.restoredState = restoredState;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n    }\n}\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @publicApi\n */\nclass NavigationEnd extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n    }\n}\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n *\n * This can happen when a [route guard](guide/router#milestone-5-route-guards)\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @publicApi\n */\nclass NavigationCancel extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    reason) {\n        super(id, url);\n        this.reason = reason;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n    }\n}\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @publicApi\n */\nclass NavigationError extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    error) {\n        super(id, url);\n        this.error = error;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n    }\n}\n/**\n *An event triggered when routes are recognized.\n *\n * @publicApi\n */\nclass RoutesRecognized extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @publicApi\n */\nclass GuardsCheckStart extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    toString() {\n        return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @publicApi\n */\nclass GuardsCheckEnd extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state, \n    /** @docsNotRequired */\n    shouldActivate) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n        this.shouldActivate = shouldActivate;\n    }\n    toString() {\n        return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n    }\n}\n/**\n * An event triggered at the the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @publicApi\n */\nclass ResolveStart extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    toString() {\n        return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see `ResolveStart`.\n *\n * @publicApi\n */\nclass ResolveEnd extends RouterEvent {\n    constructor(\n    /** @docsNotRequired */\n    id, \n    /** @docsNotRequired */\n    url, \n    /** @docsNotRequired */\n    urlAfterRedirects, \n    /** @docsNotRequired */\n    state) {\n        super(id, url);\n        this.urlAfterRedirects = urlAfterRedirects;\n        this.state = state;\n    }\n    toString() {\n        return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n    }\n}\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @publicApi\n */\nclass RouteConfigLoadStart {\n    constructor(\n    /** @docsNotRequired */\n    route) {\n        this.route = route;\n    }\n    toString() {\n        return `RouteConfigLoadStart(path: ${this.route.path})`;\n    }\n}\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @publicApi\n */\nclass RouteConfigLoadEnd {\n    constructor(\n    /** @docsNotRequired */\n    route) {\n        this.route = route;\n    }\n    toString() {\n        return `RouteConfigLoadEnd(path: ${this.route.path})`;\n    }\n}\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see  `ChildActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nclass ChildActivationStart {\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ChildActivationStart(path: '${path}')`;\n    }\n}\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see `ChildActivationStart`\n * @see `ResolveStart` *\n * @publicApi\n */\nclass ChildActivationEnd {\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ChildActivationEnd(path: '${path}')`;\n    }\n}\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see ActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nclass ActivationStart {\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ActivationStart(path: '${path}')`;\n    }\n}\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationStart`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nclass ActivationEnd {\n    constructor(\n    /** @docsNotRequired */\n    snapshot) {\n        this.snapshot = snapshot;\n    }\n    toString() {\n        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n        return `ActivationEnd(path: '${path}')`;\n    }\n}\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nclass Scroll {\n    constructor(\n    /** @docsNotRequired */\n    routerEvent, \n    /** @docsNotRequired */\n    position, \n    /** @docsNotRequired */\n    anchor) {\n        this.routerEvent = routerEvent;\n        this.position = position;\n        this.anchor = anchor;\n    }\n    toString() {\n        const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n        return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\nclass ɵEmptyOutletComponent {\n}\nɵEmptyOutletComponent.ɵfac = function ɵEmptyOutletComponent_Factory(t) { return new (t || ɵEmptyOutletComponent)(); };\nɵEmptyOutletComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ɵEmptyOutletComponent, selectors: [[\"ng-component\"]], decls: 1, vars: 0, template: function ɵEmptyOutletComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"router-outlet\");\n    } }, directives: function () { return [RouterOutlet]; }, encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ɵEmptyOutletComponent, [{\n        type: Component,\n        args: [{ template: `<router-outlet></router-outlet>` }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nconst PRIMARY_OUTLET = 'primary';\nclass ParamsAsMap {\n    constructor(params) {\n        this.params = params || {};\n    }\n    has(name) {\n        return Object.prototype.hasOwnProperty.call(this.params, name);\n    }\n    get(name) {\n        if (this.has(name)) {\n            const v = this.params[name];\n            return Array.isArray(v) ? v[0] : v;\n        }\n        return null;\n    }\n    getAll(name) {\n        if (this.has(name)) {\n            const v = this.params[name];\n            return Array.isArray(v) ? v : [v];\n        }\n        return [];\n    }\n    get keys() {\n        return Object.keys(this.params);\n    }\n}\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nfunction convertToParamMap(params) {\n    return new ParamsAsMap(params);\n}\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\nfunction navigationCancelingError(message) {\n    const error = Error('NavigationCancelingError: ' + message);\n    error[NAVIGATION_CANCELING_ERROR] = true;\n    return error;\n}\nfunction isNavigationCancelingError(error) {\n    return error && error[NAVIGATION_CANCELING_ERROR];\n}\n// Matches the route configuration (`route`) against the actual URL (`segments`).\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n    const parts = route.path.split('/');\n    if (parts.length > segments.length) {\n        // The actual URL is shorter than the config, no match\n        return null;\n    }\n    if (route.pathMatch === 'full' &&\n        (segmentGroup.hasChildren() || parts.length < segments.length)) {\n        // The config is longer than the actual URL but we are looking for a full match, return null\n        return null;\n    }\n    const posParams = {};\n    // Check each config part against the actual URL\n    for (let index = 0; index < parts.length; index++) {\n        const part = parts[index];\n        const segment = segments[index];\n        const isParameter = part.startsWith(':');\n        if (isParameter) {\n            posParams[part.substring(1)] = segment;\n        }\n        else if (part !== segment.path) {\n            // The actual URL part does not match the config, no match\n            return null;\n        }\n    }\n    return { consumed: segments.slice(0, parts.length), posParams };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LoadedRouterConfig {\n    constructor(routes, module) {\n        this.routes = routes;\n        this.module = module;\n    }\n}\nfunction validateConfig(config, parentPath = '') {\n    // forEach doesn't iterate undefined values\n    for (let i = 0; i < config.length; i++) {\n        const route = config[i];\n        const fullPath = getFullPath(parentPath, route);\n        validateNode(route, fullPath);\n    }\n}\nfunction validateNode(route, fullPath) {\n    if (!route) {\n        throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n    }\n    if (Array.isArray(route)) {\n        throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n    }\n    if (!route.component && !route.children && !route.loadChildren &&\n        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n        throw new Error(`Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n    }\n    if (route.redirectTo && route.children) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n    }\n    if (route.redirectTo && route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n    }\n    if (route.children && route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n    }\n    if (route.redirectTo && route.component) {\n        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n    }\n    if (route.path && route.matcher) {\n        throw new Error(`Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n    }\n    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n        throw new Error(`Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n    }\n    if (route.path === void 0 && route.matcher === void 0) {\n        throw new Error(`Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n    }\n    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n        throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n    }\n    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n        const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n        throw new Error(`Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n    }\n    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n        throw new Error(`Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n    }\n    if (route.children) {\n        validateConfig(route.children, fullPath);\n    }\n}\nfunction getFullPath(parentPath, currentRoute) {\n    if (!currentRoute) {\n        return parentPath;\n    }\n    if (!parentPath && !currentRoute.path) {\n        return '';\n    }\n    else if (parentPath && !currentRoute.path) {\n        return `${parentPath}/`;\n    }\n    else if (!parentPath && currentRoute.path) {\n        return currentRoute.path;\n    }\n    else {\n        return `${parentPath}/${currentRoute.path}`;\n    }\n}\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nfunction standardizeConfig(r) {\n    const children = r.children && r.children.map(standardizeConfig);\n    const c = children ? Object.assign(Object.assign({}, r), { children }) : Object.assign({}, r);\n    if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\n        c.component = ɵEmptyOutletComponent;\n    }\n    return c;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction shallowEqualArrays(a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (!shallowEqual(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\nfunction shallowEqual(a, b) {\n    // Casting Object.keys return values to include `undefined` as there are some cases\n    // in IE 11 where this can happen. Cannot provide a test because the behavior only\n    // exists in certain circumstances in IE 11, therefore doing this cast ensures the\n    // logic is correct for when this edge case is hit.\n    const k1 = Object.keys(a);\n    const k2 = Object.keys(b);\n    if (!k1 || !k2 || k1.length != k2.length) {\n        return false;\n    }\n    let key;\n    for (let i = 0; i < k1.length; i++) {\n        key = k1[i];\n        if (!equalArraysOrString(a[key], b[key])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Test equality for arrays of strings or a string.\n */\nfunction equalArraysOrString(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length != b.length)\n            return false;\n        return a.every(aItem => b.indexOf(aItem) > -1);\n    }\n    else {\n        return a === b;\n    }\n}\n/**\n * Flattens single-level nested arrays.\n */\nfunction flatten(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\n/**\n * Return the last element of an array.\n */\nfunction last(a) {\n    return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * Verifys all booleans in an array are `true`.\n */\nfunction and(bools) {\n    return !bools.some(v => !v);\n}\nfunction forEach(map, callback) {\n    for (const prop in map) {\n        if (map.hasOwnProperty(prop)) {\n            callback(map[prop], prop);\n        }\n    }\n}\nfunction waitForMap(obj, fn) {\n    if (Object.keys(obj).length === 0) {\n        return of({});\n    }\n    const waitHead = [];\n    const waitTail = [];\n    const res = {};\n    forEach(obj, (a, k) => {\n        const mapped = fn(k, a).pipe(map((r) => res[k] = r));\n        if (k === PRIMARY_OUTLET) {\n            waitHead.push(mapped);\n        }\n        else {\n            waitTail.push(mapped);\n        }\n    });\n    // Closure compiler has problem with using spread operator here. So we use \"Array.concat\".\n    // Note that we also need to cast the new promise because TypeScript cannot infer the type\n    // when calling the \"of\" function through \"Function.apply\"\n    return of.apply(null, waitHead.concat(waitTail))\n        .pipe(concatAll(), last$1(), map(() => res));\n}\nfunction wrapIntoObservable(value) {\n    if (ɵisObservable(value)) {\n        return value;\n    }\n    if (ɵisPromise(value)) {\n        // Use `Promise.resolve()` to wrap promise-like instances.\n        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n        // change detection.\n        return from(Promise.resolve(value));\n    }\n    return of(value);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction createEmptyUrlTree() {\n    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\nfunction containsTree(container, containee, exact) {\n    if (exact) {\n        return equalQueryParams(container.queryParams, containee.queryParams) &&\n            equalSegmentGroups(container.root, containee.root);\n    }\n    return containsQueryParams(container.queryParams, containee.queryParams) &&\n        containsSegmentGroup(container.root, containee.root);\n}\nfunction equalQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return shallowEqual(container, containee);\n}\nfunction equalSegmentGroups(container, containee) {\n    if (!equalPath(container.segments, containee.segments))\n        return false;\n    if (container.numberOfChildren !== containee.numberOfChildren)\n        return false;\n    for (const c in containee.children) {\n        if (!container.children[c])\n            return false;\n        if (!equalSegmentGroups(container.children[c], containee.children[c]))\n            return false;\n    }\n    return true;\n}\nfunction containsQueryParams(container, containee) {\n    // TODO: This does not handle array params correctly.\n    return Object.keys(containee).length <= Object.keys(container).length &&\n        Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));\n}\nfunction containsSegmentGroup(container, containee) {\n    return containsSegmentGroupHelper(container, containee, containee.segments);\n}\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n    if (container.segments.length > containeePaths.length) {\n        const current = container.segments.slice(0, containeePaths.length);\n        if (!equalPath(current, containeePaths))\n            return false;\n        if (containee.hasChildren())\n            return false;\n        return true;\n    }\n    else if (container.segments.length === containeePaths.length) {\n        if (!equalPath(container.segments, containeePaths))\n            return false;\n        for (const c in containee.children) {\n            if (!container.children[c])\n                return false;\n            if (!containsSegmentGroup(container.children[c], containee.children[c]))\n                return false;\n        }\n        return true;\n    }\n    else {\n        const current = containeePaths.slice(0, container.segments.length);\n        const next = containeePaths.slice(container.segments.length);\n        if (!equalPath(container.segments, current))\n            return false;\n        if (!container.children[PRIMARY_OUTLET])\n            return false;\n        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n    }\n}\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlTree {\n    /** @internal */\n    constructor(\n    /** The root segment group of the URL tree */\n    root, \n    /** The query params of the URL */\n    queryParams, \n    /** The fragment of the URL */\n    fragment) {\n        this.root = root;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n    }\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return DEFAULT_SERIALIZER.serialize(this);\n    }\n}\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nclass UrlSegmentGroup {\n    constructor(\n    /** The URL segments of this group. See `UrlSegment` for more information */\n    segments, \n    /** The list of children of this group */\n    children) {\n        this.segments = segments;\n        this.children = children;\n        /** The parent node in the url tree */\n        this.parent = null;\n        forEach(children, (v, k) => v.parent = this);\n    }\n    /** Whether the segment has child segments */\n    hasChildren() {\n        return this.numberOfChildren > 0;\n    }\n    /** Number of child segments */\n    get numberOfChildren() {\n        return Object.keys(this.children).length;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return serializePaths(this);\n    }\n}\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass UrlSegment {\n    constructor(\n    /** The path part of a URL segment */\n    path, \n    /** The matrix parameters associated with a segment */\n    parameters) {\n        this.path = path;\n        this.parameters = parameters;\n    }\n    get parameterMap() {\n        if (!this._parameterMap) {\n            this._parameterMap = convertToParamMap(this.parameters);\n        }\n        return this._parameterMap;\n    }\n    /** @docsNotRequired */\n    toString() {\n        return serializePath(this);\n    }\n}\nfunction equalSegments(as, bs) {\n    return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\nfunction equalPath(as, bs) {\n    if (as.length !== bs.length)\n        return false;\n    return as.every((a, i) => a.path === bs[i].path);\n}\nfunction mapChildrenIntoArray(segment, fn) {\n    let res = [];\n    forEach(segment.children, (child, childOutlet) => {\n        if (childOutlet === PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    forEach(segment.children, (child, childOutlet) => {\n        if (childOutlet !== PRIMARY_OUTLET) {\n            res = res.concat(fn(child, childOutlet));\n        }\n    });\n    return res;\n}\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nclass UrlSerializer {\n}\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nclass DefaultUrlSerializer {\n    /** Parses a url into a `UrlTree` */\n    parse(url) {\n        const p = new UrlParser(url);\n        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n    }\n    /** Converts a `UrlTree` into a url */\n    serialize(tree) {\n        const segment = `/${serializeSegment(tree.root, true)}`;\n        const query = serializeQueryParams(tree.queryParams);\n        const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment)}` : '';\n        return `${segment}${query}${fragment}`;\n    }\n}\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\nfunction serializePaths(segment) {\n    return segment.segments.map(p => serializePath(p)).join('/');\n}\nfunction serializeSegment(segment, root) {\n    if (!segment.hasChildren()) {\n        return serializePaths(segment);\n    }\n    if (root) {\n        const primary = segment.children[PRIMARY_OUTLET] ?\n            serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n            '';\n        const children = [];\n        forEach(segment.children, (v, k) => {\n            if (k !== PRIMARY_OUTLET) {\n                children.push(`${k}:${serializeSegment(v, false)}`);\n            }\n        });\n        return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n    }\n    else {\n        const children = mapChildrenIntoArray(segment, (v, k) => {\n            if (k === PRIMARY_OUTLET) {\n                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n            }\n            return [`${k}:${serializeSegment(v, false)}`];\n        });\n        return `${serializePaths(segment)}/(${children.join('//')})`;\n    }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s) {\n    return encodeURIComponent(s)\n        .replace(/%40/g, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/g, '$')\n        .replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriQuery(s) {\n    return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriFragment(s) {\n    return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nfunction encodeUriSegment(s) {\n    return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\nfunction decode(s) {\n    return decodeURIComponent(s);\n}\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nfunction decodeQuery(s) {\n    return decode(s.replace(/\\+/g, '%20'));\n}\nfunction serializePath(path) {\n    return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\nfunction serializeMatrixParams(params) {\n    return Object.keys(params)\n        .map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`)\n        .join('');\n}\nfunction serializeQueryParams(params) {\n    const strParams = Object.keys(params).map((name) => {\n        const value = params[name];\n        return Array.isArray(value) ?\n            value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') :\n            `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n    });\n    return strParams.length ? `?${strParams.join('&')}` : '';\n}\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchSegments(str) {\n    const match = str.match(SEGMENT_RE);\n    return match ? match[0] : '';\n}\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str) {\n    const match = str.match(QUERY_PARAM_RE);\n    return match ? match[0] : '';\n}\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str) {\n    const match = str.match(QUERY_PARAM_VALUE_RE);\n    return match ? match[0] : '';\n}\nclass UrlParser {\n    constructor(url) {\n        this.url = url;\n        this.remaining = url;\n    }\n    parseRootSegment() {\n        this.consumeOptional('/');\n        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n            return new UrlSegmentGroup([], {});\n        }\n        // The root segment group never has segments\n        return new UrlSegmentGroup([], this.parseChildren());\n    }\n    parseQueryParams() {\n        const params = {};\n        if (this.consumeOptional('?')) {\n            do {\n                this.parseQueryParam(params);\n            } while (this.consumeOptional('&'));\n        }\n        return params;\n    }\n    parseFragment() {\n        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n    }\n    parseChildren() {\n        if (this.remaining === '') {\n            return {};\n        }\n        this.consumeOptional('/');\n        const segments = [];\n        if (!this.peekStartsWith('(')) {\n            segments.push(this.parseSegment());\n        }\n        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n            this.capture('/');\n            segments.push(this.parseSegment());\n        }\n        let children = {};\n        if (this.peekStartsWith('/(')) {\n            this.capture('/');\n            children = this.parseParens(true);\n        }\n        let res = {};\n        if (this.peekStartsWith('(')) {\n            res = this.parseParens(false);\n        }\n        if (segments.length > 0 || Object.keys(children).length > 0) {\n            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n        }\n        return res;\n    }\n    // parse a segment with its matrix parameters\n    // ie `name;k1=v1;k2`\n    parseSegment() {\n        const path = matchSegments(this.remaining);\n        if (path === '' && this.peekStartsWith(';')) {\n            throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n        }\n        this.capture(path);\n        return new UrlSegment(decode(path), this.parseMatrixParams());\n    }\n    parseMatrixParams() {\n        const params = {};\n        while (this.consumeOptional(';')) {\n            this.parseParam(params);\n        }\n        return params;\n    }\n    parseParam(params) {\n        const key = matchSegments(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        let value = '';\n        if (this.consumeOptional('=')) {\n            const valueMatch = matchSegments(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        params[decode(key)] = decode(value);\n    }\n    // Parse a single query parameter `name[=value]`\n    parseQueryParam(params) {\n        const key = matchQueryParams(this.remaining);\n        if (!key) {\n            return;\n        }\n        this.capture(key);\n        let value = '';\n        if (this.consumeOptional('=')) {\n            const valueMatch = matchUrlQueryParamValue(this.remaining);\n            if (valueMatch) {\n                value = valueMatch;\n                this.capture(value);\n            }\n        }\n        const decodedKey = decodeQuery(key);\n        const decodedVal = decodeQuery(value);\n        if (params.hasOwnProperty(decodedKey)) {\n            // Append to existing values\n            let currentVal = params[decodedKey];\n            if (!Array.isArray(currentVal)) {\n                currentVal = [currentVal];\n                params[decodedKey] = currentVal;\n            }\n            currentVal.push(decodedVal);\n        }\n        else {\n            // Create a new value\n            params[decodedKey] = decodedVal;\n        }\n    }\n    // parse `(a/b//outlet_name:c/d)`\n    parseParens(allowPrimary) {\n        const segments = {};\n        this.capture('(');\n        while (!this.consumeOptional(')') && this.remaining.length > 0) {\n            const path = matchSegments(this.remaining);\n            const next = this.remaining[path.length];\n            // if is is not one of these characters, then the segment was unescaped\n            // or the group was not closed\n            if (next !== '/' && next !== ')' && next !== ';') {\n                throw new Error(`Cannot parse url '${this.url}'`);\n            }\n            let outletName = undefined;\n            if (path.indexOf(':') > -1) {\n                outletName = path.substr(0, path.indexOf(':'));\n                this.capture(outletName);\n                this.capture(':');\n            }\n            else if (allowPrimary) {\n                outletName = PRIMARY_OUTLET;\n            }\n            const children = this.parseChildren();\n            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                new UrlSegmentGroup([], children);\n            this.consumeOptional('//');\n        }\n        return segments;\n    }\n    peekStartsWith(str) {\n        return this.remaining.startsWith(str);\n    }\n    // Consumes the prefix when it is present and returns whether it has been consumed\n    consumeOptional(str) {\n        if (this.peekStartsWith(str)) {\n            this.remaining = this.remaining.substring(str.length);\n            return true;\n        }\n        return false;\n    }\n    capture(str) {\n        if (!this.consumeOptional(str)) {\n            throw new Error(`Expected \"${str}\".`);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass Tree {\n    constructor(root) {\n        this._root = root;\n    }\n    get root() {\n        return this._root.value;\n    }\n    /**\n     * @internal\n     */\n    parent(t) {\n        const p = this.pathFromRoot(t);\n        return p.length > 1 ? p[p.length - 2] : null;\n    }\n    /**\n     * @internal\n     */\n    children(t) {\n        const n = findNode(t, this._root);\n        return n ? n.children.map(t => t.value) : [];\n    }\n    /**\n     * @internal\n     */\n    firstChild(t) {\n        const n = findNode(t, this._root);\n        return n && n.children.length > 0 ? n.children[0].value : null;\n    }\n    /**\n     * @internal\n     */\n    siblings(t) {\n        const p = findPath(t, this._root);\n        if (p.length < 2)\n            return [];\n        const c = p[p.length - 2].children.map(c => c.value);\n        return c.filter(cc => cc !== t);\n    }\n    /**\n     * @internal\n     */\n    pathFromRoot(t) {\n        return findPath(t, this._root).map(s => s.value);\n    }\n}\n// DFS for the node matching the value\nfunction findNode(value, node) {\n    if (value === node.value)\n        return node;\n    for (const child of node.children) {\n        const node = findNode(value, child);\n        if (node)\n            return node;\n    }\n    return null;\n}\n// Return the path to the node with the given value using DFS\nfunction findPath(value, node) {\n    if (value === node.value)\n        return [node];\n    for (const child of node.children) {\n        const path = findPath(value, child);\n        if (path.length) {\n            path.unshift(node);\n            return path;\n        }\n    }\n    return [];\n}\nclass TreeNode {\n    constructor(value, children) {\n        this.value = value;\n        this.children = children;\n    }\n    toString() {\n        return `TreeNode(${this.value})`;\n    }\n}\n// Return the list of T indexed by outlet name\nfunction nodeChildrenAsMap(node) {\n    const map = {};\n    if (node) {\n        node.children.forEach(child => map[child.value.outlet] = child);\n    }\n    return map;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see `ActivatedRoute`\n *\n * @publicApi\n */\nclass RouterState extends Tree {\n    /** @internal */\n    constructor(root, \n    /** The current snapshot of the router state */\n    snapshot) {\n        super(root);\n        this.snapshot = snapshot;\n        setRouterState(this, root);\n    }\n    toString() {\n        return this.snapshot.toString();\n    }\n}\nfunction createEmptyState(urlTree, rootComponent) {\n    const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n    const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n    const emptyParams = new BehaviorSubject({});\n    const emptyData = new BehaviorSubject({});\n    const emptyQueryParams = new BehaviorSubject({});\n    const fragment = new BehaviorSubject('');\n    const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n    activated.snapshot = snapshot.root;\n    return new RouterState(new TreeNode(activated, []), snapshot);\n}\nfunction createEmptyStateSnapshot(urlTree, rootComponent) {\n    const emptyParams = {};\n    const emptyData = {};\n    const emptyQueryParams = {};\n    const fragment = '';\n    const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n    return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @publicApi\n */\nclass ActivatedRoute {\n    /** @internal */\n    constructor(\n    /** An observable of the URL segments matched by this route. */\n    url, \n    /** An observable of the matrix parameters scoped to this route. */\n    params, \n    /** An observable of the query parameters shared by all the routes. */\n    queryParams, \n    /** An observable of the URL fragment shared by all the routes. */\n    fragment, \n    /** An observable of the static and resolved data of this route. */\n    data, \n    /** The outlet name of the route, a constant. */\n    outlet, \n    /** The component of the route, a constant. */\n    // TODO(vsavkin): remove |string\n    component, futureSnapshot) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this._futureSnapshot = futureSnapshot;\n    }\n    /** The configuration used to match this route. */\n    get routeConfig() {\n        return this._futureSnapshot.routeConfig;\n    }\n    /** The root of the router state. */\n    get root() {\n        return this._routerState.root;\n    }\n    /** The parent of this route in the router state tree. */\n    get parent() {\n        return this._routerState.parent(this);\n    }\n    /** The first child of this route in the router state tree. */\n    get firstChild() {\n        return this._routerState.firstChild(this);\n    }\n    /** The children of this route in the router state tree. */\n    get children() {\n        return this._routerState.children(this);\n    }\n    /** The path from the root of the router state tree to this route. */\n    get pathFromRoot() {\n        return this._routerState.pathFromRoot(this);\n    }\n    /**\n     * An Observable that contains a map of the required and optional parameters\n     * specific to the route.\n     * The map supports retrieving single and multiple values from the same parameter.\n     */\n    get paramMap() {\n        if (!this._paramMap) {\n            this._paramMap = this.params.pipe(map((p) => convertToParamMap(p)));\n        }\n        return this._paramMap;\n    }\n    /**\n     * An Observable that contains a map of the query parameters available to all routes.\n     * The map supports retrieving single and multiple values from the query parameter.\n     */\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap =\n                this.queryParams.pipe(map((p) => convertToParamMap(p)));\n        }\n        return this._queryParamMap;\n    }\n    toString() {\n        return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n    }\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * @internal\n */\nfunction inheritedParamsDataResolve(route, paramsInheritanceStrategy = 'emptyOnly') {\n    const pathFromRoot = route.pathFromRoot;\n    let inheritingStartingFrom = 0;\n    if (paramsInheritanceStrategy !== 'always') {\n        inheritingStartingFrom = pathFromRoot.length - 1;\n        while (inheritingStartingFrom >= 1) {\n            const current = pathFromRoot[inheritingStartingFrom];\n            const parent = pathFromRoot[inheritingStartingFrom - 1];\n            // current route is an empty path => inherits its parent's params and data\n            if (current.routeConfig && current.routeConfig.path === '') {\n                inheritingStartingFrom--;\n                // parent is componentless => current route should inherit its params and data\n            }\n            else if (!parent.component) {\n                inheritingStartingFrom--;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n/** @internal */\nfunction flattenInherited(pathFromRoot) {\n    return pathFromRoot.reduce((res, curr) => {\n        const params = Object.assign(Object.assign({}, res.params), curr.params);\n        const data = Object.assign(Object.assign({}, res.data), curr.data);\n        const resolve = Object.assign(Object.assign({}, res.resolve), curr._resolvedData);\n        return { params, data, resolve };\n    }, { params: {}, data: {}, resolve: {} });\n}\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass ActivatedRouteSnapshot {\n    /** @internal */\n    constructor(\n    /** The URL segments matched by this route */\n    url, \n    /** The matrix parameters scoped to this route */\n    params, \n    /** The query parameters shared by all the routes */\n    queryParams, \n    /** The URL fragment shared by all the routes */\n    fragment, \n    /** The static and resolved data of this route */\n    data, \n    /** The outlet name of the route */\n    outlet, \n    /** The component of the route */\n    component, routeConfig, urlSegment, lastPathIndex, resolve) {\n        this.url = url;\n        this.params = params;\n        this.queryParams = queryParams;\n        this.fragment = fragment;\n        this.data = data;\n        this.outlet = outlet;\n        this.component = component;\n        this.routeConfig = routeConfig;\n        this._urlSegment = urlSegment;\n        this._lastPathIndex = lastPathIndex;\n        this._resolve = resolve;\n    }\n    /** The root of the router state */\n    get root() {\n        return this._routerState.root;\n    }\n    /** The parent of this route in the router state tree */\n    get parent() {\n        return this._routerState.parent(this);\n    }\n    /** The first child of this route in the router state tree */\n    get firstChild() {\n        return this._routerState.firstChild(this);\n    }\n    /** The children of this route in the router state tree */\n    get children() {\n        return this._routerState.children(this);\n    }\n    /** The path from the root of the router state tree to this route */\n    get pathFromRoot() {\n        return this._routerState.pathFromRoot(this);\n    }\n    get paramMap() {\n        if (!this._paramMap) {\n            this._paramMap = convertToParamMap(this.params);\n        }\n        return this._paramMap;\n    }\n    get queryParamMap() {\n        if (!this._queryParamMap) {\n            this._queryParamMap = convertToParamMap(this.queryParams);\n        }\n        return this._queryParamMap;\n    }\n    toString() {\n        const url = this.url.map(segment => segment.toString()).join('/');\n        const matched = this.routeConfig ? this.routeConfig.path : '';\n        return `Route(url:'${url}', path:'${matched}')`;\n    }\n}\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass RouterStateSnapshot extends Tree {\n    /** @internal */\n    constructor(\n    /** The url from which this snapshot was created */\n    url, root) {\n        super(root);\n        this.url = url;\n        setRouterState(this, root);\n    }\n    toString() {\n        return serializeNode(this._root);\n    }\n}\nfunction setRouterState(state, node) {\n    node.value._routerState = state;\n    node.children.forEach(c => setRouterState(state, c));\n}\nfunction serializeNode(node) {\n    const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n    return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nfunction advanceActivatedRoute(route) {\n    if (route.snapshot) {\n        const currentSnapshot = route.snapshot;\n        const nextSnapshot = route._futureSnapshot;\n        route.snapshot = nextSnapshot;\n        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n            route.queryParams.next(nextSnapshot.queryParams);\n        }\n        if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n            route.fragment.next(nextSnapshot.fragment);\n        }\n        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n            route.params.next(nextSnapshot.params);\n        }\n        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n            route.url.next(nextSnapshot.url);\n        }\n        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n            route.data.next(nextSnapshot.data);\n        }\n    }\n    else {\n        route.snapshot = route._futureSnapshot;\n        // this is for resolved data\n        route.data.next(route._futureSnapshot.data);\n    }\n}\nfunction equalParamsAndUrlSegments(a, b) {\n    const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n    const parentsMismatch = !a.parent !== !b.parent;\n    return equalUrlParams && !parentsMismatch &&\n        (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n    const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n    return new RouterState(root, curr);\n}\nfunction createNode(routeReuseStrategy, curr, prevState) {\n    // reuse an activated route that is currently displayed on the screen\n    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n        const value = prevState.value;\n        value._futureSnapshot = curr.value;\n        const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n        return new TreeNode(value, children);\n        // retrieve an activated route that is used to be displayed, but is not currently displayed\n    }\n    else {\n        const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);\n        if (detachedRouteHandle) {\n            const tree = detachedRouteHandle.route;\n            setFutureSnapshotsOfActivatedRoutes(curr, tree);\n            return tree;\n        }\n        else {\n            const value = createActivatedRoute(curr.value);\n            const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n            return new TreeNode(value, children);\n        }\n    }\n}\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\n    if (curr.value.routeConfig !== result.value.routeConfig) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n    }\n    if (curr.children.length !== result.children.length) {\n        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n    }\n    result.value._futureSnapshot = curr.value;\n    for (let i = 0; i < curr.children.length; ++i) {\n        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n    }\n}\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n    return curr.children.map(child => {\n        for (const p of prevState.children) {\n            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n                return createNode(routeReuseStrategy, child, p);\n            }\n        }\n        return createNode(routeReuseStrategy, child);\n    });\n}\nfunction createActivatedRoute(c) {\n    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction createUrlTree(route, urlTree, commands, queryParams, fragment) {\n    if (commands.length === 0) {\n        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n    }\n    const nav = computeNavigation(commands);\n    if (nav.toRoot()) {\n        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n    }\n    const startingPosition = findStartingPosition(nav, urlTree, route);\n    const segmentGroup = startingPosition.processChildren ?\n        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\nfunction isMatrixParams(command) {\n    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n    let qp = {};\n    if (queryParams) {\n        forEach(queryParams, (value, name) => {\n            qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;\n        });\n    }\n    if (urlTree.root === oldSegmentGroup) {\n        return new UrlTree(newSegmentGroup, qp, fragment);\n    }\n    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\nfunction replaceSegment(current, oldSegment, newSegment) {\n    const children = {};\n    forEach(current.children, (c, outletName) => {\n        if (c === oldSegment) {\n            children[outletName] = newSegment;\n        }\n        else {\n            children[outletName] = replaceSegment(c, oldSegment, newSegment);\n        }\n    });\n    return new UrlSegmentGroup(current.segments, children);\n}\nclass Navigation {\n    constructor(isAbsolute, numberOfDoubleDots, commands) {\n        this.isAbsolute = isAbsolute;\n        this.numberOfDoubleDots = numberOfDoubleDots;\n        this.commands = commands;\n        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n            throw new Error('Root segment cannot have matrix parameters');\n        }\n        const cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n        if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n            throw new Error('{outlets:{}} has to be the last command');\n        }\n    }\n    toRoot() {\n        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n    }\n}\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands) {\n    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n        return new Navigation(true, 0, commands);\n    }\n    let numberOfDoubleDots = 0;\n    let isAbsolute = false;\n    const res = commands.reduce((res, cmd, cmdIdx) => {\n        if (typeof cmd === 'object' && cmd != null) {\n            if (cmd.outlets) {\n                const outlets = {};\n                forEach(cmd.outlets, (commands, name) => {\n                    outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n                });\n                return [...res, { outlets }];\n            }\n            if (cmd.segmentPath) {\n                return [...res, cmd.segmentPath];\n            }\n        }\n        if (!(typeof cmd === 'string')) {\n            return [...res, cmd];\n        }\n        if (cmdIdx === 0) {\n            cmd.split('/').forEach((urlPart, partIndex) => {\n                if (partIndex == 0 && urlPart === '.') {\n                    // skip './a'\n                }\n                else if (partIndex == 0 && urlPart === '') { //  '/a'\n                    isAbsolute = true;\n                }\n                else if (urlPart === '..') { //  '../a'\n                    numberOfDoubleDots++;\n                }\n                else if (urlPart != '') {\n                    res.push(urlPart);\n                }\n            });\n            return res;\n        }\n        return [...res, cmd];\n    }, []);\n    return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\nclass Position {\n    constructor(segmentGroup, processChildren, index) {\n        this.segmentGroup = segmentGroup;\n        this.processChildren = processChildren;\n        this.index = index;\n    }\n}\nfunction findStartingPosition(nav, tree, route) {\n    if (nav.isAbsolute) {\n        return new Position(tree.root, true, 0);\n    }\n    if (route.snapshot._lastPathIndex === -1) {\n        const segmentGroup = route.snapshot._urlSegment;\n        // Pathless ActivatedRoute has _lastPathIndex === -1 but should not process children\n        // see issue #26224, #13011, #35687\n        // However, if the ActivatedRoute is the root we should process children like above.\n        const processChildren = segmentGroup === tree.root;\n        return new Position(segmentGroup, processChildren, 0);\n    }\n    const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n    const index = route.snapshot._lastPathIndex + modifier;\n    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n    let g = group;\n    let ci = index;\n    let dd = numberOfDoubleDots;\n    while (dd > ci) {\n        dd -= ci;\n        g = g.parent;\n        if (!g) {\n            throw new Error('Invalid number of \\'../\\'');\n        }\n        ci = g.segments.length;\n    }\n    return new Position(g, false, ci - dd);\n}\nfunction getPath(command) {\n    if (typeof command === 'object' && command != null && command.outlets) {\n        return command.outlets[PRIMARY_OUTLET];\n    }\n    return `${command}`;\n}\nfunction getOutlets(commands) {\n    if (typeof commands[0] === 'object' && commands[0] !== null && commands[0].outlets) {\n        return commands[0].outlets;\n    }\n    return { [PRIMARY_OUTLET]: commands };\n}\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n    if (!segmentGroup) {\n        segmentGroup = new UrlSegmentGroup([], {});\n    }\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n    }\n    const m = prefixedWith(segmentGroup, startIndex, commands);\n    const slicedCommands = commands.slice(m.commandIndex);\n    if (m.match && m.pathIndex < segmentGroup.segments.length) {\n        const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n        g.children[PRIMARY_OUTLET] =\n            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n        return updateSegmentGroupChildren(g, 0, slicedCommands);\n    }\n    else if (m.match && slicedCommands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else if (m.match && !segmentGroup.hasChildren()) {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n    else if (m.match) {\n        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n    }\n    else {\n        return createNewSegmentGroup(segmentGroup, startIndex, commands);\n    }\n}\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n    if (commands.length === 0) {\n        return new UrlSegmentGroup(segmentGroup.segments, {});\n    }\n    else {\n        const outlets = getOutlets(commands);\n        const children = {};\n        forEach(outlets, (commands, outlet) => {\n            if (commands !== null) {\n                children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n            }\n        });\n        forEach(segmentGroup.children, (child, childOutlet) => {\n            if (outlets[childOutlet] === undefined) {\n                children[childOutlet] = child;\n            }\n        });\n        return new UrlSegmentGroup(segmentGroup.segments, children);\n    }\n}\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n    let currentCommandIndex = 0;\n    let currentPathIndex = startIndex;\n    const noMatch = { match: false, pathIndex: 0, commandIndex: 0 };\n    while (currentPathIndex < segmentGroup.segments.length) {\n        if (currentCommandIndex >= commands.length)\n            return noMatch;\n        const path = segmentGroup.segments[currentPathIndex];\n        const curr = getPath(commands[currentCommandIndex]);\n        const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n        if (currentPathIndex > 0 && curr === undefined)\n            break;\n        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n            if (!compare(curr, next, path))\n                return noMatch;\n            currentCommandIndex += 2;\n        }\n        else {\n            if (!compare(curr, {}, path))\n                return noMatch;\n            currentCommandIndex++;\n        }\n        currentPathIndex++;\n    }\n    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };\n}\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n    const paths = segmentGroup.segments.slice(0, startIndex);\n    let i = 0;\n    while (i < commands.length) {\n        if (typeof commands[i] === 'object' && commands[i] !== null &&\n            commands[i].outlets !== undefined) {\n            const children = createNewSegmentChildren(commands[i].outlets);\n            return new UrlSegmentGroup(paths, children);\n        }\n        // if we start with an object literal, we need to reuse the path part from the segment\n        if (i === 0 && isMatrixParams(commands[0])) {\n            const p = segmentGroup.segments[startIndex];\n            paths.push(new UrlSegment(p.path, commands[0]));\n            i++;\n            continue;\n        }\n        const curr = getPath(commands[i]);\n        const next = (i < commands.length - 1) ? commands[i + 1] : null;\n        if (curr && next && isMatrixParams(next)) {\n            paths.push(new UrlSegment(curr, stringify(next)));\n            i += 2;\n        }\n        else {\n            paths.push(new UrlSegment(curr, {}));\n            i++;\n        }\n    }\n    return new UrlSegmentGroup(paths, {});\n}\nfunction createNewSegmentChildren(outlets) {\n    const children = {};\n    forEach(outlets, (commands, outlet) => {\n        if (commands !== null) {\n            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n        }\n    });\n    return children;\n}\nfunction stringify(params) {\n    const res = {};\n    forEach(params, (v, k) => res[k] = `${v}`);\n    return res;\n}\nfunction compare(path, params, segment) {\n    return path == segment.path && shallowEqual(params, segment.parameters);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent) => map(t => {\n    new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent)\n        .activate(rootContexts);\n    return t;\n});\nclass ActivateRoutes {\n    constructor(routeReuseStrategy, futureState, currState, forwardEvent) {\n        this.routeReuseStrategy = routeReuseStrategy;\n        this.futureState = futureState;\n        this.currState = currState;\n        this.forwardEvent = forwardEvent;\n    }\n    activate(parentContexts) {\n        const futureRoot = this.futureState._root;\n        const currRoot = this.currState ? this.currState._root : null;\n        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n        advanceActivatedRoute(this.futureState.root);\n        this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n    }\n    // De-activate the child route that are not re-used for the future state\n    deactivateChildRoutes(futureNode, currNode, contexts) {\n        const children = nodeChildrenAsMap(currNode);\n        // Recurse on the routes active in the future state to de-activate deeper children\n        futureNode.children.forEach(futureChild => {\n            const childOutletName = futureChild.value.outlet;\n            this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n            delete children[childOutletName];\n        });\n        // De-activate the routes that will not be re-used\n        forEach(children, (v, childName) => {\n            this.deactivateRouteAndItsChildren(v, contexts);\n        });\n    }\n    deactivateRoutes(futureNode, currNode, parentContext) {\n        const future = futureNode.value;\n        const curr = currNode ? currNode.value : null;\n        if (future === curr) {\n            // Reusing the node, check to see if the children need to be de-activated\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                const context = parentContext.getContext(future.outlet);\n                if (context) {\n                    this.deactivateChildRoutes(futureNode, currNode, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.deactivateChildRoutes(futureNode, currNode, parentContext);\n            }\n        }\n        else {\n            if (curr) {\n                // Deactivate the current route which will not be re-used\n                this.deactivateRouteAndItsChildren(currNode, parentContext);\n            }\n        }\n    }\n    deactivateRouteAndItsChildren(route, parentContexts) {\n        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n            this.detachAndStoreRouteSubtree(route, parentContexts);\n        }\n        else {\n            this.deactivateRouteAndOutlet(route, parentContexts);\n        }\n    }\n    detachAndStoreRouteSubtree(route, parentContexts) {\n        const context = parentContexts.getContext(route.value.outlet);\n        if (context && context.outlet) {\n            const componentRef = context.outlet.detach();\n            const contexts = context.children.onOutletDeactivated();\n            this.routeReuseStrategy.store(route.value.snapshot, { componentRef, route, contexts });\n        }\n    }\n    deactivateRouteAndOutlet(route, parentContexts) {\n        const context = parentContexts.getContext(route.value.outlet);\n        if (context) {\n            const children = nodeChildrenAsMap(route);\n            const contexts = route.value.component ? context.children : parentContexts;\n            forEach(children, (v, k) => this.deactivateRouteAndItsChildren(v, contexts));\n            if (context.outlet) {\n                // Destroy the component\n                context.outlet.deactivate();\n                // Destroy the contexts for all the outlets that were in the component\n                context.children.onOutletDeactivated();\n            }\n        }\n    }\n    activateChildRoutes(futureNode, currNode, contexts) {\n        const children = nodeChildrenAsMap(currNode);\n        futureNode.children.forEach(c => {\n            this.activateRoutes(c, children[c.value.outlet], contexts);\n            this.forwardEvent(new ActivationEnd(c.value.snapshot));\n        });\n        if (futureNode.children.length) {\n            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n        }\n    }\n    activateRoutes(futureNode, currNode, parentContexts) {\n        const future = futureNode.value;\n        const curr = currNode ? currNode.value : null;\n        advanceActivatedRoute(future);\n        // reusing the node\n        if (future === curr) {\n            if (future.component) {\n                // If we have a normal route, we need to go through an outlet.\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                this.activateChildRoutes(futureNode, currNode, context.children);\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, currNode, parentContexts);\n            }\n        }\n        else {\n            if (future.component) {\n                // if we have a normal route, we need to place the component into the outlet and recurse.\n                const context = parentContexts.getOrCreateContext(future.outlet);\n                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n                    const stored = this.routeReuseStrategy.retrieve(future.snapshot);\n                    this.routeReuseStrategy.store(future.snapshot, null);\n                    context.children.onOutletReAttached(stored.contexts);\n                    context.attachRef = stored.componentRef;\n                    context.route = stored.route.value;\n                    if (context.outlet) {\n                        // Attach right away when the outlet has already been instantiated\n                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n                        context.outlet.attach(stored.componentRef, stored.route.value);\n                    }\n                    advanceActivatedRouteNodeAndItsChildren(stored.route);\n                }\n                else {\n                    const config = parentLoadedConfig(future.snapshot);\n                    const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n                    context.attachRef = null;\n                    context.route = future;\n                    context.resolver = cmpFactoryResolver;\n                    if (context.outlet) {\n                        // Activate the outlet when it has already been instantiated\n                        // Otherwise it will get activated from its `ngOnInit` when instantiated\n                        context.outlet.activateWith(future, cmpFactoryResolver);\n                    }\n                    this.activateChildRoutes(futureNode, null, context.children);\n                }\n            }\n            else {\n                // if we have a componentless route, we recurse but keep the same outlet map.\n                this.activateChildRoutes(futureNode, null, parentContexts);\n            }\n        }\n    }\n}\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\n    advanceActivatedRoute(node.value);\n    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\nfunction parentLoadedConfig(snapshot) {\n    for (let s = snapshot.parent; s; s = s.parent) {\n        const route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n        if (route && route.component)\n            return null;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nfunction isFunction(v) {\n    return typeof v === 'function';\n}\nfunction isBoolean(v) {\n    return typeof v === 'boolean';\n}\nfunction isUrlTree(v) {\n    return v instanceof UrlTree;\n}\nfunction isCanLoad(guard) {\n    return guard && isFunction(guard.canLoad);\n}\nfunction isCanActivate(guard) {\n    return guard && isFunction(guard.canActivate);\n}\nfunction isCanActivateChild(guard) {\n    return guard && isFunction(guard.canActivateChild);\n}\nfunction isCanDeactivate(guard) {\n    return guard && isFunction(guard.canDeactivate);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NoMatch {\n    constructor(segmentGroup) {\n        this.segmentGroup = segmentGroup || null;\n    }\n}\nclass AbsoluteRedirect {\n    constructor(urlTree) {\n        this.urlTree = urlTree;\n    }\n}\nfunction noMatch(segmentGroup) {\n    return new Observable((obs) => obs.error(new NoMatch(segmentGroup)));\n}\nfunction absoluteRedirect(newTree) {\n    return new Observable((obs) => obs.error(new AbsoluteRedirect(newTree)));\n}\nfunction namedOutletsRedirect(redirectTo) {\n    return new Observable((obs) => obs.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\nfunction canLoadFails(route) {\n    return new Observable((obs) => obs.error(navigationCancelingError(`Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n */\nfunction applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\nclass ApplyRedirects {\n    constructor(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n        this.configLoader = configLoader;\n        this.urlSerializer = urlSerializer;\n        this.urlTree = urlTree;\n        this.config = config;\n        this.allowRedirects = true;\n        this.ngModule = moduleInjector.get(NgModuleRef);\n    }\n    apply() {\n        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n        const urlTrees$ = expanded$.pipe(map((rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, this.urlTree.queryParams, this.urlTree.fragment)));\n        return urlTrees$.pipe(catchError((e) => {\n            if (e instanceof AbsoluteRedirect) {\n                // after an absolute redirect we do not apply any more redirects!\n                this.allowRedirects = false;\n                // we need to run matching, so we can fetch all lazy-loaded modules\n                return this.match(e.urlTree);\n            }\n            if (e instanceof NoMatch) {\n                throw this.noMatchError(e);\n            }\n            throw e;\n        }));\n    }\n    match(tree) {\n        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n        const mapped$ = expanded$.pipe(map((rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment)));\n        return mapped$.pipe(catchError((e) => {\n            if (e instanceof NoMatch) {\n                throw this.noMatchError(e);\n            }\n            throw e;\n        }));\n    }\n    noMatchError(e) {\n        return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n    }\n    createUrlTree(rootCandidate, queryParams, fragment) {\n        const root = rootCandidate.segments.length > 0 ?\n            new UrlSegmentGroup([], { [PRIMARY_OUTLET]: rootCandidate }) :\n            rootCandidate;\n        return new UrlTree(root, queryParams, fragment);\n    }\n    expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.expandChildren(ngModule, routes, segmentGroup)\n                .pipe(map((children) => new UrlSegmentGroup([], children)));\n        }\n        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n    }\n    // Recursively expand segment groups for all the child outlets\n    expandChildren(ngModule, routes, segmentGroup) {\n        return waitForMap(segmentGroup.children, (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n    }\n    expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\n        return of(...routes).pipe(map((r) => {\n            const expanded$ = this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n            return expanded$.pipe(catchError((e) => {\n                if (e instanceof NoMatch) {\n                    // TODO(i): this return type doesn't match the declared Observable<UrlSegmentGroup> -\n                    // talk to Jason\n                    return of(null);\n                }\n                throw e;\n            }));\n        }), concatAll(), first((s) => !!s), catchError((e, _) => {\n            if (e instanceof EmptyError || e.name === 'EmptyError') {\n                if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n                    return of(new UrlSegmentGroup([], {}));\n                }\n                throw new NoMatch(segmentGroup);\n            }\n            throw e;\n        }));\n    }\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    }\n    expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n        if (getOutlet(route) !== outlet) {\n            return noMatch(segmentGroup);\n        }\n        if (route.redirectTo === undefined) {\n            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n        }\n        if (allowRedirects && this.allowRedirects) {\n            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\n        }\n        return noMatch(segmentGroup);\n    }\n    expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n        if (route.path === '**') {\n            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\n        }\n        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\n    }\n    expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {\n        const newTree = this.applyRedirectCommands([], route.redirectTo, {});\n        if (route.redirectTo.startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {\n            const group = new UrlSegmentGroup(newSegments, {});\n            return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n        }));\n    }\n    expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n        const { matched, consumedSegments, lastChild, positionalParamSegments } = match(segmentGroup, route, segments);\n        if (!matched)\n            return noMatch(segmentGroup);\n        const newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);\n        if (route.redirectTo.startsWith('/')) {\n            return absoluteRedirect(newTree);\n        }\n        return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {\n            return this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n        }));\n    }\n    matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments) {\n        if (route.path === '**') {\n            if (route.loadChildren) {\n                return this.configLoader.load(ngModule.injector, route)\n                    .pipe(map((cfg) => {\n                    route._loadedConfig = cfg;\n                    return new UrlSegmentGroup(segments, {});\n                }));\n            }\n            return of(new UrlSegmentGroup(segments, {}));\n        }\n        const { matched, consumedSegments, lastChild } = match(rawSegmentGroup, route, segments);\n        if (!matched)\n            return noMatch(rawSegmentGroup);\n        const rawSlicedSegments = segments.slice(lastChild);\n        const childConfig$ = this.getChildConfig(ngModule, route, segments);\n        return childConfig$.pipe(mergeMap((routerConfig) => {\n            const childModule = routerConfig.module;\n            const childConfig = routerConfig.routes;\n            const { segmentGroup, slicedSegments } = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n                const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n                return expanded$.pipe(map((children) => new UrlSegmentGroup(consumedSegments, children)));\n            }\n            if (childConfig.length === 0 && slicedSegments.length === 0) {\n                return of(new UrlSegmentGroup(consumedSegments, {}));\n            }\n            const expanded$ = this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n            return expanded$.pipe(map((cs) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children)));\n        }));\n    }\n    getChildConfig(ngModule, route, segments) {\n        if (route.children) {\n            // The children belong to the same module\n            return of(new LoadedRouterConfig(route.children, ngModule));\n        }\n        if (route.loadChildren) {\n            // lazy children belong to the loaded module\n            if (route._loadedConfig !== undefined) {\n                return of(route._loadedConfig);\n            }\n            return this.runCanLoadGuards(ngModule.injector, route, segments)\n                .pipe(mergeMap((shouldLoadResult) => {\n                if (shouldLoadResult) {\n                    return this.configLoader.load(ngModule.injector, route)\n                        .pipe(map((cfg) => {\n                        route._loadedConfig = cfg;\n                        return cfg;\n                    }));\n                }\n                return canLoadFails(route);\n            }));\n        }\n        return of(new LoadedRouterConfig([], ngModule));\n    }\n    runCanLoadGuards(moduleInjector, route, segments) {\n        const canLoad = route.canLoad;\n        if (!canLoad || canLoad.length === 0)\n            return of(true);\n        const obs = from(canLoad).pipe(map((injectionToken) => {\n            const guard = moduleInjector.get(injectionToken);\n            let guardVal;\n            if (isCanLoad(guard)) {\n                guardVal = guard.canLoad(route, segments);\n            }\n            else if (isFunction(guard)) {\n                guardVal = guard(route, segments);\n            }\n            else {\n                throw new Error('Invalid CanLoad guard');\n            }\n            return wrapIntoObservable(guardVal);\n        }));\n        return obs.pipe(concatAll(), tap((result) => {\n            if (!isUrlTree(result))\n                return;\n            const error = navigationCancelingError(`Redirecting to \"${this.urlSerializer.serialize(result)}\"`);\n            error.url = result;\n            throw error;\n        }), every(result => result === true));\n    }\n    lineralizeSegments(route, urlTree) {\n        let res = [];\n        let c = urlTree.root;\n        while (true) {\n            res = res.concat(c.segments);\n            if (c.numberOfChildren === 0) {\n                return of(res);\n            }\n            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n                return namedOutletsRedirect(route.redirectTo);\n            }\n            c = c.children[PRIMARY_OUTLET];\n        }\n    }\n    applyRedirectCommands(segments, redirectTo, posParams) {\n        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n    }\n    applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {\n        const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n    }\n    createQueryParams(redirectToParams, actualParams) {\n        const res = {};\n        forEach(redirectToParams, (v, k) => {\n            const copySourceValue = typeof v === 'string' && v.startsWith(':');\n            if (copySourceValue) {\n                const sourceName = v.substring(1);\n                res[k] = actualParams[sourceName];\n            }\n            else {\n                res[k] = v;\n            }\n        });\n        return res;\n    }\n    createSegmentGroup(redirectTo, group, segments, posParams) {\n        const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n        let children = {};\n        forEach(group.children, (child, name) => {\n            children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n        });\n        return new UrlSegmentGroup(updatedSegments, children);\n    }\n    createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n        return redirectToSegments.map(s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n            this.findOrReturn(s, actualSegments));\n    }\n    findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n        const pos = posParams[redirectToUrlSegment.path.substring(1)];\n        if (!pos)\n            throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n        return pos;\n    }\n    findOrReturn(redirectToUrlSegment, actualSegments) {\n        let idx = 0;\n        for (const s of actualSegments) {\n            if (s.path === redirectToUrlSegment.path) {\n                actualSegments.splice(idx);\n                return s;\n            }\n            idx++;\n        }\n        return redirectToUrlSegment;\n    }\n}\nfunction match(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n        }\n        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };\n    }\n    const matcher = route.matcher || defaultUrlMatcher;\n    const res = matcher(segments, segmentGroup, route);\n    if (!res) {\n        return {\n            matched: false,\n            consumedSegments: [],\n            lastChild: 0,\n            positionalParamSegments: {},\n        };\n    }\n    return {\n        matched: true,\n        consumedSegments: res.consumed,\n        lastChild: res.consumed.length,\n        positionalParamSegments: res.posParams,\n    };\n}\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n        return { segmentGroup: mergeTrivialChildren(s), slicedSegments };\n    }\n    return { segmentGroup, slicedSegments };\n}\nfunction mergeTrivialChildren(s) {\n    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n        const c = s.children[PRIMARY_OUTLET];\n        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n    }\n    return s;\n}\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n    const res = {};\n    for (const r of routes) {\n        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return Object.assign(Object.assign({}, children), res);\n}\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\n    const res = {};\n    res[PRIMARY_OUTLET] = primarySegmentGroup;\n    for (const r of routes) {\n        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n            res[getOutlet(r)] = new UrlSegmentGroup([], {});\n        }\n    }\n    return res;\n}\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\n    return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\n    return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r));\n}\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\n    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo !== undefined;\n}\nfunction getOutlet(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {\n    return function (source) {\n        return source.pipe(switchMap(t => applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\n            .pipe(map(urlAfterRedirects => (Object.assign(Object.assign({}, t), { urlAfterRedirects }))))));\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CanActivate {\n    constructor(path) {\n        this.path = path;\n        this.route = this.path[this.path.length - 1];\n    }\n}\nclass CanDeactivate {\n    constructor(component, route) {\n        this.component = component;\n        this.route = route;\n    }\n}\nfunction getAllRouteGuards(future, curr, parentContexts) {\n    const futureRoot = future._root;\n    const currRoot = curr ? curr._root : null;\n    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\nfunction getCanActivateChild(p) {\n    const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n    if (!canActivateChild || canActivateChild.length === 0)\n        return null;\n    return { node: p, guards: canActivateChild };\n}\nfunction getToken(token, snapshot, moduleInjector) {\n    const config = getClosestLoadedConfig(snapshot);\n    const injector = config ? config.module.injector : moduleInjector;\n    return injector.get(token);\n}\nfunction getClosestLoadedConfig(snapshot) {\n    if (!snapshot)\n        return null;\n    for (let s = snapshot.parent; s; s = s.parent) {\n        const route = s.routeConfig;\n        if (route && route._loadedConfig)\n            return route._loadedConfig;\n    }\n    return null;\n}\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: []\n}) {\n    const prevChildren = nodeChildrenAsMap(currNode);\n    // Process the children of the future route\n    futureNode.children.forEach(c => {\n        getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n        delete prevChildren[c.value.outlet];\n    });\n    // Process any children left from the current route (not active for the future route)\n    forEach(prevChildren, (v, k) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));\n    return checks;\n}\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n    canDeactivateChecks: [],\n    canActivateChecks: []\n}) {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n    const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n    // reusing the node\n    if (curr && future.routeConfig === curr.routeConfig) {\n        const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);\n        if (shouldRun) {\n            checks.canActivateChecks.push(new CanActivate(futurePath));\n        }\n        else {\n            // we need to set the data\n            future.data = curr.data;\n            future._resolvedData = curr._resolvedData;\n        }\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n        }\n        if (shouldRun) {\n            const component = context && context.outlet && context.outlet.component || null;\n            checks.canDeactivateChecks.push(new CanDeactivate(component, curr));\n        }\n    }\n    else {\n        if (curr) {\n            deactivateRouteAndItsChildren(currNode, context, checks);\n        }\n        checks.canActivateChecks.push(new CanActivate(futurePath));\n        // If we have a component, we need to go through an outlet.\n        if (future.component) {\n            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n            // if we have a componentless route, we recurse but keep the same outlet map.\n        }\n        else {\n            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n        }\n    }\n    return checks;\n}\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n    if (typeof mode === 'function') {\n        return mode(curr, future);\n    }\n    switch (mode) {\n        case 'pathParamsChange':\n            return !equalPath(curr.url, future.url);\n        case 'pathParamsOrQueryParamsChange':\n            return !equalPath(curr.url, future.url) ||\n                !shallowEqual(curr.queryParams, future.queryParams);\n        case 'always':\n            return true;\n        case 'paramsOrQueryParamsChange':\n            return !equalParamsAndUrlSegments(curr, future) ||\n                !shallowEqual(curr.queryParams, future.queryParams);\n        case 'paramsChange':\n        default:\n            return !equalParamsAndUrlSegments(curr, future);\n    }\n}\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n    const children = nodeChildrenAsMap(route);\n    const r = route.value;\n    forEach(children, (node, childName) => {\n        if (!r.component) {\n            deactivateRouteAndItsChildren(node, context, checks);\n        }\n        else if (context) {\n            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n        }\n        else {\n            deactivateRouteAndItsChildren(node, null, checks);\n        }\n    });\n    if (!r.component) {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n    else if (context && context.outlet && context.outlet.isActivated) {\n        checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n    }\n    else {\n        checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\nfunction prioritizedGuardValue() {\n    return switchMap(obs => {\n        return combineLatest(...obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE))))\n            .pipe(scan((acc, list) => {\n            let isPending = false;\n            return list.reduce((innerAcc, val, i) => {\n                if (innerAcc !== INITIAL_VALUE)\n                    return innerAcc;\n                // Toggle pending flag if any values haven't been set yet\n                if (val === INITIAL_VALUE)\n                    isPending = true;\n                // Any other return values are only valid if we haven't yet hit a pending\n                // call. This guarantees that in the case of a guard at the bottom of the\n                // tree that returns a redirect, we will wait for the higher priority\n                // guard at the top to finish before performing the redirect.\n                if (!isPending) {\n                    // Early return when we hit a `false` value as that should always\n                    // cancel navigation\n                    if (val === false)\n                        return val;\n                    if (i === list.length - 1 || isUrlTree(val)) {\n                        return val;\n                    }\n                }\n                return innerAcc;\n            }, acc);\n        }, INITIAL_VALUE), filter(item => item !== INITIAL_VALUE), map(item => isUrlTree(item) ? item : item === true), //\n        take(1));\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction checkGuards(moduleInjector, forwardEvent) {\n    return function (source) {\n        return source.pipe(mergeMap(t => {\n            const { targetSnapshot, currentSnapshot, guards: { canActivateChecks, canDeactivateChecks } } = t;\n            if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n                return of(Object.assign(Object.assign({}, t), { guardsResult: true }));\n            }\n            return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, moduleInjector)\n                .pipe(mergeMap(canDeactivate => {\n                return canDeactivate && isBoolean(canDeactivate) ?\n                    runCanActivateChecks(targetSnapshot, canActivateChecks, moduleInjector, forwardEvent) :\n                    of(canDeactivate);\n            }), map(guardsResult => (Object.assign(Object.assign({}, t), { guardsResult }))));\n        }));\n    };\n}\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {\n    return from(checks).pipe(mergeMap(check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector)), first(result => {\n        return result !== true;\n    }, true));\n}\nfunction runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {\n    return from(checks).pipe(concatMap((check) => {\n        return from([\n            fireChildActivationStart(check.route.parent, forwardEvent),\n            fireActivationStart(check.route, forwardEvent),\n            runCanActivateChild(futureSnapshot, check.path, moduleInjector),\n            runCanActivate(futureSnapshot, check.route, moduleInjector)\n        ])\n            .pipe(concatAll(), first(result => {\n            return result !== true;\n        }, true));\n    }), first(result => {\n        return result !== true;\n    }, true));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ActivationStart(snapshot));\n    }\n    return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n */\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n    if (snapshot !== null && forwardEvent) {\n        forwardEvent(new ChildActivationStart(snapshot));\n    }\n    return of(true);\n}\nfunction runCanActivate(futureRSS, futureARS, moduleInjector) {\n    const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n    if (!canActivate || canActivate.length === 0)\n        return of(true);\n    const canActivateObservables = canActivate.map((c) => {\n        return defer(() => {\n            const guard = getToken(c, futureARS, moduleInjector);\n            let observable;\n            if (isCanActivate(guard)) {\n                observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n            }\n            else if (isFunction(guard)) {\n                observable = wrapIntoObservable(guard(futureARS, futureRSS));\n            }\n            else {\n                throw new Error('Invalid CanActivate guard');\n            }\n            return observable.pipe(first());\n        });\n    });\n    return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\nfunction runCanActivateChild(futureRSS, path, moduleInjector) {\n    const futureARS = path[path.length - 1];\n    const canActivateChildGuards = path.slice(0, path.length - 1)\n        .reverse()\n        .map(p => getCanActivateChild(p))\n        .filter(_ => _ !== null);\n    const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {\n        return defer(() => {\n            const guardsMapped = d.guards.map((c) => {\n                const guard = getToken(c, d.node, moduleInjector);\n                let observable;\n                if (isCanActivateChild(guard)) {\n                    observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n                }\n                else if (isFunction(guard)) {\n                    observable = wrapIntoObservable(guard(futureARS, futureRSS));\n                }\n                else {\n                    throw new Error('Invalid CanActivateChild guard');\n                }\n                return observable.pipe(first());\n            });\n            return of(guardsMapped).pipe(prioritizedGuardValue());\n        });\n    });\n    return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {\n    const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n    if (!canDeactivate || canDeactivate.length === 0)\n        return of(true);\n    const canDeactivateObservables = canDeactivate.map((c) => {\n        const guard = getToken(c, currARS, moduleInjector);\n        let observable;\n        if (isCanDeactivate(guard)) {\n            observable = wrapIntoObservable(guard.canDeactivate(component, currARS, currRSS, futureRSS));\n        }\n        else if (isFunction(guard)) {\n            observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n        }\n        else {\n            throw new Error('Invalid CanDeactivate guard');\n        }\n        return observable.pipe(first());\n    });\n    return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass NoMatch$1 {\n}\nfunction recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy = 'emptyOnly', relativeLinkResolution = 'legacy') {\n    return new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution)\n        .recognize();\n}\nclass Recognizer {\n    constructor(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\n        this.rootComponentType = rootComponentType;\n        this.config = config;\n        this.urlTree = urlTree;\n        this.url = url;\n        this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n        this.relativeLinkResolution = relativeLinkResolution;\n    }\n    recognize() {\n        try {\n            const rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\n            const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n            const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n            const rootNode = new TreeNode(root, children);\n            const routeState = new RouterStateSnapshot(this.url, rootNode);\n            this.inheritParamsAndData(routeState._root);\n            return of(routeState);\n        }\n        catch (e) {\n            return new Observable((obs) => obs.error(e));\n        }\n    }\n    inheritParamsAndData(routeNode) {\n        const route = routeNode.value;\n        const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n        route.params = Object.freeze(i.params);\n        route.data = Object.freeze(i.data);\n        routeNode.children.forEach(n => this.inheritParamsAndData(n));\n    }\n    processSegmentGroup(config, segmentGroup, outlet) {\n        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n            return this.processChildren(config, segmentGroup);\n        }\n        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n    }\n    processChildren(config, segmentGroup) {\n        const children = mapChildrenIntoArray(segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n        checkOutletNameUniqueness(children);\n        sortActivatedRouteSnapshots(children);\n        return children;\n    }\n    processSegment(config, segmentGroup, segments, outlet) {\n        for (const r of config) {\n            try {\n                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n            }\n            catch (e) {\n                if (!(e instanceof NoMatch$1))\n                    throw e;\n            }\n        }\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n            return [];\n        }\n        throw new NoMatch$1();\n    }\n    noLeftoversInUrl(segmentGroup, segments, outlet) {\n        return segments.length === 0 && !segmentGroup.children[outlet];\n    }\n    processSegmentAgainstRoute(route, rawSegment, segments, outlet) {\n        if (route.redirectTo)\n            throw new NoMatch$1();\n        if ((route.outlet || PRIMARY_OUTLET) !== outlet)\n            throw new NoMatch$1();\n        let snapshot;\n        let consumedSegments = [];\n        let rawSlicedSegments = [];\n        if (route.path === '**') {\n            const params = segments.length > 0 ? last(segments).parameters : {};\n            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n        }\n        else {\n            const result = match$1(rawSegment, route, segments);\n            consumedSegments = result.consumedSegments;\n            rawSlicedSegments = segments.slice(result.lastChild);\n            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n        }\n        const childConfig = getChildConfig(route);\n        const { segmentGroup, slicedSegments } = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution);\n        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n            const children = this.processChildren(childConfig, segmentGroup);\n            return [new TreeNode(snapshot, children)];\n        }\n        if (childConfig.length === 0 && slicedSegments.length === 0) {\n            return [new TreeNode(snapshot, [])];\n        }\n        const children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n        return [new TreeNode(snapshot, children)];\n    }\n}\nfunction sortActivatedRouteSnapshots(nodes) {\n    nodes.sort((a, b) => {\n        if (a.value.outlet === PRIMARY_OUTLET)\n            return -1;\n        if (b.value.outlet === PRIMARY_OUTLET)\n            return 1;\n        return a.value.outlet.localeCompare(b.value.outlet);\n    });\n}\nfunction getChildConfig(route) {\n    if (route.children) {\n        return route.children;\n    }\n    if (route.loadChildren) {\n        return route._loadedConfig.routes;\n    }\n    return [];\n}\nfunction match$1(segmentGroup, route, segments) {\n    if (route.path === '') {\n        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n            throw new NoMatch$1();\n        }\n        return { consumedSegments: [], lastChild: 0, parameters: {} };\n    }\n    const matcher = route.matcher || defaultUrlMatcher;\n    const res = matcher(segments, segmentGroup, route);\n    if (!res)\n        throw new NoMatch$1();\n    const posParams = {};\n    forEach(res.posParams, (v, k) => {\n        posParams[k] = v.path;\n    });\n    const parameters = res.consumed.length > 0 ? Object.assign(Object.assign({}, posParams), res.consumed[res.consumed.length - 1].parameters) :\n        posParams;\n    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters };\n}\nfunction checkOutletNameUniqueness(nodes) {\n    const names = {};\n    nodes.forEach(n => {\n        const routeWithSameOutletName = names[n.value.outlet];\n        if (routeWithSameOutletName) {\n            const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n            const c = n.value.url.map(s => s.toString()).join('/');\n            throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n        }\n        names[n.value.outlet] = n.value;\n    });\n}\nfunction getSourceSegmentGroup(segmentGroup) {\n    let s = segmentGroup;\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n    }\n    return s;\n}\nfunction getPathIndexShift(segmentGroup) {\n    let s = segmentGroup;\n    let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    while (s._sourceSegment) {\n        s = s._sourceSegment;\n        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n    }\n    return res - 1;\n}\nfunction split$1(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution) {\n    if (slicedSegments.length > 0 &&\n        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n        s._sourceSegment = segmentGroup;\n        s._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s, slicedSegments: [] };\n    }\n    if (slicedSegments.length === 0 &&\n        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));\n        s._sourceSegment = segmentGroup;\n        s._segmentIndexShift = consumedSegments.length;\n        return { segmentGroup: s, slicedSegments };\n    }\n    const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return { segmentGroup: s, slicedSegments };\n}\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {\n    const res = {};\n    for (const r of routes) {\n        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n            const s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            if (relativeLinkResolution === 'legacy') {\n                s._segmentIndexShift = segmentGroup.segments.length;\n            }\n            else {\n                s._segmentIndexShift = consumedSegments.length;\n            }\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return Object.assign(Object.assign({}, children), res);\n}\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n    const res = {};\n    res[PRIMARY_OUTLET] = primarySegment;\n    primarySegment._sourceSegment = segmentGroup;\n    primarySegment._segmentIndexShift = consumedSegments.length;\n    for (const r of routes) {\n        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n            const s = new UrlSegmentGroup([], {});\n            s._sourceSegment = segmentGroup;\n            s._segmentIndexShift = consumedSegments.length;\n            res[getOutlet$1(r)] = s;\n        }\n    }\n    return res;\n}\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n    return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET);\n}\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n    return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n        return false;\n    }\n    return r.path === '' && r.redirectTo === undefined;\n}\nfunction getOutlet$1(route) {\n    return route.outlet || PRIMARY_OUTLET;\n}\nfunction getData(route) {\n    return route.data || {};\n}\nfunction getResolve(route) {\n    return route.resolve || {};\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {\n    return function (source) {\n        return source.pipe(mergeMap(t => recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution)\n            .pipe(map(targetSnapshot => (Object.assign(Object.assign({}, t), { targetSnapshot }))))));\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction resolveData(paramsInheritanceStrategy, moduleInjector) {\n    return function (source) {\n        return source.pipe(mergeMap(t => {\n            const { targetSnapshot, guards: { canActivateChecks } } = t;\n            if (!canActivateChecks.length) {\n                return of(t);\n            }\n            let canActivateChecksResolved = 0;\n            return from(canActivateChecks)\n                .pipe(concatMap(check => runResolve(check.route, targetSnapshot, paramsInheritanceStrategy, moduleInjector)), tap(() => canActivateChecksResolved++), takeLast(1), mergeMap(_ => canActivateChecksResolved === canActivateChecks.length ? of(t) : EMPTY));\n        }));\n    };\n}\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {\n    const resolve = futureARS._resolve;\n    return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\n        .pipe(map((resolvedData) => {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = Object.assign(Object.assign({}, futureARS.data), inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);\n        return null;\n    }));\n}\nfunction resolveNode(resolve, futureARS, futureRSS, moduleInjector) {\n    const keys = Object.keys(resolve);\n    if (keys.length === 0) {\n        return of({});\n    }\n    const data = {};\n    return from(keys).pipe(mergeMap((key) => getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n        .pipe(tap((value) => {\n        data[key] = value;\n    }))), takeLast(1), mergeMap(() => {\n        // Ensure all resolvers returned values, otherwise don't emit any \"next\" and just complete\n        // the chain which will cancel navigation\n        if (Object.keys(data).length === keys.length) {\n            return of(data);\n        }\n        return EMPTY;\n    }));\n}\nfunction getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {\n    const resolver = getToken(injectionToken, futureARS, moduleInjector);\n    return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\n        wrapIntoObservable(resolver(futureARS, futureRSS));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nfunction switchTap(next) {\n    return function (source) {\n        return source.pipe(switchMap(v => {\n            const nextResult = next(v);\n            if (nextResult) {\n                return from(nextResult).pipe(map(() => v));\n            }\n            return from([v]);\n        }));\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nclass RouteReuseStrategy {\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nclass DefaultRouteReuseStrategy {\n    shouldDetach(route) {\n        return false;\n    }\n    store(route, detachedTree) { }\n    shouldAttach(route) {\n        return false;\n    }\n    retrieve(route) {\n        return null;\n    }\n    shouldReuseRoute(future, curr) {\n        return future.routeConfig === curr.routeConfig;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The [DI token](guide/glossary/#di-token) for a router configuration.\n * @see `ROUTES`\n * @publicApi\n */\nconst ROUTES = new InjectionToken('ROUTES');\nclass RouterConfigLoader {\n    constructor(loader, compiler, onLoadStartListener, onLoadEndListener) {\n        this.loader = loader;\n        this.compiler = compiler;\n        this.onLoadStartListener = onLoadStartListener;\n        this.onLoadEndListener = onLoadEndListener;\n    }\n    load(parentInjector, route) {\n        if (this.onLoadStartListener) {\n            this.onLoadStartListener(route);\n        }\n        const moduleFactory$ = this.loadModuleFactory(route.loadChildren);\n        return moduleFactory$.pipe(map((factory) => {\n            if (this.onLoadEndListener) {\n                this.onLoadEndListener(route);\n            }\n            const module = factory.create(parentInjector);\n            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);\n        }));\n    }\n    loadModuleFactory(loadChildren) {\n        if (typeof loadChildren === 'string') {\n            return from(this.loader.load(loadChildren));\n        }\n        else {\n            return wrapIntoObservable(loadChildren()).pipe(mergeMap((t) => {\n                if (t instanceof NgModuleFactory) {\n                    return of(t);\n                }\n                else {\n                    return from(this.compiler.compileModuleAsync(t));\n                }\n            }));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nclass OutletContext {\n    constructor() {\n        this.outlet = null;\n        this.route = null;\n        this.resolver = null;\n        this.children = new ChildrenOutletContexts();\n        this.attachRef = null;\n    }\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nclass ChildrenOutletContexts {\n    constructor() {\n        // contexts for child outlets, by name.\n        this.contexts = new Map();\n    }\n    /** Called when a `RouterOutlet` directive is instantiated */\n    onChildOutletCreated(childName, outlet) {\n        const context = this.getOrCreateContext(childName);\n        context.outlet = outlet;\n        this.contexts.set(childName, context);\n    }\n    /**\n     * Called when a `RouterOutlet` directive is destroyed.\n     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n     * re-created later.\n     */\n    onChildOutletDestroyed(childName) {\n        const context = this.getContext(childName);\n        if (context) {\n            context.outlet = null;\n        }\n    }\n    /**\n     * Called when the corresponding route is deactivated during navigation.\n     * Because the component get destroyed, all children outlet are destroyed.\n     */\n    onOutletDeactivated() {\n        const contexts = this.contexts;\n        this.contexts = new Map();\n        return contexts;\n    }\n    onOutletReAttached(contexts) {\n        this.contexts = contexts;\n    }\n    getOrCreateContext(childName) {\n        let context = this.getContext(childName);\n        if (!context) {\n            context = new OutletContext();\n            this.contexts.set(childName, context);\n        }\n        return context;\n    }\n    getContext(childName) {\n        return this.contexts.get(childName) || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nclass UrlHandlingStrategy {\n}\n/**\n * @publicApi\n */\nclass DefaultUrlHandlingStrategy {\n    shouldProcessUrl(url) {\n        return true;\n    }\n    extract(url) {\n        return url;\n    }\n    merge(newUrlPart, wholeUrl) {\n        return newUrlPart;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction defaultErrorHandler(error) {\n    throw error;\n}\nfunction defaultMalformedUriErrorHandler(error, urlSerializer, url) {\n    return urlSerializer.parse('/');\n}\n/**\n * @internal\n */\nfunction defaultRouterHook(snapshot, runExtras) {\n    return of(null);\n}\n/**\n * @description\n *\n * A service that provides navigation and URL manipulation capabilities.\n *\n * @see `Route`.\n * @see [Routing and Navigation Guide](guide/router).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass Router {\n    /**\n     * Creates the router service.\n     */\n    // TODO: vsavkin make internal after the final is out.\n    constructor(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\n        this.rootComponentType = rootComponentType;\n        this.urlSerializer = urlSerializer;\n        this.rootContexts = rootContexts;\n        this.location = location;\n        this.config = config;\n        this.lastSuccessfulNavigation = null;\n        this.currentNavigation = null;\n        this.navigationId = 0;\n        this.isNgZoneEnabled = false;\n        /**\n         * An event stream for routing events in this NgModule.\n         */\n        this.events = new Subject();\n        /**\n         * A handler for navigation errors in this NgModule.\n         */\n        this.errorHandler = defaultErrorHandler;\n        /**\n         * A handler for errors thrown by `Router.parseUrl(url)`\n         * when `url` contains an invalid character.\n         * The most common case is a `%` sign\n         * that's not encoded and is not part of a percent encoded sequence.\n         */\n        this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;\n        /**\n         * True if at least one navigation event has occurred,\n         * false otherwise.\n         */\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n        /**\n         * Hooks that enable you to pause navigation,\n         * either before or after the preactivation phase.\n         * Used by `RouterModule`.\n         *\n         * @internal\n         */\n        this.hooks = { beforePreactivation: defaultRouterHook, afterPreactivation: defaultRouterHook };\n        /**\n         * A strategy for extracting and merging URLs.\n         * Used for AngularJS to Angular migrations.\n         */\n        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n        /**\n         * A strategy for re-using routes.\n         */\n        this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n        /**\n         * How to handle a navigation request to the current URL. One of:\n         * - `'ignore'` :  The router ignores the request.\n         * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n         */\n        this.onSameUrlNavigation = 'ignore';\n        /**\n         * How to merge parameters, data, and resolved data from parent to child\n         * routes. One of:\n         *\n         * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n         * for path-less or component-less routes.\n         * - `'always'` : Inherit parent parameters, data, and resolved data\n         * for all child routes.\n         */\n        this.paramsInheritanceStrategy = 'emptyOnly';\n        /**\n         * Determines when the router updates the browser URL.\n         * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n         * Set to `'eager'` to update the browser URL at the beginning of navigation.\n         * You can choose to update early so that, if navigation fails,\n         * you can show an error message with the URL that failed.\n         */\n        this.urlUpdateStrategy = 'deferred';\n        /**\n         * Enables a bug fix that corrects relative link resolution in components with empty paths.\n         * @see `RouterModule`\n         */\n        this.relativeLinkResolution = 'legacy';\n        const onLoadStart = (r) => this.triggerEvent(new RouteConfigLoadStart(r));\n        const onLoadEnd = (r) => this.triggerEvent(new RouteConfigLoadEnd(r));\n        this.ngModule = injector.get(NgModuleRef);\n        this.console = injector.get(ɵConsole);\n        const ngZone = injector.get(NgZone);\n        this.isNgZoneEnabled = ngZone instanceof NgZone;\n        this.resetConfig(config);\n        this.currentUrlTree = createEmptyUrlTree();\n        this.rawUrlTree = this.currentUrlTree;\n        this.browserUrlTree = this.currentUrlTree;\n        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n        this.transitions = new BehaviorSubject({\n            id: 0,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.currentUrlTree,\n            extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n            rawUrl: this.currentUrlTree,\n            extras: {},\n            resolve: null,\n            reject: null,\n            promise: Promise.resolve(true),\n            source: 'imperative',\n            restoredState: null,\n            currentSnapshot: this.routerState.snapshot,\n            targetSnapshot: null,\n            currentRouterState: this.routerState,\n            targetRouterState: null,\n            guards: { canActivateChecks: [], canDeactivateChecks: [] },\n            guardsResult: null,\n        });\n        this.navigations = this.setupNavigations(this.transitions);\n        this.processNavigations();\n    }\n    setupNavigations(transitions) {\n        const eventsSubject = this.events;\n        return transitions.pipe(filter(t => t.id !== 0), \n        // Extract URL\n        map(t => (Object.assign(Object.assign({}, t), { extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl) }))), \n        // Using switchMap so we cancel executing navigations when a new one comes in\n        switchMap(t => {\n            let completed = false;\n            let errored = false;\n            return of(t).pipe(\n            // Store the Navigation object\n            tap(t => {\n                this.currentNavigation = {\n                    id: t.id,\n                    initialUrl: t.currentRawUrl,\n                    extractedUrl: t.extractedUrl,\n                    trigger: t.source,\n                    extras: t.extras,\n                    previousNavigation: this.lastSuccessfulNavigation ? Object.assign(Object.assign({}, this.lastSuccessfulNavigation), { previousNavigation: null }) :\n                        null\n                };\n            }), switchMap(t => {\n                const urlTransition = !this.navigated ||\n                    t.extractedUrl.toString() !== this.browserUrlTree.toString();\n                const processCurrentUrl = (this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n                    this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n                if (processCurrentUrl) {\n                    return of(t).pipe(\n                    // Fire NavigationStart event\n                    switchMap(t => {\n                        const transition = this.transitions.getValue();\n                        eventsSubject.next(new NavigationStart(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState));\n                        if (transition !== this.transitions.getValue()) {\n                            return EMPTY;\n                        }\n                        return [t];\n                    }), \n                    // This delay is required to match old behavior that forced navigation\n                    // to always be async\n                    switchMap(t => Promise.resolve(t)), \n                    // ApplyRedirects\n                    applyRedirects$1(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config), \n                    // Update the currentNavigation\n                    tap(t => {\n                        this.currentNavigation = Object.assign(Object.assign({}, this.currentNavigation), { finalUrl: t.urlAfterRedirects });\n                    }), \n                    // Recognize\n                    recognize$1(this.rootComponentType, this.config, (url) => this.serializeUrl(url), this.paramsInheritanceStrategy, this.relativeLinkResolution), \n                    // Update URL if in `eager` update mode\n                    tap(t => {\n                        if (this.urlUpdateStrategy === 'eager') {\n                            if (!t.extras.skipLocationChange) {\n                                this.setBrowserUrl(t.urlAfterRedirects, !!t.extras.replaceUrl, t.id, t.extras.state);\n                            }\n                            this.browserUrlTree = t.urlAfterRedirects;\n                        }\n                    }), \n                    // Fire RoutesRecognized\n                    tap(t => {\n                        const routesRecognized = new RoutesRecognized(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\n                        eventsSubject.next(routesRecognized);\n                    }));\n                }\n                else {\n                    const processPreviousUrl = urlTransition && this.rawUrlTree &&\n                        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);\n                    /* When the current URL shouldn't be processed, but the previous one was,\n                     * we handle this \"error condition\" by navigating to the previously\n                     * successful URL, but leaving the URL intact.*/\n                    if (processPreviousUrl) {\n                        const { id, extractedUrl, source, restoredState, extras } = t;\n                        const navStart = new NavigationStart(id, this.serializeUrl(extractedUrl), source, restoredState);\n                        eventsSubject.next(navStart);\n                        const targetSnapshot = createEmptyState(extractedUrl, this.rootComponentType).snapshot;\n                        return of(Object.assign(Object.assign({}, t), { targetSnapshot, urlAfterRedirects: extractedUrl, extras: Object.assign(Object.assign({}, extras), { skipLocationChange: false, replaceUrl: false }) }));\n                    }\n                    else {\n                        /* When neither the current or previous URL can be processed, do nothing\n                         * other than update router's internal reference to the current \"settled\"\n                         * URL. This way the next navigation will be coming from the current URL\n                         * in the browser.\n                         */\n                        this.rawUrlTree = t.rawUrl;\n                        this.browserUrlTree = t.urlAfterRedirects;\n                        t.resolve(null);\n                        return EMPTY;\n                    }\n                }\n            }), \n            // Before Preactivation\n            switchTap(t => {\n                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;\n                return this.hooks.beforePreactivation(targetSnapshot, {\n                    navigationId,\n                    appliedUrlTree,\n                    rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            }), \n            // --- GUARDS ---\n            tap(t => {\n                const guardsStart = new GuardsCheckStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\n                this.triggerEvent(guardsStart);\n            }), map(t => (Object.assign(Object.assign({}, t), { guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts) }))), checkGuards(this.ngModule.injector, (evt) => this.triggerEvent(evt)), tap(t => {\n                if (isUrlTree(t.guardsResult)) {\n                    const error = navigationCancelingError(`Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);\n                    error.url = t.guardsResult;\n                    throw error;\n                }\n            }), tap(t => {\n                const guardsEnd = new GuardsCheckEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);\n                this.triggerEvent(guardsEnd);\n            }), filter(t => {\n                if (!t.guardsResult) {\n                    this.resetUrlToCurrentUrlTree();\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), '');\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                    return false;\n                }\n                return true;\n            }), \n            // --- RESOLVE ---\n            switchTap(t => {\n                if (t.guards.canActivateChecks.length) {\n                    return of(t).pipe(tap(t => {\n                        const resolveStart = new ResolveStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\n                        this.triggerEvent(resolveStart);\n                    }), switchMap(t => {\n                        let dataResolved = false;\n                        return of(t).pipe(resolveData(this.paramsInheritanceStrategy, this.ngModule.injector), tap({\n                            next: () => dataResolved = true,\n                            complete: () => {\n                                if (!dataResolved) {\n                                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), `At least one route resolver didn't emit any value.`);\n                                    eventsSubject.next(navCancel);\n                                    t.resolve(false);\n                                }\n                            }\n                        }));\n                    }), tap(t => {\n                        const resolveEnd = new ResolveEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot);\n                        this.triggerEvent(resolveEnd);\n                    }));\n                }\n                return undefined;\n            }), \n            // --- AFTER PREACTIVATION ---\n            switchTap((t) => {\n                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;\n                return this.hooks.afterPreactivation(targetSnapshot, {\n                    navigationId,\n                    appliedUrlTree,\n                    rawUrlTree,\n                    skipLocationChange: !!skipLocationChange,\n                    replaceUrl: !!replaceUrl,\n                });\n            }), map((t) => {\n                const targetRouterState = createRouterState(this.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);\n                return (Object.assign(Object.assign({}, t), { targetRouterState }));\n            }), \n            /* Once here, we are about to activate syncronously. The assumption is this\n               will succeed, and user code may read from the Router service. Therefore\n               before activation, we need to update router properties storing the current\n               URL and the RouterState, as well as updated the browser URL. All this should\n               happen *before* activating. */\n            tap((t) => {\n                this.currentUrlTree = t.urlAfterRedirects;\n                this.rawUrlTree =\n                    this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);\n                this.routerState = t.targetRouterState;\n                if (this.urlUpdateStrategy === 'deferred') {\n                    if (!t.extras.skipLocationChange) {\n                        this.setBrowserUrl(this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);\n                    }\n                    this.browserUrlTree = t.urlAfterRedirects;\n                }\n            }), activateRoutes(this.rootContexts, this.routeReuseStrategy, (evt) => this.triggerEvent(evt)), tap({\n                next() {\n                    completed = true;\n                },\n                complete() {\n                    completed = true;\n                }\n            }), finalize(() => {\n                /* When the navigation stream finishes either through error or success, we\n                 * set the `completed` or `errored` flag. However, there are some situations\n                 * where we could get here without either of those being set. For instance, a\n                 * redirect during NavigationStart. Therefore, this is a catch-all to make\n                 * sure the NavigationCancel\n                 * event is fired when a navigation gets cancelled but not caught by other\n                 * means. */\n                if (!completed && !errored) {\n                    // Must reset to current URL tree here to ensure history.state is set. On a\n                    // fresh page load, if a new navigation comes in before a successful\n                    // navigation completes, there will be nothing in\n                    // history.state.navigationId. This can cause sync problems with AngularJS\n                    // sync code which looks for a value here in order to determine whether or\n                    // not to handle a given popstate event or to leave it to the Angualr\n                    // router.\n                    this.resetUrlToCurrentUrlTree();\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);\n                    eventsSubject.next(navCancel);\n                    t.resolve(false);\n                }\n                // currentNavigation should always be reset to null here. If navigation was\n                // successful, lastSuccessfulTransition will have already been set. Therefore\n                // we can safely set currentNavigation to null here.\n                this.currentNavigation = null;\n            }), catchError((e) => {\n                errored = true;\n                /* This error type is issued during Redirect, and is handled as a\n                 * cancellation rather than an error. */\n                if (isNavigationCancelingError(e)) {\n                    const redirecting = isUrlTree(e.url);\n                    if (!redirecting) {\n                        // Set property only if we're not redirecting. If we landed on a page and\n                        // redirect to `/` route, the new navigation is going to see the `/`\n                        // isn't a change from the default currentUrlTree and won't navigate.\n                        // This is only applicable with initial navigation, so setting\n                        // `navigated` only when not redirecting resolves this scenario.\n                        this.navigated = true;\n                        this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    }\n                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), e.message);\n                    eventsSubject.next(navCancel);\n                    // When redirecting, we need to delay resolving the navigation\n                    // promise and push it to the redirect navigation\n                    if (!redirecting) {\n                        t.resolve(false);\n                    }\n                    else {\n                        // setTimeout is required so this navigation finishes with\n                        // the return EMPTY below. If it isn't allowed to finish\n                        // processing, there can be multiple navigations to the same\n                        // URL.\n                        setTimeout(() => {\n                            const mergedTree = this.urlHandlingStrategy.merge(e.url, this.rawUrlTree);\n                            const extras = {\n                                skipLocationChange: t.extras.skipLocationChange,\n                                replaceUrl: this.urlUpdateStrategy === 'eager'\n                            };\n                            return this.scheduleNavigation(mergedTree, 'imperative', null, extras, { resolve: t.resolve, reject: t.reject, promise: t.promise });\n                        }, 0);\n                    }\n                    /* All other errors should reset to the router's internal URL reference to\n                     * the pre-error state. */\n                }\n                else {\n                    this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                    const navError = new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);\n                    eventsSubject.next(navError);\n                    try {\n                        t.resolve(this.errorHandler(e));\n                    }\n                    catch (ee) {\n                        t.reject(ee);\n                    }\n                }\n                return EMPTY;\n            }));\n            // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n        }));\n    }\n    /**\n     * @internal\n     * TODO: this should be removed once the constructor of the router made internal\n     */\n    resetRootComponentType(rootComponentType) {\n        this.rootComponentType = rootComponentType;\n        // TODO: vsavkin router 4.0 should make the root component set to null\n        // this will simplify the lifecycle of the router.\n        this.routerState.root.component = this.rootComponentType;\n    }\n    getTransition() {\n        const transition = this.transitions.value;\n        // This value needs to be set. Other values such as extractedUrl are set on initial navigation\n        // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not\n        // processing the previous URL.\n        transition.urlAfterRedirects = this.browserUrlTree;\n        return transition;\n    }\n    setTransition(t) {\n        this.transitions.next(Object.assign(Object.assign({}, this.getTransition()), t));\n    }\n    /**\n     * Sets up the location change listener and performs the initial navigation.\n     */\n    initialNavigation() {\n        this.setUpLocationChangeListener();\n        if (this.navigationId === 0) {\n            this.navigateByUrl(this.location.path(true), { replaceUrl: true });\n        }\n    }\n    /**\n     * Sets up the location change listener.\n     */\n    setUpLocationChangeListener() {\n        // Don't need to use Zone.wrap any more, because zone.js\n        // already patch onPopState, so location change callback will\n        // run into ngZone\n        if (!this.locationSubscription) {\n            this.locationSubscription = this.location.subscribe((change) => {\n                let rawUrlTree = this.parseUrl(change['url']);\n                const source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n                // Navigations coming from Angular router have a navigationId state property. When this\n                // exists, restore the state.\n                const state = change.state && change.state.navigationId ? change.state : null;\n                setTimeout(() => {\n                    this.scheduleNavigation(rawUrlTree, source, state, { replaceUrl: true });\n                }, 0);\n            });\n        }\n    }\n    /** The current URL. */\n    get url() {\n        return this.serializeUrl(this.currentUrlTree);\n    }\n    /** The current Navigation object if one exists */\n    getCurrentNavigation() {\n        return this.currentNavigation;\n    }\n    /** @internal */\n    triggerEvent(event) {\n        this.events.next(event);\n    }\n    /**\n     * Resets the configuration used for navigation and generating links.\n     *\n     * @param config The route array for the new configuration.\n     *\n     * @usageNotes\n     *\n     * ```\n     * router.resetConfig([\n     *  { path: 'team/:id', component: TeamCmp, children: [\n     *    { path: 'simple', component: SimpleCmp },\n     *    { path: 'user/:name', component: UserCmp }\n     *  ]}\n     * ]);\n     * ```\n     */\n    resetConfig(config) {\n        validateConfig(config);\n        this.config = config.map(standardizeConfig);\n        this.navigated = false;\n        this.lastSuccessfulId = -1;\n    }\n    /** @docsNotRequired */\n    ngOnDestroy() {\n        this.dispose();\n    }\n    /** Disposes of the router. */\n    dispose() {\n        if (this.locationSubscription) {\n            this.locationSubscription.unsubscribe();\n            this.locationSubscription = null;\n        }\n    }\n    /**\n     * Applies an array of commands to the current URL tree and creates a new URL tree.\n     *\n     * When given an activated route, applies the given commands starting from the route.\n     * Otherwise, applies the given command starting from the root.\n     *\n     * @param commands An array of commands to apply.\n     * @param navigationExtras Options that control the navigation strategy. This function\n     * only utilizes properties in `NavigationExtras` that would change the provided URL.\n     * @returns The new URL tree.\n     *\n     * @usageNotes\n     *\n     * ```\n     * // create /team/33/user/11\n     * router.createUrlTree(['/team', 33, 'user', 11]);\n     *\n     * // create /team/33;expand=true/user/11\n     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n     *\n     * // you can collapse static segments like this (this works only with the first passed-in value):\n     * router.createUrlTree(['/team/33/user', userId]);\n     *\n     * // If the first segment can contain slashes, and you do not want the router to split it,\n     * // you can do the following:\n     * router.createUrlTree([{segmentPath: '/one/two'}]);\n     *\n     * // create /team/33/(user/11//right:chat)\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n     *\n     * // remove the right secondary node\n     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n     *\n     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n     *\n     * // navigate to /team/33/user/11/details\n     * router.createUrlTree(['details'], {relativeTo: route});\n     *\n     * // navigate to /team/33/user/22\n     * router.createUrlTree(['../22'], {relativeTo: route});\n     *\n     * // navigate to /team/44/user/22\n     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n     * ```\n     */\n    createUrlTree(commands, navigationExtras = {}) {\n        const { relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling, preserveFragment } = navigationExtras;\n        if (isDevMode() && preserveQueryParams && console && console.warn) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        const a = relativeTo || this.routerState.root;\n        const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n        let q = null;\n        if (queryParamsHandling) {\n            switch (queryParamsHandling) {\n                case 'merge':\n                    q = Object.assign(Object.assign({}, this.currentUrlTree.queryParams), queryParams);\n                    break;\n                case 'preserve':\n                    q = this.currentUrlTree.queryParams;\n                    break;\n                default:\n                    q = queryParams || null;\n            }\n        }\n        else {\n            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n        }\n        if (q !== null) {\n            q = this.removeEmptyProps(q);\n        }\n        return createUrlTree(a, this.currentUrlTree, commands, q, f);\n    }\n    /**\n     * Navigate based on the provided URL, which must be absolute.\n     *\n     * @param url An absolute URL. The function does not apply any delta to the current URL.\n     * @param extras An object containing properties that modify the navigation strategy.\n     * The function ignores any properties in the `NavigationExtras` that would change the\n     * provided URL.\n     *\n     * @returns A Promise that resolves to 'true' when navigation succeeds,\n     * to 'false' when navigation fails, or is rejected on error.\n     *\n     * @usageNotes\n     *\n     * ```\n     * router.navigateByUrl(\"/team/33/user/11\");\n     *\n     * // Navigate without updating the URL\n     * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n     * ```\n     *\n     */\n    navigateByUrl(url, extras = { skipLocationChange: false }) {\n        if (isDevMode() && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n            this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n        }\n        const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n        const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n        return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n    }\n    /**\n     * Navigate based on the provided array of commands and a starting point.\n     * If no starting route is provided, the navigation is absolute.\n     *\n     * Returns a promise that:\n     * - resolves to 'true' when navigation succeeds,\n     * - resolves to 'false' when navigation fails,\n     * - is rejected when an error happens.\n     *\n     * @usageNotes\n     *\n     * ```\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n     *\n     * // Navigate without updating the URL\n     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n     * ```\n     *\n     * The first parameter of `navigate()` is a delta to be applied to the current URL\n     * or the one provided in the `relativeTo` property of the second parameter (the\n     * `NavigationExtras`).\n     *\n     * In order to affect this browser's `history.state` entry, the `state`\n     * parameter can be passed. This must be an object because the router\n     * will add the `navigationId` property to this object before creating\n     * the new history item.\n     */\n    navigate(commands, extras = { skipLocationChange: false }) {\n        validateCommands(commands);\n        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n    }\n    /** Serializes a `UrlTree` into a string */\n    serializeUrl(url) {\n        return this.urlSerializer.serialize(url);\n    }\n    /** Parses a string into a `UrlTree` */\n    parseUrl(url) {\n        let urlTree;\n        try {\n            urlTree = this.urlSerializer.parse(url);\n        }\n        catch (e) {\n            urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n        }\n        return urlTree;\n    }\n    /** Returns whether the url is activated */\n    isActive(url, exact) {\n        if (isUrlTree(url)) {\n            return containsTree(this.currentUrlTree, url, exact);\n        }\n        const urlTree = this.parseUrl(url);\n        return containsTree(this.currentUrlTree, urlTree, exact);\n    }\n    removeEmptyProps(params) {\n        return Object.keys(params).reduce((result, key) => {\n            const value = params[key];\n            if (value !== null && value !== undefined) {\n                result[key] = value;\n            }\n            return result;\n        }, {});\n    }\n    processNavigations() {\n        this.navigations.subscribe(t => {\n            this.navigated = true;\n            this.lastSuccessfulId = t.id;\n            this.events\n                .next(new NavigationEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));\n            this.lastSuccessfulNavigation = this.currentNavigation;\n            this.currentNavigation = null;\n            t.resolve(true);\n        }, e => {\n            this.console.warn(`Unhandled Navigation Error: `);\n        });\n    }\n    scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {\n        const lastNavigation = this.getTransition();\n        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n        // and that navigation results in 'replaceState' that leads to the same URL,\n        // we should skip those.\n        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a popstate was emitted first.\n        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        // Because of a bug in IE and Edge, the location class fires two events (popstate and\n        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n        // flicker. Handles the case when a hashchange was emitted first.\n        if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\n            lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n            return Promise.resolve(true); // return value is not used\n        }\n        let resolve;\n        let reject;\n        let promise;\n        if (priorPromise) {\n            resolve = priorPromise.resolve;\n            reject = priorPromise.reject;\n            promise = priorPromise.promise;\n        }\n        else {\n            promise = new Promise((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n        }\n        const id = ++this.navigationId;\n        this.setTransition({\n            id,\n            source,\n            restoredState,\n            currentUrlTree: this.currentUrlTree,\n            currentRawUrl: this.rawUrlTree,\n            rawUrl,\n            extras,\n            resolve,\n            reject,\n            promise,\n            currentSnapshot: this.routerState.snapshot,\n            currentRouterState: this.routerState\n        });\n        // Make sure that the error is propagated even though `processNavigations` catch\n        // handler does not rethrow\n        return promise.catch((e) => {\n            return Promise.reject(e);\n        });\n    }\n    setBrowserUrl(url, replaceUrl, id, state) {\n        const path = this.urlSerializer.serialize(url);\n        state = state || {};\n        if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n            // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.\n            this.location.replaceState(path, '', Object.assign(Object.assign({}, state), { navigationId: id }));\n        }\n        else {\n            this.location.go(path, '', Object.assign(Object.assign({}, state), { navigationId: id }));\n        }\n    }\n    resetStateAndUrl(storedState, storedUrl, rawUrl) {\n        this.routerState = storedState;\n        this.currentUrlTree = storedUrl;\n        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n        this.resetUrlToCurrentUrlTree();\n    }\n    resetUrlToCurrentUrlTree() {\n        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', { navigationId: this.lastSuccessfulId });\n    }\n}\nRouter.ɵfac = function Router_Factory(t) { return new (t || Router)(ɵngcc0.ɵɵinject(ɵngcc0.Type), ɵngcc0.ɵɵinject(UrlSerializer), ɵngcc0.ɵɵinject(ChildrenOutletContexts), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgModuleFactoryLoader), ɵngcc0.ɵɵinject(ɵngcc0.Compiler), ɵngcc0.ɵɵinject(undefined)); };\nRouter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Router, factory: Router.ɵfac });\nRouter.ctorParameters = () => [\n    { type: Type },\n    { type: UrlSerializer },\n    { type: ChildrenOutletContexts },\n    { type: Location },\n    { type: Injector },\n    { type: NgModuleFactoryLoader },\n    { type: Compiler },\n    { type: undefined }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Router, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.Type }, { type: UrlSerializer }, { type: ChildrenOutletContexts }, { type: ɵngcc1.Location }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgModuleFactoryLoader }, { type: ɵngcc0.Compiler }, { type: undefined }]; }, null); })();\nfunction validateCommands(commands) {\n    for (let i = 0; i < commands.length; i++) {\n        const cmd = commands[i];\n        if (cmd == null) {\n            throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob?debug=true#education`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive how to handle queryParams. Available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * You can provide a `state` value to be persisted to the browser's History.state\n * property (See https://developer.mozilla.org/en-US/docs/Web/API/History#Properties). It's\n * used as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * And later the value can be read from the router through `router.getCurrentNavigation`.\n * For example, to capture the `tracingId` above during the `NavigationStart` event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {@link Router#createUrlTree createUrlTree} for more information.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterLink {\n    constructor(router, route, tabIndex, renderer, el) {\n        this.router = router;\n        this.route = route;\n        this.commands = [];\n        if (tabIndex == null) {\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n        }\n    }\n    /**\n     * @param commands An array of commands to pass to {@link Router#createUrlTree\n     *     Router#createUrlTree}.\n     *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.\n     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n     *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`\n     * @see {@link Router#createUrlTree Router#createUrlTree}\n     */\n    set routerLink(commands) {\n        if (commands != null) {\n            this.commands = Array.isArray(commands) ? commands : [commands];\n        }\n        else {\n            this.commands = [];\n        }\n    }\n    /**\n     * @deprecated As of Angular v4.0 use `queryParamsHandling` instead.\n     */\n    set preserveQueryParams(value) {\n        if (isDevMode() && console && console.warn) {\n            console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n        }\n        this.preserve = value;\n    }\n    onClick() {\n        const extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n            state: this.state,\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return true;\n    }\n    get urlTree() {\n        return this.router.createUrlTree(this.commands, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: attrBoolValue(this.preserve),\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: attrBoolValue(this.preserveFragment),\n        });\n    }\n}\nRouterLink.ɵfac = function RouterLink_Factory(t) { return new (t || RouterLink)(ɵngcc0.ɵɵdirectiveInject(Router), ɵngcc0.ɵɵdirectiveInject(ActivatedRoute), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nRouterLink.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RouterLink, selectors: [[\"\", \"routerLink\", \"\", 5, \"a\", 5, \"area\"]], hostBindings: function RouterLink_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function RouterLink_click_HostBindingHandler() { return ctx.onClick(); });\n    } }, inputs: { routerLink: \"routerLink\", preserveQueryParams: \"preserveQueryParams\", queryParams: \"queryParams\", fragment: \"fragment\", queryParamsHandling: \"queryParamsHandling\", preserveFragment: \"preserveFragment\", skipLocationChange: \"skipLocationChange\", replaceUrl: \"replaceUrl\", state: \"state\" } });\nRouterLink.ctorParameters = () => [\n    { type: Router },\n    { type: ActivatedRoute },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nRouterLink.propDecorators = {\n    queryParams: [{ type: Input }],\n    fragment: [{ type: Input }],\n    queryParamsHandling: [{ type: Input }],\n    preserveFragment: [{ type: Input }],\n    skipLocationChange: [{ type: Input }],\n    replaceUrl: [{ type: Input }],\n    state: [{ type: Input }],\n    routerLink: [{ type: Input }],\n    preserveQueryParams: [{ type: Input }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterLink, [{\n        type: Directive,\n        args: [{ selector: ':not(a):not(area)[routerLink]' }]\n    }], function () { return [{ type: Router }, { type: ActivatedRoute }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { routerLink: [{\n            type: Input\n        }], preserveQueryParams: [{\n            type: Input\n        }], onClick: [{\n            type: HostListener,\n            args: ['click']\n        }], queryParams: [{\n            type: Input\n        }], fragment: [{\n            type: Input\n        }], queryParamsHandling: [{\n            type: Input\n        }], preserveFragment: [{\n            type: Input\n        }], skipLocationChange: [{\n            type: Input\n        }], replaceUrl: [{\n            type: Input\n        }], state: [{\n            type: Input\n        }] }); })();\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterLinkWithHref {\n    constructor(router, route, locationStrategy) {\n        this.router = router;\n        this.route = route;\n        this.locationStrategy = locationStrategy;\n        this.commands = [];\n        this.subscription = router.events.subscribe((s) => {\n            if (s instanceof NavigationEnd) {\n                this.updateTargetUrlAndHref();\n            }\n        });\n    }\n    /**\n     * @param commands An array of commands to pass to {@link Router#createUrlTree\n     *     Router#createUrlTree}.\n     *   - **array**: commands to pass to {@link Router#createUrlTree Router#createUrlTree}.\n     *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`\n     *   - **null|undefined**: shorthand for an empty array of commands, i.e. `[]`\n     * @see {@link Router#createUrlTree Router#createUrlTree}\n     */\n    set routerLink(commands) {\n        if (commands != null) {\n            this.commands = Array.isArray(commands) ? commands : [commands];\n        }\n        else {\n            this.commands = [];\n        }\n    }\n    /**\n     * @deprecated As of Angular v4.0 use `queryParamsHandling` instead.\n     */\n    set preserveQueryParams(value) {\n        if (isDevMode() && console && console.warn) {\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n        }\n        this.preserve = value;\n    }\n    ngOnChanges(changes) {\n        this.updateTargetUrlAndHref();\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    onClick(button, ctrlKey, metaKey, shiftKey) {\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n            return true;\n        }\n        if (typeof this.target === 'string' && this.target != '_self') {\n            return true;\n        }\n        const extras = {\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\n            replaceUrl: attrBoolValue(this.replaceUrl),\n            state: this.state\n        };\n        this.router.navigateByUrl(this.urlTree, extras);\n        return false;\n    }\n    updateTargetUrlAndHref() {\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n    }\n    get urlTree() {\n        return this.router.createUrlTree(this.commands, {\n            relativeTo: this.route,\n            queryParams: this.queryParams,\n            fragment: this.fragment,\n            preserveQueryParams: attrBoolValue(this.preserve),\n            queryParamsHandling: this.queryParamsHandling,\n            preserveFragment: attrBoolValue(this.preserveFragment),\n        });\n    }\n}\nRouterLinkWithHref.ɵfac = function RouterLinkWithHref_Factory(t) { return new (t || RouterLinkWithHref)(ɵngcc0.ɵɵdirectiveInject(Router), ɵngcc0.ɵɵdirectiveInject(ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocationStrategy)); };\nRouterLinkWithHref.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RouterLinkWithHref, selectors: [[\"a\", \"routerLink\", \"\"], [\"area\", \"routerLink\", \"\"]], hostVars: 2, hostBindings: function RouterLinkWithHref_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function RouterLinkWithHref_click_HostBindingHandler($event) { return ctx.onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"href\", ctx.href, ɵngcc0.ɵɵsanitizeUrl);\n        ɵngcc0.ɵɵattribute(\"target\", ctx.target);\n    } }, inputs: { routerLink: \"routerLink\", preserveQueryParams: \"preserveQueryParams\", target: \"target\", queryParams: \"queryParams\", fragment: \"fragment\", queryParamsHandling: \"queryParamsHandling\", preserveFragment: \"preserveFragment\", skipLocationChange: \"skipLocationChange\", replaceUrl: \"replaceUrl\", state: \"state\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nRouterLinkWithHref.ctorParameters = () => [\n    { type: Router },\n    { type: ActivatedRoute },\n    { type: LocationStrategy }\n];\nRouterLinkWithHref.propDecorators = {\n    target: [{ type: HostBinding, args: ['attr.target',] }, { type: Input }],\n    queryParams: [{ type: Input }],\n    fragment: [{ type: Input }],\n    queryParamsHandling: [{ type: Input }],\n    preserveFragment: [{ type: Input }],\n    skipLocationChange: [{ type: Input }],\n    replaceUrl: [{ type: Input }],\n    state: [{ type: Input }],\n    href: [{ type: HostBinding }],\n    routerLink: [{ type: Input }],\n    preserveQueryParams: [{ type: Input }],\n    onClick: [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterLinkWithHref, [{\n        type: Directive,\n        args: [{ selector: 'a[routerLink],area[routerLink]' }]\n    }], function () { return [{ type: Router }, { type: ActivatedRoute }, { type: ɵngcc1.LocationStrategy }]; }, { routerLink: [{\n            type: Input\n        }], preserveQueryParams: [{\n            type: Input\n        }], onClick: [{\n            type: HostListener,\n            args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']]\n        }], href: [{\n            type: HostBinding\n        }], target: [{\n            type: HostBinding,\n            args: ['attr.target']\n        }, {\n            type: Input\n        }], queryParams: [{\n            type: Input\n        }], fragment: [{\n            type: Input\n        }], queryParamsHandling: [{\n            type: Input\n        }], preserveFragment: [{\n            type: Input\n        }], skipLocationChange: [{\n            type: Input\n        }], replaceUrl: [{\n            type: Input\n        }], state: [{\n            type: Input\n        }] }); })();\nfunction attrBoolValue(s) {\n    return s === '' || !!s;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *\n * @description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterLinkActive {\n    constructor(router, element, renderer, cdr, link, linkWithHref) {\n        this.router = router;\n        this.element = element;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.link = link;\n        this.linkWithHref = linkWithHref;\n        this.classes = [];\n        this.isActive = false;\n        this.routerLinkActiveOptions = { exact: false };\n        this.subscription = router.events.subscribe((s) => {\n            if (s instanceof NavigationEnd) {\n                this.update();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this.links.changes.subscribe(_ => this.update());\n        this.linksWithHrefs.changes.subscribe(_ => this.update());\n        this.update();\n    }\n    set routerLinkActive(data) {\n        const classes = Array.isArray(data) ? data : data.split(' ');\n        this.classes = classes.filter(c => !!c);\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    update() {\n        if (!this.links || !this.linksWithHrefs || !this.router.navigated)\n            return;\n        Promise.resolve().then(() => {\n            const hasActiveLinks = this.hasActiveLinks();\n            if (this.isActive !== hasActiveLinks) {\n                this.isActive = hasActiveLinks;\n                this.cdr.markForCheck();\n                this.classes.forEach((c) => {\n                    if (hasActiveLinks) {\n                        this.renderer.addClass(this.element.nativeElement, c);\n                    }\n                    else {\n                        this.renderer.removeClass(this.element.nativeElement, c);\n                    }\n                });\n            }\n        });\n    }\n    isLinkActive(router) {\n        return (link) => router.isActive(link.urlTree, this.routerLinkActiveOptions.exact);\n    }\n    hasActiveLinks() {\n        const isActiveCheckFn = this.isLinkActive(this.router);\n        return this.link && isActiveCheckFn(this.link) ||\n            this.linkWithHref && isActiveCheckFn(this.linkWithHref) ||\n            this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);\n    }\n}\nRouterLinkActive.ɵfac = function RouterLinkActive_Factory(t) { return new (t || RouterLinkActive)(ɵngcc0.ɵɵdirectiveInject(Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(RouterLink, 8), ɵngcc0.ɵɵdirectiveInject(RouterLinkWithHref, 8)); };\nRouterLinkActive.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RouterLinkActive, selectors: [[\"\", \"routerLinkActive\", \"\"]], contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, RouterLink, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, RouterLinkWithHref, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.links = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.linksWithHrefs = _t);\n    } }, inputs: { routerLinkActiveOptions: \"routerLinkActiveOptions\", routerLinkActive: \"routerLinkActive\" }, exportAs: [\"routerLinkActive\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nRouterLinkActive.ctorParameters = () => [\n    { type: Router },\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: ChangeDetectorRef },\n    { type: RouterLink, decorators: [{ type: Optional }] },\n    { type: RouterLinkWithHref, decorators: [{ type: Optional }] }\n];\nRouterLinkActive.propDecorators = {\n    links: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],\n    linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],\n    routerLinkActiveOptions: [{ type: Input }],\n    routerLinkActive: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterLinkActive, [{\n        type: Directive,\n        args: [{\n                selector: '[routerLinkActive]',\n                exportAs: 'routerLinkActive'\n            }]\n    }], function () { return [{ type: Router }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: RouterLink, decorators: [{\n                type: Optional\n            }] }, { type: RouterLinkWithHref, decorators: [{\n                type: Optional\n            }] }]; }, { routerLinkActiveOptions: [{\n            type: Input\n        }], routerLinkActive: [{\n            type: Input\n        }], links: [{\n            type: ContentChildren,\n            args: [RouterLink, { descendants: true }]\n        }], linksWithHrefs: [{\n            type: ContentChildren,\n            args: [RouterLinkWithHref, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * and a deactivate event when a component is destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * @ngModule RouterModule\n *\n * @publicApi\n */\nclass RouterOutlet {\n    constructor(parentContexts, location, resolver, name, changeDetector) {\n        this.parentContexts = parentContexts;\n        this.location = location;\n        this.resolver = resolver;\n        this.changeDetector = changeDetector;\n        this.activated = null;\n        this._activatedRoute = null;\n        this.activateEvents = new EventEmitter();\n        this.deactivateEvents = new EventEmitter();\n        this.name = name || PRIMARY_OUTLET;\n        parentContexts.onChildOutletCreated(this.name, this);\n    }\n    ngOnDestroy() {\n        this.parentContexts.onChildOutletDestroyed(this.name);\n    }\n    ngOnInit() {\n        if (!this.activated) {\n            // If the outlet was not instantiated at the time the route got activated we need to populate\n            // the outlet when it is initialized (ie inside a NgIf)\n            const context = this.parentContexts.getContext(this.name);\n            if (context && context.route) {\n                if (context.attachRef) {\n                    // `attachRef` is populated when there is an existing component to mount\n                    this.attach(context.attachRef, context.route);\n                }\n                else {\n                    // otherwise the component defined in the configuration is created\n                    this.activateWith(context.route, context.resolver || null);\n                }\n            }\n        }\n    }\n    get isActivated() {\n        return !!this.activated;\n    }\n    get component() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        return this.activated.instance;\n    }\n    get activatedRoute() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        return this._activatedRoute;\n    }\n    get activatedRouteData() {\n        if (this._activatedRoute) {\n            return this._activatedRoute.snapshot.data;\n        }\n        return {};\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to detach the subtree\n     */\n    detach() {\n        if (!this.activated)\n            throw new Error('Outlet is not activated');\n        this.location.detach();\n        const cmp = this.activated;\n        this.activated = null;\n        this._activatedRoute = null;\n        return cmp;\n    }\n    /**\n     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n     */\n    attach(ref, activatedRoute) {\n        this.activated = ref;\n        this._activatedRoute = activatedRoute;\n        this.location.insert(ref.hostView);\n    }\n    deactivate() {\n        if (this.activated) {\n            const c = this.component;\n            this.activated.destroy();\n            this.activated = null;\n            this._activatedRoute = null;\n            this.deactivateEvents.emit(c);\n        }\n    }\n    activateWith(activatedRoute, resolver) {\n        if (this.isActivated) {\n            throw new Error('Cannot activate an already activated outlet');\n        }\n        this._activatedRoute = activatedRoute;\n        const snapshot = activatedRoute._futureSnapshot;\n        const component = snapshot.routeConfig.component;\n        resolver = resolver || this.resolver;\n        const factory = resolver.resolveComponentFactory(component);\n        const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n        const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n        this.activated = this.location.createComponent(factory, this.location.length, injector);\n        // Calling `markForCheck` to make sure we will run the change detection when the\n        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n        this.changeDetector.markForCheck();\n        this.activateEvents.emit(this.activated.instance);\n    }\n}\nRouterOutlet.ɵfac = function RouterOutlet_Factory(t) { return new (t || RouterOutlet)(ɵngcc0.ɵɵdirectiveInject(ChildrenOutletContexts), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinjectAttribute('name'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nRouterOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RouterOutlet, selectors: [[\"router-outlet\"]], outputs: { activateEvents: \"activate\", deactivateEvents: \"deactivate\" }, exportAs: [\"outlet\"] });\nRouterOutlet.ctorParameters = () => [\n    { type: ChildrenOutletContexts },\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver },\n    { type: String, decorators: [{ type: Attribute, args: ['name',] }] },\n    { type: ChangeDetectorRef }\n];\nRouterOutlet.propDecorators = {\n    activateEvents: [{ type: Output, args: ['activate',] }],\n    deactivateEvents: [{ type: Output, args: ['deactivate',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterOutlet, [{\n        type: Directive,\n        args: [{ selector: 'router-outlet', exportAs: 'outlet' }]\n    }], function () { return [{ type: ChildrenOutletContexts }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['name']\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { activateEvents: [{\n            type: Output,\n            args: ['activate']\n        }], deactivateEvents: [{\n            type: Output,\n            args: ['deactivate']\n        }] }); })();\nclass OutletInjector {\n    constructor(route, childContexts, parent) {\n        this.route = route;\n        this.childContexts = childContexts;\n        this.parent = parent;\n    }\n    get(token, notFoundValue) {\n        if (token === ActivatedRoute) {\n            return this.route;\n        }\n        if (token === ChildrenOutletContexts) {\n            return this.childContexts;\n        }\n        return this.parent.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nclass PreloadingStrategy {\n}\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nclass PreloadAllModules {\n    preload(route, fn) {\n        return fn().pipe(catchError(() => of(null)));\n    }\n}\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nclass NoPreloading {\n    preload(route, fn) {\n        return of(null);\n    }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\nclass RouterPreloader {\n    constructor(router, moduleLoader, compiler, injector, preloadingStrategy) {\n        this.router = router;\n        this.injector = injector;\n        this.preloadingStrategy = preloadingStrategy;\n        const onStartLoad = (r) => router.triggerEvent(new RouteConfigLoadStart(r));\n        const onEndLoad = (r) => router.triggerEvent(new RouteConfigLoadEnd(r));\n        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n    }\n    setUpPreloading() {\n        this.subscription =\n            this.router.events\n                .pipe(filter((e) => e instanceof NavigationEnd), concatMap(() => this.preload()))\n                .subscribe(() => { });\n    }\n    preload() {\n        const ngModule = this.injector.get(NgModuleRef);\n        return this.processRoutes(ngModule, this.router.config);\n    }\n    // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n    // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n    // should be refactored.\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n    processRoutes(ngModule, routes) {\n        const res = [];\n        for (const route of routes) {\n            // we already have the config loaded, just recurse\n            if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n                const childConfig = route._loadedConfig;\n                res.push(this.processRoutes(childConfig.module, childConfig.routes));\n                // no config loaded, fetch the config\n            }\n            else if (route.loadChildren && !route.canLoad) {\n                res.push(this.preloadConfig(ngModule, route));\n                // recurse into children\n            }\n            else if (route.children) {\n                res.push(this.processRoutes(ngModule, route.children));\n            }\n        }\n        return from(res).pipe(mergeAll(), map((_) => void 0));\n    }\n    preloadConfig(ngModule, route) {\n        return this.preloadingStrategy.preload(route, () => {\n            const loaded$ = this.loader.load(ngModule.injector, route);\n            return loaded$.pipe(mergeMap((config) => {\n                route._loadedConfig = config;\n                return this.processRoutes(config.module, config.routes);\n            }));\n        });\n    }\n}\nRouterPreloader.ɵfac = function RouterPreloader_Factory(t) { return new (t || RouterPreloader)(ɵngcc0.ɵɵinject(Router), ɵngcc0.ɵɵinject(ɵngcc0.NgModuleFactoryLoader), ɵngcc0.ɵɵinject(ɵngcc0.Compiler), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(PreloadingStrategy)); };\nRouterPreloader.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RouterPreloader, factory: RouterPreloader.ɵfac });\nRouterPreloader.ctorParameters = () => [\n    { type: Router },\n    { type: NgModuleFactoryLoader },\n    { type: Compiler },\n    { type: Injector },\n    { type: PreloadingStrategy }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterPreloader, [{\n        type: Injectable\n    }], function () { return [{ type: Router }, { type: ɵngcc0.NgModuleFactoryLoader }, { type: ɵngcc0.Compiler }, { type: ɵngcc0.Injector }, { type: PreloadingStrategy }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass RouterScroller {\n    constructor(router, \n    /** @docsNotRequired */ viewportScroller, options = {}) {\n        this.router = router;\n        this.viewportScroller = viewportScroller;\n        this.options = options;\n        this.lastId = 0;\n        this.lastSource = 'imperative';\n        this.restoredId = 0;\n        this.store = {};\n        // Default both options to 'disabled'\n        options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n        options.anchorScrolling = options.anchorScrolling || 'disabled';\n    }\n    init() {\n        // we want to disable the automatic scrolling because having two places\n        // responsible for scrolling results race conditions, especially given\n        // that browser don't implement this behavior consistently\n        if (this.options.scrollPositionRestoration !== 'disabled') {\n            this.viewportScroller.setHistoryScrollRestoration('manual');\n        }\n        this.routerEventsSubscription = this.createScrollEvents();\n        this.scrollEventsSubscription = this.consumeScrollEvents();\n    }\n    createScrollEvents() {\n        return this.router.events.subscribe(e => {\n            if (e instanceof NavigationStart) {\n                // store the scroll position of the current stable navigations.\n                this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n                this.lastSource = e.navigationTrigger;\n                this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n            }\n            else if (e instanceof NavigationEnd) {\n                this.lastId = e.id;\n                this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);\n            }\n        });\n    }\n    consumeScrollEvents() {\n        return this.router.events.subscribe(e => {\n            if (!(e instanceof Scroll))\n                return;\n            // a popstate event. The pop state event will always ignore anchor scrolling.\n            if (e.position) {\n                if (this.options.scrollPositionRestoration === 'top') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n                else if (this.options.scrollPositionRestoration === 'enabled') {\n                    this.viewportScroller.scrollToPosition(e.position);\n                }\n                // imperative navigation \"forward\"\n            }\n            else {\n                if (e.anchor && this.options.anchorScrolling === 'enabled') {\n                    this.viewportScroller.scrollToAnchor(e.anchor);\n                }\n                else if (this.options.scrollPositionRestoration !== 'disabled') {\n                    this.viewportScroller.scrollToPosition([0, 0]);\n                }\n            }\n        });\n    }\n    scheduleScrollEvent(routerEvent, anchor) {\n        this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n    }\n    ngOnDestroy() {\n        if (this.routerEventsSubscription) {\n            this.routerEventsSubscription.unsubscribe();\n        }\n        if (this.scrollEventsSubscription) {\n            this.scrollEventsSubscription.unsubscribe();\n        }\n    }\n}\nRouterScroller.ɵfac = function RouterScroller_Factory(t) { return new (t || RouterScroller)(ɵngcc0.ɵɵinject(Router), ɵngcc0.ɵɵinject(ɵngcc1.ViewportScroller), ɵngcc0.ɵɵinject(undefined)); };\nRouterScroller.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RouterScroller, factory: RouterScroller.ɵfac });\nRouterScroller.ctorParameters = () => [\n    { type: Router },\n    { type: ViewportScroller },\n    { type: undefined }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterScroller, [{\n        type: Injectable\n    }], function () { return [{ type: Router }, { type: ɵngcc1.ViewportScroller }, { type: undefined }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent];\n/**\n * A [DI token](guide/glossary/#di-token) for the router service.\n *\n * @publicApi\n */\nconst ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');\n/**\n * @docsNotRequired\n */\nconst ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');\nconst ɵ0 = { enableTracing: false };\nconst ROUTER_PROVIDERS = [\n    Location,\n    { provide: UrlSerializer, useClass: DefaultUrlSerializer },\n    {\n        provide: Router,\n        useFactory: setupRouter,\n        deps: [\n            UrlSerializer, ChildrenOutletContexts, Location, Injector, NgModuleFactoryLoader, Compiler,\n            ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\n            [RouteReuseStrategy, new Optional()]\n        ]\n    },\n    ChildrenOutletContexts,\n    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },\n    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },\n    RouterPreloader,\n    NoPreloading,\n    PreloadAllModules,\n    { provide: ROUTER_CONFIGURATION, useValue: ɵ0 },\n];\nfunction routerNgProbeToken() {\n    return new NgProbeToken('Router', Router);\n}\n/**\n * @usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router service solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * @see [Routing and Navigation](guide/router.html) for an\n * overview of how the router service should be used.\n *\n * @publicApi\n */\nclass RouterModule {\n    // Note: We are injecting the Router so it gets created eagerly...\n    constructor(guard, router) { }\n    /**\n     * Creates and configures a module with all the router providers and directives.\n     * Optionally sets up an application listener to perform an initial navigation.\n     *\n     * @param routes An array of `Route` objects that define the navigation paths for the application.\n     * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n     * @return The new router module.\n     */\n    static forRoot(routes, config) {\n        return {\n            ngModule: RouterModule,\n            providers: [\n                ROUTER_PROVIDERS,\n                provideRoutes(routes),\n                {\n                    provide: ROUTER_FORROOT_GUARD,\n                    useFactory: provideForRootGuard,\n                    deps: [[Router, new Optional(), new SkipSelf()]]\n                },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n                {\n                    provide: LocationStrategy,\n                    useFactory: provideLocationStrategy,\n                    deps: [PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION]\n                },\n                {\n                    provide: RouterScroller,\n                    useFactory: createRouterScroller,\n                    deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n                },\n                {\n                    provide: PreloadingStrategy,\n                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                        NoPreloading\n                },\n                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },\n                provideRouterInitializer(),\n            ],\n        };\n    }\n    /**\n     * Creates a module with all the router directives and a provider registering routes.\n     */\n    static forChild(routes) {\n        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };\n    }\n}\nRouterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: RouterModule });\nRouterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function RouterModule_Factory(t) { return new (t || RouterModule)(ɵngcc0.ɵɵinject(ROUTER_FORROOT_GUARD, 8), ɵngcc0.ɵɵinject(Router, 8)); } });\nRouterModule.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] }] },\n    { type: Router, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RouterModule, { declarations: [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent], exports: [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterModule, [{\n        type: NgModule,\n        args: [{\n                declarations: ROUTER_DIRECTIVES,\n                exports: ROUTER_DIRECTIVES,\n                entryComponents: [ɵEmptyOutletComponent]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ROUTER_FORROOT_GUARD]\n            }] }, { type: Router, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\nfunction createRouterScroller(router, viewportScroller, config) {\n    if (config.scrollOffset) {\n        viewportScroller.setOffset(config.scrollOffset);\n    }\n    return new RouterScroller(router, viewportScroller, config);\n}\nfunction provideLocationStrategy(platformLocationStrategy, baseHref, options = {}) {\n    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n        new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\nfunction provideForRootGuard(router) {\n    if (router) {\n        throw new Error(`RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n    }\n    return 'guarded';\n}\n/**\n * Registers a [DI provider](guide/glossary#provider) for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @publicApi\n */\nfunction provideRoutes(routes) {\n    return [\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },\n        { provide: ROUTES, multi: true, useValue: routes },\n    ];\n}\nfunction setupRouter(urlSerializer, contexts, location, injector, loader, compiler, config, opts = {}, urlHandlingStrategy, routeReuseStrategy) {\n    const router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n    if (urlHandlingStrategy) {\n        router.urlHandlingStrategy = urlHandlingStrategy;\n    }\n    if (routeReuseStrategy) {\n        router.routeReuseStrategy = routeReuseStrategy;\n    }\n    if (opts.errorHandler) {\n        router.errorHandler = opts.errorHandler;\n    }\n    if (opts.malformedUriErrorHandler) {\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n    }\n    if (opts.enableTracing) {\n        const dom = ɵgetDOM();\n        router.events.subscribe((e) => {\n            dom.logGroup(`Router Event: ${e.constructor.name}`);\n            dom.log(e.toString());\n            dom.log(e);\n            dom.logGroupEnd();\n        });\n    }\n    if (opts.onSameUrlNavigation) {\n        router.onSameUrlNavigation = opts.onSameUrlNavigation;\n    }\n    if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n    }\n    if (opts.urlUpdateStrategy) {\n        router.urlUpdateStrategy = opts.urlUpdateStrategy;\n    }\n    if (opts.relativeLinkResolution) {\n        router.relativeLinkResolution = opts.relativeLinkResolution;\n    }\n    return router;\n}\nfunction rootRoute(router) {\n    return router.routerState.root;\n}\n/**\n * Router initialization requires two steps:\n *\n * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if\n * a resolver or a guard executes asynchronously.\n *\n * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the\n * `afterPreactivation` hook provided by the router.\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\nclass RouterInitializer {\n    constructor(injector) {\n        this.injector = injector;\n        this.initNavigation = false;\n        this.resultOfPreactivationDone = new Subject();\n    }\n    appInitializer() {\n        const p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n        return p.then(() => {\n            let resolve = null;\n            const res = new Promise(r => resolve = r);\n            const router = this.injector.get(Router);\n            const opts = this.injector.get(ROUTER_CONFIGURATION);\n            if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'disabled') {\n                router.setUpLocationChangeListener();\n                resolve(true);\n            }\n            else if (opts.initialNavigation === 'enabled') {\n                router.hooks.afterPreactivation = () => {\n                    // only the initial navigation should be delayed\n                    if (!this.initNavigation) {\n                        this.initNavigation = true;\n                        resolve(true);\n                        return this.resultOfPreactivationDone;\n                        // subsequent navigations should not be delayed\n                    }\n                    else {\n                        return of(null);\n                    }\n                };\n                router.initialNavigation();\n            }\n            else {\n                throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n            }\n            return res;\n        });\n    }\n    bootstrapListener(bootstrappedComponentRef) {\n        const opts = this.injector.get(ROUTER_CONFIGURATION);\n        const preloader = this.injector.get(RouterPreloader);\n        const routerScroller = this.injector.get(RouterScroller);\n        const router = this.injector.get(Router);\n        const ref = this.injector.get(ApplicationRef);\n        if (bootstrappedComponentRef !== ref.components[0]) {\n            return;\n        }\n        if (this.isLegacyEnabled(opts)) {\n            router.initialNavigation();\n        }\n        else if (this.isLegacyDisabled(opts)) {\n            router.setUpLocationChangeListener();\n        }\n        preloader.setUpPreloading();\n        routerScroller.init();\n        router.resetRootComponentType(ref.componentTypes[0]);\n        this.resultOfPreactivationDone.next(null);\n        this.resultOfPreactivationDone.complete();\n    }\n    isLegacyEnabled(opts) {\n        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n            opts.initialNavigation === undefined;\n    }\n    isLegacyDisabled(opts) {\n        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n    }\n}\nRouterInitializer.ɵfac = function RouterInitializer_Factory(t) { return new (t || RouterInitializer)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nRouterInitializer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RouterInitializer, factory: RouterInitializer.ɵfac });\nRouterInitializer.ctorParameters = () => [\n    { type: Injector }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterInitializer, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();\nfunction getAppInitializer(r) {\n    return r.appInitializer.bind(r);\n}\nfunction getBootstrapListener(r) {\n    return r.bootstrapListener.bind(r);\n}\n/**\n * A [DI token](guide/glossary/#di-token) for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nconst ROUTER_INITIALIZER = new InjectionToken('Router Initializer');\nfunction provideRouterInitializer() {\n    return [\n        RouterInitializer,\n        {\n            provide: APP_INITIALIZER,\n            multi: true,\n            useFactory: getAppInitializer,\n            deps: [RouterInitializer]\n        },\n        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },\n        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },\n    ];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('10.0.3');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultUrlSerializer, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, NoPreloading, OutletContext, PRIMARY_OUTLET, PreloadAllModules, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, ROUTES, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, Router, RouterEvent, RouterLink, RouterLinkActive, RouterLinkWithHref, RouterModule, RouterOutlet, RouterPreloader, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VERSION, convertToParamMap, provideRoutes, ɵEmptyOutletComponent, ROUTER_PROVIDERS as ɵROUTER_PROVIDERS, ROUTER_FORROOT_GUARD as ɵangular_packages_router_router_a, routerNgProbeToken as ɵangular_packages_router_router_b, createRouterScroller as ɵangular_packages_router_router_c, provideLocationStrategy as ɵangular_packages_router_router_d, provideForRootGuard as ɵangular_packages_router_router_e, setupRouter as ɵangular_packages_router_router_f, rootRoute as ɵangular_packages_router_router_g, RouterInitializer as ɵangular_packages_router_router_h, getAppInitializer as ɵangular_packages_router_router_i, getBootstrapListener as ɵangular_packages_router_router_j, provideRouterInitializer as ɵangular_packages_router_router_k, ɵEmptyOutletComponent as ɵangular_packages_router_router_l, Tree as ɵangular_packages_router_router_m, TreeNode as ɵangular_packages_router_router_n, RouterScroller as ɵangular_packages_router_router_o, flatten as ɵflatten };\n\n//# sourceMappingURL=router.js.map","import { EmptyError } from '../util/EmptyError';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\nexport function last(predicate, defaultValue) {\n    const hasDefaultValue = arguments.length >= 2;\n    return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));\n}\n//# sourceMappingURL=last.js.map","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAC_ENTER = 3;\nconst BACKSPACE = 8;\nconst TAB = 9;\nconst NUM_CENTER = 12;\nconst ENTER = 13;\nconst SHIFT = 16;\nconst CONTROL = 17;\nconst ALT = 18;\nconst PAUSE = 19;\nconst CAPS_LOCK = 20;\nconst ESCAPE = 27;\nconst SPACE = 32;\nconst PAGE_UP = 33;\nconst PAGE_DOWN = 34;\nconst END = 35;\nconst HOME = 36;\nconst LEFT_ARROW = 37;\nconst UP_ARROW = 38;\nconst RIGHT_ARROW = 39;\nconst DOWN_ARROW = 40;\nconst PLUS_SIGN = 43;\nconst PRINT_SCREEN = 44;\nconst INSERT = 45;\nconst DELETE = 46;\nconst ZERO = 48;\nconst ONE = 49;\nconst TWO = 50;\nconst THREE = 51;\nconst FOUR = 52;\nconst FIVE = 53;\nconst SIX = 54;\nconst SEVEN = 55;\nconst EIGHT = 56;\nconst NINE = 57;\nconst FF_SEMICOLON = 59; // Firefox (Gecko) fires this for semicolon instead of 186\nconst FF_EQUALS = 61; // Firefox (Gecko) fires this for equals instead of 187\nconst QUESTION_MARK = 63;\nconst AT_SIGN = 64;\nconst A = 65;\nconst B = 66;\nconst C = 67;\nconst D = 68;\nconst E = 69;\nconst F = 70;\nconst G = 71;\nconst H = 72;\nconst I = 73;\nconst J = 74;\nconst K = 75;\nconst L = 76;\nconst M = 77;\nconst N = 78;\nconst O = 79;\nconst P = 80;\nconst Q = 81;\nconst R = 82;\nconst S = 83;\nconst T = 84;\nconst U = 85;\nconst V = 86;\nconst W = 87;\nconst X = 88;\nconst Y = 89;\nconst Z = 90;\nconst META = 91; // WIN_KEY_LEFT\nconst MAC_WK_CMD_LEFT = 91;\nconst MAC_WK_CMD_RIGHT = 93;\nconst CONTEXT_MENU = 93;\nconst NUMPAD_ZERO = 96;\nconst NUMPAD_ONE = 97;\nconst NUMPAD_TWO = 98;\nconst NUMPAD_THREE = 99;\nconst NUMPAD_FOUR = 100;\nconst NUMPAD_FIVE = 101;\nconst NUMPAD_SIX = 102;\nconst NUMPAD_SEVEN = 103;\nconst NUMPAD_EIGHT = 104;\nconst NUMPAD_NINE = 105;\nconst NUMPAD_MULTIPLY = 106;\nconst NUMPAD_PLUS = 107;\nconst NUMPAD_MINUS = 109;\nconst NUMPAD_PERIOD = 110;\nconst NUMPAD_DIVIDE = 111;\nconst F1 = 112;\nconst F2 = 113;\nconst F3 = 114;\nconst F4 = 115;\nconst F5 = 116;\nconst F6 = 117;\nconst F7 = 118;\nconst F8 = 119;\nconst F9 = 120;\nconst F10 = 121;\nconst F11 = 122;\nconst F12 = 123;\nconst NUM_LOCK = 144;\nconst SCROLL_LOCK = 145;\nconst FIRST_MEDIA = 166;\nconst FF_MINUS = 173;\nconst MUTE = 173; // Firefox (Gecko) fires 181 for MUTE\nconst VOLUME_DOWN = 174; // Firefox (Gecko) fires 182 for VOLUME_DOWN\nconst VOLUME_UP = 175; // Firefox (Gecko) fires 183 for VOLUME_UP\nconst FF_MUTE = 181;\nconst FF_VOLUME_DOWN = 182;\nconst LAST_MEDIA = 183;\nconst FF_VOLUME_UP = 183;\nconst SEMICOLON = 186; // Firefox (Gecko) fires 59 for SEMICOLON\nconst EQUALS = 187; // Firefox (Gecko) fires 61 for EQUALS\nconst COMMA = 188;\nconst DASH = 189; // Firefox (Gecko) fires 173 for DASH/MINUS\nconst SLASH = 191;\nconst APOSTROPHE = 192;\nconst TILDE = 192;\nconst OPEN_SQUARE_BRACKET = 219;\nconst BACKSLASH = 220;\nconst CLOSE_SQUARE_BRACKET = 221;\nconst SINGLE_QUOTE = 222;\nconst MAC_META = 224;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Checks whether a modifier key is pressed.\n * @param event Event to be checked.\n */\nfunction hasModifierKey(event, ...modifiers) {\n    if (modifiers.length) {\n        return modifiers.some(modifier => event[modifier]);\n    }\n    return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A, ALT, APOSTROPHE, AT_SIGN, B, BACKSLASH, BACKSPACE, C, CAPS_LOCK, CLOSE_SQUARE_BRACKET, COMMA, CONTEXT_MENU, CONTROL, D, DASH, DELETE, DOWN_ARROW, E, EIGHT, END, ENTER, EQUALS, ESCAPE, F, F1, F10, F11, F12, F2, F3, F4, F5, F6, F7, F8, F9, FF_EQUALS, FF_MINUS, FF_MUTE, FF_SEMICOLON, FF_VOLUME_DOWN, FF_VOLUME_UP, FIRST_MEDIA, FIVE, FOUR, G, H, HOME, I, INSERT, J, K, L, LAST_MEDIA, LEFT_ARROW, M, MAC_ENTER, MAC_META, MAC_WK_CMD_LEFT, MAC_WK_CMD_RIGHT, META, MUTE, N, NINE, NUMPAD_DIVIDE, NUMPAD_EIGHT, NUMPAD_FIVE, NUMPAD_FOUR, NUMPAD_MINUS, NUMPAD_MULTIPLY, NUMPAD_NINE, NUMPAD_ONE, NUMPAD_PERIOD, NUMPAD_PLUS, NUMPAD_SEVEN, NUMPAD_SIX, NUMPAD_THREE, NUMPAD_TWO, NUMPAD_ZERO, NUM_CENTER, NUM_LOCK, O, ONE, OPEN_SQUARE_BRACKET, P, PAGE_DOWN, PAGE_UP, PAUSE, PLUS_SIGN, PRINT_SCREEN, Q, QUESTION_MARK, R, RIGHT_ARROW, S, SCROLL_LOCK, SEMICOLON, SEVEN, SHIFT, SINGLE_QUOTE, SIX, SLASH, SPACE, T, TAB, THREE, TILDE, TWO, U, UP_ARROW, V, VOLUME_DOWN, VOLUME_UP, W, X, Y, Z, ZERO, hasModifierKey };\n\n//# sourceMappingURL=keycodes.js.map","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n//# sourceMappingURL=Action.js.map","import { Action } from './Action';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, id, delay = 0) {\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(scheduler, id, delay = 0) {\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        clearInterval(id);\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, delay) {\n        let errored = false;\n        let errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    _unsubscribe() {\n        const id = this.id;\n        const scheduler = this.scheduler;\n        const actions = scheduler.actions;\n        const index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    }\n}\n//# sourceMappingURL=AsyncAction.js.map","export class Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = () => Date.now();\n//# sourceMappingURL=Scheduler.js.map","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, () => {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        });\n        this.actions = [];\n        this.active = false;\n        this.scheduled = undefined;\n    }\n    schedule(work, delay = 0, state) {\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return super.schedule(work, delay, state);\n        }\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift());\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n//# sourceMappingURL=AsyncScheduler.js.map","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const async = new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function debounceTime(dueTime, scheduler = async) {\n    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\nclass DebounceTimeOperator {\n    constructor(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    }\n}\nclass DebounceTimeSubscriber extends Subscriber {\n    constructor(destination, dueTime, scheduler) {\n        super(destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    }\n    _complete() {\n        this.debouncedNext();\n        this.destination.complete();\n    }\n    debouncedNext() {\n        this.clearDebounce();\n        if (this.hasValue) {\n            const { lastValue } = this;\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    }\n    clearDebounce() {\n        const debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    }\n}\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","import { ElementRef } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty };\n//# sourceMappingURL=coercion.js.map\n","import { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nimport * as ɵngcc0 from '@angular/core';\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\n}\ncatch (_a) {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nlet Platform = /** @class */ (() => {\n    class Platform {\n        constructor(_platformId) {\n            this._platformId = _platformId;\n            // We want to use the Angular platform check because if the Document is shimmed\n            // without the navigator, the following checks will fail. This is preferred because\n            // sometimes the Document may be shimmed without the user's knowledge or intention\n            /** Whether the Angular application is being rendered in the browser. */\n            this.isBrowser = this._platformId ?\n                isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n            /** Whether the current browser is Microsoft Edge. */\n            this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n            /** Whether the current rendering engine is Microsoft Trident. */\n            this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n            // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n            /** Whether the current rendering engine is Blink. */\n            this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\n                typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n            // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n            // ensure that Webkit runs standalone and is not used as another engine's base.\n            /** Whether the current rendering engine is WebKit. */\n            this.WEBKIT = this.isBrowser &&\n                /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n            /** Whether the current platform is Apple iOS. */\n            this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n                !('MSStream' in window);\n            // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n            // them self as Gecko-like browsers and modify the userAgent's according to that.\n            // Since we only cover one explicit Firefox case, we can simply check for Firefox\n            // instead of having an unstable check for Gecko.\n            /** Whether the current browser is Firefox. */\n            this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n            /** Whether the current platform is Android. */\n            // Trident on mobile adds the android platform to the userAgent to trick detections.\n            this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n            // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n            // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n            // Safari browser should also use Webkit as its layout engine.\n            /** Whether the current browser is Safari. */\n            this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n        }\n    }\nPlatform.ɵfac = function Platform_Factory(t) { return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };\n    Platform.ɵprov = ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(ɵɵinject(PLATFORM_ID)); }, token: Platform, providedIn: \"root\" });\n    Platform.ctorParameters = () => [\n        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Platform, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }]; }, null); })();\n    return Platform;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet PlatformModule = /** @class */ (() => {\n    class PlatformModule {\n    }\nPlatformModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PlatformModule });\nPlatformModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PlatformModule_Factory(t) { return new (t || PlatformModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PlatformModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n    return PlatformModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/** @returns The input types supported by this browser. */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    }));\n    return supportedInputTypes;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n                get: () => supportsPassiveEvents = true\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType;\n/** Check whether the browser supports scroll behaviors. */\nfunction supportsScrollBehavior() {\n    return !!(typeof document == 'object' && 'scrollBehavior' in document.documentElement.style);\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        const scrollContainer = document.createElement('div');\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.height = '1px';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        const content = document.createElement('div');\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* NEGATED */ : 2 /* INVERTED */;\n        }\n        scrollContainer.parentNode.removeChild(scrollContainer);\n    }\n    return rtlScrollAxisType;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n\n//# sourceMappingURL=platform.js.map","import { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nlet MutationObserverFactory = /** @class */ (() => {\n    class MutationObserverFactory {\n        create(callback) {\n            return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n        }\n    }\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\n    MutationObserverFactory.ɵprov = ɵɵdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n    return MutationObserverFactory;\n})();\n/** An injectable service that allows watching elements for changes to their content. */\nlet ContentObserver = /** @class */ (() => {\n    class ContentObserver {\n        constructor(_mutationObserverFactory) {\n            this._mutationObserverFactory = _mutationObserverFactory;\n            /** Keeps track of the existing MutationObservers so they can be reused. */\n            this._observedElements = new Map();\n        }\n        ngOnDestroy() {\n            this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n        }\n        observe(elementOrRef) {\n            const element = coerceElement(elementOrRef);\n            return new Observable((observer) => {\n                const stream = this._observeElement(element);\n                const subscription = stream.subscribe(observer);\n                return () => {\n                    subscription.unsubscribe();\n                    this._unobserveElement(element);\n                };\n            });\n        }\n        /**\n         * Observes the given element by using the existing MutationObserver if available, or creating a\n         * new one if not.\n         */\n        _observeElement(element) {\n            if (!this._observedElements.has(element)) {\n                const stream = new Subject();\n                const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n                if (observer) {\n                    observer.observe(element, {\n                        characterData: true,\n                        childList: true,\n                        subtree: true\n                    });\n                }\n                this._observedElements.set(element, { observer, stream, count: 1 });\n            }\n            else {\n                this._observedElements.get(element).count++;\n            }\n            return this._observedElements.get(element).stream;\n        }\n        /**\n         * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n         * observing this element.\n         */\n        _unobserveElement(element) {\n            if (this._observedElements.has(element)) {\n                this._observedElements.get(element).count--;\n                if (!this._observedElements.get(element).count) {\n                    this._cleanupObserver(element);\n                }\n            }\n        }\n        /** Clean up the underlying MutationObserver for the specified element. */\n        _cleanupObserver(element) {\n            if (this._observedElements.has(element)) {\n                const { observer, stream } = this._observedElements.get(element);\n                if (observer) {\n                    observer.disconnect();\n                }\n                stream.complete();\n                this._observedElements.delete(element);\n            }\n        }\n    }\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\n    ContentObserver.ɵprov = ɵɵdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(ɵɵinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\n    ContentObserver.ctorParameters = () => [\n        { type: MutationObserverFactory }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\n    return ContentObserver;\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nlet CdkObserveContent = /** @class */ (() => {\n    class CdkObserveContent {\n        constructor(_contentObserver, _elementRef, _ngZone) {\n            this._contentObserver = _contentObserver;\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            /** Event emitted for each change in the element's content. */\n            this.event = new EventEmitter();\n            this._disabled = false;\n            this._currentSubscription = null;\n        }\n        /**\n         * Whether observing content is disabled. This option can be used\n         * to disconnect the underlying MutationObserver until it is needed.\n         */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._disabled ? this._unsubscribe() : this._subscribe();\n        }\n        /** Debounce interval for emitting the changes. */\n        get debounce() { return this._debounce; }\n        set debounce(value) {\n            this._debounce = coerceNumberProperty(value);\n            this._subscribe();\n        }\n        ngAfterContentInit() {\n            if (!this._currentSubscription && !this.disabled) {\n                this._subscribe();\n            }\n        }\n        ngOnDestroy() {\n            this._unsubscribe();\n        }\n        _subscribe() {\n            this._unsubscribe();\n            const stream = this._contentObserver.observe(this._elementRef);\n            // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n            // Consider brining it back inside the zone next time we're making breaking changes.\n            // Bringing it back inside can cause things like infinite change detection loops and changed\n            // after checked errors if people's code isn't handling it properly.\n            this._ngZone.runOutsideAngular(() => {\n                this._currentSubscription =\n                    (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n            });\n        }\n        _unsubscribe() {\n            if (this._currentSubscription) {\n                this._currentSubscription.unsubscribe();\n            }\n        }\n    }\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkObserveContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\n    CdkObserveContent.ctorParameters = () => [\n        { type: ContentObserver },\n        { type: ElementRef },\n        { type: NgZone }\n    ];\n    CdkObserveContent.propDecorators = {\n        event: [{ type: Output, args: ['cdkObserveContent',] }],\n        disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\n        debounce: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkObserveContent]',\n                exportAs: 'cdkObserveContent'\n            }]\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\n            type: Output,\n            args: ['cdkObserveContent']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkObserveContentDisabled']\n        }], debounce: [{\n            type: Input\n        }] }); })();\n    return CdkObserveContent;\n})();\nlet ObserversModule = /** @class */ (() => {\n    class ObserversModule {\n    }\nObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\nObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ObserversModule_Factory(t) { return new (t || ObserversModule)(); }, providers: [MutationObserverFactory] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkObserveContent],\n                declarations: [CdkObserveContent],\n                providers: [MutationObserverFactory]\n            }]\n    }], null, null); })();\n    return ObserversModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n\n//# sourceMappingURL=observers.js.map","import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, QueryList, isDevMode, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Platform, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** ID used for the body container where all messages are appended. */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nlet AriaDescriber = /** @class */ (() => {\n    class AriaDescriber {\n        constructor(_document) {\n            this._document = _document;\n        }\n        /**\n         * Adds to the host element an aria-describedby reference to a hidden element that contains\n         * the message. If the same message has already been registered, then it will reuse the created\n         * message element.\n         */\n        describe(hostElement, message) {\n            if (!this._canBeDescribed(hostElement, message)) {\n                return;\n            }\n            if (typeof message !== 'string') {\n                // We need to ensure that the element has an ID.\n                this._setMessageId(message);\n                messageRegistry.set(message, { messageElement: message, referenceCount: 0 });\n            }\n            else if (!messageRegistry.has(message)) {\n                this._createMessageElement(message);\n            }\n            if (!this._isElementDescribedByMessage(hostElement, message)) {\n                this._addMessageReference(hostElement, message);\n            }\n        }\n        /** Removes the host element's aria-describedby reference to the message element. */\n        removeDescription(hostElement, message) {\n            if (!this._isElementNode(hostElement)) {\n                return;\n            }\n            if (this._isElementDescribedByMessage(hostElement, message)) {\n                this._removeMessageReference(hostElement, message);\n            }\n            // If the message is a string, it means that it's one that we created for the\n            // consumer so we can remove it safely, otherwise we should leave it in place.\n            if (typeof message === 'string') {\n                const registeredMessage = messageRegistry.get(message);\n                if (registeredMessage && registeredMessage.referenceCount === 0) {\n                    this._deleteMessageElement(message);\n                }\n            }\n            if (messagesContainer && messagesContainer.childNodes.length === 0) {\n                this._deleteMessagesContainer();\n            }\n        }\n        /** Unregisters all created message elements and removes the message container. */\n        ngOnDestroy() {\n            const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n            for (let i = 0; i < describedElements.length; i++) {\n                this._removeCdkDescribedByReferenceIds(describedElements[i]);\n                describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n            }\n            if (messagesContainer) {\n                this._deleteMessagesContainer();\n            }\n            messageRegistry.clear();\n        }\n        /**\n         * Creates a new element in the visually hidden message container element with the message\n         * as its content and adds it to the message registry.\n         */\n        _createMessageElement(message) {\n            const messageElement = this._document.createElement('div');\n            this._setMessageId(messageElement);\n            messageElement.textContent = message;\n            this._createMessagesContainer();\n            messagesContainer.appendChild(messageElement);\n            messageRegistry.set(message, { messageElement, referenceCount: 0 });\n        }\n        /** Assigns a unique ID to an element, if it doesn't have one already. */\n        _setMessageId(element) {\n            if (!element.id) {\n                element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n            }\n        }\n        /** Deletes the message element from the global messages container. */\n        _deleteMessageElement(message) {\n            const registeredMessage = messageRegistry.get(message);\n            const messageElement = registeredMessage && registeredMessage.messageElement;\n            if (messagesContainer && messageElement) {\n                messagesContainer.removeChild(messageElement);\n            }\n            messageRegistry.delete(message);\n        }\n        /** Creates the global container for all aria-describedby messages. */\n        _createMessagesContainer() {\n            if (!messagesContainer) {\n                const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n                // When going from the server to the client, we may end up in a situation where there's\n                // already a container on the page, but we don't have a reference to it. Clear the\n                // old container so we don't get duplicates. Doing this, instead of emptying the previous\n                // container, should be slightly faster.\n                if (preExistingContainer) {\n                    preExistingContainer.parentNode.removeChild(preExistingContainer);\n                }\n                messagesContainer = this._document.createElement('div');\n                messagesContainer.id = MESSAGES_CONTAINER_ID;\n                messagesContainer.setAttribute('aria-hidden', 'true');\n                messagesContainer.style.display = 'none';\n                this._document.body.appendChild(messagesContainer);\n            }\n        }\n        /** Deletes the global messages container. */\n        _deleteMessagesContainer() {\n            if (messagesContainer && messagesContainer.parentNode) {\n                messagesContainer.parentNode.removeChild(messagesContainer);\n                messagesContainer = null;\n            }\n        }\n        /** Removes all cdk-describedby messages that are hosted through the element. */\n        _removeCdkDescribedByReferenceIds(element) {\n            // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n            const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n                .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n            element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n        }\n        /**\n         * Adds a message reference to the element using aria-describedby and increments the registered\n         * message's reference count.\n         */\n        _addMessageReference(element, message) {\n            const registeredMessage = messageRegistry.get(message);\n            // Add the aria-describedby reference and set the\n            // describedby_host attribute to mark the element.\n            addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n            element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n            registeredMessage.referenceCount++;\n        }\n        /**\n         * Removes a message reference from the element using aria-describedby\n         * and decrements the registered message's reference count.\n         */\n        _removeMessageReference(element, message) {\n            const registeredMessage = messageRegistry.get(message);\n            registeredMessage.referenceCount--;\n            removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n            element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        /** Returns true if the element has been described by the provided message ID. */\n        _isElementDescribedByMessage(element, message) {\n            const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n            const registeredMessage = messageRegistry.get(message);\n            const messageId = registeredMessage && registeredMessage.messageElement.id;\n            return !!messageId && referenceIds.indexOf(messageId) != -1;\n        }\n        /** Determines whether a message can be described on a particular element. */\n        _canBeDescribed(element, message) {\n            if (!this._isElementNode(element)) {\n                return false;\n            }\n            if (message && typeof message === 'object') {\n                // We'd have to make some assumptions about the description element's text, if the consumer\n                // passed in an element. Assume that if an element is passed in, the consumer has verified\n                // that it can be used as a description.\n                return true;\n            }\n            const trimmedMessage = message == null ? '' : `${message}`.trim();\n            const ariaLabel = element.getAttribute('aria-label');\n            // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n            // element, because screen readers will end up reading out the same text twice in a row.\n            return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n        }\n        /** Checks whether a node is an Element node. */\n        _isElementNode(element) {\n            return element.nodeType === this._document.ELEMENT_NODE;\n        }\n    }\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\n    AriaDescriber.ɵprov = ɵɵdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(ɵɵinject(DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\n    AriaDescriber.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return AriaDescriber;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nlet InteractivityChecker = /** @class */ (() => {\n    class InteractivityChecker {\n        constructor(_platform) {\n            this._platform = _platform;\n        }\n        /**\n         * Gets whether an element is disabled.\n         *\n         * @param element Element to be checked.\n         * @returns Whether the element is disabled.\n         */\n        isDisabled(element) {\n            // This does not capture some cases, such as a non-form control with a disabled attribute or\n            // a form control inside of a disabled form, but should capture the most common cases.\n            return element.hasAttribute('disabled');\n        }\n        /**\n         * Gets whether an element is visible for the purposes of interactivity.\n         *\n         * This will capture states like `display: none` and `visibility: hidden`, but not things like\n         * being clipped by an `overflow: hidden` parent or being outside the viewport.\n         *\n         * @returns Whether the element is visible.\n         */\n        isVisible(element) {\n            return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n        }\n        /**\n         * Gets whether an element can be reached via Tab key.\n         * Assumes that the element has already been checked with isFocusable.\n         *\n         * @param element Element to be checked.\n         * @returns Whether the element is tabbable.\n         */\n        isTabbable(element) {\n            // Nothing is tabbable on the server 😎\n            if (!this._platform.isBrowser) {\n                return false;\n            }\n            const frameElement = getFrameElement(getWindow(element));\n            if (frameElement) {\n                const frameType = frameElement && frameElement.nodeName.toLowerCase();\n                // Frame elements inherit their tabindex onto all child elements.\n                if (getTabIndexValue(frameElement) === -1) {\n                    return false;\n                }\n                // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n                if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n                    return false;\n                }\n                // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n                if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n                    return false;\n                }\n            }\n            let nodeName = element.nodeName.toLowerCase();\n            let tabIndexValue = getTabIndexValue(element);\n            if (element.hasAttribute('contenteditable')) {\n                return tabIndexValue !== -1;\n            }\n            if (nodeName === 'iframe') {\n                // The frames may be tabbable depending on content, but it's not possibly to reliably\n                // investigate the content of the frames.\n                return false;\n            }\n            if (nodeName === 'audio') {\n                if (!element.hasAttribute('controls')) {\n                    // By default an <audio> element without the controls enabled is not tabbable.\n                    return false;\n                }\n                else if (this._platform.BLINK) {\n                    // In Blink <audio controls> elements are always tabbable.\n                    return true;\n                }\n            }\n            if (nodeName === 'video') {\n                if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n                    // In Trident a <video> element without the controls enabled is not tabbable.\n                    return false;\n                }\n                else if (this._platform.BLINK || this._platform.FIREFOX) {\n                    // In Chrome and Firefox <video controls> elements are always tabbable.\n                    return true;\n                }\n            }\n            if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n                // In all Blink and WebKit based browsers <object> elements are never tabbable.\n                return false;\n            }\n            // In iOS the browser only considers some specific elements as tabbable.\n            if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n                return false;\n            }\n            return element.tabIndex >= 0;\n        }\n        /**\n         * Gets whether an element can be focused by the user.\n         *\n         * @param element Element to be checked.\n         * @returns Whether the element is focusable.\n         */\n        isFocusable(element) {\n            // Perform checks in order of left to most expensive.\n            // Again, naive approach that does not capture many edge cases and browser quirks.\n            return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n        }\n    }\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\n    InteractivityChecker.ɵprov = ɵɵdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(ɵɵinject(Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\n    InteractivityChecker.ctorParameters = () => [\n        { type: Platform }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n    return InteractivityChecker;\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusInitialElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusFirstTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusLastTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`);\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfuly.\n     */\n    focusInitialElement() {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if (isDevMode() && !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            redirectToElement.focus();\n            return true;\n        }\n        return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfuly.\n     */\n    focusFirstTabbableElement() {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfuly.\n     */\n    focusLastTabbableElement() {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nlet FocusTrapFactory = /** @class */ (() => {\n    class FocusTrapFactory {\n        constructor(_checker, _ngZone, _document) {\n            this._checker = _checker;\n            this._ngZone = _ngZone;\n            this._document = _document;\n        }\n        /**\n         * Creates a focus-trapped region around the given element.\n         * @param element The element around which focus will be trapped.\n         * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n         *     manually by the user.\n         * @returns The created focus trap instance.\n         */\n        create(element, deferCaptureElements = false) {\n            return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n        }\n    }\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n    FocusTrapFactory.ɵprov = ɵɵdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\n    FocusTrapFactory.ctorParameters = () => [\n        { type: InteractivityChecker },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return FocusTrapFactory;\n})();\n/** Directive for trapping focus within a region. */\nlet CdkTrapFocus = /** @class */ (() => {\n    class CdkTrapFocus {\n        constructor(_elementRef, _focusTrapFactory, _document) {\n            this._elementRef = _elementRef;\n            this._focusTrapFactory = _focusTrapFactory;\n            /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n            this._previouslyFocusedElement = null;\n            this._document = _document;\n            this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n        }\n        /** Whether the focus trap is active. */\n        get enabled() { return this.focusTrap.enabled; }\n        set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n        /**\n         * Whether the directive should automatially move focus into the trapped region upon\n         * initialization and return focus to the previous activeElement upon destruction.\n         */\n        get autoCapture() { return this._autoCapture; }\n        set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n        ngOnDestroy() {\n            this.focusTrap.destroy();\n            // If we stored a previously focused element when using autoCapture, return focus to that\n            // element now that the trapped region is being destroyed.\n            if (this._previouslyFocusedElement) {\n                this._previouslyFocusedElement.focus();\n                this._previouslyFocusedElement = null;\n            }\n        }\n        ngAfterContentInit() {\n            this.focusTrap.attachAnchors();\n            if (this.autoCapture) {\n                this._captureFocus();\n            }\n        }\n        ngDoCheck() {\n            if (!this.focusTrap.hasAttached()) {\n                this.focusTrap.attachAnchors();\n            }\n        }\n        ngOnChanges(changes) {\n            const autoCaptureChange = changes['autoCapture'];\n            if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n                this.focusTrap.hasAttached()) {\n                this._captureFocus();\n            }\n        }\n        _captureFocus() {\n            this._previouslyFocusedElement = this._document.activeElement;\n            this.focusTrap.focusInitialElementWhenReady();\n        }\n    }\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkTrapFocus.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusTrapFactory },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n    CdkTrapFocus.propDecorators = {\n        enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n        autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n    return CdkTrapFocus;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Whether the FocusTrap is enabled. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nfunction closest(element, selector) {\n    if (!(element instanceof Node)) {\n        return null;\n    }\n    let curr = element;\n    while (curr != null && !(curr instanceof Element)) {\n        curr = curr.parentNode;\n    }\n    return curr && (hasNativeClosest ?\n        curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element, selector) {\n    let curr = element;\n    while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n        curr = curr.parentNode;\n    }\n    return (curr || null);\n}\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\nfunction matches(element, selector) {\n    return element.matches ?\n        element.matches(selector) :\n        element['msMatchesSelector'](selector);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for creating a ConfigurableFocusTrap.\n */\nclass ConfigurableFocusTrapConfig {\n    constructor() {\n        /**\n         * Whether to defer the creation of FocusTrap elements to be\n         * done manually by the user. Default is to create them\n         * automatically.\n         */\n        this.defer = false;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nlet FocusTrapManager = /** @class */ (() => {\n    class FocusTrapManager {\n        constructor() {\n            // A stack of the FocusTraps on the page. Only the FocusTrap at the\n            // top of the stack is active.\n            this._focusTrapStack = [];\n        }\n        /**\n         * Disables the FocusTrap at the top of the stack, and then pushes\n         * the new FocusTrap onto the stack.\n         */\n        register(focusTrap) {\n            // Dedupe focusTraps that register multiple times.\n            this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n            let stack = this._focusTrapStack;\n            if (stack.length) {\n                stack[stack.length - 1]._disable();\n            }\n            stack.push(focusTrap);\n            focusTrap._enable();\n        }\n        /**\n         * Removes the FocusTrap from the stack, and activates the\n         * FocusTrap that is the new top of the stack.\n         */\n        deregister(focusTrap) {\n            focusTrap._disable();\n            const stack = this._focusTrapStack;\n            const i = stack.indexOf(focusTrap);\n            if (i !== -1) {\n                stack.splice(i, 1);\n                if (stack.length) {\n                    stack[stack.length - 1]._enable();\n                }\n            }\n        }\n    }\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) { return new (t || FocusTrapManager)(); };\n    FocusTrapManager.ɵprov = ɵɵdefineInjectable({ factory: function FocusTrapManager_Factory() { return new FocusTrapManager(); }, token: FocusTrapManager, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n    return FocusTrapManager;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nlet ConfigurableFocusTrapFactory = /** @class */ (() => {\n    class ConfigurableFocusTrapFactory {\n        constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n            this._checker = _checker;\n            this._ngZone = _ngZone;\n            this._focusTrapManager = _focusTrapManager;\n            this._document = _document;\n            // TODO split up the strategies into different modules, similar to DateAdapter.\n            this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n        }\n        create(element, config = new ConfigurableFocusTrapConfig()) {\n            let configObject;\n            if (typeof config === 'boolean') {\n                configObject = new ConfigurableFocusTrapConfig();\n                configObject.defer = config;\n            }\n            else {\n                configObject = config;\n            }\n            return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n        }\n    }\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) { return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); };\n    ConfigurableFocusTrapFactory.ɵprov = ɵɵdefineInjectable({ factory: function ConfigurableFocusTrapFactory_Factory() { return new ConfigurableFocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); }, token: ConfigurableFocusTrapFactory, providedIn: \"root\" });\n    ConfigurableFocusTrapFactory.ctorParameters = () => [\n        { type: InteractivityChecker },\n        { type: NgZone },\n        { type: FocusTrapManager },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_TRAP_INERT_STRATEGY,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_TRAP_INERT_STRATEGY]\n            }] }]; }, null); })();\n    return ConfigurableFocusTrapFactory;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet LiveAnnouncer = /** @class */ (() => {\n    class LiveAnnouncer {\n        constructor(elementToken, _ngZone, _document, _defaultOptions) {\n            this._ngZone = _ngZone;\n            this._defaultOptions = _defaultOptions;\n            // We inject the live element and document as `any` because the constructor signature cannot\n            // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n            // a class decorator causes TypeScript to preserve the constructor signature types.\n            this._document = _document;\n            this._liveElement = elementToken || this._createLiveElement();\n        }\n        announce(message, ...args) {\n            const defaultOptions = this._defaultOptions;\n            let politeness;\n            let duration;\n            if (args.length === 1 && typeof args[0] === 'number') {\n                duration = args[0];\n            }\n            else {\n                [politeness, duration] = args;\n            }\n            this.clear();\n            clearTimeout(this._previousTimeout);\n            if (!politeness) {\n                politeness =\n                    (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n            }\n            if (duration == null && defaultOptions) {\n                duration = defaultOptions.duration;\n            }\n            // TODO: ensure changing the politeness works on all environments we support.\n            this._liveElement.setAttribute('aria-live', politeness);\n            // This 100ms timeout is necessary for some browser + screen-reader combinations:\n            // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n            // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n            //   second time without clearing and then using a non-zero delay.\n            // (using JAWS 17 at time of this writing).\n            return this._ngZone.runOutsideAngular(() => {\n                return new Promise(resolve => {\n                    clearTimeout(this._previousTimeout);\n                    this._previousTimeout = setTimeout(() => {\n                        this._liveElement.textContent = message;\n                        resolve();\n                        if (typeof duration === 'number') {\n                            this._previousTimeout = setTimeout(() => this.clear(), duration);\n                        }\n                    }, 100);\n                });\n            });\n        }\n        /**\n         * Clears the current text from the announcer element. Can be used to prevent\n         * screen readers from reading the text out again while the user is going\n         * through the page landmarks.\n         */\n        clear() {\n            if (this._liveElement) {\n                this._liveElement.textContent = '';\n            }\n        }\n        ngOnDestroy() {\n            clearTimeout(this._previousTimeout);\n            if (this._liveElement && this._liveElement.parentNode) {\n                this._liveElement.parentNode.removeChild(this._liveElement);\n                this._liveElement = null;\n            }\n        }\n        _createLiveElement() {\n            const elementClass = 'cdk-live-announcer-element';\n            const previousElements = this._document.getElementsByClassName(elementClass);\n            const liveEl = this._document.createElement('div');\n            // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n            for (let i = 0; i < previousElements.length; i++) {\n                previousElements[i].parentNode.removeChild(previousElements[i]);\n            }\n            liveEl.classList.add(elementClass);\n            liveEl.classList.add('cdk-visually-hidden');\n            liveEl.setAttribute('aria-atomic', 'true');\n            liveEl.setAttribute('aria-live', 'polite');\n            this._document.body.appendChild(liveEl);\n            return liveEl;\n        }\n    }\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); };\n    LiveAnnouncer.ɵprov = ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\n    LiveAnnouncer.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return LiveAnnouncer;\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nlet CdkAriaLive = /** @class */ (() => {\n    class CdkAriaLive {\n        constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n            this._elementRef = _elementRef;\n            this._liveAnnouncer = _liveAnnouncer;\n            this._contentObserver = _contentObserver;\n            this._ngZone = _ngZone;\n            this._politeness = 'off';\n        }\n        /** The aria-live politeness level to use when announcing messages. */\n        get politeness() { return this._politeness; }\n        set politeness(value) {\n            this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n            if (this._politeness === 'off') {\n                if (this._subscription) {\n                    this._subscription.unsubscribe();\n                    this._subscription = null;\n                }\n            }\n            else if (!this._subscription) {\n                this._subscription = this._ngZone.runOutsideAngular(() => {\n                    return this._contentObserver\n                        .observe(this._elementRef)\n                        .subscribe(() => {\n                        // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                        const elementText = this._elementRef.nativeElement.textContent;\n                        // The `MutationObserver` fires also for attribute\n                        // changes which we don't want to announce.\n                        if (elementText !== this._previousAnnouncedText) {\n                            this._liveAnnouncer.announce(elementText, this._politeness);\n                            this._previousAnnouncedText = elementText;\n                        }\n                    });\n                });\n            }\n        }\n        ngOnDestroy() {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n            }\n        }\n    }\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\n    CdkAriaLive.ctorParameters = () => [\n        { type: ElementRef },\n        { type: LiveAnnouncer },\n        { type: ContentObserver },\n        { type: NgZone }\n    ];\n    CdkAriaLive.propDecorators = {\n        politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n    return CdkAriaLive;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nconst TOUCH_BUFFER_MS = 650;\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nlet FocusMonitor = /** @class */ (() => {\n    class FocusMonitor {\n        constructor(_ngZone, _platform, \n        /** @breaking-change 11.0.0 make document required */\n        document, options) {\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            /** The focus origin that the next focus event is a result of. */\n            this._origin = null;\n            /** Whether the window has just been focused. */\n            this._windowFocused = false;\n            /** Map of elements being monitored to their info. */\n            this._elementInfo = new Map();\n            /** The number of elements currently being monitored. */\n            this._monitoredElementCount = 0;\n            /**\n             * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n             * as well as the number of monitored elements that they contain. We have to treat focus/blur\n             * handlers differently from the rest of the events, because the browser won't emit events\n             * to the document when focus moves inside of a shadow root.\n             */\n            this._rootNodeFocusListenerCount = new Map();\n            /**\n             * Event listener for `keydown` events on the document.\n             * Needs to be an arrow function in order to preserve the context when it gets bound.\n             */\n            this._documentKeydownListener = () => {\n                // On keydown record the origin and clear any touch event that may be in progress.\n                this._lastTouchTarget = null;\n                this._setOriginForCurrentEventQueue('keyboard');\n            };\n            /**\n             * Event listener for `mousedown` events on the document.\n             * Needs to be an arrow function in order to preserve the context when it gets bound.\n             */\n            this._documentMousedownListener = (event) => {\n                // On mousedown record the origin only if there is not touch\n                // target, since a mousedown can happen as a result of a touch event.\n                if (!this._lastTouchTarget) {\n                    // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n                    // Resolve the focus source to `keyboard` if we detect one of them.\n                    const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n                    this._setOriginForCurrentEventQueue(source);\n                }\n            };\n            /**\n             * Event listener for `touchstart` events on the document.\n             * Needs to be an arrow function in order to preserve the context when it gets bound.\n             */\n            this._documentTouchstartListener = (event) => {\n                // When the touchstart event fires the focus event is not yet in the event queue. This means\n                // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n                // see if a focus happens.\n                if (this._touchTimeoutId != null) {\n                    clearTimeout(this._touchTimeoutId);\n                }\n                this._lastTouchTarget = getTarget(event);\n                this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n            };\n            /**\n             * Event listener for `focus` events on the window.\n             * Needs to be an arrow function in order to preserve the context when it gets bound.\n             */\n            this._windowFocusListener = () => {\n                // Make a note of when the window regains focus, so we can\n                // restore the origin info for the focused element.\n                this._windowFocused = true;\n                this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n            };\n            /**\n             * Event listener for `focus` and 'blur' events on the document.\n             * Needs to be an arrow function in order to preserve the context when it gets bound.\n             */\n            this._rootNodeFocusAndBlurListener = (event) => {\n                const target = getTarget(event);\n                const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n                // We need to walk up the ancestor chain in order to support `checkChildren`.\n                for (let element = target; element; element = element.parentElement) {\n                    handler.call(this, event, element);\n                }\n            };\n            this._document = document;\n            this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\n        }\n        monitor(element, checkChildren = false) {\n            // Do nothing if we're not on the browser platform.\n            if (!this._platform.isBrowser) {\n                return of(null);\n            }\n            const nativeElement = coerceElement(element);\n            // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n            // the shadow root, rather than the `document`, because the browser won't emit focus events\n            // to the `document`, if focus is moving within the same shadow root.\n            const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n            const cachedInfo = this._elementInfo.get(nativeElement);\n            // Check if we're already monitoring this element.\n            if (cachedInfo) {\n                if (checkChildren) {\n                    // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                    // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                    // robust solution.\n                    cachedInfo.checkChildren = true;\n                }\n                return cachedInfo.subject.asObservable();\n            }\n            // Create monitored element info.\n            const info = {\n                checkChildren: checkChildren,\n                subject: new Subject(),\n                rootNode\n            };\n            this._elementInfo.set(nativeElement, info);\n            this._registerGlobalListeners(info);\n            return info.subject.asObservable();\n        }\n        stopMonitoring(element) {\n            const nativeElement = coerceElement(element);\n            const elementInfo = this._elementInfo.get(nativeElement);\n            if (elementInfo) {\n                elementInfo.subject.complete();\n                this._setClasses(nativeElement);\n                this._elementInfo.delete(nativeElement);\n                this._removeGlobalListeners(elementInfo);\n            }\n        }\n        focusVia(element, origin, options) {\n            const nativeElement = coerceElement(element);\n            this._setOriginForCurrentEventQueue(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n                nativeElement.focus(options);\n            }\n        }\n        ngOnDestroy() {\n            this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n        }\n        /** Access injected document if available or fallback to global document reference */\n        _getDocument() {\n            return this._document || document;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            const doc = this._getDocument();\n            return doc.defaultView || window;\n        }\n        _toggleClass(element, className, shouldSet) {\n            if (shouldSet) {\n                element.classList.add(className);\n            }\n            else {\n                element.classList.remove(className);\n            }\n        }\n        _getFocusOrigin(event) {\n            // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n            // 1) The window has just regained focus, in which case we want to restore the focused state of\n            //    the element from before the window blurred.\n            // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n            // 3) The element was programmatically focused, in which case we should mark the origin as\n            //    'program'.\n            if (this._origin) {\n                return this._origin;\n            }\n            if (this._windowFocused && this._lastFocusOrigin) {\n                return this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                return 'touch';\n            }\n            else {\n                return 'program';\n            }\n        }\n        /**\n         * Sets the focus classes on the element based on the given focus origin.\n         * @param element The element to update the classes on.\n         * @param origin The focus origin.\n         */\n        _setClasses(element, origin) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n        /**\n         * Sets the origin and schedules an async function to clear it at the end of the event queue.\n         * If the detection mode is 'eventual', the origin is never cleared.\n         * @param origin The origin to set.\n         */\n        _setOriginForCurrentEventQueue(origin) {\n            this._ngZone.runOutsideAngular(() => {\n                this._origin = origin;\n                if (this._detectionMode === 0 /* IMMEDIATE */) {\n                    // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n                    // tick after the interaction event fired. To ensure the focus origin is always correct,\n                    // the focus origin will be determined at the beginning of the next tick.\n                    this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n                }\n            });\n        }\n        /**\n         * Checks whether the given focus event was caused by a touchstart event.\n         * @param event The focus event to check.\n         * @returns Whether the event was caused by a touch.\n         */\n        _wasCausedByTouch(event) {\n            // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n            // Consider the following dom structure:\n            //\n            // <div #parent tabindex=\"0\" cdkFocusClasses>\n            //   <div #child (click)=\"#parent.focus()\"></div>\n            // </div>\n            //\n            // If the user touches the #child element and the #parent is programmatically focused as a\n            // result, this code will still consider it to have been caused by the touch event and will\n            // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n            // relatively small edge-case that can be worked around by using\n            // focusVia(parentEl, 'program') to focus the parent element.\n            //\n            // If we decide that we absolutely must handle this case correctly, we can do so by listening\n            // for the first focus event after the touchstart, and then the first blur event after that\n            // focus event. When that blur event fires we know that whatever follows is not a result of the\n            // touchstart.\n            const focusTarget = getTarget(event);\n            return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n                (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n        }\n        /**\n         * Handles focus events on a registered element.\n         * @param event The focus event.\n         * @param element The monitored element.\n         */\n        _onFocus(event, element) {\n            // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n            // focus event affecting the monitored element. If we want to use the origin of the first event\n            // instead we should check for the cdk-focused class here and return if the element already has\n            // it. (This only matters for elements that have includesChildren = true).\n            // If we are not counting child-element-focus as focused, make sure that the event target is the\n            // monitored element itself.\n            const elementInfo = this._elementInfo.get(element);\n            if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {\n                return;\n            }\n            const origin = this._getFocusOrigin(event);\n            this._setClasses(element, origin);\n            this._emitOrigin(elementInfo.subject, origin);\n            this._lastFocusOrigin = origin;\n        }\n        /**\n         * Handles blur events on a registered element.\n         * @param event The blur event.\n         * @param element The monitored element.\n         */\n        _onBlur(event, element) {\n            // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n            // order to focus another child of the monitored element.\n            const elementInfo = this._elementInfo.get(element);\n            if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n                element.contains(event.relatedTarget))) {\n                return;\n            }\n            this._setClasses(element);\n            this._emitOrigin(elementInfo.subject, null);\n        }\n        _emitOrigin(subject, origin) {\n            this._ngZone.run(() => subject.next(origin));\n        }\n        _registerGlobalListeners(elementInfo) {\n            if (!this._platform.isBrowser) {\n                return;\n            }\n            const rootNode = elementInfo.rootNode;\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n            if (!rootNodeFocusListeners) {\n                this._ngZone.runOutsideAngular(() => {\n                    rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                    rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                });\n            }\n            this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n            // Register global listeners when first element is monitored.\n            if (++this._monitoredElementCount === 1) {\n                // Note: we listen to events in the capture phase so we\n                // can detect them even if the user stops propagation.\n                this._ngZone.runOutsideAngular(() => {\n                    const document = this._getDocument();\n                    const window = this._getWindow();\n                    document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n                    document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n                    document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n                    window.addEventListener('focus', this._windowFocusListener);\n                });\n            }\n        }\n        _removeGlobalListeners(elementInfo) {\n            const rootNode = elementInfo.rootNode;\n            if (this._rootNodeFocusListenerCount.has(rootNode)) {\n                const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n                if (rootNodeFocusListeners > 1) {\n                    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n                }\n                else {\n                    rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                    rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                    this._rootNodeFocusListenerCount.delete(rootNode);\n                }\n            }\n            // Unregister global listeners when last element is unmonitored.\n            if (!--this._monitoredElementCount) {\n                const document = this._getDocument();\n                const window = this._getWindow();\n                document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n                document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n                document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n                window.removeEventListener('focus', this._windowFocusListener);\n                // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n                clearTimeout(this._windowFocusTimeoutId);\n                clearTimeout(this._touchTimeoutId);\n                clearTimeout(this._originTimeoutId);\n            }\n        }\n    }\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); };\n    FocusMonitor.ɵprov = ɵɵdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); }, token: FocusMonitor, providedIn: \"root\" });\n    FocusMonitor.ctorParameters = () => [\n        { type: NgZone },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_MONITOR_DEFAULT_OPTIONS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return FocusMonitor;\n})();\n/** Gets the target of an event, accounting for Shadow DOM. */\nfunction getTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nlet CdkMonitorFocus = /** @class */ (() => {\n    class CdkMonitorFocus {\n        constructor(_elementRef, _focusMonitor) {\n            this._elementRef = _elementRef;\n            this._focusMonitor = _focusMonitor;\n            this.cdkFocusChange = new EventEmitter();\n        }\n        ngAfterViewInit() {\n            this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n                .subscribe(origin => this.cdkFocusChange.emit(origin));\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            if (this._monitorSubscription) {\n                this._monitorSubscription.unsubscribe();\n            }\n        }\n    }\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\n    CdkMonitorFocus.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusMonitor }\n    ];\n    CdkMonitorFocus.propDecorators = {\n        cdkFocusChange: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n    return CdkMonitorFocus;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nlet HighContrastModeDetector = /** @class */ (() => {\n    class HighContrastModeDetector {\n        constructor(_platform, document) {\n            this._platform = _platform;\n            this._document = document;\n        }\n        /** Gets the current high-contrast-mode for the page. */\n        getHighContrastMode() {\n            if (!this._platform.isBrowser) {\n                return 0 /* NONE */;\n            }\n            // Create a test element with an arbitrary background-color that is neither black nor\n            // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n            // appending the test element to the DOM does not affect layout by absolutely positioning it\n            const testElement = this._document.createElement('div');\n            testElement.style.backgroundColor = 'rgb(1,2,3)';\n            testElement.style.position = 'absolute';\n            this._document.body.appendChild(testElement);\n            // Get the computed style for the background color, collapsing spaces to normalize between\n            // browsers. Once we get this color, we no longer need the test element. Access the `window`\n            // via the document so we can fake it in tests. Note that we have extra null checks, because\n            // this logic will likely run during app bootstrap and throwing can break the entire app.\n            const documentWindow = this._document.defaultView || window;\n            const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\n                documentWindow.getComputedStyle(testElement) : null;\n            const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n            this._document.body.removeChild(testElement);\n            switch (computedColor) {\n                case 'rgb(0,0,0)': return 2 /* WHITE_ON_BLACK */;\n                case 'rgb(255,255,255)': return 1 /* BLACK_ON_WHITE */;\n            }\n            return 0 /* NONE */;\n        }\n        /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n        _applyBodyHighContrastModeCssClasses() {\n            if (this._platform.isBrowser && this._document.body) {\n                const bodyClasses = this._document.body.classList;\n                // IE11 doesn't support `classList` operations with multiple arguments\n                bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n                bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n                const mode = this.getHighContrastMode();\n                if (mode === 1 /* BLACK_ON_WHITE */) {\n                    bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                    bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n                }\n                else if (mode === 2 /* WHITE_ON_BLACK */) {\n                    bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                    bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n                }\n            }\n        }\n    }\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) { return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT)); };\n    HighContrastModeDetector.ɵprov = ɵɵdefineInjectable({ factory: function HighContrastModeDetector_Factory() { return new HighContrastModeDetector(ɵɵinject(Platform), ɵɵinject(DOCUMENT)); }, token: HighContrastModeDetector, providedIn: \"root\" });\n    HighContrastModeDetector.ctorParameters = () => [\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return HighContrastModeDetector;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet A11yModule = /** @class */ (() => {\n    class A11yModule {\n        constructor(highContrastModeDetector) {\n            highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n        }\n    }\nA11yModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function A11yModule_Factory(t) { return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector)); }, imports: [[PlatformModule, ObserversModule]] });\n    A11yModule.ctorParameters = () => [\n        { type: HighContrastModeDetector }\n    ];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], function () { return [{ type: HighContrastModeDetector }]; }, null); })();\n    return A11yModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a, ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b };\n\n//# sourceMappingURL=a11y.js.map","import { InjectionToken, inject, EventEmitter, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/** @docs-private */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nlet Directionality = /** @class */ (() => {\n    class Directionality {\n        constructor(_document) {\n            /** The current 'ltr' or 'rtl' value. */\n            this.value = 'ltr';\n            /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n            this.change = new EventEmitter();\n            if (_document) {\n                // TODO: handle 'auto' value -\n                // We still need to account for dir=\"auto\".\n                // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n                // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n                const bodyDir = _document.body ? _document.body.dir : null;\n                const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n                const value = bodyDir || htmlDir;\n                this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n            }\n        }\n        ngOnDestroy() {\n            this.change.complete();\n        }\n    }\nDirectionality.ɵfac = function Directionality_Factory(t) { return new (t || Directionality)(ɵngcc0.ɵɵinject(DIR_DOCUMENT, 8)); };\n    Directionality.ɵprov = ɵɵdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ɵɵinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\n    Directionality.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Directionality, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DIR_DOCUMENT]\n            }] }]; }, null); })();\n    return Directionality;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nlet Dir = /** @class */ (() => {\n    class Dir {\n        constructor() {\n            /** Normalized direction that accounts for invalid/unsupported values. */\n            this._dir = 'ltr';\n            /** Whether the `value` has been set to its initial value. */\n            this._isInitialized = false;\n            /** Event emitted when the direction changes. */\n            this.change = new EventEmitter();\n        }\n        /** @docs-private */\n        get dir() { return this._dir; }\n        set dir(value) {\n            const old = this._dir;\n            const normalizedValue = value ? value.toLowerCase() : value;\n            this._rawDir = value;\n            this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n            if (old !== this._dir && this._isInitialized) {\n                this.change.emit(this._dir);\n            }\n        }\n        /** Current layout direction of the element. */\n        get value() { return this.dir; }\n        /** Initialize once default value has been set. */\n        ngAfterContentInit() {\n            this._isInitialized = true;\n        }\n        ngOnDestroy() {\n            this.change.complete();\n        }\n    }\nDir.ɵfac = function Dir_Factory(t) { return new (t || Dir)(); };\nDir.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Dir, selectors: [[\"\", \"dir\", \"\"]], hostVars: 1, hostBindings: function Dir_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"dir\", ctx._rawDir);\n    } }, inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, exportAs: [\"dir\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: Directionality, useExisting: Dir }])] });\n    Dir.propDecorators = {\n        change: [{ type: Output, args: ['dirChange',] }],\n        dir: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Dir, [{\n        type: Directive,\n        args: [{\n                selector: '[dir]',\n                providers: [{ provide: Directionality, useExisting: Dir }],\n                host: { '[attr.dir]': '_rawDir' },\n                exportAs: 'dir'\n            }]\n    }], function () { return []; }, { change: [{\n            type: Output,\n            args: ['dirChange']\n        }], dir: [{\n            type: Input\n        }] }); })();\n    return Dir;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet BidiModule = /** @class */ (() => {\n    class BidiModule {\n    }\nBidiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BidiModule });\nBidiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BidiModule_Factory(t) { return new (t || BidiModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BidiModule, { declarations: [Dir], exports: [Dir] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BidiModule, [{\n        type: NgModule,\n        args: [{\n                exports: [Dir],\n                declarations: [Dir]\n            }]\n    }], null, null); })();\n    return BidiModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as ɵangular_material_src_cdk_bidi_bidi_a };\n\n//# sourceMappingURL=bidi.js.map","import { Version } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Current version of the Angular Component Development Kit. */\nconst VERSION = new Version('10.0.1');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { VERSION };\n//# sourceMappingURL=cdk.js.map\n","import { Version, InjectionToken, isDevMode, NgModule, Optional, Inject, inject, LOCALE_ID, Injectable, ɵɵdefineInjectable, Directive, ElementRef, NgZone, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, EventEmitter, ChangeDetectorRef, Output } from '@angular/core';\nimport { HighContrastModeDetector, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { VERSION as VERSION$2 } from '@angular/cdk';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Subject, Observable } from 'rxjs';\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Current version of Angular Material. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"*\", [[\"mat-option\"], [\"ng-container\"]]];\nconst _c1 = [\"*\", \"mat-option, ng-container\"];\nfunction MatOption_mat_pseudo_checkbox_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-pseudo-checkbox\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\")(\"disabled\", ctx_r0.disabled);\n} }\nconst _c2 = [\"*\"];\nconst VERSION = new Version('10.0.1');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nlet AnimationCurves = /** @class */ (() => {\n    class AnimationCurves {\n    }\n    AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n    AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n    AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n    AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n    return AnimationCurves;\n})();\n/** @docs-private */\nlet AnimationDurations = /** @class */ (() => {\n    class AnimationDurations {\n    }\n    AnimationDurations.COMPLEX = '375ms';\n    AnimationDurations.ENTERING = '225ms';\n    AnimationDurations.EXITING = '195ms';\n    return AnimationDurations;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Private version constant to circumvent test/build issues,\n// i.e. avoid core to depend on the @angular/material primary entry-point\n// Can be removed once the Material primary entry-point no longer\n// re-exports all secondary entry-points\nconst VERSION$1 = new Version('10.0.1');\n/** @docs-private */\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\n    return true;\n}\n/** Injection token that configures whether the Material sanity checks are enabled. */\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\n    providedIn: 'root',\n    factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nlet MatCommonModule = /** @class */ (() => {\n    class MatCommonModule {\n        constructor(highContrastModeDetector, sanityChecks, \n        /** @breaking-change 11.0.0 make document required */\n        document) {\n            /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n            this._hasDoneGlobalChecks = false;\n            this._document = document;\n            // While A11yModule also does this, we repeat it here to avoid importing A11yModule\n            // in MatCommonModule.\n            highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n            // Note that `_sanityChecks` is typed to `any`, because AoT\n            // throws an error if we use the `SanityChecks` type directly.\n            this._sanityChecks = sanityChecks;\n            if (!this._hasDoneGlobalChecks) {\n                this._checkDoctypeIsDefined();\n                this._checkThemeIsPresent();\n                this._checkCdkVersionMatch();\n                this._hasDoneGlobalChecks = true;\n            }\n        }\n        /** Access injected document if available or fallback to global document reference */\n        _getDocument() {\n            const doc = this._document || document;\n            return typeof doc === 'object' && doc ? doc : null;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            const doc = this._getDocument();\n            const win = (doc === null || doc === void 0 ? void 0 : doc.defaultView) || window;\n            return typeof win === 'object' && win ? win : null;\n        }\n        /** Whether any sanity checks are enabled. */\n        _checksAreEnabled() {\n            return isDevMode() && !this._isTestEnv();\n        }\n        /** Whether the code is running in tests. */\n        _isTestEnv() {\n            const window = this._getWindow();\n            return window && (window.__karma__ || window.jasmine);\n        }\n        _checkDoctypeIsDefined() {\n            const isEnabled = this._checksAreEnabled() &&\n                (this._sanityChecks === true || this._sanityChecks.doctype);\n            const document = this._getDocument();\n            if (isEnabled && document && !document.doctype) {\n                console.warn('Current document does not have a doctype. This may cause ' +\n                    'some Angular Material components not to behave as expected.');\n            }\n        }\n        _checkThemeIsPresent() {\n            // We need to assert that the `body` is defined, because these checks run very early\n            // and the `body` won't be defined if the consumer put their scripts in the `head`.\n            const isDisabled = !this._checksAreEnabled() ||\n                (this._sanityChecks === false || !this._sanityChecks.theme);\n            const document = this._getDocument();\n            if (isDisabled || !document || !document.body ||\n                typeof getComputedStyle !== 'function') {\n                return;\n            }\n            const testElement = document.createElement('div');\n            testElement.classList.add('mat-theme-loaded-marker');\n            document.body.appendChild(testElement);\n            const computedStyle = getComputedStyle(testElement);\n            // In some situations the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn('Could not find Angular Material core theme. Most Material ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: https://material.angular.io/guide/theming');\n            }\n            document.body.removeChild(testElement);\n        }\n        /** Checks whether the material version matches the cdk version */\n        _checkCdkVersionMatch() {\n            const isEnabled = this._checksAreEnabled() &&\n                (this._sanityChecks === true || this._sanityChecks.version);\n            if (isEnabled && VERSION$1.full !== VERSION$2.full) {\n                console.warn('The Angular Material version (' + VERSION$1.full + ') does not match ' +\n                    'the Angular CDK version (' + VERSION$2.full + ').\\n' +\n                    'Please ensure the versions of these two packages exactly match.');\n            }\n        }\n    }\nMatCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCommonModule });\nMatCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCommonModule_Factory(t) { return new (t || MatCommonModule)(ɵngcc0.ɵɵinject(ɵngcc1.HighContrastModeDetector), ɵngcc0.ɵɵinject(MATERIAL_SANITY_CHECKS, 8), ɵngcc0.ɵɵinject(DOCUMENT, 8)); }, imports: [[BidiModule], BidiModule] });\n    MatCommonModule.ctorParameters = () => [\n        { type: HighContrastModeDetector },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCommonModule, { imports: function () { return [BidiModule]; }, exports: function () { return [BidiModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCommonModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule],\n                exports: [BidiModule]\n            }]\n    }], function () { return [{ type: ɵngcc1.HighContrastModeDetector }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MATERIAL_SANITY_CHECKS]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return MatCommonModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `disabled` property. */\nfunction mixinDisabled(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._disabled = false;\n        }\n        get disabled() { return this._disabled; }\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `color` property. */\nfunction mixinColor(base, defaultColor) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n        get color() { return this._color; }\n        set color(value) {\n            const colorPalette = value || defaultColor;\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n                }\n                this._color = colorPalette;\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `disableRipple` property. */\nfunction mixinDisableRipple(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._disableRipple = false;\n        }\n        /** Whether the ripple effect is disabled or not. */\n        get disableRipple() { return this._disableRipple; }\n        set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with a `tabIndex` property. */\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._tabIndex = defaultTabIndex;\n        }\n        get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n        set tabIndex(value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nfunction mixinErrorState(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether the component is in an error state. */\n            this.errorState = false;\n            /**\n             * Stream that emits whenever the state of the input changes such that the wrapping\n             * `MatFormField` needs to run change detection.\n             */\n            this.stateChanges = new Subject();\n        }\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control : null;\n            const newState = matcher.isErrorState(control, parent);\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nfunction mixinInitialized(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            /** Whether this directive has been marked as initialized. */\n            this._isInitialized = false;\n            /**\n             * List of subscribers that subscribed before the directive was initialized. Should be notified\n             * during _markInitialized. Set to null after pending subscribers are notified, and should\n             * not expect to be populated after.\n             */\n            this._pendingSubscribers = [];\n            /**\n             * Observable stream that emits when the directive initializes. If already initialized, the\n             * subscriber is stored to be notified once _markInitialized is called.\n             */\n            this.initialized = new Observable(subscriber => {\n                // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n                // when _markInitialized is called.\n                if (this._isInitialized) {\n                    this._notifySubscriber(subscriber);\n                }\n                else {\n                    this._pendingSubscribers.push(subscriber);\n                }\n            });\n        }\n        /**\n         * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n         * of ngOnInit.\n         * @docs-private\n         */\n        _markInitialized() {\n            if (this._isInitialized) {\n                throw Error('This directive has already been marked as initialized and ' +\n                    'should not be called twice.');\n            }\n            this._isInitialized = true;\n            this._pendingSubscribers.forEach(this._notifySubscriber);\n            this._pendingSubscribers = null;\n        }\n        /** Emits and completes the subscriber stream (should only emit once). */\n        _notifySubscriber(subscriber) {\n            subscriber.next();\n            subscriber.complete();\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\n    providedIn: 'root',\n    factory: MAT_DATE_LOCALE_FACTORY,\n});\n/** @docs-private */\nfunction MAT_DATE_LOCALE_FACTORY() {\n    return inject(LOCALE_ID);\n}\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nconst MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID };\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n    constructor() {\n        this._localeChanges = new Subject();\n    }\n    /** A stream that emits when the locale changes. */\n    get localeChanges() { return this._localeChanges; }\n    /**\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n     * string). The default implementation does not allow any deserialization, it simply checks that\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n     * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n     * support passing values from your backend directly to these properties by overriding this method\n     * to also deserialize the format used by your backend.\n     * @param value The value to be deserialized into a date object.\n     * @returns The deserialized date object, either a valid date, null if the value can be\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\n     */\n    deserialize(value) {\n        if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n            return value;\n        }\n        return this.invalid();\n    }\n    /**\n     * Sets the locale used for all dates.\n     * @param locale The new locale.\n     */\n    setLocale(locale) {\n        this.locale = locale;\n        this._localeChanges.next();\n    }\n    /**\n     * Compares two dates.\n     * @param first The first date to compare.\n     * @param second The second date to compare.\n     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n     *     a number greater than 0 if the first date is later.\n     */\n    compareDate(first, second) {\n        return this.getYear(first) - this.getYear(second) ||\n            this.getMonth(first) - this.getMonth(second) ||\n            this.getDate(first) - this.getDate(second);\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param first The first date to check.\n     * @param second The second date to check.\n     * @returns Whether the two dates are equal.\n     *     Null dates are considered equal to other null dates.\n     */\n    sameDate(first, second) {\n        if (first && second) {\n            let firstValid = this.isValid(first);\n            let secondValid = this.isValid(second);\n            if (firstValid && secondValid) {\n                return !this.compareDate(first, second);\n            }\n            return firstValid == secondValid;\n        }\n        return first == second;\n    }\n    /**\n     * Clamp the given date between min and max dates.\n     * @param date The date to clamp.\n     * @param min The minimum value to allow. If null or omitted no min is enforced.\n     * @param max The maximum value to allow. If null or omitted no max is enforced.\n     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n     *     otherwise `date`.\n     */\n    clampDate(date, min, max) {\n        if (min && this.compareDate(date, min) < 0) {\n            return min;\n        }\n        if (max && this.compareDate(date, max) > 0) {\n            return max;\n        }\n        return date;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nlet SUPPORTS_INTL_API;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    SUPPORTS_INTL_API = typeof Intl != 'undefined';\n}\ncatch (_a) {\n    SUPPORTS_INTL_API = false;\n}\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n    'long': [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n        'October', 'November', 'December'\n    ],\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\nconst ɵ0 = i => String(i + 1);\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, ɵ0);\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nlet NativeDateAdapter = /** @class */ (() => {\n    class NativeDateAdapter extends DateAdapter {\n        constructor(matDateLocale, platform) {\n            super();\n            /**\n             * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n             * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n             * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n             * will produce `'8/13/1800'`.\n             *\n             * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n             * getting the string representation of a Date object from its utc representation. We're keeping\n             * it here for sometime, just for precaution, in case we decide to revert some of these changes\n             * though.\n             */\n            this.useUtcForDisplay = true;\n            super.setLocale(matDateLocale);\n            // IE does its own time zone correction, so we disable this on IE.\n            this.useUtcForDisplay = !platform.TRIDENT;\n            this._clampDate = platform.TRIDENT || platform.EDGE;\n        }\n        getYear(date) {\n            return date.getFullYear();\n        }\n        getMonth(date) {\n            return date.getMonth();\n        }\n        getDate(date) {\n            return date.getDate();\n        }\n        getDayOfWeek(date) {\n            return date.getDay();\n        }\n        getMonthNames(style) {\n            if (SUPPORTS_INTL_API) {\n                const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\n                return range(12, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n            }\n            return DEFAULT_MONTH_NAMES[style];\n        }\n        getDateNames() {\n            if (SUPPORTS_INTL_API) {\n                const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\n                return range(31, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n            }\n            return DEFAULT_DATE_NAMES;\n        }\n        getDayOfWeekNames(style) {\n            if (SUPPORTS_INTL_API) {\n                const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\n                return range(7, i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));\n            }\n            return DEFAULT_DAY_OF_WEEK_NAMES[style];\n        }\n        getYearName(date) {\n            if (SUPPORTS_INTL_API) {\n                const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\n                return this._stripDirectionalityCharacters(this._format(dtf, date));\n            }\n            return String(this.getYear(date));\n        }\n        getFirstDayOfWeek() {\n            // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n            return 0;\n        }\n        getNumDaysInMonth(date) {\n            return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n        }\n        clone(date) {\n            return new Date(date.getTime());\n        }\n        createDate(year, month, date) {\n            // Check for invalid month and date (except upper bound on date which we have to check after\n            // creating the Date).\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n            let result = this._createDateWithOverflow(year, month, date);\n            // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n            if (result.getMonth() != month) {\n                throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n            }\n            return result;\n        }\n        today() {\n            return new Date();\n        }\n        parse(value) {\n            // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n            // parameters.\n            if (typeof value == 'number') {\n                return new Date(value);\n            }\n            return value ? new Date(Date.parse(value)) : null;\n        }\n        format(date, displayFormat) {\n            if (!this.isValid(date)) {\n                throw Error('NativeDateAdapter: Cannot format invalid date.');\n            }\n            if (SUPPORTS_INTL_API) {\n                // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n                // if we attempt to format a date whose year is less than 1 or greater than 9999.\n                if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n                    date = this.clone(date);\n                    date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n                }\n                displayFormat = Object.assign(Object.assign({}, displayFormat), { timeZone: 'utc' });\n                const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n                return this._stripDirectionalityCharacters(this._format(dtf, date));\n            }\n            return this._stripDirectionalityCharacters(date.toDateString());\n        }\n        addCalendarYears(date, years) {\n            return this.addCalendarMonths(date, years * 12);\n        }\n        addCalendarMonths(date, months) {\n            let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n            // It's possible to wind up in the wrong month if the original month has more days than the new\n            // month. In this case we want to go to the last day of the desired month.\n            // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n            // guarantee this.\n            if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n                newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n            }\n            return newDate;\n        }\n        addCalendarDays(date, days) {\n            return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n        }\n        toIso8601(date) {\n            return [\n                date.getUTCFullYear(),\n                this._2digit(date.getUTCMonth() + 1),\n                this._2digit(date.getUTCDate())\n            ].join('-');\n        }\n        /**\n         * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n         * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n         * invalid date for all other values.\n         */\n        deserialize(value) {\n            if (typeof value === 'string') {\n                if (!value) {\n                    return null;\n                }\n                // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n                // string is the right format first.\n                if (ISO_8601_REGEX.test(value)) {\n                    let date = new Date(value);\n                    if (this.isValid(date)) {\n                        return date;\n                    }\n                }\n            }\n            return super.deserialize(value);\n        }\n        isDateInstance(obj) {\n            return obj instanceof Date;\n        }\n        isValid(date) {\n            return !isNaN(date.getTime());\n        }\n        invalid() {\n            return new Date(NaN);\n        }\n        /** Creates a date but allows the month and date to overflow. */\n        _createDateWithOverflow(year, month, date) {\n            const result = new Date(year, month, date);\n            // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n            // abbreviations for 19xx.\n            if (year >= 0 && year < 100) {\n                result.setFullYear(this.getYear(result) - 1900);\n            }\n            return result;\n        }\n        /**\n         * Pads a number to make it two digits.\n         * @param n The number to pad.\n         * @returns The padded number.\n         */\n        _2digit(n) {\n            return ('00' + n).slice(-2);\n        }\n        /**\n         * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n         * other browsers do not. We remove them to make output consistent and because they interfere with\n         * date parsing.\n         * @param str The string to strip direction characters from.\n         * @returns The stripped string.\n         */\n        _stripDirectionalityCharacters(str) {\n            return str.replace(/[\\u200e\\u200f]/g, '');\n        }\n        /**\n         * When converting Date object to string, javascript built-in functions may return wrong\n         * results because it applies its internal DST rules. The DST rules around the world change\n         * very frequently, and the current valid rule is not always valid in previous years though.\n         * We work around this problem building a new Date object which has its internal UTC\n         * representation with the local date and time.\n         * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n         *    timeZone set to 'utc' to work fine.\n         * @param date Date from which we want to get the string representation according to dtf\n         * @returns A Date object with its UTC representation based on the passed in date info\n         */\n        _format(dtf, date) {\n            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n            return dtf.format(d);\n        }\n    }\nNativeDateAdapter.ɵfac = function NativeDateAdapter_Factory(t) { return new (t || NativeDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nNativeDateAdapter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NativeDateAdapter, factory: function (t) { return NativeDateAdapter.ɵfac(t); } });\n    NativeDateAdapter.ctorParameters = () => [\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\n        { type: Platform }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeDateAdapter, [{\n        type: Injectable\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_LOCALE]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n    return NativeDateAdapter;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_NATIVE_DATE_FORMATS = {\n    parse: {\n        dateInput: null,\n    },\n    display: {\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\n        monthYearLabel: { year: 'numeric', month: 'short' },\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\n    }\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet NativeDateModule = /** @class */ (() => {\n    class NativeDateModule {\n    }\nNativeDateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NativeDateModule });\nNativeDateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NativeDateModule_Factory(t) { return new (t || NativeDateModule)(); }, providers: [\n        { provide: DateAdapter, useClass: NativeDateAdapter },\n    ], imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NativeDateModule, { imports: function () { return [PlatformModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NativeDateModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule],\n                providers: [\n                    { provide: DateAdapter, useClass: NativeDateAdapter },\n                ]\n            }]\n    }], null, null); })();\n    return NativeDateModule;\n})();\nconst ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\nlet MatNativeDateModule = /** @class */ (() => {\n    class MatNativeDateModule {\n    }\nMatNativeDateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatNativeDateModule });\nMatNativeDateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatNativeDateModule_Factory(t) { return new (t || MatNativeDateModule)(); }, providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }], imports: [[NativeDateModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatNativeDateModule, { imports: [NativeDateModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNativeDateModule, [{\n        type: NgModule,\n        args: [{\n                imports: [NativeDateModule],\n                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }]\n            }]\n    }], null, null); })();\n    return MatNativeDateModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Error state matcher that matches when a control is invalid and dirty. */\nlet ShowOnDirtyErrorStateMatcher = /** @class */ (() => {\n    class ShowOnDirtyErrorStateMatcher {\n        isErrorState(control, form) {\n            return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n        }\n    }\nShowOnDirtyErrorStateMatcher.ɵfac = function ShowOnDirtyErrorStateMatcher_Factory(t) { return new (t || ShowOnDirtyErrorStateMatcher)(); };\nShowOnDirtyErrorStateMatcher.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ShowOnDirtyErrorStateMatcher, factory: function (t) { return ShowOnDirtyErrorStateMatcher.ɵfac(t); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ShowOnDirtyErrorStateMatcher, [{\n        type: Injectable\n    }], null, null); })();\n    return ShowOnDirtyErrorStateMatcher;\n})();\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nlet ErrorStateMatcher = /** @class */ (() => {\n    class ErrorStateMatcher {\n        isErrorState(control, form) {\n            return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n        }\n    }\nErrorStateMatcher.ɵfac = function ErrorStateMatcher_Factory(t) { return new (t || ErrorStateMatcher)(); };\n    ErrorStateMatcher.ɵprov = ɵɵdefineInjectable({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ErrorStateMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n    return ErrorStateMatcher;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nlet MatLine = /** @class */ (() => {\n    class MatLine {\n    }\nMatLine.ɵfac = function MatLine_Factory(t) { return new (t || MatLine)(); };\nMatLine.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatLine, selectors: [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], hostAttrs: [1, \"mat-line\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatLine, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-line], [matLine]',\n                host: { 'class': 'mat-line' }\n            }]\n    }], null, null); })();\n    return MatLine;\n})();\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nfunction setLines(lines, element, prefix = 'mat') {\n    // Note: doesn't need to unsubscribe, because `changes`\n    // gets completed by Angular when the view is destroyed.\n    lines.changes.pipe(startWith(lines)).subscribe(({ length }) => {\n        setClass(element, `${prefix}-2-line`, false);\n        setClass(element, `${prefix}-3-line`, false);\n        setClass(element, `${prefix}-multi-line`, false);\n        if (length === 2 || length === 3) {\n            setClass(element, `${prefix}-${length}-line`, true);\n        }\n        else if (length > 3) {\n            setClass(element, `${prefix}-multi-line`, true);\n        }\n    });\n}\n/** Adds or removes a class from an element. */\nfunction setClass(element, className, isAdd) {\n    const classList = element.nativeElement.classList;\n    isAdd ? classList.add(className) : classList.remove(className);\n}\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nclass MatLineSetter {\n    constructor(lines, element) {\n        setLines(lines, element);\n    }\n}\nlet MatLineModule = /** @class */ (() => {\n    class MatLineModule {\n    }\nMatLineModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatLineModule });\nMatLineModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatLineModule_Factory(t) { return new (t || MatLineModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatLineModule, { declarations: [MatLine], imports: [MatCommonModule], exports: [MatLine, MatCommonModule] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatLineModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatLine, MatCommonModule],\n                declarations: [MatLine]\n            }]\n    }], null, null); })();\n    return MatLineModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a previously launched ripple element.\n */\nclass RippleRef {\n    constructor(_renderer, \n    /** Reference to the ripple HTML element. */\n    element, \n    /** Ripple configuration used for the ripple. */\n    config) {\n        this._renderer = _renderer;\n        this.element = element;\n        this.config = config;\n        /** Current state of the ripple. */\n        this.state = 3 /* HIDDEN */;\n    }\n    /** Fades out the ripple element. */\n    fadeOut() {\n        this._renderer.fadeOutRipple(this);\n    }\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nconst defaultRippleAnimationConfig = {\n    enterDuration: 450,\n    exitDuration: 400\n};\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({ passive: true });\n/** Events that signal that the pointer is down. */\nconst pointerDownEvents = ['mousedown', 'touchstart'];\n/** Events that signal that the pointer is up. */\nconst pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nclass RippleRenderer {\n    constructor(_target, _ngZone, elementOrElementRef, platform) {\n        this._target = _target;\n        this._ngZone = _ngZone;\n        /** Whether the pointer is currently down or not. */\n        this._isPointerDown = false;\n        /** Set of currently active ripple references. */\n        this._activeRipples = new Set();\n        /** Whether pointer-up event listeners have been registered. */\n        this._pointerUpEventsRegistered = false;\n        // Only do anything if we're on the browser.\n        if (platform.isBrowser) {\n            this._containerElement = coerceElement(elementOrElementRef);\n        }\n    }\n    /**\n     * Fades in a ripple at the given coordinates.\n     * @param x Coordinate within the element, along the X axis at which to start the ripple.\n     * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n     * @param config Extra ripple options.\n     */\n    fadeInRipple(x, y, config = {}) {\n        const containerRect = this._containerRect =\n            this._containerRect || this._containerElement.getBoundingClientRect();\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), config.animation);\n        if (config.centered) {\n            x = containerRect.left + containerRect.width / 2;\n            y = containerRect.top + containerRect.height / 2;\n        }\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n        const offsetX = x - containerRect.left;\n        const offsetY = y - containerRect.top;\n        const duration = animationConfig.enterDuration;\n        const ripple = document.createElement('div');\n        ripple.classList.add('mat-ripple-element');\n        ripple.style.left = `${offsetX - radius}px`;\n        ripple.style.top = `${offsetY - radius}px`;\n        ripple.style.height = `${radius * 2}px`;\n        ripple.style.width = `${radius * 2}px`;\n        // If a custom color has been specified, set it as inline style. If no color is\n        // set, the default color will be applied through the ripple theme styles.\n        if (config.color != null) {\n            ripple.style.backgroundColor = config.color;\n        }\n        ripple.style.transitionDuration = `${duration}ms`;\n        this._containerElement.appendChild(ripple);\n        // By default the browser does not recalculate the styles of dynamically created\n        // ripple elements. This is critical because then the `scale` would not animate properly.\n        enforceStyleRecalculation(ripple);\n        ripple.style.transform = 'scale(1)';\n        // Exposed reference to the ripple that will be returned.\n        const rippleRef = new RippleRef(this, ripple, config);\n        rippleRef.state = 0 /* FADING_IN */;\n        // Add the ripple reference to the list of all active ripples.\n        this._activeRipples.add(rippleRef);\n        if (!config.persistent) {\n            this._mostRecentTransientRipple = rippleRef;\n        }\n        // Wait for the ripple element to be completely faded in.\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n        this._runTimeoutOutsideZone(() => {\n            const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n            rippleRef.state = 1 /* VISIBLE */;\n            // When the timer runs out while the user has kept their pointer down, we want to\n            // keep only the persistent ripples and the latest transient ripple. We do this,\n            // because we don't want stacked transient ripples to appear after their enter\n            // animation has finished.\n            if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n                rippleRef.fadeOut();\n            }\n        }, duration);\n        return rippleRef;\n    }\n    /** Fades out a ripple reference. */\n    fadeOutRipple(rippleRef) {\n        const wasActive = this._activeRipples.delete(rippleRef);\n        if (rippleRef === this._mostRecentTransientRipple) {\n            this._mostRecentTransientRipple = null;\n        }\n        // Clear out the cached bounding rect if we have no more ripples.\n        if (!this._activeRipples.size) {\n            this._containerRect = null;\n        }\n        // For ripples that are not active anymore, don't re-run the fade-out animation.\n        if (!wasActive) {\n            return;\n        }\n        const rippleEl = rippleRef.element;\n        const animationConfig = Object.assign(Object.assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n        rippleEl.style.opacity = '0';\n        rippleRef.state = 2 /* FADING_OUT */;\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\n        this._runTimeoutOutsideZone(() => {\n            rippleRef.state = 3 /* HIDDEN */;\n            rippleEl.parentNode.removeChild(rippleEl);\n        }, animationConfig.exitDuration);\n    }\n    /** Fades out all currently active ripples. */\n    fadeOutAll() {\n        this._activeRipples.forEach(ripple => ripple.fadeOut());\n    }\n    /** Sets up the trigger event listeners */\n    setupTriggerEvents(elementOrElementRef) {\n        const element = coerceElement(elementOrElementRef);\n        if (!element || element === this._triggerElement) {\n            return;\n        }\n        // Remove all previously registered event listeners from the trigger element.\n        this._removeTriggerEvents();\n        this._triggerElement = element;\n        this._registerEvents(pointerDownEvents);\n    }\n    /**\n     * Handles all registered events.\n     * @docs-private\n     */\n    handleEvent(event) {\n        if (event.type === 'mousedown') {\n            this._onMousedown(event);\n        }\n        else if (event.type === 'touchstart') {\n            this._onTouchStart(event);\n        }\n        else {\n            this._onPointerUp();\n        }\n        // If pointer-up events haven't been registered yet, do so now.\n        // We do this on-demand in order to reduce the total number of event listeners\n        // registered by the ripples, which speeds up the rendering time for large UIs.\n        if (!this._pointerUpEventsRegistered) {\n            this._registerEvents(pointerUpEvents);\n            this._pointerUpEventsRegistered = true;\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using mouse. */\n    _onMousedown(event) {\n        // Screen readers will fire fake mouse events for space/enter. Skip launching a\n        // ripple in this case for consistency with the non-screen-reader experience.\n        const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n        const isSyntheticEvent = this._lastTouchStartEvent &&\n            Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n        if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n            this._isPointerDown = true;\n            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n        }\n    }\n    /** Function being called whenever the trigger is being pressed using touch. */\n    _onTouchStart(event) {\n        if (!this._target.rippleDisabled) {\n            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n            // events will launch a second ripple if we don't ignore mouse events for a specific\n            // time after a touchstart event.\n            this._lastTouchStartEvent = Date.now();\n            this._isPointerDown = true;\n            // Use `changedTouches` so we skip any touches where the user put\n            // their finger down, but used another finger to tap the element again.\n            const touches = event.changedTouches;\n            for (let i = 0; i < touches.length; i++) {\n                this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n            }\n        }\n    }\n    /** Function being called whenever the trigger is being released. */\n    _onPointerUp() {\n        if (!this._isPointerDown) {\n            return;\n        }\n        this._isPointerDown = false;\n        // Fade-out all ripples that are visible and not persistent.\n        this._activeRipples.forEach(ripple => {\n            // By default, only ripples that are completely visible will fade out on pointer release.\n            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n            const isVisible = ripple.state === 1 /* VISIBLE */ ||\n                ripple.config.terminateOnPointerUp && ripple.state === 0 /* FADING_IN */;\n            if (!ripple.config.persistent && isVisible) {\n                ripple.fadeOut();\n            }\n        });\n    }\n    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n    _runTimeoutOutsideZone(fn, delay = 0) {\n        this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n    }\n    /** Registers event listeners for a given list of events. */\n    _registerEvents(eventTypes) {\n        this._ngZone.runOutsideAngular(() => {\n            eventTypes.forEach((type) => {\n                this._triggerElement.addEventListener(type, this, passiveEventOptions);\n            });\n        });\n    }\n    /** Removes previously registered event listeners from the trigger element. */\n    _removeTriggerEvents() {\n        if (this._triggerElement) {\n            pointerDownEvents.forEach((type) => {\n                this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n            });\n            if (this._pointerUpEventsRegistered) {\n                pointerUpEvents.forEach((type) => {\n                    this._triggerElement.removeEventListener(type, this, passiveEventOptions);\n                });\n            }\n        }\n    }\n}\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element) {\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x, y, rect) {\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n    return Math.sqrt(distX * distX + distY * distY);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify the global ripple options. */\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\nlet MatRipple = /** @class */ (() => {\n    class MatRipple {\n        constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {\n            this._elementRef = _elementRef;\n            this._animationMode = _animationMode;\n            /**\n             * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n             * will be the distance from the center of the ripple to the furthest corner of the host element's\n             * bounding rectangle.\n             */\n            this.radius = 0;\n            this._disabled = false;\n            /** Whether ripple directive is initialized and the input bindings are set. */\n            this._isInitialized = false;\n            this._globalOptions = globalOptions || {};\n            this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n        }\n        /**\n         * Whether click events will not trigger the ripple. Ripples can be still launched manually\n         * by using the `launch()` method.\n         */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = value;\n            this._setupTriggerEventsIfEnabled();\n        }\n        /**\n         * The element that triggers the ripple when click events are received.\n         * Defaults to the directive's host element.\n         */\n        get trigger() { return this._trigger || this._elementRef.nativeElement; }\n        set trigger(trigger) {\n            this._trigger = trigger;\n            this._setupTriggerEventsIfEnabled();\n        }\n        ngOnInit() {\n            this._isInitialized = true;\n            this._setupTriggerEventsIfEnabled();\n        }\n        ngOnDestroy() {\n            this._rippleRenderer._removeTriggerEvents();\n        }\n        /** Fades out all currently showing ripple elements. */\n        fadeOutAll() {\n            this._rippleRenderer.fadeOutAll();\n        }\n        /**\n         * Ripple configuration from the directive's input values.\n         * @docs-private Implemented as part of RippleTarget\n         */\n        get rippleConfig() {\n            return {\n                centered: this.centered,\n                radius: this.radius,\n                color: this.color,\n                animation: Object.assign(Object.assign(Object.assign({}, this._globalOptions.animation), (this._animationMode === 'NoopAnimations' ? { enterDuration: 0, exitDuration: 0 } : {})), this.animation),\n                terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n            };\n        }\n        /**\n         * Whether ripples on pointer-down are disabled or not.\n         * @docs-private Implemented as part of RippleTarget\n         */\n        get rippleDisabled() {\n            return this.disabled || !!this._globalOptions.disabled;\n        }\n        /** Sets up the trigger event listeners if ripples are enabled. */\n        _setupTriggerEventsIfEnabled() {\n            if (!this.disabled && this._isInitialized) {\n                this._rippleRenderer.setupTriggerEvents(this.trigger);\n            }\n        }\n        /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n        launch(configOrX, y = 0, config) {\n            if (typeof configOrX === 'number') {\n                return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign(Object.assign({}, this.rippleConfig), config));\n            }\n            else {\n                return this._rippleRenderer.fadeInRipple(0, 0, Object.assign(Object.assign({}, this.rippleConfig), configOrX));\n            }\n        }\n    }\nMatRipple.ɵfac = function MatRipple_Factory(t) { return new (t || MatRipple)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatRipple.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRipple, selectors: [[\"\", \"mat-ripple\", \"\"], [\"\", \"matRipple\", \"\"]], hostAttrs: [1, \"mat-ripple\"], hostVars: 2, hostBindings: function MatRipple_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-ripple-unbounded\", ctx.unbounded);\n    } }, inputs: { radius: [\"matRippleRadius\", \"radius\"], disabled: [\"matRippleDisabled\", \"disabled\"], trigger: [\"matRippleTrigger\", \"trigger\"], color: [\"matRippleColor\", \"color\"], unbounded: [\"matRippleUnbounded\", \"unbounded\"], centered: [\"matRippleCentered\", \"centered\"], animation: [\"matRippleAnimation\", \"animation\"] }, exportAs: [\"matRipple\"] });\n    MatRipple.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatRipple.propDecorators = {\n        color: [{ type: Input, args: ['matRippleColor',] }],\n        unbounded: [{ type: Input, args: ['matRippleUnbounded',] }],\n        centered: [{ type: Input, args: ['matRippleCentered',] }],\n        radius: [{ type: Input, args: ['matRippleRadius',] }],\n        animation: [{ type: Input, args: ['matRippleAnimation',] }],\n        disabled: [{ type: Input, args: ['matRippleDisabled',] }],\n        trigger: [{ type: Input, args: ['matRippleTrigger',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRipple, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-ripple], [matRipple]',\n                exportAs: 'matRipple',\n                host: {\n                    'class': 'mat-ripple',\n                    '[class.mat-ripple-unbounded]': 'unbounded'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { radius: [{\n            type: Input,\n            args: ['matRippleRadius']\n        }], disabled: [{\n            type: Input,\n            args: ['matRippleDisabled']\n        }], trigger: [{\n            type: Input,\n            args: ['matRippleTrigger']\n        }], color: [{\n            type: Input,\n            args: ['matRippleColor']\n        }], unbounded: [{\n            type: Input,\n            args: ['matRippleUnbounded']\n        }], centered: [{\n            type: Input,\n            args: ['matRippleCentered']\n        }], animation: [{\n            type: Input,\n            args: ['matRippleAnimation']\n        }] }); })();\n    return MatRipple;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatRippleModule = /** @class */ (() => {\n    class MatRippleModule {\n    }\nMatRippleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRippleModule });\nMatRippleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatRippleModule_Factory(t) { return new (t || MatRippleModule)(); }, imports: [[MatCommonModule, PlatformModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRippleModule, { declarations: function () { return [MatRipple]; }, imports: function () { return [MatCommonModule, PlatformModule]; }, exports: function () { return [MatRipple, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRippleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, PlatformModule],\n                exports: [MatRipple, MatCommonModule],\n                declarations: [MatRipple]\n            }]\n    }], null, null); })();\n    return MatRippleModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\nlet MatPseudoCheckbox = /** @class */ (() => {\n    class MatPseudoCheckbox {\n        constructor(_animationMode) {\n            this._animationMode = _animationMode;\n            /** Display state of the checkbox. */\n            this.state = 'unchecked';\n            /** Whether the checkbox is disabled. */\n            this.disabled = false;\n        }\n    }\nMatPseudoCheckbox.ɵfac = function MatPseudoCheckbox_Factory(t) { return new (t || MatPseudoCheckbox)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatPseudoCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatPseudoCheckbox, selectors: [[\"mat-pseudo-checkbox\"]], hostAttrs: [1, \"mat-pseudo-checkbox\"], hostVars: 8, hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-pseudo-checkbox-indeterminate\", ctx.state === \"indeterminate\")(\"mat-pseudo-checkbox-checked\", ctx.state === \"checked\")(\"mat-pseudo-checkbox-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { state: \"state\", disabled: \"disabled\" }, decls: 0, vars: 0, template: function MatPseudoCheckbox_Template(rf, ctx) { }, styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatPseudoCheckbox.ctorParameters = () => [\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatPseudoCheckbox.propDecorators = {\n        state: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPseudoCheckbox, [{\n        type: Component,\n        args: [{\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'mat-pseudo-checkbox',\n                template: '',\n                host: {\n                    'class': 'mat-pseudo-checkbox',\n                    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n                    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n                    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\\\"\\\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\\n\"]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { state: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n    return MatPseudoCheckbox;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatPseudoCheckboxModule = /** @class */ (() => {\n    class MatPseudoCheckboxModule {\n    }\nMatPseudoCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatPseudoCheckboxModule });\nMatPseudoCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatPseudoCheckboxModule_Factory(t) { return new (t || MatPseudoCheckboxModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPseudoCheckboxModule, { declarations: [MatPseudoCheckbox], exports: [MatPseudoCheckbox] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPseudoCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatPseudoCheckbox],\n                declarations: [MatPseudoCheckbox]\n            }]\n    }], null, null); })();\n    return MatPseudoCheckboxModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nclass MatOptgroupBase {\n}\nconst _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nlet MatOptgroup = /** @class */ (() => {\n    class MatOptgroup extends _MatOptgroupMixinBase {\n        constructor() {\n            super(...arguments);\n            /** Unique id for the underlying label. */\n            this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n        }\n    }\nMatOptgroup.ɵfac = function MatOptgroup_Factory(t) { return ɵMatOptgroup_BaseFactory(t || MatOptgroup); };\nMatOptgroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatOptgroup, selectors: [[\"mat-optgroup\"]], hostAttrs: [\"role\", \"group\", 1, \"mat-optgroup\"], hostVars: 4, hostBindings: function MatOptgroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled.toString())(\"aria-labelledby\", ctx._labelId);\n        ɵngcc0.ɵɵclassProp(\"mat-optgroup-disabled\", ctx.disabled);\n    } }, inputs: { disabled: \"disabled\", label: \"label\" }, exportAs: [\"matOptgroup\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 2, consts: [[1, \"mat-optgroup-label\", 3, \"id\"]], template: function MatOptgroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx._labelId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\"\", ctx.label, \" \");\n    } }, styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatOptgroup.propDecorators = {\n        label: [{ type: Input }]\n    };\nconst ɵMatOptgroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatOptgroup);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatOptgroup, [{\n        type: Component,\n        args: [{\n                selector: 'mat-optgroup',\n                exportAs: 'matOptgroup',\n                template: \"<label class=\\\"mat-optgroup-label\\\" [id]=\\\"_labelId\\\">{{ label }} <ng-content></ng-content></label>\\n<ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-optgroup',\n                    'role': 'group',\n                    '[class.mat-optgroup-disabled]': 'disabled',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-labelledby]': '_labelId'\n                },\n                styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\\n\"]\n            }]\n    }], null, { label: [{\n            type: Input\n        }] }); })();\n    return MatOptgroup;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/** Event object emitted by MatOption when selected or deselected. */\nclass MatOptionSelectionChange {\n    constructor(\n    /** Reference to the option that emitted the event. */\n    source, \n    /** Whether the change in the option's value was a result of a user action. */\n    isUserInput = false) {\n        this.source = source;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token used to provide the parent component to options.\n */\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\n/**\n * Single option inside of a `<mat-select>` element.\n */\nlet MatOption = /** @class */ (() => {\n    class MatOption {\n        constructor(_element, _changeDetectorRef, _parent, group) {\n            this._element = _element;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._parent = _parent;\n            this.group = group;\n            this._selected = false;\n            this._active = false;\n            this._disabled = false;\n            this._mostRecentViewValue = '';\n            /** The unique ID of the option. */\n            this.id = `mat-option-${_uniqueIdCounter++}`;\n            /** Event emitted when the option is selected or deselected. */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onSelectionChange = new EventEmitter();\n            /** Emits when the state of the option changes and any parents have to be notified. */\n            this._stateChanges = new Subject();\n        }\n        /** Whether the wrapping component is in multiple selection mode. */\n        get multiple() { return this._parent && this._parent.multiple; }\n        /** Whether or not the option is currently selected. */\n        get selected() { return this._selected; }\n        /** Whether the option is disabled. */\n        get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n        /** Whether ripples for the option are disabled. */\n        get disableRipple() { return this._parent && this._parent.disableRipple; }\n        /**\n         * Whether or not the option is currently active and ready to be selected.\n         * An active option displays styles as if it is focused, but the\n         * focus is actually retained somewhere else. This comes in handy\n         * for components like autocomplete where focus must remain on the input.\n         */\n        get active() {\n            return this._active;\n        }\n        /**\n         * The displayed value of the option. It is necessary to show the selected option in the\n         * select's trigger.\n         */\n        get viewValue() {\n            // TODO(kara): Add input property alternative for node envs.\n            return (this._getHostElement().textContent || '').trim();\n        }\n        /** Selects the option. */\n        select() {\n            if (!this._selected) {\n                this._selected = true;\n                this._changeDetectorRef.markForCheck();\n                this._emitSelectionChangeEvent();\n            }\n        }\n        /** Deselects the option. */\n        deselect() {\n            if (this._selected) {\n                this._selected = false;\n                this._changeDetectorRef.markForCheck();\n                this._emitSelectionChangeEvent();\n            }\n        }\n        /** Sets focus onto this option. */\n        focus(_origin, options) {\n            // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\n            // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\n            const element = this._getHostElement();\n            if (typeof element.focus === 'function') {\n                element.focus(options);\n            }\n        }\n        /**\n         * This method sets display styles on the option to make it appear\n         * active. This is used by the ActiveDescendantKeyManager so key\n         * events will display the proper options as active on arrow key events.\n         */\n        setActiveStyles() {\n            if (!this._active) {\n                this._active = true;\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /**\n         * This method removes display styles on the option that made it appear\n         * active. This is used by the ActiveDescendantKeyManager so key\n         * events will display the proper options as active on arrow key events.\n         */\n        setInactiveStyles() {\n            if (this._active) {\n                this._active = false;\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Gets the label to be used when determining whether the option should be focused. */\n        getLabel() {\n            return this.viewValue;\n        }\n        /** Ensures the option is selected when activated from the keyboard. */\n        _handleKeydown(event) {\n            if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\n                this._selectViaInteraction();\n                // Prevent the page from scrolling down and form submits.\n                event.preventDefault();\n            }\n        }\n        /**\n         * `Selects the option while indicating the selection came from the user. Used to\n         * determine if the select's view -> model callback should be invoked.`\n         */\n        _selectViaInteraction() {\n            if (!this.disabled) {\n                this._selected = this.multiple ? !this._selected : true;\n                this._changeDetectorRef.markForCheck();\n                this._emitSelectionChangeEvent(true);\n            }\n        }\n        /**\n         * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\n         * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\n         * attributes adds a significant amount of noise to screen-reader users without providing useful\n         * information.\n         */\n        _getAriaSelected() {\n            return this.selected || (this.multiple ? false : null);\n        }\n        /** Returns the correct tabindex for the option depending on disabled state. */\n        _getTabIndex() {\n            return this.disabled ? '-1' : '0';\n        }\n        /** Gets the host DOM element. */\n        _getHostElement() {\n            return this._element.nativeElement;\n        }\n        ngAfterViewChecked() {\n            // Since parent components could be using the option's label to display the selected values\n            // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n            // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n            // relatively cheap, however we still limit them only to selected options in order to avoid\n            // hitting the DOM too often.\n            if (this._selected) {\n                const viewValue = this.viewValue;\n                if (viewValue !== this._mostRecentViewValue) {\n                    this._mostRecentViewValue = viewValue;\n                    this._stateChanges.next();\n                }\n            }\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n        /** Emits the selection change event. */\n        _emitSelectionChangeEvent(isUserInput = false) {\n            this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n        }\n    }\nMatOption.ɵfac = function MatOption_Factory(t) { return new (t || MatOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_OPTION_PARENT_COMPONENT, 8), ɵngcc0.ɵɵdirectiveInject(MatOptgroup, 8)); };\nMatOption.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatOption, selectors: [[\"mat-option\"]], hostAttrs: [\"role\", \"option\", 1, \"mat-option\", \"mat-focus-indicator\"], hostVars: 12, hostBindings: function MatOption_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatOption_click_HostBindingHandler() { return ctx._selectViaInteraction(); })(\"keydown\", function MatOption_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._getTabIndex())(\"aria-selected\", ctx._getAriaSelected())(\"aria-disabled\", ctx.disabled.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-selected\", ctx.selected)(\"mat-option-multiple\", ctx.multiple)(\"mat-active\", ctx.active)(\"mat-option-disabled\", ctx.disabled);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", value: \"value\" }, outputs: { onSelectionChange: \"onSelectionChange\" }, exportAs: [\"matOption\"], ngContentSelectors: _c2, decls: 4, vars: 3, consts: [[\"class\", \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\", 4, \"ngIf\"], [1, \"mat-option-text\"], [\"mat-ripple\", \"\", 1, \"mat-option-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-option-pseudo-checkbox\", 3, \"state\", \"disabled\"]], template: function MatOption_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatOption_mat_pseudo_checkbox_0_Template, 1, 2, \"mat-pseudo-checkbox\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.multiple);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disabled || ctx.disableRipple);\n    } }, directives: [ɵngcc3.NgIf, MatRipple, MatPseudoCheckbox], styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatOption.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTION_PARENT_COMPONENT,] }] },\n        { type: MatOptgroup, decorators: [{ type: Optional }] }\n    ];\n    MatOption.propDecorators = {\n        value: [{ type: Input }],\n        id: [{ type: Input }],\n        disabled: [{ type: Input }],\n        onSelectionChange: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatOption, [{\n        type: Component,\n        args: [{\n                selector: 'mat-option',\n                exportAs: 'matOption',\n                host: {\n                    'role': 'option',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[class.mat-selected]': 'selected',\n                    '[class.mat-option-multiple]': 'multiple',\n                    '[class.mat-active]': 'active',\n                    '[id]': 'id',\n                    '[attr.aria-selected]': '_getAriaSelected()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[class.mat-option-disabled]': 'disabled',\n                    '(click)': '_selectViaInteraction()',\n                    '(keydown)': '_handleKeydown($event)',\n                    'class': 'mat-option mat-focus-indicator'\n                },\n                template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n<span class=\\\"mat-option-text\\\"><ng-content></ng-content></span>\\n\\n<div class=\\\"mat-option-ripple\\\" mat-ripple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disabled || disableRipple\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_OPTION_PARENT_COMPONENT]\n            }] }, { type: MatOptgroup, decorators: [{\n                type: Optional\n            }] }]; }, { id: [{\n            type: Input\n        }], onSelectionChange: [{\n            type: Output\n        }], disabled: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n    return MatOption;\n})();\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\n    if (optionGroups.length) {\n        let optionsArray = options.toArray();\n        let groups = optionGroups.toArray();\n        let groupCounter = 0;\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n        return groupCounter;\n    }\n    return 0;\n}\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nfunction _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {\n    const optionOffset = optionIndex * optionHeight;\n    if (optionOffset < currentScrollPosition) {\n        return optionOffset;\n    }\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n    return currentScrollPosition;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatOptionModule = /** @class */ (() => {\n    class MatOptionModule {\n    }\nMatOptionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatOptionModule });\nMatOptionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatOptionModule_Factory(t) { return new (t || MatOptionModule)(); }, imports: [[MatRippleModule, CommonModule, MatPseudoCheckboxModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatOptionModule, { declarations: function () { return [MatOption, MatOptgroup]; }, imports: function () { return [MatRippleModule, CommonModule, MatPseudoCheckboxModule]; }, exports: function () { return [MatOption, MatOptgroup]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatOptionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n                exports: [MatOption, MatOptgroup],\n                declarations: [MatOption, MatOptgroup]\n            }]\n    }], null, null); })();\n    return MatOptionModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * InjectionToken that can be used to specify the global label options.\n * @deprecated Use `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token from\n *     `@angular/material/form-field` instead.\n * @breaking-change 11.0.0\n */\nconst MAT_LABEL_GLOBAL_OPTIONS = new InjectionToken('mat-label-global-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n * @docs-private\n * @breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\n */\nconst JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8, OCT = 9, NOV = 10, DEC = 11;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APR, AUG, AnimationCurves, AnimationDurations, DEC, DateAdapter, ErrorStateMatcher, FEB, JAN, JUL, JUN, MAR, MATERIAL_SANITY_CHECKS, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE_PROVIDER, MAT_LABEL_GLOBAL_OPTIONS, MAT_NATIVE_DATE_FORMATS, MAT_OPTION_PARENT_COMPONENT, MAT_RIPPLE_GLOBAL_OPTIONS, MAY, MatCommonModule, MatLine, MatLineModule, MatLineSetter, MatNativeDateModule, MatOptgroup, MatOption, MatOptionModule, MatOptionSelectionChange, MatPseudoCheckbox, MatPseudoCheckboxModule, MatRipple, MatRippleModule, NOV, NativeDateAdapter, NativeDateModule, OCT, RippleRef, RippleRenderer, SEP, ShowOnDirtyErrorStateMatcher, VERSION, _countGroupLabelsBeforeOption, _getOptionScrollPosition, defaultRippleAnimationConfig, mixinColor, mixinDisableRipple, mixinDisabled, mixinErrorState, mixinInitialized, mixinTabIndex, setLines, ɵ0$1 as ɵ0, MATERIAL_SANITY_CHECKS_FACTORY as ɵangular_material_src_material_core_core_a };\n\n//# sourceMappingURL=core.js.map","const ObjectUnsubscribedErrorImpl = (() => {\n    function ObjectUnsubscribedErrorImpl() {\n        Error.call(this);\n        this.message = 'object unsubscribed';\n        this.name = 'ObjectUnsubscribedError';\n        return this;\n    }\n    ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n    return ObjectUnsubscribedErrorImpl;\n})();\nexport const ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { Subscription } from './Subscription';\nexport class SubjectSubscription extends Subscription {\n    constructor(subject, subscriber) {\n        super();\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const subject = this.subject;\n        const observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        const subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    }\n}\n//# sourceMappingURL=SubjectSubscription.js.map","import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nexport class SubjectSubscriber extends Subscriber {\n    constructor(destination) {\n        super(destination);\n        this.destination = destination;\n    }\n}\nexport class Subject extends Observable {\n    constructor() {\n        super();\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    [rxSubscriberSymbol]() {\n        return new SubjectSubscriber(this);\n    }\n    lift(operator) {\n        const subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    }\n    next(value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            const { observers } = this;\n            const len = observers.length;\n            const copy = observers.slice();\n            for (let i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    }\n    error(err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    }\n    complete() {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        const { observers } = this;\n        const len = observers.length;\n        const copy = observers.slice();\n        for (let i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    }\n    unsubscribe() {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    }\n    _trySubscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return super._trySubscribe(subscriber);\n        }\n    }\n    _subscribe(subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    }\n    asObservable() {\n        const observable = new Observable();\n        observable.source = this;\n        return observable;\n    }\n}\nSubject.create = (destination, source) => {\n    return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n    constructor(destination, source) {\n        super();\n        this.destination = destination;\n        this.source = source;\n    }\n    next(value) {\n        const { destination } = this;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    }\n    error(err) {\n        const { destination } = this;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    }\n    complete() {\n        const { destination } = this;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    }\n}\n//# sourceMappingURL=Subject.js.map","import { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=refCount.js.map","import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map","import { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\nexport function share() {\n    return (source) => refCount()(multicast(shareSubjectFactory)(source));\n}\n//# sourceMappingURL=share.js.map","import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!data.nodeName) {\n            this.svgElement = data;\n        }\n        else {\n            this.url = data;\n        }\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nlet MatIconRegistry = /** @class */ (() => {\n    class MatIconRegistry {\n        constructor(_httpClient, _sanitizer, document, _errorHandler) {\n            this._httpClient = _httpClient;\n            this._sanitizer = _sanitizer;\n            this._errorHandler = _errorHandler;\n            /**\n             * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n             */\n            this._svgIconConfigs = new Map();\n            /**\n             * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n             * Multiple icon sets can be registered under the same namespace.\n             */\n            this._iconSetConfigs = new Map();\n            /** Cache for icons loaded by direct URLs. */\n            this._cachedIconsByUrl = new Map();\n            /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n            this._inProgressUrlFetches = new Map();\n            /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n            this._fontCssClassesByAlias = new Map();\n            /**\n             * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n             * The default 'material-icons' value assumes that the material icon font has been loaded as\n             * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n             */\n            this._defaultFontSetClass = 'material-icons';\n            this._document = document;\n        }\n        /**\n         * Registers an icon by URL in the default namespace.\n         * @param iconName Name under which the icon should be registered.\n         * @param url\n         */\n        addSvgIcon(iconName, url, options) {\n            return this.addSvgIconInNamespace('', iconName, url, options);\n        }\n        /**\n         * Registers an icon using an HTML string in the default namespace.\n         * @param iconName Name under which the icon should be registered.\n         * @param literal SVG source of the icon.\n         */\n        addSvgIconLiteral(iconName, literal, options) {\n            return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n        }\n        /**\n         * Registers an icon by URL in the specified namespace.\n         * @param namespace Namespace in which the icon should be registered.\n         * @param iconName Name under which the icon should be registered.\n         * @param url\n         */\n        addSvgIconInNamespace(namespace, iconName, url, options) {\n            return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n        }\n        /**\n         * Registers an icon using an HTML string in the specified namespace.\n         * @param namespace Namespace in which the icon should be registered.\n         * @param iconName Name under which the icon should be registered.\n         * @param literal SVG source of the icon.\n         */\n        addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n            const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n            if (!sanitizedLiteral) {\n                throw getMatIconFailedToSanitizeLiteralError(literal);\n            }\n            const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);\n            return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n        }\n        /**\n         * Registers an icon set by URL in the default namespace.\n         * @param url\n         */\n        addSvgIconSet(url, options) {\n            return this.addSvgIconSetInNamespace('', url, options);\n        }\n        /**\n         * Registers an icon set using an HTML string in the default namespace.\n         * @param literal SVG source of the icon set.\n         */\n        addSvgIconSetLiteral(literal, options) {\n            return this.addSvgIconSetLiteralInNamespace('', literal, options);\n        }\n        /**\n         * Registers an icon set by URL in the specified namespace.\n         * @param namespace Namespace in which to register the icon set.\n         * @param url\n         */\n        addSvgIconSetInNamespace(namespace, url, options) {\n            return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n        }\n        /**\n         * Registers an icon set using an HTML string in the specified namespace.\n         * @param namespace Namespace in which to register the icon set.\n         * @param literal SVG source of the icon set.\n         */\n        addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n            const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n            if (!sanitizedLiteral) {\n                throw getMatIconFailedToSanitizeLiteralError(literal);\n            }\n            const svgElement = this._svgElementFromString(sanitizedLiteral);\n            return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n        }\n        /**\n         * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n         * component with the alias as the fontSet input will cause the class name to be applied\n         * to the `<mat-icon>` element.\n         *\n         * @param alias Alias for the font.\n         * @param className Class name override to be used instead of the alias.\n         */\n        registerFontClassAlias(alias, className = alias) {\n            this._fontCssClassesByAlias.set(alias, className);\n            return this;\n        }\n        /**\n         * Returns the CSS class name associated with the alias by a previous call to\n         * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n         */\n        classNameForFontAlias(alias) {\n            return this._fontCssClassesByAlias.get(alias) || alias;\n        }\n        /**\n         * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n         * have a fontSet input value, and is not loading an icon by name or URL.\n         *\n         * @param className\n         */\n        setDefaultFontSetClass(className) {\n            this._defaultFontSetClass = className;\n            return this;\n        }\n        /**\n         * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n         * have a fontSet input value, and is not loading an icon by name or URL.\n         */\n        getDefaultFontSetClass() {\n            return this._defaultFontSetClass;\n        }\n        /**\n         * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n         * The response from the URL may be cached so this will not always cause an HTTP request, but\n         * the produced element will always be a new copy of the originally fetched icon. (That is,\n         * it will not contain any modifications made to elements previously returned).\n         *\n         * @param safeUrl URL from which to fetch the SVG icon.\n         */\n        getSvgIconFromUrl(safeUrl) {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!url) {\n                throw getMatIconFailedToSanitizeUrlError(safeUrl);\n            }\n            const cachedIcon = this._cachedIconsByUrl.get(url);\n            if (cachedIcon) {\n                return of(cloneSvg(cachedIcon));\n            }\n            return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n        }\n        /**\n         * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n         * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n         * if not, the Observable will throw an error.\n         *\n         * @param name Name of the icon to be retrieved.\n         * @param namespace Namespace in which to look for the icon.\n         */\n        getNamedSvgIcon(name, namespace = '') {\n            // Return (copy of) cached icon if possible.\n            const key = iconKey(namespace, name);\n            const config = this._svgIconConfigs.get(key);\n            if (config) {\n                return this._getSvgFromConfig(config);\n            }\n            // See if we have any icon sets registered for the namespace.\n            const iconSetConfigs = this._iconSetConfigs.get(namespace);\n            if (iconSetConfigs) {\n                return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n            }\n            return throwError(getMatIconNameNotFoundError(key));\n        }\n        ngOnDestroy() {\n            this._svgIconConfigs.clear();\n            this._iconSetConfigs.clear();\n            this._cachedIconsByUrl.clear();\n        }\n        /**\n         * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n         */\n        _getSvgFromConfig(config) {\n            if (config.svgElement) {\n                // We already have the SVG element for this icon, return a copy.\n                return of(cloneSvg(config.svgElement));\n            }\n            else {\n                // Fetch the icon from the config's URL, cache it, and return a copy.\n                return this._loadSvgIconFromConfig(config).pipe(tap(svg => config.svgElement = svg), map(svg => cloneSvg(svg)));\n            }\n        }\n        /**\n         * Attempts to find an icon with the specified name in any of the SVG icon sets.\n         * First searches the available cached icons for a nested element with a matching name, and\n         * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n         * that have not been cached, and searches again after all fetches are completed.\n         * The returned Observable produces the SVG element if possible, and throws\n         * an error if no icon with the specified name can be found.\n         */\n        _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n            // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n            // requested name.\n            const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (namedIcon) {\n                // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n                // time anyway, there's probably not much advantage compared to just always extracting\n                // it from the icon set.\n                return of(namedIcon);\n            }\n            // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n            // fetched, fetch them now and look for iconName in the results.\n            const iconSetFetchRequests = iconSetConfigs\n                .filter(iconSetConfig => !iconSetConfig.svgElement)\n                .map(iconSetConfig => {\n                return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                    // Swallow errors fetching individual URLs so the\n                    // combined Observable won't necessarily fail.\n                    const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                    this._errorHandler.handleError(new Error(errorMessage));\n                    return of(null);\n                }));\n            });\n            // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n            // cached SVG element (unless the request failed), and we can check again for the icon.\n            return forkJoin(iconSetFetchRequests).pipe(map(() => {\n                const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n                if (!foundIcon) {\n                    throw getMatIconNameNotFoundError(name);\n                }\n                return foundIcon;\n            }));\n        }\n        /**\n         * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n         * tag matches the specified name. If found, copies the nested element to a new SVG element and\n         * returns it. Returns null if no matching element is found.\n         */\n        _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n            // Iterate backwards, so icon sets added later have precedence.\n            for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n                const config = iconSetConfigs[i];\n                if (config.svgElement) {\n                    const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                    if (foundIcon) {\n                        return foundIcon;\n                    }\n                }\n            }\n            return null;\n        }\n        /**\n         * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n         * from it.\n         */\n        _loadSvgIconFromConfig(config) {\n            return this._fetchIcon(config)\n                .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText, config.options)));\n        }\n        /**\n         * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n         * from it.\n         */\n        _loadSvgIconSetFromConfig(config) {\n            // If the SVG for this icon set has already been parsed, do nothing.\n            if (config.svgElement) {\n                return of(config.svgElement);\n            }\n            return this._fetchIcon(config).pipe(map(svgText => {\n                // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n                // only needs to occur if the cache is yet unset.\n                if (!config.svgElement) {\n                    config.svgElement = this._svgElementFromString(svgText);\n                }\n                return config.svgElement;\n            }));\n        }\n        /**\n         * Creates a DOM element from the given SVG string, and adds default attributes.\n         */\n        _createSvgElementForSingleIcon(responseText, options) {\n            const svg = this._svgElementFromString(responseText);\n            this._setSvgAttributes(svg, options);\n            return svg;\n        }\n        /**\n         * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n         * tag matches the specified name. If found, copies the nested element to a new SVG element and\n         * returns it. Returns null if no matching element is found.\n         */\n        _extractSvgIconFromSet(iconSet, iconName, options) {\n            // Use the `id=\"iconName\"` syntax in order to escape special\n            // characters in the ID (versus using the #iconName syntax).\n            const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n            if (!iconSource) {\n                return null;\n            }\n            // Clone the element and remove the ID to prevent multiple elements from being added\n            // to the page with the same ID.\n            const iconElement = iconSource.cloneNode(true);\n            iconElement.removeAttribute('id');\n            // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n            // the content of a new <svg> node.\n            if (iconElement.nodeName.toLowerCase() === 'svg') {\n                return this._setSvgAttributes(iconElement, options);\n            }\n            // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n            // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n            // tag is problematic on Firefox, because it needs to include the current page path.\n            if (iconElement.nodeName.toLowerCase() === 'symbol') {\n                return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n            }\n            // createElement('SVG') doesn't work as expected; the DOM ends up with\n            // the correct nodes, but the SVG content doesn't render. Instead we\n            // have to create an empty SVG node using innerHTML and append its content.\n            // Elements created using DOMParser.parseFromString have the same problem.\n            // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n            const svg = this._svgElementFromString('<svg></svg>');\n            // Clone the node so we don't remove it from the parent icon set element.\n            svg.appendChild(iconElement);\n            return this._setSvgAttributes(svg, options);\n        }\n        /**\n         * Creates a DOM element from the given SVG string.\n         */\n        _svgElementFromString(str) {\n            const div = this._document.createElement('DIV');\n            div.innerHTML = str;\n            const svg = div.querySelector('svg');\n            if (!svg) {\n                throw Error('<svg> tag not found');\n            }\n            return svg;\n        }\n        /**\n         * Converts an element into an SVG node by cloning all of its children.\n         */\n        _toSvgElement(element) {\n            const svg = this._svgElementFromString('<svg></svg>');\n            const attributes = element.attributes;\n            // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n            for (let i = 0; i < attributes.length; i++) {\n                const { name, value } = attributes[i];\n                if (name !== 'id') {\n                    svg.setAttribute(name, value);\n                }\n            }\n            for (let i = 0; i < element.childNodes.length; i++) {\n                if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                    svg.appendChild(element.childNodes[i].cloneNode(true));\n                }\n            }\n            return svg;\n        }\n        /**\n         * Sets the default attributes for an SVG element to be used as an icon.\n         */\n        _setSvgAttributes(svg, options) {\n            svg.setAttribute('fit', '');\n            svg.setAttribute('height', '100%');\n            svg.setAttribute('width', '100%');\n            svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n            svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n            if (options && options.viewBox) {\n                svg.setAttribute('viewBox', options.viewBox);\n            }\n            return svg;\n        }\n        /**\n         * Returns an Observable which produces the string contents of the given icon. Results may be\n         * cached, so future calls with the same URL may not cause another HTTP request.\n         */\n        _fetchIcon(iconConfig) {\n            var _a;\n            const { url: safeUrl, options } = iconConfig;\n            const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n            if (!this._httpClient) {\n                throw getMatIconNoHttpProviderError();\n            }\n            if (safeUrl == null) {\n                throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n            }\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!url) {\n                throw getMatIconFailedToSanitizeUrlError(safeUrl);\n            }\n            // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n            // already a request in progress for that URL. It's necessary to call share() on the\n            // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n            const inProgressFetch = this._inProgressUrlFetches.get(url);\n            if (inProgressFetch) {\n                return inProgressFetch;\n            }\n            // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n            // Observable. Figure out why and fix it.\n            const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n            this._inProgressUrlFetches.set(url, req);\n            return req;\n        }\n        /**\n         * Registers an icon config by name in the specified namespace.\n         * @param namespace Namespace in which to register the icon config.\n         * @param iconName Name under which to register the config.\n         * @param config Config to be registered.\n         */\n        _addSvgIconConfig(namespace, iconName, config) {\n            this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n            return this;\n        }\n        /**\n         * Registers an icon set config in the specified namespace.\n         * @param namespace Namespace in which to register the icon config.\n         * @param config Config to be registered.\n         */\n        _addSvgIconSetConfig(namespace, config) {\n            const configNamespace = this._iconSetConfigs.get(namespace);\n            if (configNamespace) {\n                configNamespace.push(config);\n            }\n            else {\n                this._iconSetConfigs.set(namespace, [config]);\n            }\n            return this;\n        }\n    }\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\n    MatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\n    MatIconRegistry.ctorParameters = () => [\n        { type: HttpClient, decorators: [{ type: Optional }] },\n        { type: DomSanitizer },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: ErrorHandler }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n    return MatIconRegistry;\n})();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nlet MatIcon = /** @class */ (() => {\n    class MatIcon extends _MatIconMixinBase {\n        constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n            super(elementRef);\n            this._iconRegistry = _iconRegistry;\n            this._location = _location;\n            this._errorHandler = _errorHandler;\n            this._inline = false;\n            /** Subscription to the current in-progress SVG icon request. */\n            this._currentIconFetch = Subscription.EMPTY;\n            // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n            // the right thing to do for the majority of icon use-cases.\n            if (!ariaHidden) {\n                elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n            }\n        }\n        /**\n         * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n         * the element the icon is contained in.\n         */\n        get inline() {\n            return this._inline;\n        }\n        set inline(inline) {\n            this._inline = coerceBooleanProperty(inline);\n        }\n        /** Font set that the icon is a part of. */\n        get fontSet() { return this._fontSet; }\n        set fontSet(value) {\n            this._fontSet = this._cleanupFontValue(value);\n        }\n        /** Name of an icon within a font set. */\n        get fontIcon() { return this._fontIcon; }\n        set fontIcon(value) {\n            this._fontIcon = this._cleanupFontValue(value);\n        }\n        /**\n         * Splits an svgIcon binding value into its icon set and icon name components.\n         * Returns a 2-element array of [(icon set), (icon name)].\n         * The separator for the two fields is ':'. If there is no separator, an empty\n         * string is returned for the icon set and the entire value is returned for\n         * the icon name. If the argument is falsy, returns an array of two empty strings.\n         * Throws an error if the name contains two or more ':' separators.\n         * Examples:\n         *   `'social:cake' -> ['social', 'cake']\n         *   'penguin' -> ['', 'penguin']\n         *   null -> ['', '']\n         *   'a:b:c' -> (throws Error)`\n         */\n        _splitIconName(iconName) {\n            if (!iconName) {\n                return ['', ''];\n            }\n            const parts = iconName.split(':');\n            switch (parts.length) {\n                case 1: return ['', parts[0]]; // Use default namespace.\n                case 2: return parts;\n                default: throw Error(`Invalid icon name: \"${iconName}\"`);\n            }\n        }\n        ngOnChanges(changes) {\n            // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n            const svgIconChanges = changes['svgIcon'];\n            if (svgIconChanges) {\n                this._currentIconFetch.unsubscribe();\n                if (this.svgIcon) {\n                    const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                    this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                        .pipe(take(1))\n                        .subscribe(svg => this._setSvgElement(svg), (err) => {\n                        const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                        this._errorHandler.handleError(new Error(errorMessage));\n                    });\n                }\n                else if (svgIconChanges.previousValue) {\n                    this._clearSvgElement();\n                }\n            }\n            if (this._usingFontIcon()) {\n                this._updateFontIconClasses();\n            }\n        }\n        ngOnInit() {\n            // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n            // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n            if (this._usingFontIcon()) {\n                this._updateFontIconClasses();\n            }\n        }\n        ngAfterViewChecked() {\n            const cachedElements = this._elementsWithExternalReferences;\n            if (cachedElements && cachedElements.size) {\n                const newPath = this._location.getPathname();\n                // We need to check whether the URL has changed on each change detection since\n                // the browser doesn't have an API that will let us react on link clicks and\n                // we can't depend on the Angular router. The references need to be updated,\n                // because while most browsers don't care whether the URL is correct after\n                // the first render, Safari will break if the user navigates to a different\n                // page and the SVG isn't re-rendered.\n                if (newPath !== this._previousPath) {\n                    this._previousPath = newPath;\n                    this._prependPathToReferences(newPath);\n                }\n            }\n        }\n        ngOnDestroy() {\n            this._currentIconFetch.unsubscribe();\n            if (this._elementsWithExternalReferences) {\n                this._elementsWithExternalReferences.clear();\n            }\n        }\n        _usingFontIcon() {\n            return !this.svgIcon;\n        }\n        _setSvgElement(svg) {\n            this._clearSvgElement();\n            // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n            // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n            // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n            const styleTags = svg.querySelectorAll('style');\n            for (let i = 0; i < styleTags.length; i++) {\n                styleTags[i].textContent += ' ';\n            }\n            // Note: we do this fix here, rather than the icon registry, because the\n            // references have to point to the URL at the time that the icon was created.\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n            this._elementRef.nativeElement.appendChild(svg);\n        }\n        _clearSvgElement() {\n            const layoutElement = this._elementRef.nativeElement;\n            let childCount = layoutElement.childNodes.length;\n            if (this._elementsWithExternalReferences) {\n                this._elementsWithExternalReferences.clear();\n            }\n            // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n            // we can't use innerHTML, because IE will throw if the element has a data binding.\n            while (childCount--) {\n                const child = layoutElement.childNodes[childCount];\n                // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n                // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n                if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                    layoutElement.removeChild(child);\n                }\n            }\n        }\n        _updateFontIconClasses() {\n            if (!this._usingFontIcon()) {\n                return;\n            }\n            const elem = this._elementRef.nativeElement;\n            const fontSetClass = this.fontSet ?\n                this._iconRegistry.classNameForFontAlias(this.fontSet) :\n                this._iconRegistry.getDefaultFontSetClass();\n            if (fontSetClass != this._previousFontSetClass) {\n                if (this._previousFontSetClass) {\n                    elem.classList.remove(this._previousFontSetClass);\n                }\n                if (fontSetClass) {\n                    elem.classList.add(fontSetClass);\n                }\n                this._previousFontSetClass = fontSetClass;\n            }\n            if (this.fontIcon != this._previousFontIconClass) {\n                if (this._previousFontIconClass) {\n                    elem.classList.remove(this._previousFontIconClass);\n                }\n                if (this.fontIcon) {\n                    elem.classList.add(this.fontIcon);\n                }\n                this._previousFontIconClass = this.fontIcon;\n            }\n        }\n        /**\n         * Cleans up a value to be used as a fontIcon or fontSet.\n         * Since the value ends up being assigned as a CSS class, we\n         * have to trim the value and omit space-separated values.\n         */\n        _cleanupFontValue(value) {\n            return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n        }\n        /**\n         * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n         * reference. This is required because WebKit browsers require references to be prefixed with\n         * the current path, if the page has a `base` tag.\n         */\n        _prependPathToReferences(path) {\n            const elements = this._elementsWithExternalReferences;\n            if (elements) {\n                elements.forEach((attrs, element) => {\n                    attrs.forEach(attr => {\n                        element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                    });\n                });\n            }\n        }\n        /**\n         * Caches the children of an SVG element that have `url()`\n         * references that we need to prefix with the current path.\n         */\n        _cacheChildrenWithExternalReferences(element) {\n            const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n            const elements = this._elementsWithExternalReferences =\n                this._elementsWithExternalReferences || new Map();\n            for (let i = 0; i < elementsWithFuncIri.length; i++) {\n                funcIriAttributes.forEach(attr => {\n                    const elementWithReference = elementsWithFuncIri[i];\n                    const value = elementWithReference.getAttribute(attr);\n                    const match = value ? value.match(funcIriPattern) : null;\n                    if (match) {\n                        let attributes = elements.get(elementWithReference);\n                        if (!attributes) {\n                            attributes = [];\n                            elements.set(elementWithReference, attributes);\n                        }\n                        attributes.push({ name: attr, value: match[1] });\n                    }\n                });\n            }\n        }\n    }\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 4, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatIcon.ctorParameters = () => [\n        { type: ElementRef },\n        { type: MatIconRegistry },\n        { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n        { type: ErrorHandler }\n    ];\n    MatIcon.propDecorators = {\n        inline: [{ type: Input }],\n        svgIcon: [{ type: Input }],\n        fontSet: [{ type: Input }],\n        fontIcon: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n    return MatIcon;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatIconModule = /** @class */ (() => {\n    class MatIconModule {\n    }\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconModule_Factory(t) { return new (t || MatIconModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n    return MatIconModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n//# sourceMappingURL=icon.js.map","import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        let subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        const connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport class MulticastOperator {\n    constructor(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        const { selector } = this;\n        const subject = this.subjectFactory();\n        const subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    }\n}\n//# sourceMappingURL=multicast.js.map","import { Injectable } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IconsService {\r\n\r\n\tconstructor(private sanitizer: DomSanitizer, private registry: MatIconRegistry) { }\r\n\tregisterIcons(icons: string[]) {\r\n\t\ticons.forEach(name =>\r\n\t\t\tthis.registry.addSvgIcon(\r\n\t\t\t\tname,\r\n\t\t\t\tthis.sanitizer.bypassSecurityTrustResourceUrl(`http://localhost:44395/icons/${name}.svg`)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\nimport tabs from 'src/assets/tabs.json';\r\nimport { TabElement } from '../shared/models/tab-item.interface';\r\nimport { IconsService } from './icons.service';\r\nimport { filter } from 'rxjs/operators';\r\nimport { NavigationEnd, Router, ActivatedRoute } from '@angular/router';\r\n\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class TabManagerService {\r\n\r\n\ttabElements: TabElement[] = [];\r\n\tcurrentTab = new BehaviorSubject<TabElement>(undefined);\r\n\tget currentTab$(): Observable<TabElement> {\r\n\t\treturn this.currentTab.asObservable();\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate icons: IconsService,\r\n\t\tprivate router: Router\r\n\t) { }\r\n\r\n\tinitializeTabs(): void {\r\n\t\t// tslint:disable-next-line: arrow-return-shorthand\r\n\t\tthis.tabElements = tabs.map((tab, index) => { return { ...tab, index } as TabElement; });\r\n\t\tthis.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n\t\t\tconst nextTab = this.getTabByRoute(event.urlAfterRedirects);\r\n\t\t\tif (nextTab == null) { this.router.navigate([this.tabElements[0].route]); }\r\n\t\t\tthis.currentTab.next(nextTab);\r\n\t\t});\r\n\r\n\t\tthis.icons.registerIcons(this.tabElements.map(x => x.icon));\r\n\t}\r\n\r\n\tprivate getTabByRoute(route: string): TabElement {\r\n\t\troute = route.split('/')[1] || route;\r\n\t\treturn this.tabElements.find(tab => tab.route === route);\r\n\t}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { State, EMPTY_STATE } from '../../../../narnia/src/app/shared/state.interface';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class StateService {\r\n\tprivate state = new BehaviorSubject<State>(EMPTY_STATE);\r\n\tpublic get state$(): Observable<State> {\r\n\t\treturn this.state.asObservable();\r\n\t}\r\n\r\n\tpublic updateState(state: State): void {\r\n\t\tthis.state.next(state);\r\n\t}\r\n\r\n\tpublic get value(): State {\r\n\t\treturn this.state.value;\r\n\t}\r\n}\r\n","import { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        this.setDisposeFn((() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nlet CdkPortal = /** @class */ (() => {\n    class CdkPortal extends TemplatePortal {\n        constructor(templateRef, viewContainerRef) {\n            super(templateRef, viewContainerRef);\n        }\n    }\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkPortal.ctorParameters = () => [\n        { type: TemplateRef },\n        { type: ViewContainerRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n    return CdkPortal;\n})();\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nlet TemplatePortalDirective = /** @class */ (() => {\n    class TemplatePortalDirective extends CdkPortal {\n    }\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n    return TemplatePortalDirective;\n})();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nlet CdkPortalOutlet = /** @class */ (() => {\n    class CdkPortalOutlet extends BasePortalOutlet {\n        constructor(_componentFactoryResolver, _viewContainerRef, \n        /**\n         * @deprecated `_document` parameter to be made required.\n         * @breaking-change 9.0.0\n         */\n        _document) {\n            super();\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._viewContainerRef = _viewContainerRef;\n            /** Whether the portal component is initialized. */\n            this._isInitialized = false;\n            /** Emits when a portal is attached to the outlet. */\n            this.attached = new EventEmitter();\n            /**\n             * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n             * @param portal Portal to be attached.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            this.attachDomPortal = (portal) => {\n                // @breaking-change 9.0.0 Remove check and error once the\n                // `_document` constructor parameter is required.\n                if (!this._document) {\n                    throw Error('Cannot attach DOM portal without _document constructor parameter');\n                }\n                const element = portal.element;\n                if (!element.parentNode) {\n                    throw Error('DOM portal content must be attached to a parent node.');\n                }\n                // Anchor used to save the element's previous position so\n                // that we can restore it when the portal is detached.\n                const anchorNode = this._document.createComment('dom-portal');\n                portal.setAttachedHost(this);\n                element.parentNode.insertBefore(anchorNode, element);\n                this._getRootNode().appendChild(element);\n                super.setDisposeFn(() => {\n                    if (anchorNode.parentNode) {\n                        anchorNode.parentNode.replaceChild(element, anchorNode);\n                    }\n                });\n            };\n            this._document = _document;\n        }\n        /** Portal associated with the Portal outlet. */\n        get portal() {\n            return this._attachedPortal;\n        }\n        set portal(portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                super.detach();\n            }\n            if (portal) {\n                super.attach(portal);\n            }\n            this._attachedPortal = portal;\n        }\n        /** Component or view reference that is attached to the portal. */\n        get attachedRef() {\n            return this._attachedRef;\n        }\n        ngOnInit() {\n            this._isInitialized = true;\n        }\n        ngOnDestroy() {\n            super.dispose();\n            this._attachedPortal = null;\n            this._attachedRef = null;\n        }\n        /**\n         * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n         *\n         * @param portal Portal to be attached to the portal outlet.\n         * @returns Reference to the created component.\n         */\n        attachComponentPortal(portal) {\n            portal.setAttachedHost(this);\n            // If the portal specifies an origin, use that as the logical location of the component\n            // in the application tree. Otherwise use the location of this PortalOutlet.\n            const viewContainerRef = portal.viewContainerRef != null ?\n                portal.viewContainerRef :\n                this._viewContainerRef;\n            const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n            const componentFactory = resolver.resolveComponentFactory(portal.component);\n            const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n            // If we're using a view container that's different from the injected one (e.g. when the portal\n            // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n            // inside of the alternate view container.\n            if (viewContainerRef !== this._viewContainerRef) {\n                this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n            }\n            super.setDisposeFn(() => ref.destroy());\n            this._attachedPortal = portal;\n            this._attachedRef = ref;\n            this.attached.emit(ref);\n            return ref;\n        }\n        /**\n         * Attach the given TemplatePortal to this PortalHost as an embedded View.\n         * @param portal Portal to be attached.\n         * @returns Reference to the created embedded view.\n         */\n        attachTemplatePortal(portal) {\n            portal.setAttachedHost(this);\n            const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n            super.setDisposeFn(() => this._viewContainerRef.clear());\n            this._attachedPortal = portal;\n            this._attachedRef = viewRef;\n            this.attached.emit(viewRef);\n            return viewRef;\n        }\n        /** Gets the root node of the portal outlet. */\n        _getRootNode() {\n            const nativeElement = this._viewContainerRef.element.nativeElement;\n            // The directive could be set on a template which will result in a comment\n            // node being the root. Use the comment's parent node if that is the case.\n            return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n                nativeElement : nativeElement.parentNode);\n        }\n    }\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkPortalOutlet.ctorParameters = () => [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n    CdkPortalOutlet.propDecorators = {\n        attached: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\n    return CdkPortalOutlet;\n})();\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nlet PortalHostDirective = /** @class */ (() => {\n    class PortalHostDirective extends CdkPortalOutlet {\n    }\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\n    return PortalHostDirective;\n})();\nlet PortalModule = /** @class */ (() => {\n    class PortalModule {\n    }\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null); })();\n    return PortalModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map","import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n    return (source) => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nclass DistinctUntilChangedOperator {\n    constructor(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    }\n}\nclass DistinctUntilChangedSubscriber extends Subscriber {\n    constructor(destination, compare, keySelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    compare(x, y) {\n        return x === y;\n    }\n    _next(value) {\n        let key;\n        try {\n            const { keySelector } = this;\n            key = keySelector ? keySelector(value) : value;\n        }\n        catch (err) {\n            return this.destination.error(err);\n        }\n        let result = false;\n        if (this.hasKey) {\n            try {\n                const { compare } = this;\n                result = compare(this.key, key);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (!result) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=distinctUntilChanged.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\nclass TakeUntilSubscriber extends OuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.seenValue = true;\n        this.complete();\n    }\n    notifyComplete() {\n    }\n}\n//# sourceMappingURL=takeUntil.js.map","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass AuditSubscriber extends OuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            let duration;\n            try {\n                const { durationSelector } = this;\n                duration = durationSelector(value);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n            const innerSubscription = subscribeToResult(this, duration);\n            if (!innerSubscription || innerSubscription.closed) {\n                this.clearThrottle();\n            }\n            else {\n                this.add(this.throttled = innerSubscription);\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n//# sourceMappingURL=audit.js.map","import { isArray } from './isArray';\nexport function isNumeric(val) {\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function timer(dueTime = 0, periodOrScheduler, scheduler) {\n    let period = -1;\n    if (isNumeric(periodOrScheduler)) {\n        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n    }\n    else if (isScheduler(periodOrScheduler)) {\n        scheduler = periodOrScheduler;\n    }\n    if (!isScheduler(scheduler)) {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        const due = isNumeric(dueTime)\n            ? dueTime\n            : (+dueTime - scheduler.now());\n        return scheduler.schedule(dispatch, due, {\n            index: 0, period, subscriber\n        });\n    });\n}\nfunction dispatch(state) {\n    const { index, period, subscriber } = state;\n    subscriber.next(index);\n    if (subscriber.closed) {\n        return;\n    }\n    else if (period === -1) {\n        return subscriber.complete();\n    }\n    state.index = index + 1;\n    this.schedule(state, period);\n}\n//# sourceMappingURL=timer.js.map","import { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nexport function auditTime(duration, scheduler = async) {\n    return audit(() => timer(duration, scheduler));\n}\n//# sourceMappingURL=auditTime.js.map","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Optional, Inject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, merge, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the virtual scrolling strategy. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nconst _c0 = [\"contentWrapper\"];\nconst _c1 = [\"*\"];\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /** @docs-private Implemented as part of VirtualScrollStrategy. */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /** The attached viewport. */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered() { }\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /** Update the viewport's total content size. */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /** Update the viewport's rendered range. */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        const renderedRange = this._viewport.getRenderedRange();\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        const viewportSize = this._viewport.getViewportSize();\n        const dataLength = this._viewport.getDataLength();\n        let scrollOffset = this._viewport.measureScrollOffset();\n        let firstVisibleIndex = scrollOffset / this._itemSize;\n        // If user scrolls to the bottom of the list and data changes to a smaller list\n        if (newRange.end > dataLength) {\n            // We have to recalculate the first visible index based on new data length and viewport size.\n            const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);\n            const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));\n            // If first visible index changed we must update scroll offset to handle start/end buffers\n            // Current range must also be adjusted to cover the new position (bottom of new list).\n            if (firstVisibleIndex != newVisibleIndex) {\n                firstVisibleIndex = newVisibleIndex;\n                scrollOffset = newVisibleIndex * this._itemSize;\n                newRange.start = Math.floor(firstVisibleIndex);\n            }\n            newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));\n        }\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/** A virtual scroll strategy that supports fixed-size items. */\nlet CdkFixedSizeVirtualScroll = /** @class */ (() => {\n    class CdkFixedSizeVirtualScroll {\n        constructor() {\n            this._itemSize = 20;\n            this._minBufferPx = 100;\n            this._maxBufferPx = 200;\n            /** The scroll strategy used by this directive. */\n            this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        }\n        /** The size of the items in the list (in pixels). */\n        get itemSize() { return this._itemSize; }\n        set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n        /**\n         * The minimum amount of buffer rendered beyond the viewport (in pixels).\n         * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n         */\n        get minBufferPx() { return this._minBufferPx; }\n        set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n        /**\n         * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n         */\n        get maxBufferPx() { return this._maxBufferPx; }\n        set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n        ngOnChanges() {\n            this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n        }\n    }\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) { return new (t || CdkFixedSizeVirtualScroll)(); };\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFixedSizeVirtualScroll, selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]], inputs: { itemSize: \"itemSize\", minBufferPx: \"minBufferPx\", maxBufferPx: \"maxBufferPx\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: VIRTUAL_SCROLL_STRATEGY,\n                useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n            }]), ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkFixedSizeVirtualScroll.propDecorators = {\n        itemSize: [{ type: Input }],\n        minBufferPx: [{ type: Input }],\n        maxBufferPx: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]\n                    }]\n            }]\n    }], function () { return []; }, { itemSize: [{\n            type: Input\n        }], minBufferPx: [{\n            type: Input\n        }], maxBufferPx: [{\n            type: Input\n        }] }); })();\n    return CdkFixedSizeVirtualScroll;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the scrolling events by default. */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nlet ScrollDispatcher = /** @class */ (() => {\n    class ScrollDispatcher {\n        constructor(_ngZone, _platform, \n        /** @breaking-change 11.0.0 make document required */\n        document) {\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n            this._scrolled = new Subject();\n            /** Keeps track of the global `scroll` and `resize` subscriptions. */\n            this._globalSubscription = null;\n            /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n            this._scrolledCount = 0;\n            /**\n             * Map of all the scrollable references that are registered with the service and their\n             * scroll event subscriptions.\n             */\n            this.scrollContainers = new Map();\n            this._document = document;\n        }\n        /**\n         * Registers a scrollable instance with the service and listens for its scrolled events. When the\n         * scrollable is scrolled, the service emits the event to its scrolled observable.\n         * @param scrollable Scrollable instance to be registered.\n         */\n        register(scrollable) {\n            if (!this.scrollContainers.has(scrollable)) {\n                this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                    .subscribe(() => this._scrolled.next(scrollable)));\n            }\n        }\n        /**\n         * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n         * @param scrollable Scrollable instance to be deregistered.\n         */\n        deregister(scrollable) {\n            const scrollableReference = this.scrollContainers.get(scrollable);\n            if (scrollableReference) {\n                scrollableReference.unsubscribe();\n                this.scrollContainers.delete(scrollable);\n            }\n        }\n        /**\n         * Returns an observable that emits an event whenever any of the registered Scrollable\n         * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n         * to override the default \"throttle\" time.\n         *\n         * **Note:** in order to avoid hitting change detection for every scroll event,\n         * all of the events emitted from this stream will be run outside the Angular zone.\n         * If you need to update any data bindings as a result of a scroll event, you have\n         * to run the callback using `NgZone.run`.\n         */\n        scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n            if (!this._platform.isBrowser) {\n                return of();\n            }\n            return new Observable((observer) => {\n                if (!this._globalSubscription) {\n                    this._addGlobalListener();\n                }\n                // In the case of a 0ms delay, use an observable without auditTime\n                // since it does add a perceptible delay in processing overhead.\n                const subscription = auditTimeInMs > 0 ?\n                    this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                    this._scrolled.subscribe(observer);\n                this._scrolledCount++;\n                return () => {\n                    subscription.unsubscribe();\n                    this._scrolledCount--;\n                    if (!this._scrolledCount) {\n                        this._removeGlobalListener();\n                    }\n                };\n            });\n        }\n        ngOnDestroy() {\n            this._removeGlobalListener();\n            this.scrollContainers.forEach((_, container) => this.deregister(container));\n            this._scrolled.complete();\n        }\n        /**\n         * Returns an observable that emits whenever any of the\n         * scrollable ancestors of an element are scrolled.\n         * @param elementRef Element whose ancestors to listen for.\n         * @param auditTimeInMs Time to throttle the scroll events.\n         */\n        ancestorScrolled(elementRef, auditTimeInMs) {\n            const ancestors = this.getAncestorScrollContainers(elementRef);\n            return this.scrolled(auditTimeInMs).pipe(filter(target => {\n                return !target || ancestors.indexOf(target) > -1;\n            }));\n        }\n        /** Returns all registered Scrollables that contain the provided element. */\n        getAncestorScrollContainers(elementRef) {\n            const scrollingContainers = [];\n            this.scrollContainers.forEach((_subscription, scrollable) => {\n                if (this._scrollableContainsElement(scrollable, elementRef)) {\n                    scrollingContainers.push(scrollable);\n                }\n            });\n            return scrollingContainers;\n        }\n        /** Access injected document if available or fallback to global document reference */\n        _getDocument() {\n            return this._document || document;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            const doc = this._getDocument();\n            return doc.defaultView || window;\n        }\n        /** Returns true if the element is contained within the provided Scrollable. */\n        _scrollableContainsElement(scrollable, elementRef) {\n            let element = elementRef.nativeElement;\n            let scrollableElement = scrollable.getElementRef().nativeElement;\n            // Traverse through the element parents until we reach null, checking if any of the elements\n            // are the scrollable's element.\n            do {\n                if (element == scrollableElement) {\n                    return true;\n                }\n            } while (element = element.parentElement);\n            return false;\n        }\n        /** Sets up the global scroll listeners. */\n        _addGlobalListener() {\n            this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n            });\n        }\n        /** Cleans up the global scroll listener. */\n        _removeGlobalListener() {\n            if (this._globalSubscription) {\n                this._globalSubscription.unsubscribe();\n                this._globalSubscription = null;\n            }\n        }\n    }\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) { return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\n    ScrollDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\n    ScrollDispatcher.ctorParameters = () => [\n        { type: NgZone },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return ScrollDispatcher;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nlet CdkScrollable = /** @class */ (() => {\n    class CdkScrollable {\n        constructor(elementRef, scrollDispatcher, ngZone, dir) {\n            this.elementRef = elementRef;\n            this.scrollDispatcher = scrollDispatcher;\n            this.ngZone = ngZone;\n            this.dir = dir;\n            this._destroyed = new Subject();\n            this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n                .subscribe(observer)));\n        }\n        ngOnInit() {\n            this.scrollDispatcher.register(this);\n        }\n        ngOnDestroy() {\n            this.scrollDispatcher.deregister(this);\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Returns observable that emits when a scroll event is fired on the host element. */\n        elementScrolled() {\n            return this._elementScrolled;\n        }\n        /** Gets the ElementRef for the viewport. */\n        getElementRef() {\n            return this.elementRef;\n        }\n        /**\n         * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n         * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param options specified the offsets to scroll to.\n         */\n        scrollTo(options) {\n            const el = this.elementRef.nativeElement;\n            const isRtl = this.dir && this.dir.value == 'rtl';\n            // Rewrite start & end offsets as right or left offsets.\n            if (options.left == null) {\n                options.left = isRtl ? options.end : options.start;\n            }\n            if (options.right == null) {\n                options.right = isRtl ? options.start : options.end;\n            }\n            // Rewrite the bottom offset as a top offset.\n            if (options.bottom != null) {\n                options.top =\n                    el.scrollHeight - el.clientHeight - options.bottom;\n            }\n            // Rewrite the right offset as a left offset.\n            if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n                if (options.left != null) {\n                    options.right =\n                        el.scrollWidth - el.clientWidth - options.left;\n                }\n                if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                    options.left = options.right;\n                }\n                else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                    options.left = options.right ? -options.right : options.right;\n                }\n            }\n            else {\n                if (options.right != null) {\n                    options.left =\n                        el.scrollWidth - el.clientWidth - options.right;\n                }\n            }\n            this._applyScrollToOptions(options);\n        }\n        _applyScrollToOptions(options) {\n            const el = this.elementRef.nativeElement;\n            if (supportsScrollBehavior()) {\n                el.scrollTo(options);\n            }\n            else {\n                if (options.top != null) {\n                    el.scrollTop = options.top;\n                }\n                if (options.left != null) {\n                    el.scrollLeft = options.left;\n                }\n            }\n        }\n        /**\n         * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n         * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n         * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n         * left and right always refer to the left and right side of the scrolling container irrespective\n         * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n         * in an RTL context.\n         * @param from The edge to measure from.\n         */\n        measureScrollOffset(from) {\n            const LEFT = 'left';\n            const RIGHT = 'right';\n            const el = this.elementRef.nativeElement;\n            if (from == 'top') {\n                return el.scrollTop;\n            }\n            if (from == 'bottom') {\n                return el.scrollHeight - el.clientHeight - el.scrollTop;\n            }\n            // Rewrite start & end as left or right offsets.\n            const isRtl = this.dir && this.dir.value == 'rtl';\n            if (from == 'start') {\n                from = isRtl ? RIGHT : LEFT;\n            }\n            else if (from == 'end') {\n                from = isRtl ? LEFT : RIGHT;\n            }\n            if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n                // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n                else {\n                    return el.scrollLeft;\n                }\n            }\n            else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n                // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n                // 0 when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft + el.scrollWidth - el.clientWidth;\n                }\n                else {\n                    return -el.scrollLeft;\n                }\n            }\n            else {\n                // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n                // (scrollWidth - clientWidth) when scrolled all the way right.\n                if (from == LEFT) {\n                    return el.scrollLeft;\n                }\n                else {\n                    return el.scrollWidth - el.clientWidth - el.scrollLeft;\n                }\n            }\n        }\n    }\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) { return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkScrollable, selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]] });\n    CdkScrollable.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ScrollDispatcher },\n        { type: NgZone },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ScrollDispatcher }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n    return CdkScrollable;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle the resize events by default. */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nlet ViewportRuler = /** @class */ (() => {\n    class ViewportRuler {\n        constructor(_platform, ngZone, \n        /** @breaking-change 11.0.0 make document required */\n        document) {\n            this._platform = _platform;\n            this._document = document;\n            ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                this._change = _platform.isBrowser ?\n                    merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                    of();\n                // Note that we need to do the subscription inside `runOutsideAngular`\n                // since subscribing is what causes the event listener to be added.\n                this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n            });\n        }\n        ngOnDestroy() {\n            this._invalidateCache.unsubscribe();\n        }\n        /** Returns the viewport's width and height. */\n        getViewportSize() {\n            if (!this._viewportSize) {\n                this._updateViewportSize();\n            }\n            const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n            // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n            if (!this._platform.isBrowser) {\n                this._viewportSize = null;\n            }\n            return output;\n        }\n        /** Gets a ClientRect for the viewport's bounds. */\n        getViewportRect() {\n            // Use the document element's bounding rect rather than the window scroll properties\n            // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n            // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n            // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n            // can disagree when the page is pinch-zoomed (on devices that support touch).\n            // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n            // We use the documentElement instead of the body because, by default (without a css reset)\n            // browsers typically give the document body an 8px margin, which is not included in\n            // getBoundingClientRect().\n            const scrollPosition = this.getViewportScrollPosition();\n            const { width, height } = this.getViewportSize();\n            return {\n                top: scrollPosition.top,\n                left: scrollPosition.left,\n                bottom: scrollPosition.top + height,\n                right: scrollPosition.left + width,\n                height,\n                width,\n            };\n        }\n        /** Gets the (top, left) scroll position of the viewport. */\n        getViewportScrollPosition() {\n            // While we can get a reference to the fake document\n            // during SSR, it doesn't have getBoundingClientRect.\n            if (!this._platform.isBrowser) {\n                return { top: 0, left: 0 };\n            }\n            // The top-left-corner of the viewport is determined by the scroll position of the document\n            // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n            // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n            // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n            // `document.documentElement` works consistently, where the `top` and `left` values will\n            // equal negative the scroll position.\n            const document = this._getDocument();\n            const window = this._getWindow();\n            const documentElement = document.documentElement;\n            const documentRect = documentElement.getBoundingClientRect();\n            const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                documentElement.scrollTop || 0;\n            const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                documentElement.scrollLeft || 0;\n            return { top, left };\n        }\n        /**\n         * Returns a stream that emits whenever the size of the viewport changes.\n         * @param throttleTime Time in milliseconds to throttle the stream.\n         */\n        change(throttleTime = DEFAULT_RESIZE_TIME) {\n            return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n        }\n        /** Access injected document if available or fallback to global document reference */\n        _getDocument() {\n            return this._document || document;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            const doc = this._getDocument();\n            return doc.defaultView || window;\n        }\n        /** Updates the cached viewport size. */\n        _updateViewportSize() {\n            const window = this._getWindow();\n            this._viewportSize = this._platform.isBrowser ?\n                { width: window.innerWidth, height: window.innerHeight } :\n                { width: 0, height: 0 };\n        }\n    }\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) { return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8)); };\n    ViewportRuler.ɵprov = ɵɵdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\n    ViewportRuler.ctorParameters = () => [\n        { type: Platform },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return ViewportRuler;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\nlet CdkVirtualScrollViewport = /** @class */ (() => {\n    class CdkVirtualScrollViewport extends CdkScrollable {\n        constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, \n        /**\n         * @deprecated `viewportRuler` parameter to become required.\n         * @breaking-change 11.0.0\n         */\n        viewportRuler) {\n            super(elementRef, scrollDispatcher, ngZone, dir);\n            this.elementRef = elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._scrollStrategy = _scrollStrategy;\n            /** Emits when the viewport is detached from a CdkVirtualForOf. */\n            this._detachedSubject = new Subject();\n            /** Emits when the rendered range changes. */\n            this._renderedRangeSubject = new Subject();\n            this._orientation = 'vertical';\n            // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n            // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n            // depending on how the strategy calculates the scrolled index, it may come at a cost to\n            // performance.\n            /** Emits when the index of the first element visible in the viewport changes. */\n            this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe(index => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n            /** A stream that emits whenever the rendered range changes. */\n            this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n            /**\n             * The total size of all content (in pixels), including content that is not currently rendered.\n             */\n            this._totalContentSize = 0;\n            /** A string representing the `style.width` property value to be used for the spacer element. */\n            this._totalContentWidth = '';\n            /** A string representing the `style.height` property value to be used for the spacer element. */\n            this._totalContentHeight = '';\n            /** The currently rendered range of indices. */\n            this._renderedRange = { start: 0, end: 0 };\n            /** The length of the data bound to this viewport (in number of items). */\n            this._dataLength = 0;\n            /** The size of the viewport (in pixels). */\n            this._viewportSize = 0;\n            /** The last rendered content offset that was set. */\n            this._renderedContentOffset = 0;\n            /**\n             * Whether the last rendered content offset was to the end of the content (and therefore needs to\n             * be rewritten as an offset to the start of the content).\n             */\n            this._renderedContentOffsetNeedsRewrite = false;\n            /** Whether there is a pending change detection cycle. */\n            this._isChangeDetectionPending = false;\n            /** A list of functions to run after the next change detection cycle. */\n            this._runAfterChangeDetection = [];\n            /** Subscription to changes in the viewport size. */\n            this._viewportChanges = Subscription.EMPTY;\n            if (!_scrollStrategy) {\n                throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n            }\n            // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n            if (viewportRuler) {\n                this._viewportChanges = viewportRuler.change().subscribe(() => {\n                    this.checkViewportSize();\n                });\n            }\n        }\n        /** The direction the viewport scrolls. */\n        get orientation() {\n            return this._orientation;\n        }\n        set orientation(orientation) {\n            if (this._orientation !== orientation) {\n                this._orientation = orientation;\n                this._calculateSpacerSize();\n            }\n        }\n        ngOnInit() {\n            super.ngOnInit();\n            // It's still too early to measure the viewport at this point. Deferring with a promise allows\n            // the Viewport to be rendered with the correct size before we measure. We run this outside the\n            // zone to avoid causing more change detection cycles. We handle the change detection loop\n            // ourselves instead.\n            this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                this._measureViewportSize();\n                this._scrollStrategy.attach(this);\n                this.elementScrolled()\n                    .pipe(\n                // Start off with a fake scroll event so we properly detect our initial position.\n                startWith(null), \n                // Collect multiple events into one until the next animation frame. This way if\n                // there are multiple scroll events in the same frame we only need to recheck\n                // our layout once.\n                auditTime(0, SCROLL_SCHEDULER))\n                    .subscribe(() => this._scrollStrategy.onContentScrolled());\n                this._markChangeDetectionNeeded();\n            }));\n        }\n        ngOnDestroy() {\n            this.detach();\n            this._scrollStrategy.detach();\n            // Complete all subjects\n            this._renderedRangeSubject.complete();\n            this._detachedSubject.complete();\n            this._viewportChanges.unsubscribe();\n            super.ngOnDestroy();\n        }\n        /** Attaches a `CdkVirtualForOf` to this viewport. */\n        attach(forOf) {\n            if (this._forOf) {\n                throw Error('CdkVirtualScrollViewport is already attached.');\n            }\n            // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n            // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n            // change detection loop ourselves.\n            this.ngZone.runOutsideAngular(() => {\n                this._forOf = forOf;\n                this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n                    const newLength = data.length;\n                    if (newLength !== this._dataLength) {\n                        this._dataLength = newLength;\n                        this._scrollStrategy.onDataLengthChanged();\n                    }\n                    this._doChangeDetection();\n                });\n            });\n        }\n        /** Detaches the current `CdkVirtualForOf`. */\n        detach() {\n            this._forOf = null;\n            this._detachedSubject.next();\n        }\n        /** Gets the length of the data bound to this viewport (in number of items). */\n        getDataLength() {\n            return this._dataLength;\n        }\n        /** Gets the size of the viewport (in pixels). */\n        getViewportSize() {\n            return this._viewportSize;\n        }\n        // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n        // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n        // setting it to something else, but its error prone and should probably be split into\n        // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n        /** Get the current rendered range of items. */\n        getRenderedRange() {\n            return this._renderedRange;\n        }\n        /**\n         * Sets the total size of all content (in pixels), including content that is not currently\n         * rendered.\n         */\n        setTotalContentSize(size) {\n            if (this._totalContentSize !== size) {\n                this._totalContentSize = size;\n                this._calculateSpacerSize();\n                this._markChangeDetectionNeeded();\n            }\n        }\n        /** Sets the currently rendered range of indices. */\n        setRenderedRange(range) {\n            if (!rangesEqual(this._renderedRange, range)) {\n                this._renderedRangeSubject.next(this._renderedRange = range);\n                this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n            }\n        }\n        /**\n         * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n         */\n        getOffsetToRenderedContentStart() {\n            return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n        }\n        /**\n         * Sets the offset from the start of the viewport to either the start or end of the rendered data\n         * (in pixels).\n         */\n        setRenderedContentOffset(offset, to = 'to-start') {\n            // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n            // in the negative direction.\n            const isRtl = this.dir && this.dir.value == 'rtl';\n            const isHorizontal = this.orientation == 'horizontal';\n            const axis = isHorizontal ? 'X' : 'Y';\n            const axisDirection = isHorizontal && isRtl ? -1 : 1;\n            let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n            this._renderedContentOffset = offset;\n            if (to === 'to-end') {\n                transform += ` translate${axis}(-100%)`;\n                // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n                // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n                // expand upward).\n                this._renderedContentOffsetNeedsRewrite = true;\n            }\n            if (this._renderedContentTransform != transform) {\n                // We know this value is safe because we parse `offset` with `Number()` before passing it\n                // into the string.\n                this._renderedContentTransform = transform;\n                this._markChangeDetectionNeeded(() => {\n                    if (this._renderedContentOffsetNeedsRewrite) {\n                        this._renderedContentOffset -= this.measureRenderedContentSize();\n                        this._renderedContentOffsetNeedsRewrite = false;\n                        this.setRenderedContentOffset(this._renderedContentOffset);\n                    }\n                    else {\n                        this._scrollStrategy.onRenderedOffsetChanged();\n                    }\n                });\n            }\n        }\n        /**\n         * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n         * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n         * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n         * @param offset The offset to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        scrollToOffset(offset, behavior = 'auto') {\n            const options = { behavior };\n            if (this.orientation === 'horizontal') {\n                options.start = offset;\n            }\n            else {\n                options.top = offset;\n            }\n            this.scrollTo(options);\n        }\n        /**\n         * Scrolls to the offset for the given index.\n         * @param index The index of the element to scroll to.\n         * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n         */\n        scrollToIndex(index, behavior = 'auto') {\n            this._scrollStrategy.scrollToIndex(index, behavior);\n        }\n        /**\n         * Gets the current scroll offset from the start of the viewport (in pixels).\n         * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n         *     in horizontal mode.\n         */\n        measureScrollOffset(from) {\n            return from ?\n                super.measureScrollOffset(from) :\n                super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n        }\n        /** Measure the combined size of all of the rendered items. */\n        measureRenderedContentSize() {\n            const contentEl = this._contentWrapper.nativeElement;\n            return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n        }\n        /**\n         * Measure the total combined size of the given range. Throws if the range includes items that are\n         * not rendered.\n         */\n        measureRangeSize(range) {\n            if (!this._forOf) {\n                return 0;\n            }\n            return this._forOf.measureRangeSize(range, this.orientation);\n        }\n        /** Update the viewport dimensions and re-render. */\n        checkViewportSize() {\n            // TODO: Cleanup later when add logic for handling content resize\n            this._measureViewportSize();\n            this._scrollStrategy.onDataLengthChanged();\n        }\n        /** Measure the viewport size. */\n        _measureViewportSize() {\n            const viewportEl = this.elementRef.nativeElement;\n            this._viewportSize = this.orientation === 'horizontal' ?\n                viewportEl.clientWidth : viewportEl.clientHeight;\n        }\n        /** Queue up change detection to run. */\n        _markChangeDetectionNeeded(runAfter) {\n            if (runAfter) {\n                this._runAfterChangeDetection.push(runAfter);\n            }\n            // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n            // properties sequentially we only have to run `_doChangeDetection` once at the end.\n            if (!this._isChangeDetectionPending) {\n                this._isChangeDetectionPending = true;\n                this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n                    this._doChangeDetection();\n                }));\n            }\n        }\n        /** Run change detection. */\n        _doChangeDetection() {\n            this._isChangeDetectionPending = false;\n            // Apply the content transform. The transform can't be set via an Angular binding because\n            // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n            // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n            // the `Number` function first to coerce it to a numeric value.\n            this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n            // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n            // from the root, since the repeated items are content projected in. Calling `detectChanges`\n            // instead does not properly check the projected content.\n            this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n            const runAfterChangeDetection = this._runAfterChangeDetection;\n            this._runAfterChangeDetection = [];\n            for (const fn of runAfterChangeDetection) {\n                fn();\n            }\n        }\n        /** Calculates the `style.width` and `style.height` for the spacer element. */\n        _calculateSpacerSize() {\n            this._totalContentHeight =\n                this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n            this._totalContentWidth =\n                this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n        }\n    }\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) { return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler, 8)); };\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkVirtualScrollViewport, selectors: [[\"cdk-virtual-scroll-viewport\"]], viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    } }, hostAttrs: [1, \"cdk-virtual-scroll-viewport\"], hostVars: 4, hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    } }, inputs: { orientation: \"orientation\" }, outputs: { scrolledIndexChange: \"scrolledIndexChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkScrollable,\n                useExisting: CdkVirtualScrollViewport\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 4, consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]], template: function CdkVirtualScrollViewport_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    } }, styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"], encapsulation: 2, changeDetection: 0 });\n    CdkVirtualScrollViewport.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: ScrollDispatcher },\n        { type: ViewportRuler, decorators: [{ type: Optional }] }\n    ];\n    CdkVirtualScrollViewport.propDecorators = {\n        orientation: [{ type: Input }],\n        scrolledIndexChange: [{ type: Output }],\n        _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [VIRTUAL_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ScrollDispatcher }, { type: ViewportRuler, decorators: [{\n                type: Optional\n            }] }]; }, { scrolledIndexChange: [{\n            type: Output\n        }], orientation: [{\n            type: Input\n        }], _contentWrapper: [{\n            type: ViewChild,\n            args: ['contentWrapper', { static: true }]\n        }] }); })();\n    return CdkVirtualScrollViewport;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation, node) {\n    const el = node;\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nlet CdkVirtualForOf = /** @class */ (() => {\n    class CdkVirtualForOf {\n        constructor(\n        /** The view container to add items to. */\n        _viewContainerRef, \n        /** The template to use when stamping out new items. */\n        _template, \n        /** The set of available differs. */\n        _differs, \n        /** The virtual scrolling viewport that these items are being rendered in. */\n        _viewport, ngZone) {\n            this._viewContainerRef = _viewContainerRef;\n            this._template = _template;\n            this._differs = _differs;\n            this._viewport = _viewport;\n            /** Emits when the rendered view of the data changes. */\n            this.viewChange = new Subject();\n            /** Subject that emits when a new DataSource instance is given. */\n            this._dataSourceChanges = new Subject();\n            /**\n             * The size of the cache used to store templates that are not being used for re-use later.\n             * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n             */\n            this.cdkVirtualForTemplateCacheSize = 20;\n            /** Emits whenever the data in the current DataSource changes. */\n            this.dataStream = this._dataSourceChanges\n                .pipe(\n            // Start off with null `DataSource`.\n            startWith(null), \n            // Bundle up the previous and current data sources so we can work with both.\n            pairwise(), \n            // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n            // new one, passing back a stream of data changes which we run through `switchMap` to give\n            // us a data stream that emits the latest data from whatever the current `DataSource` is.\n            switchMap(([prev, cur]) => this._changeDataSource(prev, cur)), \n            // Replay the last emitted data when someone subscribes.\n            shareReplay(1));\n            /** The differ used to calculate changes to the data. */\n            this._differ = null;\n            /**\n             * The template cache used to hold on ot template instancess that have been stamped out, but don't\n             * currently need to be rendered. These instances will be reused in the future rather than\n             * stamping out brand new ones.\n             */\n            this._templateCache = [];\n            /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n            this._needsUpdate = false;\n            this._destroyed = new Subject();\n            this.dataStream.subscribe(data => {\n                this._data = data;\n                this._onRenderedDataChange();\n            });\n            this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n                this._renderedRange = range;\n                ngZone.run(() => this.viewChange.next(this._renderedRange));\n                this._onRenderedDataChange();\n            });\n            this._viewport.attach(this);\n        }\n        /** The DataSource to display. */\n        get cdkVirtualForOf() {\n            return this._cdkVirtualForOf;\n        }\n        set cdkVirtualForOf(value) {\n            this._cdkVirtualForOf = value;\n            if (isDataSource(value)) {\n                this._dataSourceChanges.next(value);\n            }\n            else {\n                // Slice the value if its an NgIterable to ensure we're working with an array.\n                this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n            }\n        }\n        /**\n         * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n         * the item and produces a value to be used as the item's identity when tracking changes.\n         */\n        get cdkVirtualForTrackBy() {\n            return this._cdkVirtualForTrackBy;\n        }\n        set cdkVirtualForTrackBy(fn) {\n            this._needsUpdate = true;\n            this._cdkVirtualForTrackBy = fn ?\n                (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n                undefined;\n        }\n        /** The template used to stamp out new elements. */\n        set cdkVirtualForTemplate(value) {\n            if (value) {\n                this._needsUpdate = true;\n                this._template = value;\n            }\n        }\n        /**\n         * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n         * in the specified range. Throws an error if the range includes items that are not currently\n         * rendered.\n         */\n        measureRangeSize(range, orientation) {\n            if (range.start >= range.end) {\n                return 0;\n            }\n            if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n                throw Error(`Error: attempted to measure an item that isn't rendered.`);\n            }\n            // The index into the list of rendered views for the first item in the range.\n            const renderedStartIndex = range.start - this._renderedRange.start;\n            // The length of the range we're measuring.\n            const rangeLen = range.end - range.start;\n            // Loop over all root nodes for all items in the range and sum up their size.\n            let totalSize = 0;\n            let i = rangeLen;\n            while (i--) {\n                const view = this._viewContainerRef.get(i + renderedStartIndex);\n                let j = view ? view.rootNodes.length : 0;\n                while (j--) {\n                    totalSize += getSize(orientation, view.rootNodes[j]);\n                }\n            }\n            return totalSize;\n        }\n        ngDoCheck() {\n            if (this._differ && this._needsUpdate) {\n                // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n                // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n                // changing (need to do this diff).\n                const changes = this._differ.diff(this._renderedItems);\n                if (!changes) {\n                    this._updateContext();\n                }\n                else {\n                    this._applyChanges(changes);\n                }\n                this._needsUpdate = false;\n            }\n        }\n        ngOnDestroy() {\n            this._viewport.detach();\n            this._dataSourceChanges.next();\n            this._dataSourceChanges.complete();\n            this.viewChange.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            for (let view of this._templateCache) {\n                view.destroy();\n            }\n        }\n        /** React to scroll state changes in the viewport. */\n        _onRenderedDataChange() {\n            if (!this._renderedRange) {\n                return;\n            }\n            this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n            if (!this._differ) {\n                this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n            }\n            this._needsUpdate = true;\n        }\n        /** Swap out one `DataSource` for another. */\n        _changeDataSource(oldDs, newDs) {\n            if (oldDs) {\n                oldDs.disconnect(this);\n            }\n            this._needsUpdate = true;\n            return newDs ? newDs.connect(this) : of();\n        }\n        /** Update the `CdkVirtualForOfContext` for all views. */\n        _updateContext() {\n            const count = this._data.length;\n            let i = this._viewContainerRef.length;\n            while (i--) {\n                let view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n                view.detectChanges();\n            }\n        }\n        /** Apply changes to the DOM. */\n        _applyChanges(changes) {\n            // Rearrange the views to put them in the right location.\n            changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {\n                if (record.previousIndex == null) { // Item added.\n                    const view = this._insertViewForNewItem(currentIndex);\n                    view.context.$implicit = record.item;\n                }\n                else if (currentIndex == null) { // Item removed.\n                    this._cacheView(this._detachView(adjustedPreviousIndex));\n                }\n                else { // Item moved.\n                    const view = this._viewContainerRef.get(adjustedPreviousIndex);\n                    this._viewContainerRef.move(view, currentIndex);\n                    view.context.$implicit = record.item;\n                }\n            });\n            // Update $implicit for any items that had an identity change.\n            changes.forEachIdentityChange((record) => {\n                const view = this._viewContainerRef.get(record.currentIndex);\n                view.context.$implicit = record.item;\n            });\n            // Update the context variables on all items.\n            const count = this._data.length;\n            let i = this._viewContainerRef.length;\n            while (i--) {\n                const view = this._viewContainerRef.get(i);\n                view.context.index = this._renderedRange.start + i;\n                view.context.count = count;\n                this._updateComputedContextProperties(view.context);\n            }\n        }\n        /** Cache the given detached view. */\n        _cacheView(view) {\n            if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n                this._templateCache.push(view);\n            }\n            else {\n                const index = this._viewContainerRef.indexOf(view);\n                // It's very unlikely that the index will ever be -1, but just in case,\n                // destroy the view on its own, otherwise destroy it through the\n                // container to ensure that all the references are removed.\n                if (index === -1) {\n                    view.destroy();\n                }\n                else {\n                    this._viewContainerRef.remove(index);\n                }\n            }\n        }\n        /** Inserts a view for a new item, either from the cache or by creating a new one. */\n        _insertViewForNewItem(index) {\n            return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n        }\n        /** Update the computed properties on the `CdkVirtualForOfContext`. */\n        _updateComputedContextProperties(context) {\n            context.first = context.index === 0;\n            context.last = context.index === context.count - 1;\n            context.even = context.index % 2 === 0;\n            context.odd = !context.even;\n        }\n        /** Creates a new embedded view and moves it to the given index */\n        _createEmbeddedViewAt(index) {\n            // Note that it's important that we insert the item directly at the proper index,\n            // rather than inserting it and the moving it in place, because if there's a directive\n            // on the same node that injects the `ViewContainerRef`, Angular will insert another\n            // comment node which can throw off the move when it's being repeated for all items.\n            return this._viewContainerRef.createEmbeddedView(this._template, {\n                $implicit: null,\n                // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n                // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n                cdkVirtualForOf: this._cdkVirtualForOf,\n                index: -1,\n                count: -1,\n                first: false,\n                last: false,\n                odd: false,\n                even: false\n            }, index);\n        }\n        /** Inserts a recycled view from the cache at the given index. */\n        _insertViewFromCache(index) {\n            const cachedView = this._templateCache.pop();\n            if (cachedView) {\n                this._viewContainerRef.insert(cachedView, index);\n            }\n            return cachedView || null;\n        }\n        /** Detaches the embedded view at the given index. */\n        _detachView(index) {\n            return this._viewContainerRef.detach(index);\n        }\n    }\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) { return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkVirtualForOf, selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]], inputs: { cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\", cdkVirtualForOf: \"cdkVirtualForOf\", cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\", cdkVirtualForTemplate: \"cdkVirtualForTemplate\" } });\n    CdkVirtualForOf.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: TemplateRef },\n        { type: IterableDiffers },\n        { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n        { type: NgZone }\n    ];\n    CdkVirtualForOf.propDecorators = {\n        cdkVirtualForOf: [{ type: Input }],\n        cdkVirtualForTrackBy: [{ type: Input }],\n        cdkVirtualForTemplate: [{ type: Input }],\n        cdkVirtualForTemplateCacheSize: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: CdkVirtualScrollViewport, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.NgZone }]; }, { cdkVirtualForTemplateCacheSize: [{\n            type: Input\n        }], cdkVirtualForOf: [{\n            type: Input\n        }], cdkVirtualForTrackBy: [{\n            type: Input\n        }], cdkVirtualForTemplate: [{\n            type: Input\n        }] }); })();\n    return CdkVirtualForOf;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet CdkScrollableModule = /** @class */ (() => {\n    class CdkScrollableModule {\n    }\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkScrollableModule });\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkScrollableModule_Factory(t) { return new (t || CdkScrollableModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, { declarations: [CdkScrollable], exports: [CdkScrollable] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            }]\n    }], null, null); })();\n    return CdkScrollableModule;\n})();\nlet ScrollingModule = /** @class */ (() => {\n    class ScrollingModule {\n    }\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ScrollingModule });\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ScrollingModule_Factory(t) { return new (t || ScrollingModule)(); }, imports: [[\n            BidiModule,\n            PlatformModule,\n            CdkScrollableModule\n        ], BidiModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, { declarations: function () { return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; }, imports: function () { return [BidiModule,\n        PlatformModule, CdkScrollableModule]; }, exports: function () { return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ]\n            }]\n    }], null, null); })();\n    return ScrollingModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n\n//# sourceMappingURL=scrolling.js.map","import { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalHostDirective, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, NgZone, Inject, Optional, TemplateRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewContainerRef, ContentChild, ViewChild, Input, ComponentFactoryResolver, forwardRef, EventEmitter, ChangeDetectorRef, Output, QueryList, ContentChildren, Attribute, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, MAT_RIPPLE_GLOBAL_OPTIONS, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, merge, fromEvent, of, timer } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { hasModifierKey, SPACE, ENTER, END, HOME } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token for the MatInkBar's Positioner. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/portal';\nimport * as ɵngcc6 from '@angular/cdk/scrolling';\nimport * as ɵngcc7 from '@angular/cdk/platform';\nimport * as ɵngcc8 from '@angular/cdk/observers';\n\nfunction MatTab_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nconst _c0 = [\"*\"];\nfunction MatTabBody_ng_template_2_Template(rf, ctx) { }\nconst _c1 = function (a0) { return { animationDuration: a0 }; };\nconst _c2 = function (a0, a1) { return { value: a0, params: a1 }; };\nconst _c3 = [\"tabBodyWrapper\"];\nconst _c4 = [\"tabHeader\"];\nfunction MatTabGroup_div_2_ng_template_2_ng_template_0_Template(rf, ctx) { }\nfunction MatTabGroup_div_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, MatTabGroup_div_2_ng_template_2_ng_template_0_Template, 0, 0, \"ng-template\", 9);\n} if (rf & 2) {\n    const tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", tab_r4.templateLabel);\n} }\nfunction MatTabGroup_div_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n} if (rf & 2) {\n    const tab_r4 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵtextInterpolate(tab_r4.textLabel);\n} }\nfunction MatTabGroup_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function MatTabGroup_div_2_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const tab_r4 = ctx.$implicit; const i_r5 = ctx.index; const ctx_r11 = ɵngcc0.ɵɵnextContext(); const _r0 = ɵngcc0.ɵɵreference(1); return ctx_r11._handleClick(tab_r4, _r0, i_r5); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_ng_template_2_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵtemplate(3, MatTabGroup_div_2_ng_template_3_Template, 1, 1, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const tab_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-label-active\", ctx_r1.selectedIndex == i_r5);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1._getTabLabelId(i_r5))(\"disabled\", tab_r4.disabled)(\"matRippleDisabled\", tab_r4.disabled || ctx_r1.disableRipple);\n    ɵngcc0.ɵɵattribute(\"tabIndex\", ctx_r1._getTabIndex(tab_r4, i_r5))(\"aria-posinset\", i_r5 + 1)(\"aria-setsize\", ctx_r1._tabs.length)(\"aria-controls\", ctx_r1._getTabContentId(i_r5))(\"aria-selected\", ctx_r1.selectedIndex == i_r5)(\"aria-label\", tab_r4.ariaLabel || null)(\"aria-labelledby\", !tab_r4.ariaLabel && tab_r4.ariaLabelledby ? tab_r4.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", tab_r4.templateLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !tab_r4.templateLabel);\n} }\nfunction MatTabGroup_mat_tab_body_5_Template(rf, ctx) { if (rf & 1) {\n    const _r16 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-tab-body\", 10);\n    ɵngcc0.ɵɵlistener(\"_onCentered\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentered_0_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15._removeTabBodyWrapperHeight(); })(\"_onCentering\", function MatTabGroup_mat_tab_body_5_Template_mat_tab_body__onCentering_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17._setTabBodyWrapperHeight($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const tab_r13 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-tab-body-active\", ctx_r3.selectedIndex == i_r14);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r3._getTabContentId(i_r14))(\"content\", tab_r13.content)(\"position\", tab_r13.position)(\"origin\", tab_r13.origin)(\"animationDuration\", ctx_r3.animationDuration);\n    ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx_r3._getTabLabelId(i_r14));\n} }\nconst _c5 = [\"tabListContainer\"];\nconst _c6 = [\"tabList\"];\nconst _c7 = [\"nextPaginator\"];\nconst _c8 = [\"previousPaginator\"];\nconst _c9 = [\"mat-tab-nav-bar\", \"\"];\nconst _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n    const method = (element) => ({\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\n    });\n    return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\nlet MatInkBar = /** @class */ (() => {\n    class MatInkBar {\n        constructor(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._inkBarPositioner = _inkBarPositioner;\n            this._animationMode = _animationMode;\n        }\n        /**\n         * Calculates the styles from the provided element in order to align the ink-bar to that element.\n         * Shows the ink bar if previously set as hidden.\n         * @param element\n         */\n        alignToElement(element) {\n            this.show();\n            if (typeof requestAnimationFrame !== 'undefined') {\n                this._ngZone.runOutsideAngular(() => {\n                    requestAnimationFrame(() => this._setStyles(element));\n                });\n            }\n            else {\n                this._setStyles(element);\n            }\n        }\n        /** Shows the ink bar. */\n        show() {\n            this._elementRef.nativeElement.style.visibility = 'visible';\n        }\n        /** Hides the ink bar. */\n        hide() {\n            this._elementRef.nativeElement.style.visibility = 'hidden';\n        }\n        /**\n         * Sets the proper styles to the ink bar element.\n         * @param element\n         */\n        _setStyles(element) {\n            const positions = this._inkBarPositioner(element);\n            const inkBar = this._elementRef.nativeElement;\n            inkBar.style.left = positions.left;\n            inkBar.style.width = positions.width;\n        }\n    }\nMatInkBar.ɵfac = function MatInkBar_Factory(t) { return new (t || MatInkBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(_MAT_INK_BAR_POSITIONER), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatInkBar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInkBar, selectors: [[\"mat-ink-bar\"]], hostAttrs: [1, \"mat-ink-bar\"], hostVars: 2, hostBindings: function MatInkBar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } } });\n    MatInkBar.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [_MAT_INK_BAR_POSITIONER,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInkBar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-ink-bar',\n                host: {\n                    'class': 'mat-ink-bar',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [_MAT_INK_BAR_POSITIONER]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, null); })();\n    return MatInkBar;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Decorates the `ng-template` tags and reads out the template from it. */\nlet MatTabContent = /** @class */ (() => {\n    class MatTabContent {\n        constructor(template) {\n            this.template = template;\n        }\n    }\nMatTabContent.ɵfac = function MatTabContent_Factory(t) { return new (t || MatTabContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatTabContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTabContent, selectors: [[\"\", \"matTabContent\", \"\"]] });\n    MatTabContent.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabContent, [{\n        type: Directive,\n        args: [{ selector: '[matTabContent]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return MatTabContent;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to flag tab labels for use with the portal directive */\nlet MatTabLabel = /** @class */ (() => {\n    class MatTabLabel extends CdkPortal {\n    }\nMatTabLabel.ɵfac = function MatTabLabel_Factory(t) { return ɵMatTabLabel_BaseFactory(t || MatTabLabel); };\nMatTabLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTabLabel, selectors: [[\"\", \"mat-tab-label\", \"\"], [\"\", \"matTabLabel\", \"\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatTabLabel_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTabLabel);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabLabel, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-tab-label], [matTabLabel]'\n            }]\n    }], null, null); })();\n    return MatTabLabel;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nclass MatTabBase {\n}\nconst _MatTabMixinBase = mixinDisabled(MatTabBase);\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nconst MAT_TAB_GROUP = new InjectionToken('MAT_TAB_GROUP');\nlet MatTab = /** @class */ (() => {\n    class MatTab extends _MatTabMixinBase {\n        constructor(_viewContainerRef, \n        /**\n         * @deprecated `_closestTabGroup` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        _closestTabGroup) {\n            super();\n            this._viewContainerRef = _viewContainerRef;\n            this._closestTabGroup = _closestTabGroup;\n            /** Plain text label for the tab, used when there is no template label. */\n            this.textLabel = '';\n            /** Portal that will be the hosted content of the tab */\n            this._contentPortal = null;\n            /** Emits whenever the internal state of the tab changes. */\n            this._stateChanges = new Subject();\n            /**\n             * The relatively indexed position where 0 represents the center, negative is left, and positive\n             * represents the right.\n             */\n            this.position = null;\n            /**\n             * The initial relatively index origin of the tab if it was created and selected after there\n             * was already a selected tab. Provides context of what position the tab should originate from.\n             */\n            this.origin = null;\n            /**\n             * Whether the tab is currently active.\n             */\n            this.isActive = false;\n        }\n        /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n        get templateLabel() { return this._templateLabel; }\n        set templateLabel(value) {\n            // Only update the templateLabel via query if there is actually\n            // a MatTabLabel found. This works around an issue where a user may have\n            // manually set `templateLabel` during creation mode, which would then get clobbered\n            // by `undefined` when this query resolves.\n            if (value) {\n                this._templateLabel = value;\n            }\n        }\n        /** @docs-private */\n        get content() {\n            return this._contentPortal;\n        }\n        ngOnChanges(changes) {\n            if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n                this._stateChanges.next();\n            }\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n        ngOnInit() {\n            this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n        }\n    }\nMatTab.ɵfac = function MatTab_Factory(t) { return new (t || MatTab)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_TAB_GROUP, 8)); };\nMatTab.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTab, selectors: [[\"mat-tab\"]], contentQueries: function MatTab_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLabel, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, MatTabContent, true, TemplateRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateLabel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._explicitContent = _t.first);\n    } }, viewQuery: function MatTab_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._implicitContent = _t.first);\n    } }, inputs: { disabled: \"disabled\", textLabel: [\"label\", \"textLabel\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"] }, exportAs: [\"matTab\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatTab_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatTab_ng_template_0_Template, 1, 0, \"ng-template\");\n    } }, encapsulation: 2 });\n    MatTab.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TAB_GROUP,] }] }\n    ];\n    MatTab.propDecorators = {\n        templateLabel: [{ type: ContentChild, args: [MatTabLabel,] }],\n        _explicitContent: [{ type: ContentChild, args: [MatTabContent, { read: TemplateRef, static: true },] }],\n        _implicitContent: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n        textLabel: [{ type: Input, args: ['label',] }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTab, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab',\n                template: \"<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\\n    tab-group. -->\\n<ng-template><ng-content></ng-content></ng-template>\\n\",\n                inputs: ['disabled'],\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matTab'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TAB_GROUP]\n            }] }]; }, { textLabel: [{\n            type: Input,\n            args: ['label']\n        }], templateLabel: [{\n            type: ContentChild,\n            args: [MatTabLabel]\n        }], _explicitContent: [{\n            type: ContentChild,\n            args: [MatTabContent, { read: TemplateRef, static: true }]\n        }], _implicitContent: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }] }); })();\n    return MatTab;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nconst matTabsAnimations = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\n        transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\nlet MatTabBodyPortal = /** @class */ (() => {\n    class MatTabBodyPortal extends CdkPortalOutlet {\n        constructor(componentFactoryResolver, viewContainerRef, _host, \n        /**\n         * @deprecated `_document` parameter to be made required.\n         * @breaking-change 9.0.0\n         */\n        _document) {\n            super(componentFactoryResolver, viewContainerRef, _document);\n            this._host = _host;\n            /** Subscription to events for when the tab body begins centering. */\n            this._centeringSub = Subscription.EMPTY;\n            /** Subscription to events for when the tab body finishes leaving from center position. */\n            this._leavingSub = Subscription.EMPTY;\n        }\n        /** Set initial visibility or set up subscription for changing visibility. */\n        ngOnInit() {\n            super.ngOnInit();\n            this._centeringSub = this._host._beforeCentering\n                .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n                .subscribe((isCentering) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this._host._content);\n                }\n            });\n            this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n                this.detach();\n            });\n        }\n        /** Clean up centering subscription. */\n        ngOnDestroy() {\n            super.ngOnDestroy();\n            this._centeringSub.unsubscribe();\n            this._leavingSub.unsubscribe();\n        }\n    }\nMatTabBodyPortal.ɵfac = function MatTabBodyPortal_Factory(t) { return new (t || MatTabBodyPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatTabBody)), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTabBodyPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTabBodyPortal, selectors: [[\"\", \"matTabBodyHost\", \"\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTabBodyPortal.ctorParameters = () => [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: MatTabBody, decorators: [{ type: Inject, args: [forwardRef(() => MatTabBody),] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabBodyPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[matTabBodyHost]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: MatTabBody, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatTabBody)]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return MatTabBodyPortal;\n})();\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\nlet _MatTabBodyBase = /** @class */ (() => {\n    class _MatTabBodyBase {\n        constructor(_elementRef, _dir, changeDetectorRef) {\n            this._elementRef = _elementRef;\n            this._dir = _dir;\n            /** Subscription to the directionality change observable. */\n            this._dirChangeSubscription = Subscription.EMPTY;\n            /** Emits when an animation on the tab is complete. */\n            this._translateTabComplete = new Subject();\n            /** Event emitted when the tab begins to animate towards the center as the active tab. */\n            this._onCentering = new EventEmitter();\n            /** Event emitted before the centering of the tab begins. */\n            this._beforeCentering = new EventEmitter();\n            /** Event emitted before the centering of the tab begins. */\n            this._afterLeavingCenter = new EventEmitter();\n            /** Event emitted when the tab completes its animation towards the center. */\n            this._onCentered = new EventEmitter(true);\n            // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n            // anyway to prevent the animations module from throwing an error if the body is used on its own.\n            /** Duration for the tab's animation. */\n            this.animationDuration = '500ms';\n            if (_dir) {\n                this._dirChangeSubscription = _dir.change.subscribe((dir) => {\n                    this._computePositionAnimationState(dir);\n                    changeDetectorRef.markForCheck();\n                });\n            }\n            // Ensure that we get unique animation events, because the `.done` callback can get\n            // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n            this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(event => {\n                // If the transition to the center is complete, emit an event.\n                if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n                    this._onCentered.emit();\n                }\n                if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n                    this._afterLeavingCenter.emit();\n                }\n            });\n        }\n        /** The shifted index position of the tab body, where zero represents the active center tab. */\n        set position(position) {\n            this._positionIndex = position;\n            this._computePositionAnimationState();\n        }\n        /**\n         * After initialized, check if the content is centered and has an origin. If so, set the\n         * special position states that transition the tab from the left or right before centering.\n         */\n        ngOnInit() {\n            if (this._position == 'center' && this.origin != null) {\n                this._position = this._computePositionFromOrigin(this.origin);\n            }\n        }\n        ngOnDestroy() {\n            this._dirChangeSubscription.unsubscribe();\n            this._translateTabComplete.complete();\n        }\n        _onTranslateTabStarted(event) {\n            const isCentering = this._isCenterPosition(event.toState);\n            this._beforeCentering.emit(isCentering);\n            if (isCentering) {\n                this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n            }\n        }\n        /** The text direction of the containing app. */\n        _getLayoutDirection() {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        }\n        /** Whether the provided position state is considered center, regardless of origin. */\n        _isCenterPosition(position) {\n            return position == 'center' ||\n                position == 'left-origin-center' ||\n                position == 'right-origin-center';\n        }\n        /** Computes the position state that will be used for the tab-body animation trigger. */\n        _computePositionAnimationState(dir = this._getLayoutDirection()) {\n            if (this._positionIndex < 0) {\n                this._position = dir == 'ltr' ? 'left' : 'right';\n            }\n            else if (this._positionIndex > 0) {\n                this._position = dir == 'ltr' ? 'right' : 'left';\n            }\n            else {\n                this._position = 'center';\n            }\n        }\n        /**\n         * Computes the position state based on the specified origin position. This is used if the\n         * tab is becoming visible immediately after creation.\n         */\n        _computePositionFromOrigin(origin) {\n            const dir = this._getLayoutDirection();\n            if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n                return 'left-origin-center';\n            }\n            return 'right-origin-center';\n        }\n    }\n_MatTabBodyBase.ɵfac = function _MatTabBodyBase_Factory(t) { return new (t || _MatTabBodyBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatTabBodyBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatTabBodyBase, inputs: { animationDuration: \"animationDuration\", position: \"position\", _content: [\"content\", \"_content\"], origin: \"origin\" }, outputs: { _onCentering: \"_onCentering\", _beforeCentering: \"_beforeCentering\", _afterLeavingCenter: \"_afterLeavingCenter\", _onCentered: \"_onCentered\" } });\n    _MatTabBodyBase.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: ChangeDetectorRef }\n    ];\n    _MatTabBodyBase.propDecorators = {\n        _onCentering: [{ type: Output }],\n        _beforeCentering: [{ type: Output }],\n        _afterLeavingCenter: [{ type: Output }],\n        _onCentered: [{ type: Output }],\n        _content: [{ type: Input, args: ['content',] }],\n        origin: [{ type: Input }],\n        animationDuration: [{ type: Input }],\n        position: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatTabBodyBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _onCentering: [{\n            type: Output\n        }], _beforeCentering: [{\n            type: Output\n        }], _afterLeavingCenter: [{\n            type: Output\n        }], _onCentered: [{\n            type: Output\n        }], animationDuration: [{\n            type: Input\n        }], position: [{\n            type: Input\n        }], _content: [{\n            type: Input,\n            args: ['content']\n        }], origin: [{\n            type: Input\n        }] }); })();\n    return _MatTabBodyBase;\n})();\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\nlet MatTabBody = /** @class */ (() => {\n    class MatTabBody extends _MatTabBodyBase {\n        constructor(elementRef, dir, changeDetectorRef) {\n            super(elementRef, dir, changeDetectorRef);\n        }\n    }\nMatTabBody.ɵfac = function MatTabBody_Factory(t) { return new (t || MatTabBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatTabBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTabBody, selectors: [[\"mat-tab-body\"]], viewQuery: function MatTabBody_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(PortalHostDirective, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalHost = _t.first);\n    } }, hostAttrs: [1, \"mat-tab-body\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[1, \"mat-tab-body-content\"], [\"content\", \"\"], [\"matTabBodyHost\", \"\"]], template: function MatTabBody_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@translateTab.start\", function MatTabBody_Template_div_animation_translateTab_start_0_listener($event) { return ctx._onTranslateTabStarted($event); })(\"@translateTab.done\", function MatTabBody_Template_div_animation_translateTab_done_0_listener($event) { return ctx._translateTabComplete.next($event); });\n        ɵngcc0.ɵɵtemplate(2, MatTabBody_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"@translateTab\", ɵngcc0.ɵɵpureFunction2(3, _c2, ctx._position, ɵngcc0.ɵɵpureFunction1(1, _c1, ctx.animationDuration)));\n    } }, directives: [MatTabBodyPortal], styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\\n\"], encapsulation: 2, data: { animation: [matTabsAnimations.translateTab] } });\n    MatTabBody.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: ChangeDetectorRef }\n    ];\n    MatTabBody.propDecorators = {\n        _portalHost: [{ type: ViewChild, args: [PortalHostDirective,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabBody, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab-body',\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content\\n     [@translateTab]=\\\"{\\n        value: _position,\\n        params: {animationDuration: animationDuration}\\n     }\\\"\\n     (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\"\\n     (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\">\\n  <ng-template matTabBodyHost></ng-template>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matTabsAnimations.translateTab],\n                host: {\n                    'class': 'mat-tab-body'\n                },\n                styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { _portalHost: [{\n            type: ViewChild,\n            args: [PortalHostDirective]\n        }] }); })();\n    return MatTabBody;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options the tabs module. */\nconst MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n/** A simple change event emitted on focus or selection changes. */\nclass MatTabChangeEvent {\n}\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nclass MatTabGroupMixinBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupMixinBase), 'primary');\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\nlet _MatTabGroupBase = /** @class */ (() => {\n    class _MatTabGroupBase extends _MatTabGroupMixinBase {\n        constructor(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\n            super(elementRef);\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            /** All of the tabs that belong to the group. */\n            this._tabs = new QueryList();\n            /** The tab index that should be selected after the content has been checked. */\n            this._indexToSelect = 0;\n            /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n            this._tabBodyWrapperHeight = 0;\n            /** Subscription to tabs being added/removed. */\n            this._tabsSubscription = Subscription.EMPTY;\n            /** Subscription to changes in the tab labels. */\n            this._tabLabelSubscription = Subscription.EMPTY;\n            this._dynamicHeight = false;\n            this._selectedIndex = null;\n            /** Position of the tab header. */\n            this.headerPosition = 'above';\n            /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n            this.selectedIndexChange = new EventEmitter();\n            /** Event emitted when focus has changed within a tab group. */\n            this.focusChange = new EventEmitter();\n            /** Event emitted when the body animation has completed */\n            this.animationDone = new EventEmitter();\n            /** Event emitted when the tab selection has changed. */\n            this.selectedTabChange = new EventEmitter(true);\n            this._groupId = nextId++;\n            this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n                defaultConfig.animationDuration : '500ms';\n            this.disablePagination = defaultConfig && defaultConfig.disablePagination != null ?\n                defaultConfig.disablePagination : false;\n        }\n        /** Whether the tab group should grow to the size of the active tab. */\n        get dynamicHeight() { return this._dynamicHeight; }\n        set dynamicHeight(value) { this._dynamicHeight = coerceBooleanProperty(value); }\n        /** The index of the active tab. */\n        get selectedIndex() { return this._selectedIndex; }\n        set selectedIndex(value) {\n            this._indexToSelect = coerceNumberProperty(value, null);\n        }\n        /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n        get animationDuration() { return this._animationDuration; }\n        set animationDuration(value) {\n            this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n        }\n        /** Background color of the tab group. */\n        get backgroundColor() { return this._backgroundColor; }\n        set backgroundColor(value) {\n            const nativeElement = this._elementRef.nativeElement;\n            nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n            if (value) {\n                nativeElement.classList.add(`mat-background-${value}`);\n            }\n            this._backgroundColor = value;\n        }\n        /**\n         * After the content is checked, this component knows what tabs have been defined\n         * and what the selected index should be. This is where we can know exactly what position\n         * each tab should be in according to the new selected index, and additionally we know how\n         * a new selected tab should transition in (from the left or right).\n         */\n        ngAfterContentChecked() {\n            // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n            // the amount of tabs changes before the actual change detection runs.\n            const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n            // If there is a change in selected index, emit a change event. Should not trigger if\n            // the selected index has not yet been initialized.\n            if (this._selectedIndex != indexToSelect) {\n                const isFirstRun = this._selectedIndex == null;\n                if (!isFirstRun) {\n                    this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n                }\n                // Changing these values after change detection has run\n                // since the checked content may contain references to them.\n                Promise.resolve().then(() => {\n                    this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n                    if (!isFirstRun) {\n                        this.selectedIndexChange.emit(indexToSelect);\n                    }\n                });\n            }\n            // Setup the position for each tab and optionally setup an origin on the next selected tab.\n            this._tabs.forEach((tab, index) => {\n                tab.position = index - indexToSelect;\n                // If there is already a selected tab, then set up an origin for the next selected tab\n                // if it doesn't have one already.\n                if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                    tab.origin = indexToSelect - this._selectedIndex;\n                }\n            });\n            if (this._selectedIndex !== indexToSelect) {\n                this._selectedIndex = indexToSelect;\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        ngAfterContentInit() {\n            this._subscribeToAllTabChanges();\n            this._subscribeToTabLabels();\n            // Subscribe to changes in the amount of tabs, in order to be\n            // able to re-render the content as new tabs are added or removed.\n            this._tabsSubscription = this._tabs.changes.subscribe(() => {\n                const indexToSelect = this._clampTabIndex(this._indexToSelect);\n                // Maintain the previously-selected tab if a new tab is added or removed and there is no\n                // explicit change that selects a different tab.\n                if (indexToSelect === this._selectedIndex) {\n                    const tabs = this._tabs.toArray();\n                    for (let i = 0; i < tabs.length; i++) {\n                        if (tabs[i].isActive) {\n                            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                            // adding a tab within the `selectedIndexChange` event.\n                            this._indexToSelect = this._selectedIndex = i;\n                            break;\n                        }\n                    }\n                }\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n        /** Listens to changes in all of the tabs. */\n        _subscribeToAllTabChanges() {\n            // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n            // some that are inside of nested tab groups. We filter them out manually by checking that\n            // the closest group to the tab is the current one.\n            this._allTabs.changes\n                .pipe(startWith(this._allTabs))\n                .subscribe((tabs) => {\n                this._tabs.reset(tabs.filter(tab => {\n                    // @breaking-change 10.0.0 Remove null check for `_closestTabGroup`\n                    // once it becomes a required parameter in MatTab.\n                    return !tab._closestTabGroup || tab._closestTabGroup === this;\n                }));\n                this._tabs.notifyOnChanges();\n            });\n        }\n        ngOnDestroy() {\n            this._tabs.destroy();\n            this._tabsSubscription.unsubscribe();\n            this._tabLabelSubscription.unsubscribe();\n        }\n        /** Re-aligns the ink bar to the selected tab element. */\n        realignInkBar() {\n            if (this._tabHeader) {\n                this._tabHeader._alignInkBarToSelectedTab();\n            }\n        }\n        _focusChanged(index) {\n            this.focusChange.emit(this._createChangeEvent(index));\n        }\n        _createChangeEvent(index) {\n            const event = new MatTabChangeEvent;\n            event.index = index;\n            if (this._tabs && this._tabs.length) {\n                event.tab = this._tabs.toArray()[index];\n            }\n            return event;\n        }\n        /**\n         * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n         * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n         * binding to be updated, we need to subscribe to changes in it and trigger change detection\n         * manually.\n         */\n        _subscribeToTabLabels() {\n            if (this._tabLabelSubscription) {\n                this._tabLabelSubscription.unsubscribe();\n            }\n            this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n        /** Clamps the given index to the bounds of 0 and the tabs length. */\n        _clampTabIndex(index) {\n            // Note the `|| 0`, which ensures that values like NaN can't get through\n            // and which would otherwise throw the component into an infinite loop\n            // (since Math.max(NaN, 0) === NaN).\n            return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n        }\n        /** Returns a unique id for each tab label element */\n        _getTabLabelId(i) {\n            return `mat-tab-label-${this._groupId}-${i}`;\n        }\n        /** Returns a unique id for each tab content element */\n        _getTabContentId(i) {\n            return `mat-tab-content-${this._groupId}-${i}`;\n        }\n        /**\n         * Sets the height of the body wrapper to the height of the activating tab if dynamic\n         * height property is true.\n         */\n        _setTabBodyWrapperHeight(tabHeight) {\n            if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n                return;\n            }\n            const wrapper = this._tabBodyWrapper.nativeElement;\n            wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n            // This conditional forces the browser to paint the height so that\n            // the animation to the new height can have an origin.\n            if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n                wrapper.style.height = tabHeight + 'px';\n            }\n        }\n        /** Removes the height of the tab body wrapper. */\n        _removeTabBodyWrapperHeight() {\n            const wrapper = this._tabBodyWrapper.nativeElement;\n            this._tabBodyWrapperHeight = wrapper.clientHeight;\n            wrapper.style.height = '';\n            this.animationDone.emit();\n        }\n        /** Handle click events, setting new selected index if appropriate. */\n        _handleClick(tab, tabHeader, index) {\n            if (!tab.disabled) {\n                this.selectedIndex = tabHeader.focusIndex = index;\n            }\n        }\n        /** Retrieves the tabindex for the tab. */\n        _getTabIndex(tab, idx) {\n            if (tab.disabled) {\n                return null;\n            }\n            return this.selectedIndex === idx ? 0 : -1;\n        }\n    }\n_MatTabGroupBase.ɵfac = function _MatTabGroupBase_Factory(t) { return new (t || _MatTabGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_TABS_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\n_MatTabGroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatTabGroupBase, inputs: { headerPosition: \"headerPosition\", animationDuration: \"animationDuration\", disablePagination: \"disablePagination\", dynamicHeight: \"dynamicHeight\", selectedIndex: \"selectedIndex\", backgroundColor: \"backgroundColor\" }, outputs: { selectedIndexChange: \"selectedIndexChange\", focusChange: \"focusChange\", animationDone: \"animationDone\", selectedTabChange: \"selectedTabChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    _MatTabGroupBase.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    _MatTabGroupBase.propDecorators = {\n        dynamicHeight: [{ type: Input }],\n        selectedIndex: [{ type: Input }],\n        headerPosition: [{ type: Input }],\n        animationDuration: [{ type: Input }],\n        disablePagination: [{ type: Input }],\n        backgroundColor: [{ type: Input }],\n        selectedIndexChange: [{ type: Output }],\n        focusChange: [{ type: Output }],\n        animationDone: [{ type: Output }],\n        selectedTabChange: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatTabGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TABS_CONFIG]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { headerPosition: [{\n            type: Input\n        }], selectedIndexChange: [{\n            type: Output\n        }], focusChange: [{\n            type: Output\n        }], animationDone: [{\n            type: Output\n        }], selectedTabChange: [{\n            type: Output\n        }], animationDuration: [{\n            type: Input\n        }], disablePagination: [{\n            type: Input\n        }], dynamicHeight: [{\n            type: Input\n        }], selectedIndex: [{\n            type: Input\n        }], backgroundColor: [{\n            type: Input\n        }] }); })();\n    return _MatTabGroupBase;\n})();\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nlet MatTabGroup = /** @class */ (() => {\n    class MatTabGroup extends _MatTabGroupBase {\n        constructor(elementRef, changeDetectorRef, defaultConfig, animationMode) {\n            super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n        }\n    }\nMatTabGroup.ɵfac = function MatTabGroup_Factory(t) { return new (t || MatTabGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_TABS_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatTabGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTabGroup, selectors: [[\"mat-tab-group\"]], contentQueries: function MatTabGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTab, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allTabs = _t);\n    } }, viewQuery: function MatTabGroup_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, true);\n        ɵngcc0.ɵɵviewQuery(_c4, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabBodyWrapper = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabHeader = _t.first);\n    } }, hostAttrs: [1, \"mat-tab-group\"], hostVars: 4, hostBindings: function MatTabGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-group-dynamic-height\", ctx.dynamicHeight)(\"mat-tab-group-inverted-header\", ctx.headerPosition === \"below\");\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\" }, exportAs: [\"matTabGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_TAB_GROUP,\n                useExisting: MatTabGroup\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 7, consts: [[3, \"selectedIndex\", \"disableRipple\", \"disablePagination\", \"indexFocused\", \"selectFocusedIndex\"], [\"tabHeader\", \"\"], [\"class\", \"mat-tab-label mat-focus-indicator\", \"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 3, \"id\", \"mat-tab-label-active\", \"disabled\", \"matRippleDisabled\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-tab-body-wrapper\"], [\"tabBodyWrapper\", \"\"], [\"role\", \"tabpanel\", 3, \"id\", \"mat-tab-body-active\", \"content\", \"position\", \"origin\", \"animationDuration\", \"_onCentered\", \"_onCentering\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"tab\", \"matTabLabelWrapper\", \"\", \"mat-ripple\", \"\", \"cdkMonitorElementFocus\", \"\", 1, \"mat-tab-label\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"matRippleDisabled\", \"click\"], [1, \"mat-tab-label-content\"], [3, \"ngIf\"], [3, \"cdkPortalOutlet\"], [\"role\", \"tabpanel\", 3, \"id\", \"content\", \"position\", \"origin\", \"animationDuration\", \"_onCentered\", \"_onCentering\"]], template: function MatTabGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-tab-header\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"indexFocused\", function MatTabGroup_Template_mat_tab_header_indexFocused_0_listener($event) { return ctx._focusChanged($event); })(\"selectFocusedIndex\", function MatTabGroup_Template_mat_tab_header_selectFocusedIndex_0_listener($event) { return ctx.selectedIndex = $event; });\n        ɵngcc0.ɵɵtemplate(2, MatTabGroup_div_2_Template, 4, 14, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n        ɵngcc0.ɵɵtemplate(5, MatTabGroup_mat_tab_body_5_Template, 1, 8, \"mat-tab-body\", 5);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"selectedIndex\", ctx.selectedIndex || 0)(\"disableRipple\", ctx.disableRipple)(\"disablePagination\", ctx.disablePagination);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._tabs);\n    } }, directives: function () { return [MatTabHeader, ɵngcc2.NgForOf, MatTabLabelWrapper, ɵngcc3.MatRipple, ɵngcc4.CdkMonitorFocus, ɵngcc2.NgIf, ɵngcc5.CdkPortalOutlet, MatTabBody]; }, styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"], encapsulation: 2 });\n    MatTabGroup.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatTabGroup.propDecorators = {\n        _allTabs: [{ type: ContentChildren, args: [MatTab, { descendants: true },] }],\n        _tabBodyWrapper: [{ type: ViewChild, args: ['tabBodyWrapper',] }],\n        _tabHeader: [{ type: ViewChild, args: ['tabHeader',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabGroup, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab-group',\n                exportAs: 'matTabGroup',\n                template: \"<mat-tab-header #tabHeader\\n               [selectedIndex]=\\\"selectedIndex || 0\\\"\\n               [disableRipple]=\\\"disableRipple\\\"\\n               [disablePagination]=\\\"disablePagination\\\"\\n               (indexFocused)=\\\"_focusChanged($event)\\\"\\n               (selectFocusedIndex)=\\\"selectedIndex = $event\\\">\\n  <div class=\\\"mat-tab-label mat-focus-indicator\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus\\n       *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n       [id]=\\\"_getTabLabelId(i)\\\"\\n       [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\"\\n       [attr.aria-posinset]=\\\"i + 1\\\"\\n       [attr.aria-setsize]=\\\"_tabs.length\\\"\\n       [attr.aria-controls]=\\\"_getTabContentId(i)\\\"\\n       [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n       [attr.aria-label]=\\\"tab.ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\"\\n       [class.mat-tab-label-active]=\\\"selectedIndex == i\\\"\\n       [disabled]=\\\"tab.disabled\\\"\\n       [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\"\\n       (click)=\\\"_handleClick(tab, tabHeader, i)\\\">\\n\\n\\n    <div class=\\\"mat-tab-label-content\\\">\\n      <!-- If there is a label template, use it. -->\\n      <ng-template [ngIf]=\\\"tab.templateLabel\\\">\\n        <ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template>\\n      </ng-template>\\n\\n      <!-- If there is not a label template, fall back to the text label. -->\\n      <ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template>\\n    </div>\\n  </div>\\n</mat-tab-header>\\n\\n<div\\n  class=\\\"mat-tab-body-wrapper\\\"\\n  [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n  #tabBodyWrapper>\\n  <mat-tab-body role=\\\"tabpanel\\\"\\n               *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n               [id]=\\\"_getTabContentId(i)\\\"\\n               [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\"\\n               [class.mat-tab-body-active]=\\\"selectedIndex == i\\\"\\n               [content]=\\\"tab.content!\\\"\\n               [position]=\\\"tab.position!\\\"\\n               [origin]=\\\"tab.origin\\\"\\n               [animationDuration]=\\\"animationDuration\\\"\\n               (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\"\\n               (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\">\\n  </mat-tab-body>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                inputs: ['color', 'disableRipple'],\n                providers: [{\n                        provide: MAT_TAB_GROUP,\n                        useExisting: MatTabGroup\n                    }],\n                host: {\n                    'class': 'mat-tab-group',\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"'\n                },\n                styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TABS_CONFIG]\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { _allTabs: [{\n            type: ContentChildren,\n            args: [MatTab, { descendants: true }]\n        }], _tabBodyWrapper: [{\n            type: ViewChild,\n            args: ['tabBodyWrapper']\n        }], _tabHeader: [{\n            type: ViewChild,\n            args: ['tabHeader']\n        }] }); })();\n    return MatTabGroup;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nclass MatTabLabelWrapperBase {\n}\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\nlet MatTabLabelWrapper = /** @class */ (() => {\n    class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\n        constructor(elementRef) {\n            super();\n            this.elementRef = elementRef;\n        }\n        /** Sets focus on the wrapper element */\n        focus() {\n            this.elementRef.nativeElement.focus();\n        }\n        getOffsetLeft() {\n            return this.elementRef.nativeElement.offsetLeft;\n        }\n        getOffsetWidth() {\n            return this.elementRef.nativeElement.offsetWidth;\n        }\n    }\nMatTabLabelWrapper.ɵfac = function MatTabLabelWrapper_Factory(t) { return new (t || MatTabLabelWrapper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatTabLabelWrapper.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTabLabelWrapper, selectors: [[\"\", \"matTabLabelWrapper\", \"\"]], hostVars: 3, hostBindings: function MatTabLabelWrapper_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", !!ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-disabled\", ctx.disabled);\n    } }, inputs: { disabled: \"disabled\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTabLabelWrapper.ctorParameters = () => [\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabLabelWrapper, [{\n        type: Directive,\n        args: [{\n                selector: '[matTabLabelWrapper]',\n                inputs: ['disabled'],\n                host: {\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[attr.aria-disabled]': '!!disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatTabLabelWrapper;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\nlet MatPaginatedTabHeader = /** @class */ (() => {\n    class MatPaginatedTabHeader {\n        constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, \n        /**\n         * @deprecated @breaking-change 9.0.0 `_platform` and `_animationMode`\n         * parameters to become required.\n         */\n        _platform, _animationMode) {\n            this._elementRef = _elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._viewportRuler = _viewportRuler;\n            this._dir = _dir;\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            this._animationMode = _animationMode;\n            /** The distance in pixels that the tab labels should be translated to the left. */\n            this._scrollDistance = 0;\n            /** Whether the header should scroll to the selected index after the view has been checked. */\n            this._selectedIndexChanged = false;\n            /** Emits when the component is destroyed. */\n            this._destroyed = new Subject();\n            /** Whether the controls for pagination should be displayed */\n            this._showPaginationControls = false;\n            /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n            this._disableScrollAfter = true;\n            /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n            this._disableScrollBefore = true;\n            /** Stream that will stop the automated scrolling. */\n            this._stopScrolling = new Subject();\n            /**\n             * Whether pagination should be disabled. This can be used to avoid unnecessary\n             * layout recalculations if it's known that pagination won't be required.\n             */\n            this.disablePagination = false;\n            this._selectedIndex = 0;\n            /** Event emitted when the option is selected. */\n            this.selectFocusedIndex = new EventEmitter();\n            /** Event emitted when a label is focused. */\n            this.indexFocused = new EventEmitter();\n            // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n            _ngZone.runOutsideAngular(() => {\n                fromEvent(_elementRef.nativeElement, 'mouseleave')\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => {\n                    this._stopInterval();\n                });\n            });\n        }\n        /** The index of the active tab. */\n        get selectedIndex() { return this._selectedIndex; }\n        set selectedIndex(value) {\n            value = coerceNumberProperty(value);\n            if (this._selectedIndex != value) {\n                this._selectedIndexChanged = true;\n                this._selectedIndex = value;\n                if (this._keyManager) {\n                    this._keyManager.updateActiveItem(value);\n                }\n            }\n        }\n        ngAfterViewInit() {\n            // We need to handle these events manually, because we want to bind passive event listeners.\n            fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._handlePaginatorPress('before');\n            });\n            fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._handlePaginatorPress('after');\n            });\n        }\n        ngAfterContentInit() {\n            const dirChange = this._dir ? this._dir.change : of(null);\n            const resize = this._viewportRuler.change(150);\n            const realign = () => {\n                this.updatePagination();\n                this._alignInkBarToSelectedTab();\n            };\n            this._keyManager = new FocusKeyManager(this._items)\n                .withHorizontalOrientation(this._getLayoutDirection())\n                .withWrap();\n            this._keyManager.updateActiveItem(0);\n            // Defer the first call in order to allow for slower browsers to lay out the elements.\n            // This helps in cases where the user lands directly on a page with paginated tabs.\n            typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n            // On dir change or window resize, realign the ink bar and update the orientation of\n            // the key manager if the direction has changed.\n            merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe(() => {\n                // We need to defer this to give the browser some time to recalculate the element dimensions.\n                Promise.resolve().then(realign);\n                this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n            });\n            // If there is a change in the focus key manager we need to emit the `indexFocused`\n            // event in order to provide a public event that notifies about focus changes. Also we realign\n            // the tabs container by scrolling the new focused tab into the visible section.\n            this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n                this.indexFocused.emit(newFocusIndex);\n                this._setTabFocus(newFocusIndex);\n            });\n        }\n        ngAfterContentChecked() {\n            // If the number of tab labels have changed, check if scrolling should be enabled\n            if (this._tabLabelCount != this._items.length) {\n                this.updatePagination();\n                this._tabLabelCount = this._items.length;\n                this._changeDetectorRef.markForCheck();\n            }\n            // If the selected index has changed, scroll to the label and check if the scrolling controls\n            // should be disabled.\n            if (this._selectedIndexChanged) {\n                this._scrollToLabel(this._selectedIndex);\n                this._checkScrollingControls();\n                this._alignInkBarToSelectedTab();\n                this._selectedIndexChanged = false;\n                this._changeDetectorRef.markForCheck();\n            }\n            // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n            // then translate the header to reflect this.\n            if (this._scrollDistanceChanged) {\n                this._updateTabScrollPosition();\n                this._scrollDistanceChanged = false;\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._stopScrolling.complete();\n        }\n        /** Handles keyboard events on the header. */\n        _handleKeydown(event) {\n            // We don't handle any key bindings with a modifier key.\n            if (hasModifierKey(event)) {\n                return;\n            }\n            switch (event.keyCode) {\n                case HOME:\n                    this._keyManager.setFirstItemActive();\n                    event.preventDefault();\n                    break;\n                case END:\n                    this._keyManager.setLastItemActive();\n                    event.preventDefault();\n                    break;\n                case ENTER:\n                case SPACE:\n                    if (this.focusIndex !== this.selectedIndex) {\n                        this.selectFocusedIndex.emit(this.focusIndex);\n                        this._itemSelected(event);\n                    }\n                    break;\n                default:\n                    this._keyManager.onKeydown(event);\n            }\n        }\n        /**\n         * Callback for when the MutationObserver detects that the content has changed.\n         */\n        _onContentChanges() {\n            const textContent = this._elementRef.nativeElement.textContent;\n            // We need to diff the text content of the header, because the MutationObserver callback\n            // will fire even if the text content didn't change which is inefficient and is prone\n            // to infinite loops if a poorly constructed expression is passed in (see #14249).\n            if (textContent !== this._currentTextContent) {\n                this._currentTextContent = textContent || '';\n                // The content observer runs outside the `NgZone` by default, which\n                // means that we need to bring the callback back in ourselves.\n                this._ngZone.run(() => {\n                    this.updatePagination();\n                    this._alignInkBarToSelectedTab();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        }\n        /**\n         * Updates the view whether pagination should be enabled or not.\n         *\n         * WARNING: Calling this method can be very costly in terms of performance. It should be called\n         * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n         * page.\n         */\n        updatePagination() {\n            this._checkPaginationEnabled();\n            this._checkScrollingControls();\n            this._updateTabScrollPosition();\n        }\n        /** Tracks which element has focus; used for keyboard navigation */\n        get focusIndex() {\n            return this._keyManager ? this._keyManager.activeItemIndex : 0;\n        }\n        /** When the focus index is set, we must manually send focus to the correct label */\n        set focusIndex(value) {\n            if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n                return;\n            }\n            this._keyManager.setActiveItem(value);\n        }\n        /**\n         * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n         * providing a valid index and return true.\n         */\n        _isValidIndex(index) {\n            if (!this._items) {\n                return true;\n            }\n            const tab = this._items ? this._items.toArray()[index] : null;\n            return !!tab && !tab.disabled;\n        }\n        /**\n         * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n         * scrolling is enabled.\n         */\n        _setTabFocus(tabIndex) {\n            if (this._showPaginationControls) {\n                this._scrollToLabel(tabIndex);\n            }\n            if (this._items && this._items.length) {\n                this._items.toArray()[tabIndex].focus();\n                // Do not let the browser manage scrolling to focus the element, this will be handled\n                // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n                // should be the full width minus the offset width.\n                const containerEl = this._tabListContainer.nativeElement;\n                const dir = this._getLayoutDirection();\n                if (dir == 'ltr') {\n                    containerEl.scrollLeft = 0;\n                }\n                else {\n                    containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n                }\n            }\n        }\n        /** The layout direction of the containing app. */\n        _getLayoutDirection() {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        }\n        /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n        _updateTabScrollPosition() {\n            if (this.disablePagination) {\n                return;\n            }\n            const scrollDistance = this.scrollDistance;\n            const platform = this._platform;\n            const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n            // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n            // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n            // and ripples will exceed the boundaries of the visible tab bar.\n            // See: https://github.com/angular/components/issues/10276\n            // We round the `transform` here, because transforms with sub-pixel precision cause some\n            // browsers to blur the content of the element.\n            this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n            // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n            // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n            // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n            // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n            // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n            if (platform && (platform.TRIDENT || platform.EDGE)) {\n                this._tabListContainer.nativeElement.scrollLeft = 0;\n            }\n        }\n        /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n        get scrollDistance() { return this._scrollDistance; }\n        set scrollDistance(value) {\n            this._scrollTo(value);\n        }\n        /**\n         * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n         * the end of the list, respectively). The distance to scroll is computed to be a third of the\n         * length of the tab list view window.\n         *\n         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n         * should be called sparingly.\n         */\n        _scrollHeader(direction) {\n            const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n            // Move the scroll distance one-third the length of the tab list's viewport.\n            const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n            return this._scrollTo(this._scrollDistance + scrollAmount);\n        }\n        /** Handles click events on the pagination arrows. */\n        _handlePaginatorClick(direction) {\n            this._stopInterval();\n            this._scrollHeader(direction);\n        }\n        /**\n         * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n         *\n         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n         * should be called sparingly.\n         */\n        _scrollToLabel(labelIndex) {\n            if (this.disablePagination) {\n                return;\n            }\n            const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n            if (!selectedLabel) {\n                return;\n            }\n            // The view length is the visible width of the tab labels.\n            const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n            const { offsetLeft, offsetWidth } = selectedLabel.elementRef.nativeElement;\n            let labelBeforePos, labelAfterPos;\n            if (this._getLayoutDirection() == 'ltr') {\n                labelBeforePos = offsetLeft;\n                labelAfterPos = labelBeforePos + offsetWidth;\n            }\n            else {\n                labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n                labelBeforePos = labelAfterPos - offsetWidth;\n            }\n            const beforeVisiblePos = this.scrollDistance;\n            const afterVisiblePos = this.scrollDistance + viewLength;\n            if (labelBeforePos < beforeVisiblePos) {\n                // Scroll header to move label to the before direction\n                this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n            }\n            else if (labelAfterPos > afterVisiblePos) {\n                // Scroll header to move label to the after direction\n                this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n            }\n        }\n        /**\n         * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n         * tab list is wider than the size of the header container, then the pagination controls should\n         * be shown.\n         *\n         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n         * should be called sparingly.\n         */\n        _checkPaginationEnabled() {\n            if (this.disablePagination) {\n                this._showPaginationControls = false;\n            }\n            else {\n                const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n                if (!isEnabled) {\n                    this.scrollDistance = 0;\n                }\n                if (isEnabled !== this._showPaginationControls) {\n                    this._changeDetectorRef.markForCheck();\n                }\n                this._showPaginationControls = isEnabled;\n            }\n        }\n        /**\n         * Evaluate whether the before and after controls should be enabled or disabled.\n         * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n         * before button. If the header is at the end of the list (scroll distance is equal to the\n         * maximum distance we can scroll), then disable the after button.\n         *\n         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n         * should be called sparingly.\n         */\n        _checkScrollingControls() {\n            if (this.disablePagination) {\n                this._disableScrollAfter = this._disableScrollBefore = true;\n            }\n            else {\n                // Check if the pagination arrows should be activated.\n                this._disableScrollBefore = this.scrollDistance == 0;\n                this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /**\n         * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n         * is equal to the difference in width between the tab list container and tab header container.\n         *\n         * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n         * should be called sparingly.\n         */\n        _getMaxScrollDistance() {\n            const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n            const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n            return (lengthOfTabList - viewLength) || 0;\n        }\n        /** Tells the ink-bar to align itself to the current label wrapper */\n        _alignInkBarToSelectedTab() {\n            const selectedItem = this._items && this._items.length ?\n                this._items.toArray()[this.selectedIndex] : null;\n            const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n            if (selectedLabelWrapper) {\n                this._inkBar.alignToElement(selectedLabelWrapper);\n            }\n            else {\n                this._inkBar.hide();\n            }\n        }\n        /** Stops the currently-running paginator interval.  */\n        _stopInterval() {\n            this._stopScrolling.next();\n        }\n        /**\n         * Handles the user pressing down on one of the paginators.\n         * Starts scrolling the header after a certain amount of time.\n         * @param direction In which direction the paginator should be scrolled.\n         */\n        _handlePaginatorPress(direction, mouseEvent) {\n            // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n            // null check the `button`, but we do it so we don't break tests that use fake events.\n            if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n                return;\n            }\n            // Avoid overlapping timers.\n            this._stopInterval();\n            // Start a timer after the delay and keep firing based on the interval.\n            timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n                // Keep the timer going until something tells it to stop or the component is destroyed.\n                .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n                .subscribe(() => {\n                const { maxScrollDistance, distance } = this._scrollHeader(direction);\n                // Stop the timer if we've reached the start or the end.\n                if (distance === 0 || distance >= maxScrollDistance) {\n                    this._stopInterval();\n                }\n            });\n        }\n        /**\n         * Scrolls the header to a given position.\n         * @param position Position to which to scroll.\n         * @returns Information on the current scroll distance and the maximum.\n         */\n        _scrollTo(position) {\n            if (this.disablePagination) {\n                return { maxScrollDistance: 0, distance: 0 };\n            }\n            const maxScrollDistance = this._getMaxScrollDistance();\n            this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n            // Mark that the scroll distance has changed so that after the view is checked, the CSS\n            // transformation can move the header.\n            this._scrollDistanceChanged = true;\n            this._checkScrollingControls();\n            return { maxScrollDistance, distance: this._scrollDistance };\n        }\n    }\nMatPaginatedTabHeader.ɵfac = function MatPaginatedTabHeader_Factory(t) { return new (t || MatPaginatedTabHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Platform), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatPaginatedTabHeader.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatPaginatedTabHeader, inputs: { disablePagination: \"disablePagination\" } });\n    MatPaginatedTabHeader.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: ViewportRuler },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgZone },\n        { type: Platform },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatPaginatedTabHeader.propDecorators = {\n        disablePagination: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPaginatedTabHeader, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.ViewportRuler }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc7.Platform }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { disablePagination: [{\n            type: Input\n        }] }); })();\n    return MatPaginatedTabHeader;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\nlet _MatTabHeaderBase = /** @class */ (() => {\n    class _MatTabHeaderBase extends MatPaginatedTabHeader {\n        constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, \n        // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n        animationMode) {\n            super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n            this._disableRipple = false;\n        }\n        /** Whether the ripple effect is disabled or not. */\n        get disableRipple() { return this._disableRipple; }\n        set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n        _itemSelected(event) {\n            event.preventDefault();\n        }\n    }\n_MatTabHeaderBase.ɵfac = function _MatTabHeaderBase_Factory(t) { return new (t || _MatTabHeaderBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Platform), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\n_MatTabHeaderBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatTabHeaderBase, inputs: { disableRipple: \"disableRipple\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    _MatTabHeaderBase.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: ViewportRuler },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgZone },\n        { type: Platform },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    _MatTabHeaderBase.propDecorators = {\n        disableRipple: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatTabHeaderBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.ViewportRuler }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc7.Platform }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { disableRipple: [{\n            type: Input\n        }] }); })();\n    return _MatTabHeaderBase;\n})();\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\nlet MatTabHeader = /** @class */ (() => {\n    class MatTabHeader extends _MatTabHeaderBase {\n        constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, \n        // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n        animationMode) {\n            super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        }\n    }\nMatTabHeader.ɵfac = function MatTabHeader_Factory(t) { return new (t || MatTabHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Platform), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatTabHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTabHeader, selectors: [[\"mat-tab-header\"]], contentQueries: function MatTabHeader_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLabelWrapper, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._items = _t);\n    } }, viewQuery: function MatTabHeader_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatInkBar, true);\n        ɵngcc0.ɵɵstaticViewQuery(_c5, true);\n        ɵngcc0.ɵɵstaticViewQuery(_c6, true);\n        ɵngcc0.ɵɵviewQuery(_c7, true);\n        ɵngcc0.ɵɵviewQuery(_c8, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inkBar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabListContainer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabList = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nextPaginator = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previousPaginator = _t.first);\n    } }, hostAttrs: [1, \"mat-tab-header\"], hostVars: 4, hostBindings: function MatTabHeader_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-controls-enabled\", ctx._showPaginationControls)(\"mat-tab-header-rtl\", ctx._getLayoutDirection() == \"rtl\");\n    } }, inputs: { selectedIndex: \"selectedIndex\" }, outputs: { selectFocusedIndex: \"selectFocusedIndex\", indexFocused: \"indexFocused\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 13, vars: 8, consts: [[\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-before\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"click\", \"mousedown\", \"touchend\"], [\"previousPaginator\", \"\"], [1, \"mat-tab-header-pagination-chevron\"], [1, \"mat-tab-label-container\", 3, \"keydown\"], [\"tabListContainer\", \"\"], [\"role\", \"tablist\", 1, \"mat-tab-list\", 3, \"cdkObserveContent\"], [\"tabList\", \"\"], [1, \"mat-tab-labels\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-after\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"mousedown\", \"click\", \"touchend\"], [\"nextPaginator\", \"\"]], template: function MatTabHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatTabHeader_Template_div_click_0_listener() { return ctx._handlePaginatorClick(\"before\"); })(\"mousedown\", function MatTabHeader_Template_div_mousedown_0_listener($event) { return ctx._handlePaginatorPress(\"before\", $event); })(\"touchend\", function MatTabHeader_Template_div_touchend_0_listener() { return ctx._stopInterval(); });\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatTabHeader_Template_div_keydown_3_listener($event) { return ctx._handleKeydown($event); });\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatTabHeader_Template_div_cdkObserveContent_5_listener() { return ctx._onContentChanges(); });\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵprojection(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(9, \"mat-ink-bar\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(10, \"div\", 8, 9);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatTabHeader_Template_div_mousedown_10_listener($event) { return ctx._handlePaginatorPress(\"after\", $event); })(\"click\", function MatTabHeader_Template_div_click_10_listener() { return ctx._handlePaginatorClick(\"after\"); })(\"touchend\", function MatTabHeader_Template_div_touchend_10_listener() { return ctx._stopInterval(); });\n        ɵngcc0.ɵɵelement(12, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollBefore);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollBefore || ctx.disableRipple);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollAfter);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollAfter || ctx.disableRipple);\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc8.CdkObserveContent, MatInkBar], styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"], encapsulation: 2 });\n    MatTabHeader.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: ViewportRuler },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgZone },\n        { type: Platform },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatTabHeader.propDecorators = {\n        _items: [{ type: ContentChildren, args: [MatTabLabelWrapper, { descendants: false },] }],\n        _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n        _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n        _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n        _nextPaginator: [{ type: ViewChild, args: ['nextPaginator',] }],\n        _previousPaginator: [{ type: ViewChild, args: ['previousPaginator',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tab-header',\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    #tabList\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    role=\\\"tablist\\\"\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-labels\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                outputs: ['selectFocusedIndex', 'indexFocused'],\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                host: {\n                    'class': 'mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\"\n                },\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.ViewportRuler }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc7.Platform }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { _items: [{\n            type: ContentChildren,\n            args: [MatTabLabelWrapper, { descendants: false }]\n        }], _inkBar: [{\n            type: ViewChild,\n            args: [MatInkBar, { static: true }]\n        }], _tabListContainer: [{\n            type: ViewChild,\n            args: ['tabListContainer', { static: true }]\n        }], _tabList: [{\n            type: ViewChild,\n            args: ['tabList', { static: true }]\n        }], _nextPaginator: [{\n            type: ViewChild,\n            args: ['nextPaginator']\n        }], _previousPaginator: [{\n            type: ViewChild,\n            args: ['previousPaginator']\n        }] }); })();\n    return MatTabHeader;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class with all of the `MatTabNav` functionality.\n * @docs-private\n */\nlet _MatTabNavBase = /** @class */ (() => {\n    class _MatTabNavBase extends MatPaginatedTabHeader {\n        constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, \n        /**\n         * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n         */\n        platform, animationMode) {\n            super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n            this._disableRipple = false;\n            /** Theme color of the nav bar. */\n            this.color = 'primary';\n        }\n        /** Background color of the tab nav. */\n        get backgroundColor() { return this._backgroundColor; }\n        set backgroundColor(value) {\n            const classList = this._elementRef.nativeElement.classList;\n            classList.remove(`mat-background-${this.backgroundColor}`);\n            if (value) {\n                classList.add(`mat-background-${value}`);\n            }\n            this._backgroundColor = value;\n        }\n        /** Whether the ripple effect is disabled or not. */\n        get disableRipple() { return this._disableRipple; }\n        set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n        _itemSelected() {\n            // noop\n        }\n        ngAfterContentInit() {\n            // We need this to run before the `changes` subscription in parent to ensure that the\n            // selectedIndex is up-to-date by the time the super class starts looking for it.\n            this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n                this.updateActiveLink();\n            });\n            super.ngAfterContentInit();\n        }\n        /**\n         * Notifies the component that the active link has been changed.\n         * @breaking-change 8.0.0 `element` parameter to be removed.\n         */\n        updateActiveLink(_element) {\n            if (!this._items) {\n                return;\n            }\n            const items = this._items.toArray();\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].active) {\n                    this.selectedIndex = i;\n                    this._changeDetectorRef.markForCheck();\n                    return;\n                }\n            }\n            // The ink bar should hide itself if no items are active.\n            this.selectedIndex = -1;\n            this._inkBar.hide();\n        }\n    }\n_MatTabNavBase.ɵfac = function _MatTabNavBase_Factory(t) { return new (t || _MatTabNavBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Platform, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\n_MatTabNavBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatTabNavBase, inputs: { color: \"color\", backgroundColor: \"backgroundColor\", disableRipple: \"disableRipple\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    _MatTabNavBase.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: ViewportRuler },\n        { type: Platform, decorators: [{ type: Optional }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    _MatTabNavBase.propDecorators = {\n        backgroundColor: [{ type: Input }],\n        disableRipple: [{ type: Input }],\n        color: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatTabNavBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.ViewportRuler }, { type: ɵngcc7.Platform, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { color: [{\n            type: Input\n        }], backgroundColor: [{\n            type: Input\n        }], disableRipple: [{\n            type: Input\n        }] }); })();\n    return _MatTabNavBase;\n})();\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nlet MatTabNav = /** @class */ (() => {\n    class MatTabNav extends _MatTabNavBase {\n        constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, \n        /**\n         * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n         */\n        platform, animationMode) {\n            super(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode);\n        }\n    }\nMatTabNav.ɵfac = function MatTabNav_Factory(t) { return new (t || MatTabNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Platform, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatTabNav.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTabNav, selectors: [[\"\", \"mat-tab-nav-bar\", \"\"]], contentQueries: function MatTabNav_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTabLink, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._items = _t);\n    } }, viewQuery: function MatTabNav_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatInkBar, true);\n        ɵngcc0.ɵɵstaticViewQuery(_c5, true);\n        ɵngcc0.ɵɵstaticViewQuery(_c6, true);\n        ɵngcc0.ɵɵviewQuery(_c7, true);\n        ɵngcc0.ɵɵviewQuery(_c8, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inkBar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabListContainer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tabList = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nextPaginator = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previousPaginator = _t.first);\n    } }, hostAttrs: [1, \"mat-tab-nav-bar\", \"mat-tab-header\"], hostVars: 10, hostBindings: function MatTabNav_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-controls-enabled\", ctx._showPaginationControls)(\"mat-tab-header-rtl\", ctx._getLayoutDirection() == \"rtl\")(\"mat-primary\", ctx.color !== \"warn\" && ctx.color !== \"accent\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { color: \"color\" }, exportAs: [\"matTabNavBar\", \"matTabNav\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c9, ngContentSelectors: _c0, decls: 13, vars: 8, consts: [[\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-before\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"click\", \"mousedown\", \"touchend\"], [\"previousPaginator\", \"\"], [1, \"mat-tab-header-pagination-chevron\"], [1, \"mat-tab-link-container\", 3, \"keydown\"], [\"tabListContainer\", \"\"], [1, \"mat-tab-list\", 3, \"cdkObserveContent\"], [\"tabList\", \"\"], [1, \"mat-tab-links\"], [\"aria-hidden\", \"true\", \"mat-ripple\", \"\", 1, \"mat-tab-header-pagination\", \"mat-tab-header-pagination-after\", \"mat-elevation-z4\", 3, \"matRippleDisabled\", \"mousedown\", \"click\", \"touchend\"], [\"nextPaginator\", \"\"]], template: function MatTabNav_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatTabNav_Template_div_click_0_listener() { return ctx._handlePaginatorClick(\"before\"); })(\"mousedown\", function MatTabNav_Template_div_mousedown_0_listener($event) { return ctx._handlePaginatorPress(\"before\", $event); })(\"touchend\", function MatTabNav_Template_div_touchend_0_listener() { return ctx._stopInterval(); });\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatTabNav_Template_div_keydown_3_listener($event) { return ctx._handleKeydown($event); });\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatTabNav_Template_div_cdkObserveContent_5_listener() { return ctx._onContentChanges(); });\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵprojection(8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(9, \"mat-ink-bar\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(10, \"div\", 8, 9);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatTabNav_Template_div_mousedown_10_listener($event) { return ctx._handlePaginatorPress(\"after\", $event); })(\"click\", function MatTabNav_Template_div_click_10_listener() { return ctx._handlePaginatorClick(\"after\"); })(\"touchend\", function MatTabNav_Template_div_touchend_10_listener() { return ctx._stopInterval(); });\n        ɵngcc0.ɵɵelement(12, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollBefore);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollBefore || ctx.disableRipple);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-header-pagination-disabled\", ctx._disableScrollAfter);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._disableScrollAfter || ctx.disableRipple);\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc8.CdkObserveContent, MatInkBar], styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-tab-links{display:flex}[mat-align-tabs=center]>.mat-tab-link-container .mat-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-tab-link-container .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:none}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-link:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-link.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-link.mat-tab-disabled{opacity:.5}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-link{opacity:1}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media(max-width: 599px){.mat-tab-link{min-width:72px}}\\n\"], encapsulation: 2 });\n    MatTabNav.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: ViewportRuler },\n        { type: Platform, decorators: [{ type: Optional }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatTabNav.propDecorators = {\n        _items: [{ type: ContentChildren, args: [forwardRef(() => MatTabLink), { descendants: true },] }],\n        _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n        _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n        _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n        _nextPaginator: [{ type: ViewChild, args: ['nextPaginator',] }],\n        _previousPaginator: [{ type: ViewChild, args: ['previousPaginator',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabNav, [{\n        type: Component,\n        args: [{\n                selector: '[mat-tab-nav-bar]',\n                exportAs: 'matTabNavBar, matTabNav',\n                inputs: ['color'],\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    #tabList\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-links\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-tab-nav-bar mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-tab-links{display:flex}[mat-align-tabs=center]>.mat-tab-link-container .mat-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-tab-link-container .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:none}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-link:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-link.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-link.mat-tab-disabled{opacity:.5}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-link{opacity:1}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media(max-width: 599px){.mat-tab-link{min-width:72px}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.ViewportRuler }, { type: ɵngcc7.Platform, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { _items: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatTabLink), { descendants: true }]\n        }], _inkBar: [{\n            type: ViewChild,\n            args: [MatInkBar, { static: true }]\n        }], _tabListContainer: [{\n            type: ViewChild,\n            args: ['tabListContainer', { static: true }]\n        }], _tabList: [{\n            type: ViewChild,\n            args: ['tabList', { static: true }]\n        }], _nextPaginator: [{\n            type: ViewChild,\n            args: ['nextPaginator']\n        }], _previousPaginator: [{\n            type: ViewChild,\n            args: ['previousPaginator']\n        }] }); })();\n    return MatTabNav;\n})();\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkMixinBase {\n}\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkMixinBase)));\n/** Base class with all of the `MatTabLink` functionality. */\nlet _MatTabLinkBase = /** @class */ (() => {\n    class _MatTabLinkBase extends _MatTabLinkMixinBase {\n        constructor(_tabNavBar, elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {\n            super();\n            this._tabNavBar = _tabNavBar;\n            this.elementRef = elementRef;\n            this._focusMonitor = _focusMonitor;\n            /** Whether the tab link is active or not. */\n            this._isActive = false;\n            this.rippleConfig = globalRippleOptions || {};\n            this.tabIndex = parseInt(tabIndex) || 0;\n            if (animationMode === 'NoopAnimations') {\n                this.rippleConfig.animation = { enterDuration: 0, exitDuration: 0 };\n            }\n        }\n        /** Whether the link is active. */\n        get active() { return this._isActive; }\n        set active(value) {\n            if (value !== this._isActive) {\n                this._isActive = value;\n                this._tabNavBar.updateActiveLink(this.elementRef);\n            }\n        }\n        /**\n         * Whether ripples are disabled on interaction.\n         * @docs-private\n         */\n        get rippleDisabled() {\n            return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n                !!this.rippleConfig.disabled;\n        }\n        focus() {\n            this.elementRef.nativeElement.focus();\n        }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this.elementRef);\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this.elementRef);\n        }\n    }\n_MatTabLinkBase.ɵfac = function _MatTabLinkBase_Factory(t) { return new (t || _MatTabLinkBase)(ɵngcc0.ɵɵdirectiveInject(_MatTabNavBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\n_MatTabLinkBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatTabLinkBase, inputs: { active: \"active\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    _MatTabLinkBase.ctorParameters = () => [\n        { type: _MatTabNavBase },\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: FocusMonitor },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    _MatTabLinkBase.propDecorators = {\n        active: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatTabLinkBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatTabNavBase }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc4.FocusMonitor }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { active: [{\n            type: Input\n        }] }); })();\n    return _MatTabLinkBase;\n})();\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nlet MatTabLink = /** @class */ (() => {\n    class MatTabLink extends _MatTabLinkBase {\n        constructor(tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, focusMonitor, animationMode) {\n            super(tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode);\n            this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n            this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n        }\n        ngOnDestroy() {\n            super.ngOnDestroy();\n            this._tabLinkRipple._removeTriggerEvents();\n        }\n    }\nMatTabLink.ɵfac = function MatTabLink_Factory(t) { return new (t || MatTabLink)(ɵngcc0.ɵɵdirectiveInject(MatTabNav), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatTabLink.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTabLink, selectors: [[\"\", \"mat-tab-link\", \"\"], [\"\", \"matTabLink\", \"\"]], hostAttrs: [1, \"mat-tab-link\", \"mat-focus-indicator\"], hostVars: 7, hostBindings: function MatTabLink_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-current\", ctx.active ? \"page\" : null)(\"aria-disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵclassProp(\"mat-tab-disabled\", ctx.disabled)(\"mat-tab-label-active\", ctx.active);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matTabLink\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTabLink.ctorParameters = () => [\n        { type: MatTabNav },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: FocusMonitor },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabLink, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-tab-link], [matTabLink]',\n                exportAs: 'matTabLink',\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                host: {\n                    'class': 'mat-tab-link mat-focus-indicator',\n                    '[attr.aria-current]': 'active ? \"page\" : null',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.tabIndex]': 'tabIndex',\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[class.mat-tab-label-active]': 'active'\n                }\n            }]\n    }], function () { return [{ type: MatTabNav }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc7.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc4.FocusMonitor }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, null); })();\n    return MatTabLink;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatTabsModule = /** @class */ (() => {\n    class MatTabsModule {\n    }\nMatTabsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTabsModule });\nMatTabsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTabsModule_Factory(t) { return new (t || MatTabsModule)(); }, imports: [[\n            CommonModule,\n            MatCommonModule,\n            PortalModule,\n            MatRippleModule,\n            ObserversModule,\n            A11yModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTabsModule, { declarations: function () { return [MatTabGroup, MatTabLabel, MatTab, MatInkBar, MatTabLabelWrapper, MatTabNav, MatTabLink, MatTabBody, MatTabBodyPortal, MatTabHeader, MatTabContent]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        PortalModule,\n        MatRippleModule,\n        ObserversModule,\n        A11yModule]; }, exports: function () { return [MatCommonModule, MatTabGroup, MatTabLabel, MatTab, MatTabNav, MatTabLink, MatTabContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTabsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PortalModule,\n                    MatRippleModule,\n                    ObserversModule,\n                    A11yModule,\n                ],\n                // Don't export all components because some are only to be used internally.\n                exports: [\n                    MatCommonModule,\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabContent,\n                ],\n                declarations: [\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatInkBar,\n                    MatTabLabelWrapper,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabBody,\n                    MatTabBodyPortal,\n                    MatTabHeader,\n                    MatTabContent,\n                ]\n            }]\n    }], null, null); })();\n    return MatTabsModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TABS_CONFIG, MAT_TAB_GROUP, MatInkBar, MatTab, MatTabBody, MatTabBodyPortal, MatTabChangeEvent, MatTabContent, MatTabGroup, MatTabHeader, MatTabLabel, MatTabLabelWrapper, MatTabLink, MatTabNav, MatTabsModule, _MAT_INK_BAR_POSITIONER, _MatTabBodyBase, _MatTabGroupBase, _MatTabHeaderBase, _MatTabLinkBase, _MatTabNavBase, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵangular_material_src_material_tabs_tabs_a, MatPaginatedTabHeader as ɵangular_material_src_material_tabs_tabs_b };\n\n//# sourceMappingURL=tabs.js.map","<mat-tab-group backgroundColor=\"primary\" dir=\"rtl\" class=\"tabs\" [selectedIndex]=\"selectedTabIndex$ | async\">\r\n\t<mat-tab *ngFor=\"let tab of tabs\">\r\n\t\t<ng-template matTabLabel>\r\n\t\t\t<div [routerLink]=\"tab.route\" routerLinkActive class=\"tab-label-container\">\r\n\t\t\t\t<mat-icon [svgIcon]=\"tab.icon\"></mat-icon>\r\n\t\t\t\t<div class=\"label-text\"> {{ tab.display }} </div>\r\n\t\t\t</div>\r\n\t\t</ng-template>\r\n\t\t<ng-template matTabContent>\r\n\t\t\t<ng-container *ngIf=\"shouldShowContent\">\r\n\t\t\t\t<router-outlet></router-outlet>\r\n\t\t\t</ng-container>\r\n\t\t\t<ng-container *ngIf=\"!shouldShowContent\">\r\n\t\t\t\t<span class=\"error-message\">{{ message }}</span>\r\n\t\t\t</ng-container>\r\n\t\t</ng-template>\r\n\t</mat-tab>\r\n</mat-tab-group>\r\n","import { Observable, BehaviorSubject } from 'rxjs';\r\n\r\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { State, Permissions, EMPTY_STATE } from '../../../narnia/src/app/shared/state.interface';\r\n\r\nimport { TabManagerService } from './core/tab-manager.service';\r\nimport { TabElement } from './shared/models/tab-item.interface';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { StateService } from './core/state.service';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Component({\r\n\tselector: 'hst-root',\r\n\ttemplateUrl: './app.component.html',\r\n\tstyleUrls: ['./app.component.less']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n\r\n\tget tabs(): TabElement[] {\r\n\t\treturn this.tabManager.tabElements;\r\n\t}\r\n\r\n\tget state$(): Observable<State> {\r\n\t\treturn this.stateService.state$;\r\n\t}\r\n\r\n\tget selectedTabIndex$(): Observable<number> {\r\n\t\treturn this.tabManager.currentTab$.pipe(map((tab: TabElement) => tab?.index || 0));\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tprivate tabManager: TabManagerService,\r\n\t\tprivate stateService: StateService\r\n\t) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.insertNarnia();\r\n\t\tthis.tabManager.initializeTabs();\r\n\t}\r\n\r\n\tinsertNarnia(): void {\r\n\t\tconst narniaScript = document.createElement('script');\r\n\t\tnarniaScript.src = 'assets/elements/narnia/main-es2015.js';\r\n\t\tnarniaScript.type = 'module';\r\n\t\tnarniaScript.defer = true;\r\n\t\tdocument.body.append(narniaScript);\r\n\t\tconst narnia = document.createElement('elm-narnia-root');\r\n\t\tdocument.querySelector('.mat-tab-header').after(narnia);\r\n\t\tnarnia.addEventListener('stateChange', (event: CustomEvent<State>) => this.stateChange(event));\r\n\t}\r\n\r\n\tstateChange(event: CustomEvent<State>): void {\r\n\t\tthis.stateService.updateState(event.detail);\r\n\t}\r\n\r\n\tget shouldShowContent(): boolean {\r\n\t\treturn this.stateService.value.permissions !== Permissions.NONE;\r\n\t}\r\n\r\n\tget message(): string {\r\n\t\tconst { user, topic, permissions } = this.stateService.value;\r\n\r\n\t\tif (!user) {\r\n\t\t\treturn 'נא להזדהות';\r\n\t\t}\r\n\r\n\t\tif (!topic) {\r\n\t\t\treturn 'נא לבחור נושא';\r\n\t\t}\r\n\r\n\t\tif (permissions === Permissions.NONE) {\r\n\t\t\treturn 'חסרות הרשאות לצפייה בתוכן';\r\n\t\t}\r\n\t}\r\n}\r\n","import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nlet ScrollStrategyOptions = /** @class */ (() => {\n    class ScrollStrategyOptions {\n        constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewportRuler = _viewportRuler;\n            this._ngZone = _ngZone;\n            /** Do nothing on scroll. */\n            this.noop = () => new NoopScrollStrategy();\n            /**\n             * Close the overlay as soon as the user scrolls.\n             * @param config Configuration to be used inside the scroll strategy.\n             */\n            this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n            /** Block scrolling. */\n            this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n            /**\n             * Update the overlay's position on scroll.\n             * @param config Configuration to be used inside the scroll strategy.\n             * Allows debouncing the reposition calls.\n             */\n            this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n            this._document = document;\n        }\n    }\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n    ScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n    ScrollStrategyOptions.ctorParameters = () => [\n        { type: ScrollDispatcher },\n        { type: ViewportRuler },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return ScrollStrategyOptions;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nlet ConnectedOverlayPositionChange = /** @class */ (() => {\n    class ConnectedOverlayPositionChange {\n        constructor(\n        /** The position used as a result of this change. */\n        connectionPair, \n        /** @docs-private */\n        scrollableViewProperties) {\n            this.connectionPair = connectionPair;\n            this.scrollableViewProperties = scrollableViewProperties;\n        }\n    }\n    ConnectedOverlayPositionChange.ctorParameters = () => [\n        { type: ConnectionPositionPair },\n        { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n    ];\n    return ConnectedOverlayPositionChange;\n})();\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nlet OverlayKeyboardDispatcher = /** @class */ (() => {\n    class OverlayKeyboardDispatcher {\n        constructor(document) {\n            /** Currently attached overlays in the order they were attached. */\n            this._attachedOverlays = [];\n            /** Keyboard event listener that will be attached to the body. */\n            this._keydownListener = (event) => {\n                const overlays = this._attachedOverlays;\n                for (let i = overlays.length - 1; i > -1; i--) {\n                    // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                    // We want to target the most recent overlay, rather than trying to match where the event came\n                    // from, because some components might open an overlay, but keep focus on a trigger element\n                    // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                    // because we don't want overlays that don't handle keyboard events to block the ones below\n                    // them that do.\n                    if (overlays[i]._keydownEvents.observers.length > 0) {\n                        overlays[i]._keydownEvents.next(event);\n                        break;\n                    }\n                }\n            };\n            this._document = document;\n        }\n        ngOnDestroy() {\n            this._detach();\n        }\n        /** Add a new overlay to the list of attached overlay refs. */\n        add(overlayRef) {\n            // Ensure that we don't get the same overlay multiple times.\n            this.remove(overlayRef);\n            // Lazily start dispatcher once first overlay is added\n            if (!this._isAttached) {\n                this._document.body.addEventListener('keydown', this._keydownListener);\n                this._isAttached = true;\n            }\n            this._attachedOverlays.push(overlayRef);\n        }\n        /** Remove an overlay from the list of attached overlay refs. */\n        remove(overlayRef) {\n            const index = this._attachedOverlays.indexOf(overlayRef);\n            if (index > -1) {\n                this._attachedOverlays.splice(index, 1);\n            }\n            // Remove the global listener once there are no more overlays.\n            if (this._attachedOverlays.length === 0) {\n                this._detach();\n            }\n        }\n        /** Detaches the global keyboard event listener. */\n        _detach() {\n            if (this._isAttached) {\n                this._document.body.removeEventListener('keydown', this._keydownListener);\n                this._isAttached = false;\n            }\n        }\n    }\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\n    OverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n    OverlayKeyboardDispatcher.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return OverlayKeyboardDispatcher;\n})();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nlet OverlayContainer = /** @class */ (() => {\n    class OverlayContainer {\n        constructor(document, \n        /**\n         * @deprecated `platform` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        _platform) {\n            this._platform = _platform;\n            this._document = document;\n        }\n        ngOnDestroy() {\n            const container = this._containerElement;\n            if (container && container.parentNode) {\n                container.parentNode.removeChild(container);\n            }\n        }\n        /**\n         * This method returns the overlay container element. It will lazily\n         * create the element the first time  it is called to facilitate using\n         * the container in non-browser environments.\n         * @returns the container element\n         */\n        getContainerElement() {\n            if (!this._containerElement) {\n                this._createContainer();\n            }\n            return this._containerElement;\n        }\n        /**\n         * Create the overlay container element, which is simply a div\n         * with the 'cdk-overlay-container' class on the document body.\n         */\n        _createContainer() {\n            // @breaking-change 10.0.0 Remove null check for `_platform`.\n            const isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n            const containerClass = 'cdk-overlay-container';\n            if (isBrowser || isTestEnvironment) {\n                const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                    `.${containerClass}[platform=\"test\"]`);\n                // Remove any old containers from the opposite platform.\n                // This can happen when transitioning from the server to the client.\n                for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                    oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n                }\n            }\n            const container = this._document.createElement('div');\n            container.classList.add(containerClass);\n            // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n            // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n            // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n            // To mitigate the problem we made it so that only containers from a different platform are\n            // cleared, but the side-effect was that people started depending on the overly-aggressive\n            // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n            // module which does the cleanup, we try to detect that we're in a test environment and we\n            // always clear the container. See #17006.\n            // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n            if (isTestEnvironment) {\n                container.setAttribute('platform', 'test');\n            }\n            else if (!isBrowser) {\n                container.setAttribute('platform', 'server');\n            }\n            this._document.body.appendChild(container);\n            this._containerElement = container;\n        }\n    }\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\n    OverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\n    OverlayContainer.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n    return OverlayContainer;\n})();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick.asObservable();\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments.asObservable();\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments.asObservable();\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents.asObservable();\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges.asObservable();\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(pair => {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    /** Whether the we're dealing with an RTL context */\n    get _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Emits an event when the connection point changes. */\n    get onPositionChange() {\n        return this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nlet OverlayPositionBuilder = /** @class */ (() => {\n    class OverlayPositionBuilder {\n        constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n            this._viewportRuler = _viewportRuler;\n            this._document = _document;\n            this._platform = _platform;\n            this._overlayContainer = _overlayContainer;\n        }\n        /**\n         * Creates a global position strategy.\n         */\n        global() {\n            return new GlobalPositionStrategy();\n        }\n        /**\n         * Creates a relative position strategy.\n         * @param elementRef\n         * @param originPos\n         * @param overlayPos\n         * @deprecated Use `flexibleConnectedTo` instead.\n         * @breaking-change 8.0.0\n         */\n        connectedTo(elementRef, originPos, overlayPos) {\n            return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        }\n        /**\n         * Creates a flexible position strategy.\n         * @param origin Origin relative to which to position the overlay.\n         */\n        flexibleConnectedTo(origin) {\n            return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n        }\n    }\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\n    OverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n    OverlayPositionBuilder.ctorParameters = () => [\n        { type: ViewportRuler },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform },\n        { type: OverlayContainer }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n    return OverlayPositionBuilder;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nlet Overlay = /** @class */ (() => {\n    class Overlay {\n        constructor(\n        /** Scrolling strategies that can be used when creating an overlay. */\n        scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n        // @breaking-change 8.0.0 `_location` parameter to be made required.\n        _location) {\n            this.scrollStrategies = scrollStrategies;\n            this._overlayContainer = _overlayContainer;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._positionBuilder = _positionBuilder;\n            this._keyboardDispatcher = _keyboardDispatcher;\n            this._injector = _injector;\n            this._ngZone = _ngZone;\n            this._document = _document;\n            this._directionality = _directionality;\n            this._location = _location;\n        }\n        /**\n         * Creates an overlay.\n         * @param config Configuration applied to the overlay.\n         * @returns Reference to the created overlay.\n         */\n        create(config) {\n            const host = this._createHostElement();\n            const pane = this._createPaneElement(host);\n            const portalOutlet = this._createPortalOutlet(pane);\n            const overlayConfig = new OverlayConfig(config);\n            overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n            return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n        }\n        /**\n         * Gets a position builder that can be used, via fluent API,\n         * to construct and configure a position strategy.\n         * @returns An overlay position builder.\n         */\n        position() {\n            return this._positionBuilder;\n        }\n        /**\n         * Creates the DOM element for an overlay and appends it to the overlay container.\n         * @returns Newly-created pane element\n         */\n        _createPaneElement(host) {\n            const pane = this._document.createElement('div');\n            pane.id = `cdk-overlay-${nextUniqueId++}`;\n            pane.classList.add('cdk-overlay-pane');\n            host.appendChild(pane);\n            return pane;\n        }\n        /**\n         * Creates the host element that wraps around an overlay\n         * and can be used for advanced positioning.\n         * @returns Newly-create host element.\n         */\n        _createHostElement() {\n            const host = this._document.createElement('div');\n            this._overlayContainer.getContainerElement().appendChild(host);\n            return host;\n        }\n        /**\n         * Create a DomPortalOutlet into which the overlay content can be loaded.\n         * @param pane The DOM element to turn into a portal outlet.\n         * @returns A portal outlet for the given DOM element.\n         */\n        _createPortalOutlet(pane) {\n            // We have to resolve the ApplicationRef later in order to allow people\n            // to use overlay-based providers during app initialization.\n            if (!this._appRef) {\n                this._appRef = this._injector.get(ApplicationRef);\n            }\n            return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n        }\n    }\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: function (t) { return Overlay.ɵfac(t); } });\n    Overlay.ctorParameters = () => [\n        { type: ScrollStrategyOptions },\n        { type: OverlayContainer },\n        { type: ComponentFactoryResolver },\n        { type: OverlayPositionBuilder },\n        { type: OverlayKeyboardDispatcher },\n        { type: Injector },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Directionality },\n        { type: Location, decorators: [{ type: Optional }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n    return Overlay;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (config) => overlay.scrollStrategies.reposition(config);\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nlet CdkOverlayOrigin = /** @class */ (() => {\n    class CdkOverlayOrigin {\n        constructor(\n        /** Reference to the element on which the directive is applied. */\n        elementRef) {\n            this.elementRef = elementRef;\n        }\n    }\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\n    CdkOverlayOrigin.ctorParameters = () => [\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n    return CdkOverlayOrigin;\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nlet CdkConnectedOverlay = /** @class */ (() => {\n    class CdkConnectedOverlay {\n        // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n        constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n            this._overlay = _overlay;\n            this._dir = _dir;\n            this._hasBackdrop = false;\n            this._lockPosition = false;\n            this._growAfterOpen = false;\n            this._flexibleDimensions = false;\n            this._push = false;\n            this._backdropSubscription = Subscription.EMPTY;\n            /** Margin between the overlay and the viewport edges. */\n            this.viewportMargin = 0;\n            /** Whether the overlay is open. */\n            this.open = false;\n            /** Event emitted when the backdrop is clicked. */\n            this.backdropClick = new EventEmitter();\n            /** Event emitted when the position has changed. */\n            this.positionChange = new EventEmitter();\n            /** Event emitted when the overlay has been attached. */\n            this.attach = new EventEmitter();\n            /** Event emitted when the overlay has been detached. */\n            this.detach = new EventEmitter();\n            /** Emits when there are keyboard events that are targeted at the overlay. */\n            this.overlayKeydown = new EventEmitter();\n            this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n            this._scrollStrategyFactory = scrollStrategyFactory;\n            this.scrollStrategy = this._scrollStrategyFactory();\n        }\n        /** The offset in pixels for the overlay connection point on the x-axis */\n        get offsetX() { return this._offsetX; }\n        set offsetX(offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        }\n        /** The offset in pixels for the overlay connection point on the y-axis */\n        get offsetY() { return this._offsetY; }\n        set offsetY(offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        }\n        /** Whether or not the overlay should attach a backdrop. */\n        get hasBackdrop() { return this._hasBackdrop; }\n        set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n        /** Whether or not the overlay should be locked when scrolling. */\n        get lockPosition() { return this._lockPosition; }\n        set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        get flexibleDimensions() { return this._flexibleDimensions; }\n        set flexibleDimensions(value) {\n            this._flexibleDimensions = coerceBooleanProperty(value);\n        }\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n        get growAfterOpen() { return this._growAfterOpen; }\n        set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        get push() { return this._push; }\n        set push(value) { this._push = coerceBooleanProperty(value); }\n        /** The associated overlay reference. */\n        get overlayRef() {\n            return this._overlayRef;\n        }\n        /** The element's layout direction. */\n        get dir() {\n            return this._dir ? this._dir.value : 'ltr';\n        }\n        ngOnDestroy() {\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n            }\n            this._backdropSubscription.unsubscribe();\n        }\n        ngOnChanges(changes) {\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n                this._overlayRef.updateSize({\n                    width: this.width,\n                    minWidth: this.minWidth,\n                    height: this.height,\n                    minHeight: this.minHeight,\n                });\n                if (changes['origin'] && this.open) {\n                    this._position.apply();\n                }\n            }\n            if (changes['open']) {\n                this.open ? this._attachOverlay() : this._detachOverlay();\n            }\n        }\n        /** Creates an overlay */\n        _createOverlay() {\n            if (!this.positions || !this.positions.length) {\n                this.positions = defaultPositionList;\n            }\n            this._overlayRef = this._overlay.create(this._buildConfig());\n            this._overlayRef.keydownEvents().subscribe((event) => {\n                this.overlayKeydown.next(event);\n                if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._detachOverlay();\n                }\n            });\n        }\n        /** Builds the overlay config based on the directive's inputs */\n        _buildConfig() {\n            const positionStrategy = this._position =\n                this.positionStrategy || this._createPositionStrategy();\n            const overlayConfig = new OverlayConfig({\n                direction: this._dir,\n                positionStrategy,\n                scrollStrategy: this.scrollStrategy,\n                hasBackdrop: this.hasBackdrop\n            });\n            if (this.width || this.width === 0) {\n                overlayConfig.width = this.width;\n            }\n            if (this.height || this.height === 0) {\n                overlayConfig.height = this.height;\n            }\n            if (this.minWidth || this.minWidth === 0) {\n                overlayConfig.minWidth = this.minWidth;\n            }\n            if (this.minHeight || this.minHeight === 0) {\n                overlayConfig.minHeight = this.minHeight;\n            }\n            if (this.backdropClass) {\n                overlayConfig.backdropClass = this.backdropClass;\n            }\n            if (this.panelClass) {\n                overlayConfig.panelClass = this.panelClass;\n            }\n            return overlayConfig;\n        }\n        /** Updates the state of a position strategy, based on the values of the directive inputs. */\n        _updatePositionStrategy(positionStrategy) {\n            const positions = this.positions.map(currentPosition => ({\n                originX: currentPosition.originX,\n                originY: currentPosition.originY,\n                overlayX: currentPosition.overlayX,\n                overlayY: currentPosition.overlayY,\n                offsetX: currentPosition.offsetX || this.offsetX,\n                offsetY: currentPosition.offsetY || this.offsetY,\n                panelClass: currentPosition.panelClass || undefined,\n            }));\n            return positionStrategy\n                .setOrigin(this.origin.elementRef)\n                .withPositions(positions)\n                .withFlexibleDimensions(this.flexibleDimensions)\n                .withPush(this.push)\n                .withGrowAfterOpen(this.growAfterOpen)\n                .withViewportMargin(this.viewportMargin)\n                .withLockedPosition(this.lockPosition)\n                .withTransformOriginOn(this.transformOriginSelector);\n        }\n        /** Returns the position strategy of the overlay to be set on the overlay config */\n        _createPositionStrategy() {\n            const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n            this._updatePositionStrategy(strategy);\n            strategy.positionChanges.subscribe(p => this.positionChange.emit(p));\n            return strategy;\n        }\n        /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n        _attachOverlay() {\n            if (!this._overlayRef) {\n                this._createOverlay();\n            }\n            else {\n                // Update the overlay size, in case the directive's inputs have changed\n                this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n            }\n            if (!this._overlayRef.hasAttached()) {\n                this._overlayRef.attach(this._templatePortal);\n                this.attach.emit();\n            }\n            if (this.hasBackdrop) {\n                this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                    this.backdropClick.emit(event);\n                });\n            }\n            else {\n                this._backdropSubscription.unsubscribe();\n            }\n        }\n        /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n        _detachOverlay() {\n            if (this._overlayRef) {\n                this._overlayRef.detach();\n                this.detach.emit();\n            }\n            this._backdropSubscription.unsubscribe();\n        }\n    }\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkConnectedOverlay.ctorParameters = () => [\n        { type: Overlay },\n        { type: TemplateRef },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ];\n    CdkConnectedOverlay.propDecorators = {\n        origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n        positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n        positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n        offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n        offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n        width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n        height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n        minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n        minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n        backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n        panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n        viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n        scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n        open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n        transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n        hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n        lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n        flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n        growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n        push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n        backdropClick: [{ type: Output }],\n        positionChange: [{ type: Output }],\n        attach: [{ type: Output }],\n        detach: [{ type: Output }],\n        overlayKeydown: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n    return CdkConnectedOverlay;\n})();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet OverlayModule = /** @class */ (() => {\n    class OverlayModule {\n    }\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n    return OverlayModule;\n})();\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nlet FullscreenOverlayContainer = /** @class */ (() => {\n    class FullscreenOverlayContainer extends OverlayContainer {\n        constructor(_document, \n        /**\n         * @deprecated `platform` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        platform) {\n            super(_document, platform);\n        }\n        ngOnDestroy() {\n            super.ngOnDestroy();\n            if (this._fullScreenEventName && this._fullScreenListener) {\n                this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n            }\n        }\n        _createContainer() {\n            super._createContainer();\n            this._adjustParentForFullscreenChange();\n            this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n        }\n        _adjustParentForFullscreenChange() {\n            if (!this._containerElement) {\n                return;\n            }\n            const fullscreenElement = this.getFullscreenElement();\n            const parent = fullscreenElement || this._document.body;\n            parent.appendChild(this._containerElement);\n        }\n        _addFullscreenChangeListener(fn) {\n            const eventName = this._getEventName();\n            if (eventName) {\n                if (this._fullScreenListener) {\n                    this._document.removeEventListener(eventName, this._fullScreenListener);\n                }\n                this._document.addEventListener(eventName, fn);\n                this._fullScreenListener = fn;\n            }\n        }\n        _getEventName() {\n            if (!this._fullScreenEventName) {\n                const _document = this._document;\n                if (_document.fullscreenEnabled) {\n                    this._fullScreenEventName = 'fullscreenchange';\n                }\n                else if (_document.webkitFullscreenEnabled) {\n                    this._fullScreenEventName = 'webkitfullscreenchange';\n                }\n                else if (_document.mozFullScreenEnabled) {\n                    this._fullScreenEventName = 'mozfullscreenchange';\n                }\n                else if (_document.msFullscreenEnabled) {\n                    this._fullScreenEventName = 'MSFullscreenChange';\n                }\n            }\n            return this._fullScreenEventName;\n        }\n        /**\n         * When the page is put into fullscreen mode, a specific element is specified.\n         * Only that element and its children are visible when in fullscreen mode.\n         */\n        getFullscreenElement() {\n            const _document = this._document;\n            return _document.fullscreenElement ||\n                _document.webkitFullscreenElement ||\n                _document.mozFullScreenElement ||\n                _document.msFullscreenElement ||\n                null;\n        }\n    }\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\n    FullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n    FullscreenOverlayContainer.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n    return FullscreenOverlayContainer;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, OVERLAY_PROVIDERS, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_c, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_d, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_e, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g };\n\n//# sourceMappingURL=overlay.js.map","import { Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, ViewChild, Input, NgModule } from '@angular/core';\nimport { mixinColor, mixinDisabled, mixinDisableRipple, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"mat-button\", \"\"];\nconst _c1 = [\"*\"];\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n    'mat-button',\n    'mat-flat-button',\n    'mat-icon-button',\n    'mat-raised-button',\n    'mat-stroked-button',\n    'mat-mini-fab',\n    'mat-fab',\n];\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nclass MatButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nlet MatButton = /** @class */ (() => {\n    class MatButton extends _MatButtonMixinBase {\n        constructor(elementRef, _focusMonitor, _animationMode) {\n            super(elementRef);\n            this._focusMonitor = _focusMonitor;\n            this._animationMode = _animationMode;\n            /** Whether the button is round. */\n            this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n            /** Whether the button is icon button. */\n            this.isIconButton = this._hasHostAttributes('mat-icon-button');\n            // For each of the variant selectors that is present in the button's host\n            // attributes, add the correct corresponding class.\n            for (const attr of BUTTON_HOST_ATTRIBUTES) {\n                if (this._hasHostAttributes(attr)) {\n                    this._getHostElement().classList.add(attr);\n                }\n            }\n            // Add a class that applies to all buttons. This makes it easier to target if somebody\n            // wants to target all Material buttons. We do it here rather than `host` to ensure that\n            // the class is applied to derived classes.\n            elementRef.nativeElement.classList.add('mat-button-base');\n            if (this.isRoundButton) {\n                this.color = DEFAULT_ROUND_BUTTON_COLOR;\n            }\n        }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this._elementRef, true);\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        /** Focuses the button. */\n        focus(origin = 'program', options) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        _getHostElement() {\n            return this._elementRef.nativeElement;\n        }\n        _isRippleDisabled() {\n            return this.disableRipple || this.disabled;\n        }\n        /** Gets whether the button has one of the given attributes. */\n        _hasHostAttributes(...attributes) {\n            return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n        }\n    }\nMatButton.ɵfac = function MatButton_Factory(t) { return new (t || MatButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButton, selectors: [[\"button\", \"mat-button\", \"\"], [\"button\", \"mat-raised-button\", \"\"], [\"button\", \"mat-icon-button\", \"\"], [\"button\", \"mat-fab\", \"\"], [\"button\", \"mat-mini-fab\", \"\"], [\"button\", \"mat-stroked-button\", \"\"], [\"button\", \"mat-flat-button\", \"\"]], viewQuery: function MatButton_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatRipple, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 3, hostBindings: function MatButton_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\" }, exportAs: [\"matButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 5, consts: [[1, \"mat-button-wrapper\"], [\"matRipple\", \"\", 1, \"mat-button-ripple\", 3, \"matRippleDisabled\", \"matRippleCentered\", \"matRippleTrigger\"], [1, \"mat-button-focus-overlay\"]], template: function MatButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\", 1);\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-button-ripple-round\", ctx.isRoundButton || ctx.isIconButton);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", ctx.isIconButton)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatButton.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatButton.propDecorators = {\n        ripple: [{ type: ViewChild, args: [MatRipple,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButton, [{\n        type: Component,\n        args: [{\n                selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n                exportAs: 'matButton',\n                host: {\n                    '[attr.disabled]': 'disabled || null',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    'class': 'mat-focus-indicator'\n                },\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<div matRipple class=\\\"mat-button-ripple\\\"\\n     [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"isIconButton\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\\n<div class=\\\"mat-button-focus-overlay\\\"></div>\\n\",\n                inputs: ['disabled', 'disableRipple', 'color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n    return MatButton;\n})();\n/**\n * Material design anchor button.\n */\nlet MatAnchor = /** @class */ (() => {\n    class MatAnchor extends MatButton {\n        constructor(focusMonitor, elementRef, animationMode) {\n            super(elementRef, focusMonitor, animationMode);\n        }\n        _haltDisabledEvents(event) {\n            // A disabled button shouldn't apply any actions\n            if (this.disabled) {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        }\n    }\nMatAnchor.ɵfac = function MatAnchor_Factory(t) { return new (t || MatAnchor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatAnchor.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAnchor, selectors: [[\"a\", \"mat-button\", \"\"], [\"a\", \"mat-raised-button\", \"\"], [\"a\", \"mat-icon-button\", \"\"], [\"a\", \"mat-fab\", \"\"], [\"a\", \"mat-mini-fab\", \"\"], [\"a\", \"mat-stroked-button\", \"\"], [\"a\", \"mat-flat-button\", \"\"]], hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 5, hostBindings: function MatAnchor_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatAnchor_click_HostBindingHandler($event) { return ctx._haltDisabledEvents($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex || 0)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString());\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\" }, exportAs: [\"matButton\", \"matAnchor\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 5, consts: [[1, \"mat-button-wrapper\"], [\"matRipple\", \"\", 1, \"mat-button-ripple\", 3, \"matRippleDisabled\", \"matRippleCentered\", \"matRippleTrigger\"], [1, \"mat-button-focus-overlay\"]], template: function MatAnchor_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(2, \"div\", 1);\n        ɵngcc0.ɵɵelement(3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-button-ripple-round\", ctx.isRoundButton || ctx.isIconButton);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", ctx.isIconButton)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatAnchor.ctorParameters = () => [\n        { type: FocusMonitor },\n        { type: ElementRef },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatAnchor.propDecorators = {\n        tabIndex: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAnchor, [{\n        type: Component,\n        args: [{\n                selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n                exportAs: 'matButton, matAnchor',\n                host: {\n                    // Note that we ignore the user-specified tabindex when it's disabled for\n                    // consistency with the `mat-button` applied on native buttons where even\n                    // though they have an index, they're not tabbable.\n                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '(click)': '_haltDisabledEvents($event)',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    'class': 'mat-focus-indicator'\n                },\n                inputs: ['disabled', 'disableRipple', 'color'],\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<div matRipple class=\\\"mat-button-ripple\\\"\\n     [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"isIconButton\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\\n<div class=\\\"mat-button-focus-overlay\\\"></div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }] }); })();\n    return MatAnchor;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatButtonModule = /** @class */ (() => {\n    class MatButtonModule {\n    }\nMatButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonModule });\nMatButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonModule_Factory(t) { return new (t || MatButtonModule)(); }, imports: [[\n            MatRippleModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonModule, { declarations: function () { return [MatButton, MatAnchor]; }, imports: function () { return [MatRippleModule,\n        MatCommonModule]; }, exports: function () { return [MatButton, MatAnchor, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatButton,\n                    MatAnchor,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatButton,\n                    MatAnchor,\n                ]\n            }]\n    }], null, null); })();\n    return MatButtonModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatAnchor, MatButton, MatButtonModule };\n\n//# sourceMappingURL=button.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { NgModule, ɵɵdefineInjectable, ɵɵinject, Injectable, NgZone } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nlet LayoutModule = /** @class */ (() => {\n    class LayoutModule {\n    }\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n    return LayoutModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nlet MediaMatcher = /** @class */ (() => {\n    class MediaMatcher {\n        constructor(_platform) {\n            this._platform = _platform;\n            this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n                // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                // call it from a different scope.\n                window.matchMedia.bind(window) :\n                noopMatchMedia;\n        }\n        /**\n         * Evaluates the given media query and returns the native MediaQueryList from which results\n         * can be retrieved.\n         * Confirms the layout engine will trigger for the selector query provided and returns the\n         * MediaQueryList for the query provided.\n         */\n        matchMedia(query) {\n            if (this._platform.WEBKIT) {\n                createEmptyStyleRule(query);\n            }\n            return this._matchMedia(query);\n        }\n    }\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\n    MediaMatcher.ɵprov = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n    MediaMatcher.ctorParameters = () => [\n        { type: Platform }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n    return MediaMatcher;\n})();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nlet BreakpointObserver = /** @class */ (() => {\n    class BreakpointObserver {\n        constructor(_mediaMatcher, _zone) {\n            this._mediaMatcher = _mediaMatcher;\n            this._zone = _zone;\n            /**  A map of all media queries currently being listened for. */\n            this._queries = new Map();\n            /** A subject for all other observables to takeUntil based on. */\n            this._destroySubject = new Subject();\n        }\n        /** Completes the active subject, signalling to all other observables to complete. */\n        ngOnDestroy() {\n            this._destroySubject.next();\n            this._destroySubject.complete();\n        }\n        /**\n         * Whether one or more media queries match the current viewport size.\n         * @param value One or more media queries to check.\n         * @returns Whether any of the media queries match.\n         */\n        isMatched(value) {\n            const queries = splitQueries(coerceArray(value));\n            return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n        }\n        /**\n         * Gets an observable of results for the given queries that will emit new results for any changes\n         * in matching of the given queries.\n         * @param value One or more media queries to check.\n         * @returns A stream of matches for the given queries.\n         */\n        observe(value) {\n            const queries = splitQueries(coerceArray(value));\n            const observables = queries.map(query => this._registerQuery(query).observable);\n            let stateObservable = combineLatest(observables);\n            // Emit the first state immediately, and then debounce the subsequent emissions.\n            stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n            return stateObservable.pipe(map((breakpointStates) => {\n                const response = {\n                    matches: false,\n                    breakpoints: {},\n                };\n                breakpointStates.forEach((state) => {\n                    response.matches = response.matches || state.matches;\n                    response.breakpoints[state.query] = state.matches;\n                });\n                return response;\n            }));\n        }\n        /** Registers a specific query to be listened for. */\n        _registerQuery(query) {\n            // Only set up a new MediaQueryList if it is not already being listened for.\n            if (this._queries.has(query)) {\n                return this._queries.get(query);\n            }\n            const mql = this._mediaMatcher.matchMedia(query);\n            // Create callback for match changes and add it is as a listener.\n            const queryObservable = new Observable((observer) => {\n                // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n                // back into the zone because matchMedia is only included in Zone.js by loading the\n                // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n                // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n                // patches it.\n                const handler = (e) => this._zone.run(() => observer.next(e));\n                mql.addListener(handler);\n                return () => {\n                    mql.removeListener(handler);\n                };\n            }).pipe(startWith(mql), map((nextMql) => ({ query, matches: nextMql.matches })), takeUntil(this._destroySubject));\n            // Add the MediaQueryList to the set of queries.\n            const output = { observable: queryObservable, mql };\n            this._queries.set(query, output);\n            return output;\n        }\n    }\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n    BreakpointObserver.ɵprov = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n    BreakpointObserver.ctorParameters = () => [\n        { type: MediaMatcher },\n        { type: NgZone }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n    return BreakpointObserver;\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map((query) => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, Injector, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nlet SimpleSnackBar = /** @class */ (() => {\n    class SimpleSnackBar {\n        constructor(snackBarRef, data) {\n            this.snackBarRef = snackBarRef;\n            this.data = data;\n        }\n        /** Performs the action on the snack bar. */\n        action() {\n            this.snackBarRef.dismissWithAction();\n        }\n        /** If the action button should be shown. */\n        get hasAction() {\n            return !!this.data.action;\n        }\n    }\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    SimpleSnackBar.ctorParameters = () => [\n        { type: MatSnackBarRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n    return SimpleSnackBar;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nlet MatSnackBarContainer = /** @class */ (() => {\n    class MatSnackBarContainer extends BasePortalOutlet {\n        constructor(_ngZone, _elementRef, _changeDetectorRef, \n        /** The snack bar configuration. */\n        snackBarConfig) {\n            super();\n            this._ngZone = _ngZone;\n            this._elementRef = _elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this.snackBarConfig = snackBarConfig;\n            /** Whether the component has been destroyed. */\n            this._destroyed = false;\n            /** Subject for notifying that the snack bar has exited from view. */\n            this._onExit = new Subject();\n            /** Subject for notifying that the snack bar has finished entering the view. */\n            this._onEnter = new Subject();\n            /** The state of the snack bar animations. */\n            this._animationState = 'void';\n            /**\n             * Attaches a DOM portal to the snack bar container.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            this.attachDomPortal = (portal) => {\n                this._assertNotAttached();\n                this._applySnackBarClasses();\n                return this._portalOutlet.attachDomPortal(portal);\n            };\n            // Based on the ARIA spec, `alert` and `status` roles have an\n            // implicit `assertive` and `polite` politeness respectively.\n            if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n                this._role = 'alert';\n            }\n            else if (snackBarConfig.politeness === 'off') {\n                this._role = null;\n            }\n            else {\n                this._role = 'status';\n            }\n        }\n        /** Attach a component portal as content to this snack bar container. */\n        attachComponentPortal(portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachComponentPortal(portal);\n        }\n        /** Attach a template portal as content to this snack bar container. */\n        attachTemplatePortal(portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        }\n        /** Handle end of animations, updating the state of the snackbar. */\n        onAnimationEnd(event) {\n            const { fromState, toState } = event;\n            if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n                this._completeExit();\n            }\n            if (toState === 'visible') {\n                // Note: we shouldn't use `this` inside the zone callback,\n                // because it can cause a memory leak.\n                const onEnter = this._onEnter;\n                this._ngZone.run(() => {\n                    onEnter.next();\n                    onEnter.complete();\n                });\n            }\n        }\n        /** Begin animation of snack bar entrance into view. */\n        enter() {\n            if (!this._destroyed) {\n                this._animationState = 'visible';\n                this._changeDetectorRef.detectChanges();\n            }\n        }\n        /** Begin animation of the snack bar exiting from view. */\n        exit() {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            return this._onExit;\n        }\n        /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n        ngOnDestroy() {\n            this._destroyed = true;\n            this._completeExit();\n        }\n        /**\n         * Waits for the zone to settle before removing the element. Helps prevent\n         * errors where we end up removing an element which is in the middle of an animation.\n         */\n        _completeExit() {\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        }\n        /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n        _applySnackBarClasses() {\n            const element = this._elementRef.nativeElement;\n            const panelClasses = this.snackBarConfig.panelClass;\n            if (panelClasses) {\n                if (Array.isArray(panelClasses)) {\n                    // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                    panelClasses.forEach(cssClass => element.classList.add(cssClass));\n                }\n                else {\n                    element.classList.add(panelClasses);\n                }\n            }\n            if (this.snackBarConfig.horizontalPosition === 'center') {\n                element.classList.add('mat-snack-bar-center');\n            }\n            if (this.snackBarConfig.verticalPosition === 'top') {\n                element.classList.add('mat-snack-bar-top');\n            }\n        }\n        /** Asserts that no content is already attached to the container. */\n        _assertNotAttached() {\n            if (this._portalOutlet.hasAttached()) {\n                throw Error('Attempting to attach snack bar content after content is already attached');\n            }\n        }\n    }\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 2, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\n    MatSnackBarContainer.ctorParameters = () => [\n        { type: NgZone },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: MatSnackBarConfig }\n    ];\n    MatSnackBarContainer.propDecorators = {\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n    return MatSnackBarContainer;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSnackBarModule = /** @class */ (() => {\n    class MatSnackBarModule {\n    }\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n    return MatSnackBarModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nlet MatSnackBar = /** @class */ (() => {\n    class MatSnackBar {\n        constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n            this._overlay = _overlay;\n            this._live = _live;\n            this._injector = _injector;\n            this._breakpointObserver = _breakpointObserver;\n            this._parentSnackBar = _parentSnackBar;\n            this._defaultConfig = _defaultConfig;\n            /**\n             * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n             * If there is a parent snack-bar service, all operations should delegate to that parent\n             * via `_openedSnackBarRef`.\n             */\n            this._snackBarRefAtThisLevel = null;\n        }\n        /** Reference to the currently opened snackbar at *any* level. */\n        get _openedSnackBarRef() {\n            const parent = this._parentSnackBar;\n            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        }\n        set _openedSnackBarRef(value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        }\n        /**\n         * Creates and dispatches a snack bar with a custom component for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param component Component to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        openFromComponent(component, config) {\n            return this._attach(component, config);\n        }\n        /**\n         * Creates and dispatches a snack bar with a custom template for the content, removing any\n         * currently opened snack bars.\n         *\n         * @param template Template to be instantiated.\n         * @param config Extra configuration for the snack bar.\n         */\n        openFromTemplate(template, config) {\n            return this._attach(template, config);\n        }\n        /**\n         * Opens a snackbar with a message and an optional action.\n         * @param message The message to show in the snackbar.\n         * @param action The label for the snackbar action.\n         * @param config Additional configuration options for the snackbar.\n         */\n        open(message, action = '', config) {\n            const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n            // Since the user doesn't have access to the component, we can\n            // override the data to pass in our own message and action.\n            _config.data = { message, action };\n            if (!_config.announcementMessage) {\n                _config.announcementMessage = message;\n            }\n            return this.openFromComponent(SimpleSnackBar, _config);\n        }\n        /**\n         * Dismisses the currently-visible snack bar.\n         */\n        dismiss() {\n            if (this._openedSnackBarRef) {\n                this._openedSnackBarRef.dismiss();\n            }\n        }\n        ngOnDestroy() {\n            // Only dismiss the snack bar at the current level on destroy.\n            if (this._snackBarRefAtThisLevel) {\n                this._snackBarRefAtThisLevel.dismiss();\n            }\n        }\n        /**\n         * Attaches the snack bar container component to the overlay.\n         */\n        _attachSnackBarContainer(overlayRef, config) {\n            const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarConfig, config]\n            ]));\n            const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n            const containerRef = overlayRef.attach(containerPortal);\n            containerRef.instance.snackBarConfig = config;\n            return containerRef.instance;\n        }\n        /**\n         * Places a new component or a template as the content of the snack bar container.\n         */\n        _attach(content, userConfig) {\n            const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n            const overlayRef = this._createOverlay(config);\n            const container = this._attachSnackBarContainer(overlayRef, config);\n            const snackBarRef = new MatSnackBarRef(container, overlayRef);\n            if (content instanceof TemplateRef) {\n                const portal = new TemplatePortal(content, null, {\n                    $implicit: config.data,\n                    snackBarRef\n                });\n                snackBarRef.instance = container.attachTemplatePortal(portal);\n            }\n            else {\n                const injector = this._createInjector(config, snackBarRef);\n                const portal = new ComponentPortal(content, undefined, injector);\n                const contentRef = container.attachComponentPortal(portal);\n                // We can't pass this via the injector, because the injector is created earlier.\n                snackBarRef.instance = contentRef.instance;\n            }\n            // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n            // appropriate. This class is applied to the overlay element because the overlay must expand to\n            // fill the width of the screen for full width snackbars.\n            this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n                const classList = overlayRef.overlayElement.classList;\n                const className = 'mat-snack-bar-handset';\n                state.matches ? classList.add(className) : classList.remove(className);\n            });\n            this._animateSnackBar(snackBarRef, config);\n            this._openedSnackBarRef = snackBarRef;\n            return this._openedSnackBarRef;\n        }\n        /** Animates the old snack bar out and the new one in. */\n        _animateSnackBar(snackBarRef, config) {\n            // When the snackbar is dismissed, clear the reference to it.\n            snackBarRef.afterDismissed().subscribe(() => {\n                // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n                if (this._openedSnackBarRef == snackBarRef) {\n                    this._openedSnackBarRef = null;\n                }\n                if (config.announcementMessage) {\n                    this._live.clear();\n                }\n            });\n            if (this._openedSnackBarRef) {\n                // If a snack bar is already in view, dismiss it and enter the\n                // new snack bar after exit animation is complete.\n                this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                    snackBarRef.containerInstance.enter();\n                });\n                this._openedSnackBarRef.dismiss();\n            }\n            else {\n                // If no snack bar is in view, enter the new snack bar.\n                snackBarRef.containerInstance.enter();\n            }\n            // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n            if (config.duration && config.duration > 0) {\n                snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n            }\n            if (config.announcementMessage) {\n                this._live.announce(config.announcementMessage, config.politeness);\n            }\n        }\n        /**\n         * Creates a new overlay and places it in the correct location.\n         * @param config The user-specified snack bar config.\n         */\n        _createOverlay(config) {\n            const overlayConfig = new OverlayConfig();\n            overlayConfig.direction = config.direction;\n            let positionStrategy = this._overlay.position().global();\n            // Set horizontal position.\n            const isRtl = config.direction === 'rtl';\n            const isLeft = (config.horizontalPosition === 'left' ||\n                (config.horizontalPosition === 'start' && !isRtl) ||\n                (config.horizontalPosition === 'end' && isRtl));\n            const isRight = !isLeft && config.horizontalPosition !== 'center';\n            if (isLeft) {\n                positionStrategy.left('0');\n            }\n            else if (isRight) {\n                positionStrategy.right('0');\n            }\n            else {\n                positionStrategy.centerHorizontally();\n            }\n            // Set horizontal position.\n            if (config.verticalPosition === 'top') {\n                positionStrategy.top('0');\n            }\n            else {\n                positionStrategy.bottom('0');\n            }\n            overlayConfig.positionStrategy = positionStrategy;\n            return this._overlay.create(overlayConfig);\n        }\n        /**\n         * Creates an injector to be used inside of a snack bar component.\n         * @param config Config that was used to create the snack bar.\n         * @param snackBarRef Reference to the snack bar.\n         */\n        _createInjector(config, snackBarRef) {\n            const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            return new PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarRef, snackBarRef],\n                [MAT_SNACK_BAR_DATA, config.data]\n            ]));\n        }\n    }\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\n    MatSnackBar.ɵprov = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n    MatSnackBar.ctorParameters = () => [\n        { type: Overlay },\n        { type: LiveAnnouncer },\n        { type: Injector },\n        { type: BreakpointObserver },\n        { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return MatSnackBar;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map","import {\r\n\tMatSnackBar, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar\r\n} from '@angular/material/snack-bar';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ToasterService {\r\n\r\n\tprivate ref: MatSnackBarRef<SimpleSnackBar>;\r\n\tconstructor(private snackbar: MatSnackBar) { }\r\n\r\n\tcommonConfig: MatSnackBarConfig = {\r\n\t\tduration: 3000,\r\n\t\tverticalPosition: 'top',\r\n\t\thorizontalPosition: 'left'\r\n\t};\r\n\r\n\tinfo(message: string, application: string) {\r\n\t\tthis.open(message, application, 'info');\r\n\t}\r\n\twarn(message: string, application: string) {\r\n\t\tthis.open(message, application, 'warn');\r\n\t}\r\n\terror(message: string, application: string) {\r\n\t\tthis.open(message, application, 'error');\r\n\t}\r\n\tsuccess(message: string, application: string) {\r\n\t\tthis.open(message, application, 'success');\r\n\t}\r\n\r\n\tprivate open(message: string, application: string, panelClass: string) {\r\n\t\tthis.ref = this.snackbar.open(\r\n\t\t\t`${application}: ${message}`,\r\n\t\t\tnull,\r\n\t\t\t{ ...this.commonConfig, panelClass }\r\n\t\t);\r\n\t}\r\n}\r\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"*\", [[\"mat-card-footer\"]]];\nconst _c1 = [\"*\", \"mat-card-footer\"];\nconst _c2 = [[[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], [[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], \"*\"];\nconst _c3 = [\"[mat-card-avatar], [matCardAvatar]\", \"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"*\"];\nconst _c4 = [[[\"mat-card-title\"], [\"mat-card-subtitle\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardTitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], [[\"img\"]], \"*\"];\nconst _c5 = [\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\", \"img\", \"*\"];\nlet MatCardContent = /** @class */ (() => {\n    class MatCardContent {\n    }\nMatCardContent.ɵfac = function MatCardContent_Factory(t) { return new (t || MatCardContent)(); };\nMatCardContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardContent, selectors: [[\"mat-card-content\"], [\"\", \"mat-card-content\", \"\"], [\"\", \"matCardContent\", \"\"]], hostAttrs: [1, \"mat-card-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardContent, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            }]\n    }], null, null); })();\n    return MatCardContent;\n})();\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nlet MatCardTitle = /** @class */ (() => {\n    class MatCardTitle {\n    }\nMatCardTitle.ɵfac = function MatCardTitle_Factory(t) { return new (t || MatCardTitle)(); };\nMatCardTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardTitle, selectors: [[\"mat-card-title\"], [\"\", \"mat-card-title\", \"\"], [\"\", \"matCardTitle\", \"\"]], hostAttrs: [1, \"mat-card-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardTitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            }]\n    }], null, null); })();\n    return MatCardTitle;\n})();\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nlet MatCardSubtitle = /** @class */ (() => {\n    class MatCardSubtitle {\n    }\nMatCardSubtitle.ɵfac = function MatCardSubtitle_Factory(t) { return new (t || MatCardSubtitle)(); };\nMatCardSubtitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSubtitle, selectors: [[\"mat-card-subtitle\"], [\"\", \"mat-card-subtitle\", \"\"], [\"\", \"matCardSubtitle\", \"\"]], hostAttrs: [1, \"mat-card-subtitle\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardSubtitle, [{\n        type: Directive,\n        args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            }]\n    }], null, null); })();\n    return MatCardSubtitle;\n})();\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nlet MatCardActions = /** @class */ (() => {\n    class MatCardActions {\n        constructor() {\n            /** Position of the actions inside the card. */\n            this.align = 'start';\n        }\n    }\nMatCardActions.ɵfac = function MatCardActions_Factory(t) { return new (t || MatCardActions)(); };\nMatCardActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardActions, selectors: [[\"mat-card-actions\"]], hostAttrs: [1, \"mat-card-actions\"], hostVars: 2, hostBindings: function MatCardActions_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-card-actions-align-end\", ctx.align === \"end\");\n    } }, inputs: { align: \"align\" }, exportAs: [\"matCardActions\"] });\n    MatCardActions.propDecorators = {\n        align: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardActions, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"'\n                }\n            }]\n    }], function () { return []; }, { align: [{\n            type: Input\n        }] }); })();\n    return MatCardActions;\n})();\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\nlet MatCardFooter = /** @class */ (() => {\n    class MatCardFooter {\n    }\nMatCardFooter.ɵfac = function MatCardFooter_Factory(t) { return new (t || MatCardFooter)(); };\nMatCardFooter.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardFooter, selectors: [[\"mat-card-footer\"]], hostAttrs: [1, \"mat-card-footer\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardFooter, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            }]\n    }], null, null); })();\n    return MatCardFooter;\n})();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nlet MatCardImage = /** @class */ (() => {\n    class MatCardImage {\n    }\nMatCardImage.ɵfac = function MatCardImage_Factory(t) { return new (t || MatCardImage)(); };\nMatCardImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardImage, selectors: [[\"\", \"mat-card-image\", \"\"], [\"\", \"matCardImage\", \"\"]], hostAttrs: [1, \"mat-card-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            }]\n    }], null, null); })();\n    return MatCardImage;\n})();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nlet MatCardSmImage = /** @class */ (() => {\n    class MatCardSmImage {\n    }\nMatCardSmImage.ɵfac = function MatCardSmImage_Factory(t) { return new (t || MatCardSmImage)(); };\nMatCardSmImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardSmImage, selectors: [[\"\", \"mat-card-sm-image\", \"\"], [\"\", \"matCardImageSmall\", \"\"]], hostAttrs: [1, \"mat-card-sm-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardSmImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            }]\n    }], null, null); })();\n    return MatCardSmImage;\n})();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nlet MatCardMdImage = /** @class */ (() => {\n    class MatCardMdImage {\n    }\nMatCardMdImage.ɵfac = function MatCardMdImage_Factory(t) { return new (t || MatCardMdImage)(); };\nMatCardMdImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardMdImage, selectors: [[\"\", \"mat-card-md-image\", \"\"], [\"\", \"matCardImageMedium\", \"\"]], hostAttrs: [1, \"mat-card-md-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardMdImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            }]\n    }], null, null); })();\n    return MatCardMdImage;\n})();\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nlet MatCardLgImage = /** @class */ (() => {\n    class MatCardLgImage {\n    }\nMatCardLgImage.ɵfac = function MatCardLgImage_Factory(t) { return new (t || MatCardLgImage)(); };\nMatCardLgImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardLgImage, selectors: [[\"\", \"mat-card-lg-image\", \"\"], [\"\", \"matCardImageLarge\", \"\"]], hostAttrs: [1, \"mat-card-lg-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardLgImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            }]\n    }], null, null); })();\n    return MatCardLgImage;\n})();\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nlet MatCardXlImage = /** @class */ (() => {\n    class MatCardXlImage {\n    }\nMatCardXlImage.ɵfac = function MatCardXlImage_Factory(t) { return new (t || MatCardXlImage)(); };\nMatCardXlImage.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardXlImage, selectors: [[\"\", \"mat-card-xl-image\", \"\"], [\"\", \"matCardImageXLarge\", \"\"]], hostAttrs: [1, \"mat-card-xl-image\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardXlImage, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            }]\n    }], null, null); })();\n    return MatCardXlImage;\n})();\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\nlet MatCardAvatar = /** @class */ (() => {\n    class MatCardAvatar {\n    }\nMatCardAvatar.ɵfac = function MatCardAvatar_Factory(t) { return new (t || MatCardAvatar)(); };\nMatCardAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCardAvatar, selectors: [[\"\", \"mat-card-avatar\", \"\"], [\"\", \"matCardAvatar\", \"\"]], hostAttrs: [1, \"mat-card-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardAvatar, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            }]\n    }], null, null); })();\n    return MatCardAvatar;\n})();\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nlet MatCard = /** @class */ (() => {\n    class MatCard {\n        // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n        constructor(_animationMode) {\n            this._animationMode = _animationMode;\n        }\n    }\nMatCard.ɵfac = function MatCard_Factory(t) { return new (t || MatCard)(ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatCard.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCard, selectors: [[\"mat-card\"]], hostAttrs: [1, \"mat-card\", \"mat-focus-indicator\"], hostVars: 2, hostBindings: function MatCard_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, exportAs: [\"matCard\"], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatCard_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatCard.ctorParameters = () => [\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCard, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card mat-focus-indicator',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }]\n    }], function () { return [{ type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, null); })();\n    return MatCard;\n})();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\nlet MatCardHeader = /** @class */ (() => {\n    class MatCardHeader {\n    }\nMatCardHeader.ɵfac = function MatCardHeader_Factory(t) { return new (t || MatCardHeader)(); };\nMatCardHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardHeader, selectors: [[\"mat-card-header\"]], hostAttrs: [1, \"mat-card-header\"], ngContentSelectors: _c3, decls: 4, vars: 0, consts: [[1, \"mat-card-header-text\"]], template: function MatCardHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }]\n    }], null, null); })();\n    return MatCardHeader;\n})();\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\nlet MatCardTitleGroup = /** @class */ (() => {\n    class MatCardTitleGroup {\n    }\nMatCardTitleGroup.ɵfac = function MatCardTitleGroup_Factory(t) { return new (t || MatCardTitleGroup)(); };\nMatCardTitleGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCardTitleGroup, selectors: [[\"mat-card-title-group\"]], hostAttrs: [1, \"mat-card-title-group\"], ngContentSelectors: _c5, decls: 4, vars: 0, template: function MatCardTitleGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardTitleGroup, [{\n        type: Component,\n        args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }]\n    }], null, null); })();\n    return MatCardTitleGroup;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatCardModule = /** @class */ (() => {\n    class MatCardModule {\n    }\nMatCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCardModule });\nMatCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCardModule_Factory(t) { return new (t || MatCardModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCardModule, { declarations: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle, MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage, MatCardXlImage, MatCardAvatar, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCardModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ]\n            }]\n    }], null, null); })();\n    return MatCardModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n\n//# sourceMappingURL=card.js.map","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { ToasterService } from '../core/toaster.service';\r\nimport { TabManagerService } from '../core/tab-manager.service';\r\n\r\n\r\n@Component({\r\n\tselector: 'hst-error',\r\n\ttemplateUrl: './error.component.html',\r\n\tstyleUrls: ['./error.component.less']\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n\r\n\tconstructor(\r\n\t\tprivate toaster: ToasterService,\r\n\t\tprivate tabManager: TabManagerService\r\n\t) { }\r\n\r\n\tngOnInit() {\r\n\t\t// const selectedTabName = this.tabManager.currentTab?.display || '';\r\n\t\tconst selectedTabName = '';\r\n\t\tconst message = `שגיאה בטעינת הטאב ${selectedTabName}`;\r\n\t\tthis.toaster.error(message, 'הוסטל');\r\n\t}\r\n\r\n}\r\n","<mat-card color=\"warn\">\r\n\t<mat-card-title>שגיאה!</mat-card-title>\r\n\t<mat-card-content>\r\n\t\t<div>ארעה שגיאה בטעינת הטאב</div>\r\n\t\t<div>נא לנסות שנית</div>\r\n\t</mat-card-content>\r\n</mat-card>","import { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"primaryValueBar\"];\nclass MatProgressBarBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/** @docs-private */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nlet MatProgressBar = /** @class */ (() => {\n    class MatProgressBar extends _MatProgressBarMixinBase {\n        constructor(_elementRef, _ngZone, _animationMode, \n        /**\n         * @deprecated `location` parameter to be made required.\n         * @breaking-change 8.0.0\n         */\n        location) {\n            super(_elementRef);\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._animationMode = _animationMode;\n            /** Flag that indicates whether NoopAnimations mode is set to true. */\n            this._isNoopAnimation = false;\n            this._value = 0;\n            this._bufferValue = 0;\n            /**\n             * Event emitted when animation of the primary progress bar completes. This event will not\n             * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n             * animations (indeterminate and query).\n             */\n            this.animationEnd = new EventEmitter();\n            /** Reference to animation end subscription to be unsubscribed on destroy. */\n            this._animationEndSubscription = Subscription.EMPTY;\n            /**\n             * Mode of the progress bar.\n             *\n             * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n             * 'determinate'.\n             * Mirrored to mode attribute.\n             */\n            this.mode = 'determinate';\n            /** ID of the progress bar. */\n            this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n            // We need to prefix the SVG reference with the current path, otherwise they won't work\n            // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n            // because named route URLs can contain parentheses (see #12338). Also we don't use since\n            // we can't tell the difference between whether\n            // the consumer is using the hash location strategy or not, because `Location` normalizes\n            // both `/#/foo/bar` and `/foo/bar` to the same thing.\n            const path = location ? location.getPathname().split('#')[0] : '';\n            this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n            this._isNoopAnimation = _animationMode === 'NoopAnimations';\n        }\n        /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n        get value() { return this._value; }\n        set value(v) {\n            this._value = clamp(coerceNumberProperty(v) || 0);\n        }\n        /** Buffer value of the progress bar. Defaults to zero. */\n        get bufferValue() { return this._bufferValue; }\n        set bufferValue(v) { this._bufferValue = clamp(v || 0); }\n        /** Gets the current transform value for the progress bar's primary indicator. */\n        _primaryTransform() {\n            const scale = this.value / 100;\n            return { transform: `scaleX(${scale})` };\n        }\n        /**\n         * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n         * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n         */\n        _bufferTransform() {\n            if (this.mode === 'buffer') {\n                const scale = this.bufferValue / 100;\n                return { transform: `scaleX(${scale})` };\n            }\n            return null;\n        }\n        ngAfterViewInit() {\n            // Run outside angular so change detection didn't get triggered on every transition end\n            // instead only on the animation that we care about (primary value bar's transitionend)\n            this._ngZone.runOutsideAngular((() => {\n                const element = this._primaryValueBar.nativeElement;\n                this._animationEndSubscription =\n                    fromEvent(element, 'transitionend')\n                        .pipe(filter(((e) => e.target === element)))\n                        .subscribe(() => {\n                        if (this.mode === 'determinate' || this.mode === 'buffer') {\n                            this._ngZone.run(() => this.animationEnd.next({ value: this.value }));\n                        }\n                    });\n            }));\n        }\n        ngOnDestroy() {\n            this._animationEndSubscription.unsubscribe();\n        }\n    }\nMatProgressBar.ɵfac = function MatProgressBar_Factory(t) { return new (t || MatProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8)); };\nMatProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressBar, selectors: [[\"mat-progress-bar\"]], viewQuery: function MatProgressBar_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n    } }, hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"mat-progress-bar\"], hostVars: 4, hostBindings: function MatProgressBar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.mode === \"indeterminate\" || ctx.mode === \"query\" ? null : ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n    } }, inputs: { color: \"color\", mode: \"mode\", value: \"value\", bufferValue: \"bufferValue\" }, outputs: { animationEnd: \"animationEnd\" }, exportAs: [\"matProgressBar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 4, consts: [[\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]], template: function MatProgressBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"defs\");\n        ɵngcc0.ɵɵelementStart(2, \"pattern\", 1);\n        ɵngcc0.ɵɵelement(3, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"rect\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n        ɵngcc0.ɵɵelement(6, \"div\", 5, 6);\n        ɵngcc0.ɵɵelement(8, \"div\", 7);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.progressbarId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n    } }, directives: [ɵngcc1.NgStyle], styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatProgressBar.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PROGRESS_BAR_LOCATION,] }] }\n    ];\n    MatProgressBar.propDecorators = {\n        value: [{ type: Input }],\n        bufferValue: [{ type: Input }],\n        _primaryValueBar: [{ type: ViewChild, args: ['primaryValueBar',] }],\n        animationEnd: [{ type: Output }],\n        mode: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-bar',\n                exportAs: 'matProgressBar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                    '[attr.mode]': 'mode',\n                    'class': 'mat-progress-bar',\n                    '[class._mat-animation-noopable]': '_isNoopAnimation'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  The background div is named as such because it appears below the other divs and is not sized based\\n  on values.\\n-->\\n<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n  <defs>\\n    <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n      <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n    </pattern>\\n  </defs>\\n  <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n</svg>\\n<div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n<div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n<div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_PROGRESS_BAR_LOCATION]\n            }] }]; }, { animationEnd: [{\n            type: Output\n        }], mode: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], bufferValue: [{\n            type: Input\n        }], _primaryValueBar: [{\n            type: ViewChild,\n            args: ['primaryValueBar']\n        }] }); })();\n    return MatProgressBar;\n})();\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatProgressBarModule = /** @class */ (() => {\n    class MatProgressBarModule {\n    }\nMatProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressBarModule });\nMatProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressBarModule_Factory(t) { return new (t || MatProgressBarModule)(); }, imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressBarModule, { declarations: function () { return [MatProgressBar]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatProgressBar, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatProgressBar, MatCommonModule],\n                declarations: [MatProgressBar]\n            }]\n    }], null, null); })();\n    return MatProgressBarModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };\n\n//# sourceMappingURL=progress-bar.js.map","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'hst-loading',\r\n  templateUrl: './loading.component.html',\r\n  styleUrls: ['./loading.component.less']\r\n})\r\nexport class LoadingComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>","import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { Directive, Input, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MAT_LABEL_GLOBAL_OPTIONS, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"underline\"];\nconst _c1 = [\"connectionContainer\"];\nconst _c2 = [\"inputContainer\"];\nconst _c3 = [\"label\"];\nfunction MatFormField_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 14);\n    ɵngcc0.ɵɵelement(2, \"div\", 15);\n    ɵngcc0.ɵɵelement(3, \"div\", 16);\n    ɵngcc0.ɵɵelement(4, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(5, \"div\", 18);\n    ɵngcc0.ɵɵelement(6, \"div\", 15);\n    ɵngcc0.ɵɵelement(7, \"div\", 16);\n    ɵngcc0.ɵɵelement(8, \"div\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} }\nfunction MatFormField_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_label_9_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementStart(2, \"span\");\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r10._control.placeholder);\n} }\nfunction MatFormField_label_9_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatFormField_label_9_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 23);\n    ɵngcc0.ɵɵtext(1, \" *\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_label_9_Template(rf, ctx) { if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 20, 21);\n    ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatFormField_label_9_Template_label_cdkObserveContent_0_listener() { ɵngcc0.ɵɵrestoreView(_r14); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.updateOutlineGap(); });\n    ɵngcc0.ɵɵtemplate(2, MatFormField_label_9_ng_container_2_Template, 4, 1, \"ng-container\", 12);\n    ɵngcc0.ɵɵtemplate(3, MatFormField_label_9_3_Template, 1, 0, undefined, 12);\n    ɵngcc0.ɵɵtemplate(4, MatFormField_label_9_span_4_Template, 2, 0, \"span\", 22);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat)(\"mat-form-field-empty\", ctx_r4._control.empty && !ctx_r4._shouldAlwaysFloat)(\"mat-accent\", ctx_r4.color == \"accent\")(\"mat-warn\", ctx_r4.color == \"warn\");\n    ɵngcc0.ɵɵproperty(\"cdkObserveContentDisabled\", ctx_r4.appearance != \"outline\")(\"id\", ctx_r4._labelId)(\"ngSwitch\", ctx_r4._hasLabel());\n    ɵngcc0.ɵɵattribute(\"for\", ctx_r4._control.id)(\"aria-owns\", ctx_r4._control.id);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r4.hideRequiredMarker && ctx_r4._control.required && !ctx_r4._control.disabled);\n} }\nfunction MatFormField_div_10_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 24);\n    ɵngcc0.ɵɵprojection(1, 4);\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction MatFormField_div_11_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 25, 26);\n    ɵngcc0.ɵɵelement(2, \"span\", 27);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"mat-accent\", ctx_r6.color == \"accent\")(\"mat-warn\", ctx_r6.color == \"warn\");\n} }\nfunction MatFormField_div_13_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1, 5);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r7._subscriptAnimationState);\n} }\nfunction MatFormField_div_14_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 31);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r16._hintLabelId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r16.hintLabel);\n} }\nfunction MatFormField_div_14_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 28);\n    ɵngcc0.ɵɵtemplate(1, MatFormField_div_14_div_1_Template, 2, 2, \"div\", 29);\n    ɵngcc0.ɵɵprojection(2, 6);\n    ɵngcc0.ɵɵelement(3, \"div\", 30);\n    ɵngcc0.ɵɵprojection(4, 7);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transitionMessages\", ctx_r8._subscriptAnimationState);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r8.hintLabel);\n} }\nconst _c4 = [\"*\", [[\"\", \"matPrefix\", \"\"]], [[\"mat-placeholder\"]], [[\"mat-label\"]], [[\"\", \"matSuffix\", \"\"]], [[\"mat-error\"]], [[\"mat-hint\", 3, \"align\", \"end\"]], [[\"mat-hint\", \"align\", \"end\"]]];\nconst _c5 = [\"*\", \"[matPrefix]\", \"mat-placeholder\", \"mat-label\", \"[matSuffix]\", \"mat-error\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"];\nlet nextUniqueId = 0;\n/** Single error message to be shown underneath the form field. */\nlet MatError = /** @class */ (() => {\n    class MatError {\n        constructor() {\n            this.id = `mat-error-${nextUniqueId++}`;\n        }\n    }\nMatError.ɵfac = function MatError_Factory(t) { return new (t || MatError)(); };\nMatError.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatError, selectors: [[\"mat-error\"]], hostAttrs: [\"role\", \"alert\", 1, \"mat-error\"], hostVars: 1, hostBindings: function MatError_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" } });\n    MatError.propDecorators = {\n        id: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatError, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-error',\n                host: {\n                    'class': 'mat-error',\n                    'role': 'alert',\n                    '[attr.id]': 'id'\n                }\n            }]\n    }], function () { return []; }, { id: [{\n            type: Input\n        }] }); })();\n    return MatError;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-100%)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** An interface which allows a control to work inside of a `MatFormField`. */\nlet MatFormFieldControl = /** @class */ (() => {\n    class MatFormFieldControl {\n    }\nMatFormFieldControl.ɵfac = function MatFormFieldControl_Factory(t) { return new (t || MatFormFieldControl)(); };\nMatFormFieldControl.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatFormFieldControl });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormFieldControl, [{\n        type: Directive\n    }], null, null); })();\n    return MatFormFieldControl;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/** Hint text to be shown underneath the form field control. */\nlet MatHint = /** @class */ (() => {\n    class MatHint {\n        constructor() {\n            /** Whether to align the hint label at the start or end of the line. */\n            this.align = 'start';\n            /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n            this.id = `mat-hint-${nextUniqueId$1++}`;\n        }\n    }\nMatHint.ɵfac = function MatHint_Factory(t) { return new (t || MatHint)(); };\nMatHint.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatHint, selectors: [[\"mat-hint\"]], hostAttrs: [1, \"mat-hint\"], hostVars: 4, hostBindings: function MatHint_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"align\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-right\", ctx.align == \"end\");\n    } }, inputs: { align: \"align\", id: \"id\" } });\n    MatHint.propDecorators = {\n        align: [{ type: Input }],\n        id: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHint, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-hint',\n                host: {\n                    'class': 'mat-hint',\n                    '[class.mat-right]': 'align == \"end\"',\n                    '[attr.id]': 'id',\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null'\n                }\n            }]\n    }], function () { return []; }, { align: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }] }); })();\n    return MatHint;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nlet MatLabel = /** @class */ (() => {\n    class MatLabel {\n    }\nMatLabel.ɵfac = function MatLabel_Factory(t) { return new (t || MatLabel)(); };\nMatLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatLabel, selectors: [[\"mat-label\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatLabel, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-label'\n            }]\n    }], null, null); })();\n    return MatLabel;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nlet MatPlaceholder = /** @class */ (() => {\n    class MatPlaceholder {\n    }\nMatPlaceholder.ɵfac = function MatPlaceholder_Factory(t) { return new (t || MatPlaceholder)(); };\nMatPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatPlaceholder, selectors: [[\"mat-placeholder\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-placeholder'\n            }]\n    }], null, null); })();\n    return MatPlaceholder;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Prefix to be placed in front of the form field. */\nlet MatPrefix = /** @class */ (() => {\n    class MatPrefix {\n    }\nMatPrefix.ɵfac = function MatPrefix_Factory(t) { return new (t || MatPrefix)(); };\nMatPrefix.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatPrefix, selectors: [[\"\", \"matPrefix\", \"\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPrefix, [{\n        type: Directive,\n        args: [{\n                selector: '[matPrefix]'\n            }]\n    }], null, null); })();\n    return MatPrefix;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Suffix to be placed at the end of the form field. */\nlet MatSuffix = /** @class */ (() => {\n    class MatSuffix {\n    }\nMatSuffix.ɵfac = function MatSuffix_Factory(t) { return new (t || MatSuffix)(); };\nMatSuffix.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSuffix, selectors: [[\"\", \"matSuffix\", \"\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSuffix, [{\n        type: Directive,\n        args: [{\n                selector: '[matSuffix]'\n            }]\n    }], null, null); })();\n    return MatSuffix;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nlet MatFormField = /** @class */ (() => {\n    class MatFormField extends _MatFormFieldMixinBase {\n        constructor(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n            super(_elementRef);\n            this._elementRef = _elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._defaults = _defaults;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            /**\n             * Whether the outline gap needs to be calculated\n             * immediately on the next change detection run.\n             */\n            this._outlineGapCalculationNeededImmediately = false;\n            /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n            this._outlineGapCalculationNeededOnStable = false;\n            this._destroyed = new Subject();\n            /** Override for the logic that disables the label animation in certain cases. */\n            this._showAlwaysAnimate = false;\n            /** State of the mat-hint and mat-error animations. */\n            this._subscriptAnimationState = '';\n            this._hintLabel = '';\n            // Unique id for the hint label.\n            this._hintLabelId = `mat-hint-${nextUniqueId$2++}`;\n            // Unique id for the internal form field label.\n            this._labelId = `mat-form-field-label-${nextUniqueId$2++}`;\n            this._labelOptions = labelOptions ? labelOptions : {};\n            this.floatLabel = this._getDefaultFloatLabelState();\n            this._animationsEnabled = _animationMode !== 'NoopAnimations';\n            // Set the default through here so we invoke the setter on the first run.\n            this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n            this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n                _defaults.hideRequiredMarker : false;\n        }\n        /** The form-field appearance style. */\n        get appearance() { return this._appearance; }\n        set appearance(value) {\n            const oldValue = this._appearance;\n            this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n            if (this._appearance === 'outline' && oldValue !== value) {\n                this._outlineGapCalculationNeededOnStable = true;\n            }\n        }\n        /** Whether the required marker should be hidden. */\n        get hideRequiredMarker() { return this._hideRequiredMarker; }\n        set hideRequiredMarker(value) {\n            this._hideRequiredMarker = coerceBooleanProperty(value);\n        }\n        /** Whether the floating label should always float or not. */\n        get _shouldAlwaysFloat() {\n            return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n        }\n        /** Whether the label can float or not. */\n        get _canLabelFloat() { return this.floatLabel !== 'never'; }\n        /** Text for the form field hint. */\n        get hintLabel() { return this._hintLabel; }\n        set hintLabel(value) {\n            this._hintLabel = value;\n            this._processHints();\n        }\n        /**\n         * Whether the label should always float, never float or float as the user types.\n         *\n         * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n         * way to make the floating label emulate the behavior of a standard input placeholder. However\n         * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n         * appearances the `never` option has been disabled in favor of just using the placeholder.\n         */\n        get floatLabel() {\n            return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n        }\n        set floatLabel(value) {\n            if (value !== this._floatLabel) {\n                this._floatLabel = value || this._getDefaultFloatLabelState();\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        get _control() {\n            // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n            //  We should clean this up once Ivy is the default renderer.\n            return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n        }\n        set _control(value) {\n            this._explicitFormFieldControl = value;\n        }\n        get _labelChild() {\n            return this._labelChildNonStatic || this._labelChildStatic;\n        }\n        /**\n         * Gets an ElementRef for the element that a overlay attached to the form-field should be\n         * positioned relative to.\n         */\n        getConnectedOverlayOrigin() {\n            return this._connectionContainerRef || this._elementRef;\n        }\n        ngAfterContentInit() {\n            this._validateControlChild();\n            const control = this._control;\n            if (control.controlType) {\n                this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n            }\n            // Subscribe to changes in the child control state in order to update the form field UI.\n            control.stateChanges.pipe(startWith(null)).subscribe(() => {\n                this._validatePlaceholders();\n                this._syncDescribedByIds();\n                this._changeDetectorRef.markForCheck();\n            });\n            // Run change detection if the value changes.\n            if (control.ngControl && control.ngControl.valueChanges) {\n                control.ngControl.valueChanges\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => this._changeDetectorRef.markForCheck());\n            }\n            // Note that we have to run outside of the `NgZone` explicitly,\n            // in order to avoid throwing users into an infinite loop\n            // if `zone-patch-rxjs` is included.\n            this._ngZone.runOutsideAngular(() => {\n                this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n                    if (this._outlineGapCalculationNeededOnStable) {\n                        this.updateOutlineGap();\n                    }\n                });\n            });\n            // Run change detection and update the outline if the suffix or prefix changes.\n            merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._changeDetectorRef.markForCheck();\n            });\n            // Re-validate when the number of hints changes.\n            this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n                this._processHints();\n                this._changeDetectorRef.markForCheck();\n            });\n            // Update the aria-described by when the number of errors changes.\n            this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n                this._syncDescribedByIds();\n                this._changeDetectorRef.markForCheck();\n            });\n            if (this._dir) {\n                this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                    if (typeof requestAnimationFrame === 'function') {\n                        this._ngZone.runOutsideAngular(() => {\n                            requestAnimationFrame(() => this.updateOutlineGap());\n                        });\n                    }\n                    else {\n                        this.updateOutlineGap();\n                    }\n                });\n            }\n        }\n        ngAfterContentChecked() {\n            this._validateControlChild();\n            if (this._outlineGapCalculationNeededImmediately) {\n                this.updateOutlineGap();\n            }\n        }\n        ngAfterViewInit() {\n            // Avoid animations on load.\n            this._subscriptAnimationState = 'enter';\n            this._changeDetectorRef.detectChanges();\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n        _shouldForward(prop) {\n            const ngControl = this._control ? this._control.ngControl : null;\n            return ngControl && ngControl[prop];\n        }\n        _hasPlaceholder() {\n            return !!(this._control && this._control.placeholder || this._placeholderChild);\n        }\n        _hasLabel() {\n            return !!this._labelChild;\n        }\n        _shouldLabelFloat() {\n            return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n        }\n        _hideControlPlaceholder() {\n            // In the legacy appearance the placeholder is promoted to a label if no label is given.\n            return this.appearance === 'legacy' && !this._hasLabel() ||\n                this._hasLabel() && !this._shouldLabelFloat();\n        }\n        _hasFloatingLabel() {\n            // In the legacy appearance the placeholder is promoted to a label if no label is given.\n            return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n        }\n        /** Determines whether to display hints or errors. */\n        _getDisplayedMessages() {\n            return (this._errorChildren && this._errorChildren.length > 0 &&\n                this._control.errorState) ? 'error' : 'hint';\n        }\n        /** Animates the placeholder up and locks it in position. */\n        _animateAndLockLabel() {\n            if (this._hasFloatingLabel() && this._canLabelFloat) {\n                // If animations are disabled, we shouldn't go in here,\n                // because the `transitionend` will never fire.\n                if (this._animationsEnabled && this._label) {\n                    this._showAlwaysAnimate = true;\n                    fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n                        this._showAlwaysAnimate = false;\n                    });\n                }\n                this.floatLabel = 'always';\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /**\n         * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n         * or child element with the `mat-placeholder` directive).\n         */\n        _validatePlaceholders() {\n            if (this._control.placeholder && this._placeholderChild) {\n                throw getMatFormFieldPlaceholderConflictError();\n            }\n        }\n        /** Does any extra processing that is required when handling the hints. */\n        _processHints() {\n            this._validateHints();\n            this._syncDescribedByIds();\n        }\n        /**\n         * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n         * attribute being considered as `align=\"start\"`.\n         */\n        _validateHints() {\n            if (this._hintChildren) {\n                let startHint;\n                let endHint;\n                this._hintChildren.forEach((hint) => {\n                    if (hint.align === 'start') {\n                        if (startHint || this.hintLabel) {\n                            throw getMatFormFieldDuplicatedHintError('start');\n                        }\n                        startHint = hint;\n                    }\n                    else if (hint.align === 'end') {\n                        if (endHint) {\n                            throw getMatFormFieldDuplicatedHintError('end');\n                        }\n                        endHint = hint;\n                    }\n                });\n            }\n        }\n        /** Gets the default float label state. */\n        _getDefaultFloatLabelState() {\n            return (this._defaults && this._defaults.floatLabel) || this._labelOptions.float || 'auto';\n        }\n        /**\n         * Sets the list of element IDs that describe the child control. This allows the control to update\n         * its `aria-describedby` attribute accordingly.\n         */\n        _syncDescribedByIds() {\n            if (this._control) {\n                let ids = [];\n                if (this._getDisplayedMessages() === 'hint') {\n                    const startHint = this._hintChildren ?\n                        this._hintChildren.find(hint => hint.align === 'start') : null;\n                    const endHint = this._hintChildren ?\n                        this._hintChildren.find(hint => hint.align === 'end') : null;\n                    if (startHint) {\n                        ids.push(startHint.id);\n                    }\n                    else if (this._hintLabel) {\n                        ids.push(this._hintLabelId);\n                    }\n                    if (endHint) {\n                        ids.push(endHint.id);\n                    }\n                }\n                else if (this._errorChildren) {\n                    ids = this._errorChildren.map(error => error.id);\n                }\n                this._control.setDescribedByIds(ids);\n            }\n        }\n        /** Throws an error if the form field's control is missing. */\n        _validateControlChild() {\n            if (!this._control) {\n                throw getMatFormFieldMissingControlError();\n            }\n        }\n        /**\n         * Updates the width and position of the gap in the outline. Only relevant for the outline\n         * appearance.\n         */\n        updateOutlineGap() {\n            const labelEl = this._label ? this._label.nativeElement : null;\n            if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n                !labelEl.textContent.trim()) {\n                return;\n            }\n            if (!this._platform.isBrowser) {\n                // getBoundingClientRect isn't available on the server.\n                return;\n            }\n            // If the element is not present in the DOM, the outline gap will need to be calculated\n            // the next time it is checked and in the DOM.\n            if (!this._isAttachedToDOM()) {\n                this._outlineGapCalculationNeededImmediately = true;\n                return;\n            }\n            let startWidth = 0;\n            let gapWidth = 0;\n            const container = this._connectionContainerRef.nativeElement;\n            const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n            const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n            if (this._label && this._label.nativeElement.children.length) {\n                const containerRect = container.getBoundingClientRect();\n                // If the container's width and height are zero, it means that the element is\n                // invisible and we can't calculate the outline gap. Mark the element as needing\n                // to be checked the next time the zone stabilizes. We can't do this immediately\n                // on the next change detection, because even if the element becomes visible,\n                // the `ClientRect` won't be reclaculated immediately. We reset the\n                // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n                if (containerRect.width === 0 && containerRect.height === 0) {\n                    this._outlineGapCalculationNeededOnStable = true;\n                    this._outlineGapCalculationNeededImmediately = false;\n                    return;\n                }\n                const containerStart = this._getStartEnd(containerRect);\n                const labelChildren = labelEl.children;\n                const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n                let labelWidth = 0;\n                for (let i = 0; i < labelChildren.length; i++) {\n                    labelWidth += labelChildren[i].offsetWidth;\n                }\n                startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n                gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n            }\n            for (let i = 0; i < startEls.length; i++) {\n                startEls[i].style.width = `${startWidth}px`;\n            }\n            for (let i = 0; i < gapEls.length; i++) {\n                gapEls[i].style.width = `${gapWidth}px`;\n            }\n            this._outlineGapCalculationNeededOnStable =\n                this._outlineGapCalculationNeededImmediately = false;\n        }\n        /** Gets the start end of the rect considering the current directionality. */\n        _getStartEnd(rect) {\n            return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n        }\n        /** Checks whether the form field is attached to the DOM. */\n        _isAttachedToDOM() {\n            const element = this._elementRef.nativeElement;\n            if (element.getRootNode) {\n                const rootNode = element.getRootNode();\n                // If the element is inside the DOM the root node will be either the document\n                // or the closest shadow root, otherwise it'll be the element itself.\n                return rootNode && rootNode !== element;\n            }\n            // Otherwise fall back to checking if it's in the document. This doesn't account for\n            // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n            return document.documentElement.contains(element);\n        }\n    }\nMatFormField.ɵfac = function MatFormField_Factory(t) { return new (t || MatFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_LABEL_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatFormField.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatFormField, selectors: [[\"mat-form-field\"]], contentQueries: function MatFormField_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatFormFieldControl, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, MatFormFieldControl, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLabel, true);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, MatLabel, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatError, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatHint, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatPrefix, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSuffix, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._controlNonStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._controlStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChildNonStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._labelChildStatic = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderChild = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._errorChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._hintChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._prefixChildren = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._suffixChildren = _t);\n    } }, viewQuery: function MatFormField_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵstaticViewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n        ɵngcc0.ɵɵviewQuery(_c3, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.underlineRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._connectionContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputContainerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._label = _t.first);\n    } }, hostAttrs: [1, \"mat-form-field\"], hostVars: 44, hostBindings: function MatFormField_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-form-field-appearance-standard\", ctx.appearance == \"standard\")(\"mat-form-field-appearance-fill\", ctx.appearance == \"fill\")(\"mat-form-field-appearance-outline\", ctx.appearance == \"outline\")(\"mat-form-field-appearance-legacy\", ctx.appearance == \"legacy\")(\"mat-form-field-invalid\", ctx._control.errorState)(\"mat-form-field-can-float\", ctx._canLabelFloat)(\"mat-form-field-should-float\", ctx._shouldLabelFloat())(\"mat-form-field-has-label\", ctx._hasFloatingLabel())(\"mat-form-field-hide-placeholder\", ctx._hideControlPlaceholder())(\"mat-form-field-disabled\", ctx._control.disabled)(\"mat-form-field-autofilled\", ctx._control.autofilled)(\"mat-focused\", ctx._control.focused)(\"mat-accent\", ctx.color == \"accent\")(\"mat-warn\", ctx.color == \"warn\")(\"ng-untouched\", ctx._shouldForward(\"untouched\"))(\"ng-touched\", ctx._shouldForward(\"touched\"))(\"ng-pristine\", ctx._shouldForward(\"pristine\"))(\"ng-dirty\", ctx._shouldForward(\"dirty\"))(\"ng-valid\", ctx._shouldForward(\"valid\"))(\"ng-invalid\", ctx._shouldForward(\"invalid\"))(\"ng-pending\", ctx._shouldForward(\"pending\"))(\"_mat-animation-noopable\", !ctx._animationsEnabled);\n    } }, inputs: { color: \"color\", floatLabel: \"floatLabel\", appearance: \"appearance\", hideRequiredMarker: \"hideRequiredMarker\", hintLabel: \"hintLabel\" }, exportAs: [\"matFormField\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 15, vars: 8, consts: [[1, \"mat-form-field-wrapper\"], [1, \"mat-form-field-flex\", 3, \"click\"], [\"connectionContainer\", \"\"], [4, \"ngIf\"], [\"class\", \"mat-form-field-prefix\", 4, \"ngIf\"], [1, \"mat-form-field-infix\"], [\"inputContainer\", \"\"], [1, \"mat-form-field-label-wrapper\"], [\"class\", \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"mat-empty\", \"mat-form-field-empty\", \"mat-accent\", \"mat-warn\", \"ngSwitch\", \"cdkObserveContent\", 4, \"ngIf\"], [\"class\", \"mat-form-field-suffix\", 4, \"ngIf\"], [\"class\", \"mat-form-field-underline\", 4, \"ngIf\"], [1, \"mat-form-field-subscript-wrapper\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [\"class\", \"mat-form-field-hint-wrapper\", 4, \"ngSwitchCase\"], [1, \"mat-form-field-outline\"], [1, \"mat-form-field-outline-start\"], [1, \"mat-form-field-outline-gap\"], [1, \"mat-form-field-outline-end\"], [1, \"mat-form-field-outline\", \"mat-form-field-outline-thick\"], [1, \"mat-form-field-prefix\"], [1, \"mat-form-field-label\", 3, \"cdkObserveContentDisabled\", \"id\", \"ngSwitch\", \"cdkObserveContent\"], [\"label\", \"\"], [\"class\", \"mat-placeholder-required mat-form-field-required-marker\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"aria-hidden\", \"true\", 1, \"mat-placeholder-required\", \"mat-form-field-required-marker\"], [1, \"mat-form-field-suffix\"], [1, \"mat-form-field-underline\"], [\"underline\", \"\"], [1, \"mat-form-field-ripple\"], [1, \"mat-form-field-hint-wrapper\"], [\"class\", \"mat-hint\", 3, \"id\", 4, \"ngIf\"], [1, \"mat-form-field-hint-spacer\"], [1, \"mat-hint\", 3, \"id\"]], template: function MatFormField_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"click\", function MatFormField_Template_div_click_1_listener($event) { return ctx._control.onContainerClick && ctx._control.onContainerClick($event); });\n        ɵngcc0.ɵɵtemplate(3, MatFormField_ng_container_3_Template, 9, 0, \"ng-container\", 3);\n        ɵngcc0.ɵɵtemplate(4, MatFormField_div_4_Template, 2, 0, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5, 6);\n        ɵngcc0.ɵɵprojection(7);\n        ɵngcc0.ɵɵelementStart(8, \"span\", 7);\n        ɵngcc0.ɵɵtemplate(9, MatFormField_label_9_Template, 5, 16, \"label\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(10, MatFormField_div_10_Template, 2, 0, \"div\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(11, MatFormField_div_11_Template, 3, 4, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(12, \"div\", 11);\n        ɵngcc0.ɵɵtemplate(13, MatFormField_div_13_Template, 2, 1, \"div\", 12);\n        ɵngcc0.ɵɵtemplate(14, MatFormField_div_14_Template, 5, 2, \"div\", 13);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance == \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._prefixChildren.length);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._hasFloatingLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._suffixChildren.length);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.appearance != \"outline\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx._getDisplayedMessages());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"hint\");\n    } }, directives: [ɵngcc3.NgIf, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc4.CdkObserveContent], styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"], encapsulation: 2, data: { animation: [matFormFieldAnimations.transitionMessages] }, changeDetection: 0 });\n    MatFormField.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n        { type: Platform },\n        { type: NgZone },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatFormField.propDecorators = {\n        appearance: [{ type: Input }],\n        hideRequiredMarker: [{ type: Input }],\n        hintLabel: [{ type: Input }],\n        floatLabel: [{ type: Input }],\n        underlineRef: [{ type: ViewChild, args: ['underline',] }],\n        _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],\n        _inputContainerRef: [{ type: ViewChild, args: ['inputContainer',] }],\n        _label: [{ type: ViewChild, args: ['label',] }],\n        _controlNonStatic: [{ type: ContentChild, args: [MatFormFieldControl,] }],\n        _controlStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: true },] }],\n        _labelChildNonStatic: [{ type: ContentChild, args: [MatLabel,] }],\n        _labelChildStatic: [{ type: ContentChild, args: [MatLabel, { static: true },] }],\n        _placeholderChild: [{ type: ContentChild, args: [MatPlaceholder,] }],\n        _errorChildren: [{ type: ContentChildren, args: [MatError, { descendants: true },] }],\n        _hintChildren: [{ type: ContentChildren, args: [MatHint, { descendants: true },] }],\n        _prefixChildren: [{ type: ContentChildren, args: [MatPrefix, { descendants: true },] }],\n        _suffixChildren: [{ type: ContentChildren, args: [MatSuffix, { descendants: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormField, [{\n        type: Component,\n        args: [{\n                selector: 'mat-form-field',\n                exportAs: 'matFormField',\n                template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                animations: [matFormFieldAnimations.transitionMessages],\n                host: {\n                    'class': 'mat-form-field',\n                    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                    '[class.mat-form-field-invalid]': '_control.errorState',\n                    '[class.mat-form-field-can-float]': '_canLabelFloat',\n                    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                    '[class.mat-form-field-disabled]': '_control.disabled',\n                    '[class.mat-form-field-autofilled]': '_control.autofilled',\n                    '[class.mat-focused]': '_control.focused',\n                    '[class.mat-accent]': 'color == \"accent\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '[class._mat-animation-noopable]': '!_animationsEnabled'\n                },\n                inputs: ['color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n                ],\n                styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_LABEL_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc2.Platform }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { floatLabel: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], hideRequiredMarker: [{\n            type: Input\n        }], hintLabel: [{\n            type: Input\n        }], underlineRef: [{\n            type: ViewChild,\n            args: ['underline']\n        }], _connectionContainerRef: [{\n            type: ViewChild,\n            args: ['connectionContainer', { static: true }]\n        }], _inputContainerRef: [{\n            type: ViewChild,\n            args: ['inputContainer']\n        }], _label: [{\n            type: ViewChild,\n            args: ['label']\n        }], _controlNonStatic: [{\n            type: ContentChild,\n            args: [MatFormFieldControl]\n        }], _controlStatic: [{\n            type: ContentChild,\n            args: [MatFormFieldControl, { static: true }]\n        }], _labelChildNonStatic: [{\n            type: ContentChild,\n            args: [MatLabel]\n        }], _labelChildStatic: [{\n            type: ContentChild,\n            args: [MatLabel, { static: true }]\n        }], _placeholderChild: [{\n            type: ContentChild,\n            args: [MatPlaceholder]\n        }], _errorChildren: [{\n            type: ContentChildren,\n            args: [MatError, { descendants: true }]\n        }], _hintChildren: [{\n            type: ContentChildren,\n            args: [MatHint, { descendants: true }]\n        }], _prefixChildren: [{\n            type: ContentChildren,\n            args: [MatPrefix, { descendants: true }]\n        }], _suffixChildren: [{\n            type: ContentChildren,\n            args: [MatSuffix, { descendants: true }]\n        }] }); })();\n    return MatFormField;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatFormFieldModule = /** @class */ (() => {\n    class MatFormFieldModule {\n    }\nMatFormFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatFormFieldModule });\nMatFormFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatFormFieldModule_Factory(t) { return new (t || MatFormFieldModule)(); }, imports: [[\n            CommonModule,\n            MatCommonModule,\n            ObserversModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatFormFieldModule, { declarations: function () { return [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [MatCommonModule, MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFormFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ]\n            }]\n    }], null, null); })();\n    return MatFormFieldModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n\n//# sourceMappingURL=form-field.js.map","import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nlet MatAutocomplete = /** @class */ (() => {\n    class MatAutocomplete extends _MatAutocompleteMixinBase {\n        constructor(_changeDetectorRef, _elementRef, defaults) {\n            super();\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            this._activeOptionChanges = Subscription.EMPTY;\n            /** Whether the autocomplete panel should be visible, depending on option length. */\n            this.showPanel = false;\n            this._isOpen = false;\n            /** Function that maps an option's control value to its display value in the trigger. */\n            this.displayWith = null;\n            /** Event that is emitted whenever an option from the list is selected. */\n            this.optionSelected = new EventEmitter();\n            /** Event that is emitted when the autocomplete panel is opened. */\n            this.opened = new EventEmitter();\n            /** Event that is emitted when the autocomplete panel is closed. */\n            this.closed = new EventEmitter();\n            /** Emits whenever an option is activated using the keyboard. */\n            this.optionActivated = new EventEmitter();\n            this._classList = {};\n            /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n            this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n            this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n        }\n        /** Whether the autocomplete panel is open. */\n        get isOpen() { return this._isOpen && this.showPanel; }\n        /**\n         * Whether the first option should be highlighted when the autocomplete panel is opened.\n         * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n         */\n        get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n        set autoActiveFirstOption(value) {\n            this._autoActiveFirstOption = coerceBooleanProperty(value);\n        }\n        /**\n         * Takes classes set on the host mat-autocomplete element and applies them to the panel\n         * inside the overlay container to allow for easy styling.\n         */\n        set classList(value) {\n            if (value && value.length) {\n                this._classList = value.split(' ').reduce((classList, className) => {\n                    classList[className.trim()] = true;\n                    return classList;\n                }, {});\n            }\n            else {\n                this._classList = {};\n            }\n            this._setVisibilityClasses(this._classList);\n            this._elementRef.nativeElement.className = '';\n        }\n        ngAfterContentInit() {\n            this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n            this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            });\n            // Set the initial visibility state.\n            this._setVisibility();\n        }\n        ngOnDestroy() {\n            this._activeOptionChanges.unsubscribe();\n        }\n        /**\n         * Sets the panel scrollTop. This allows us to manually scroll to display options\n         * above or below the fold, as they are not actually being focused when active.\n         */\n        _setScrollTop(scrollTop) {\n            if (this.panel) {\n                this.panel.nativeElement.scrollTop = scrollTop;\n            }\n        }\n        /** Returns the panel's scrollTop. */\n        _getScrollTop() {\n            return this.panel ? this.panel.nativeElement.scrollTop : 0;\n        }\n        /** Panel should hide itself when the option list is empty. */\n        _setVisibility() {\n            this.showPanel = !!this.options.length;\n            this._setVisibilityClasses(this._classList);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Emits the `select` event. */\n        _emitSelectEvent(option) {\n            const event = new MatAutocompleteSelectedEvent(this, option);\n            this.optionSelected.emit(event);\n        }\n        /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n        _setVisibilityClasses(classList) {\n            classList['mat-autocomplete-visible'] = this.showPanel;\n            classList['mat-autocomplete-hidden'] = !this.showPanel;\n        }\n    }\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatAutocomplete.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n    ];\n    MatAutocomplete.propDecorators = {\n        template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n        panel: [{ type: ViewChild, args: ['panel',] }],\n        options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n        optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n        displayWith: [{ type: Input }],\n        autoActiveFirstOption: [{ type: Input }],\n        panelWidth: [{ type: Input }],\n        optionSelected: [{ type: Output }],\n        opened: [{ type: Output }],\n        closed: [{ type: Output }],\n        optionActivated: [{ type: Output }],\n        classList: [{ type: Input, args: ['class',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\n    return MatAutocomplete;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nlet MatAutocompleteOrigin = /** @class */ (() => {\n    class MatAutocompleteOrigin {\n        constructor(\n        /** Reference to the element on which the directive is applied. */\n        elementRef) {\n            this.elementRef = elementRef;\n        }\n    }\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\n    MatAutocompleteOrigin.ctorParameters = () => [\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatAutocompleteOrigin;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nlet MatAutocompleteTrigger = /** @class */ (() => {\n    class MatAutocompleteTrigger {\n        constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n            this._element = _element;\n            this._overlay = _overlay;\n            this._viewContainerRef = _viewContainerRef;\n            this._zone = _zone;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._formField = _formField;\n            this._document = _document;\n            this._viewportRuler = _viewportRuler;\n            this._componentDestroyed = false;\n            this._autocompleteDisabled = false;\n            /** Whether or not the label state is being overridden. */\n            this._manuallyFloatingLabel = false;\n            /** Subscription to viewport size changes. */\n            this._viewportSubscription = Subscription.EMPTY;\n            /**\n             * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n             * closed autocomplete from being reopened if the user switches to another browser tab and then\n             * comes back.\n             */\n            this._canOpenOnNextFocus = true;\n            /** Stream of keyboard events that can close the panel. */\n            this._closeKeyEventStream = new Subject();\n            /**\n             * Event handler for when the window is blurred. Needs to be an\n             * arrow function in order to preserve the context.\n             */\n            this._windowBlurHandler = () => {\n                // If the user blurred the window while the autocomplete is focused, it means that it'll be\n                // refocused when they come back. In this case we want to skip the first focus event, if the\n                // pane was closed, in order to avoid reopening it unintentionally.\n                this._canOpenOnNextFocus =\n                    this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n            };\n            /** `View -> model callback called when value changes` */\n            this._onChange = () => { };\n            /** `View -> model callback called when autocomplete has been touched` */\n            this._onTouched = () => { };\n            /**\n             * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n             * will render the panel underneath the trigger if there is enough space for it to fit in\n             * the viewport, otherwise the panel will be shown above it. If the position is set to\n             * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n             * whether it fits completely in the viewport.\n             */\n            this.position = 'auto';\n            /**\n             * `autocomplete` attribute to be set on the input element.\n             * @docs-private\n             */\n            this.autocompleteAttribute = 'off';\n            this._overlayAttached = false;\n            /** Stream of autocomplete option selections. */\n            this.optionSelections = defer(() => {\n                if (this.autocomplete && this.autocomplete.options) {\n                    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n                }\n                // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n                // Return a stream that we'll replace with the real one once everything is in place.\n                return this._zone.onStable\n                    .asObservable()\n                    .pipe(take(1), switchMap(() => this.optionSelections));\n            });\n            this._scrollStrategy = scrollStrategy;\n        }\n        /**\n         * Whether the autocomplete is disabled. When disabled, the element will\n         * act as a regular input and the user won't be able to open the panel.\n         */\n        get autocompleteDisabled() { return this._autocompleteDisabled; }\n        set autocompleteDisabled(value) {\n            this._autocompleteDisabled = coerceBooleanProperty(value);\n        }\n        ngAfterViewInit() {\n            const window = this._getWindow();\n            if (typeof window !== 'undefined') {\n                this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n            }\n        }\n        ngOnChanges(changes) {\n            if (changes['position'] && this._positionStrategy) {\n                this._setStrategyPositions(this._positionStrategy);\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n            }\n        }\n        ngOnDestroy() {\n            const window = this._getWindow();\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('blur', this._windowBlurHandler);\n            }\n            this._viewportSubscription.unsubscribe();\n            this._componentDestroyed = true;\n            this._destroyPanel();\n            this._closeKeyEventStream.complete();\n        }\n        /** Whether or not the autocomplete panel is open. */\n        get panelOpen() {\n            return this._overlayAttached && this.autocomplete.showPanel;\n        }\n        /** Opens the autocomplete suggestion panel. */\n        openPanel() {\n            this._attachOverlay();\n            this._floatLabel();\n        }\n        /** Closes the autocomplete suggestion panel. */\n        closePanel() {\n            this._resetLabel();\n            if (!this._overlayAttached) {\n                return;\n            }\n            if (this.panelOpen) {\n                // Only emit if the panel was visible.\n                this.autocomplete.closed.emit();\n            }\n            this.autocomplete._isOpen = this._overlayAttached = false;\n            if (this._overlayRef && this._overlayRef.hasAttached()) {\n                this._overlayRef.detach();\n                this._closingActionsSubscription.unsubscribe();\n            }\n            // Note that in some cases this can end up being called after the component is destroyed.\n            // Add a check to ensure that we don't try to run change detection on a destroyed view.\n            if (!this._componentDestroyed) {\n                // We need to trigger change detection manually, because\n                // `fromEvent` doesn't seem to do it at the proper time.\n                // This ensures that the label is reset when the\n                // user clicks outside.\n                this._changeDetectorRef.detectChanges();\n            }\n        }\n        /**\n         * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n         * within the viewport.\n         */\n        updatePosition() {\n            if (this._overlayAttached) {\n                this._overlayRef.updatePosition();\n            }\n        }\n        /**\n         * A stream of actions that should close the autocomplete panel, including\n         * when an option is selected, on blur, and when TAB is pressed.\n         */\n        get panelClosingActions() {\n            return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n                this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n                of()).pipe(\n            // Normalize the output so we return a consistent type.\n            map(event => event instanceof MatOptionSelectionChange ? event : null));\n        }\n        /** The currently active option, coerced to MatOption type. */\n        get activeOption() {\n            if (this.autocomplete && this.autocomplete._keyManager) {\n                return this.autocomplete._keyManager.activeItem;\n            }\n            return null;\n        }\n        /** Stream of clicks outside of the autocomplete panel. */\n        _getOutsideClickStream() {\n            return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n                .pipe(filter(event => {\n                // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n                // fall back to check the first element in the path of the click event.\n                const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                    event.target);\n                const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n                return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n            }));\n        }\n        // Implemented as part of ControlValueAccessor.\n        writeValue(value) {\n            Promise.resolve(null).then(() => this._setTriggerValue(value));\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        setDisabledState(isDisabled) {\n            this._element.nativeElement.disabled = isDisabled;\n        }\n        _handleKeydown(event) {\n            const keyCode = event.keyCode;\n            // Prevent the default action on all escape key presses. This is here primarily to bring IE\n            // in line with other browsers. By default, pressing escape on IE will cause it to revert\n            // the input value to the one that it had on focus, however it won't dispatch any events\n            // which means that the model value will be out of sync with the view.\n            if (keyCode === ESCAPE) {\n                event.preventDefault();\n            }\n            if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n                this.activeOption._selectViaInteraction();\n                this._resetActiveItem();\n                event.preventDefault();\n            }\n            else if (this.autocomplete) {\n                const prevActiveItem = this.autocomplete._keyManager.activeItem;\n                const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n                if (this.panelOpen || keyCode === TAB) {\n                    this.autocomplete._keyManager.onKeydown(event);\n                }\n                else if (isArrowKey && this._canOpen()) {\n                    this.openPanel();\n                }\n                if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                    this._scrollToOption();\n                }\n            }\n        }\n        _handleInput(event) {\n            let target = event.target;\n            let value = target.value;\n            // Based on `NumberValueAccessor` from forms.\n            if (target.type === 'number') {\n                value = value == '' ? null : parseFloat(value);\n            }\n            // If the input has a placeholder, IE will fire the `input` event on page load,\n            // focus and blur, in addition to when the user actually changed the value. To\n            // filter out all of the extra events, we save the value on focus and between\n            // `input` events, and we check whether it changed.\n            // See: https://connect.microsoft.com/IE/feedback/details/885747/\n            if (this._previousValue !== value) {\n                this._previousValue = value;\n                this._onChange(value);\n                if (this._canOpen() && this._document.activeElement === event.target) {\n                    this.openPanel();\n                }\n            }\n        }\n        _handleFocus() {\n            if (!this._canOpenOnNextFocus) {\n                this._canOpenOnNextFocus = true;\n            }\n            else if (this._canOpen()) {\n                this._previousValue = this._element.nativeElement.value;\n                this._attachOverlay();\n                this._floatLabel(true);\n            }\n        }\n        /**\n         * In \"auto\" mode, the label will animate down as soon as focus is lost.\n         * This causes the value to jump when selecting an option with the mouse.\n         * This method manually floats the label until the panel can be closed.\n         * @param shouldAnimate Whether the label should be animated when it is floated.\n         */\n        _floatLabel(shouldAnimate = false) {\n            if (this._formField && this._formField.floatLabel === 'auto') {\n                if (shouldAnimate) {\n                    this._formField._animateAndLockLabel();\n                }\n                else {\n                    this._formField.floatLabel = 'always';\n                }\n                this._manuallyFloatingLabel = true;\n            }\n        }\n        /** If the label has been manually elevated, return it to its normal state. */\n        _resetLabel() {\n            if (this._manuallyFloatingLabel) {\n                this._formField.floatLabel = 'auto';\n                this._manuallyFloatingLabel = false;\n            }\n        }\n        /**\n         * Given that we are not actually focusing active options, we must manually adjust scroll\n         * to reveal options below the fold. First, we find the offset of the option from the top\n         * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n         * the panel height + the option height, so the active option will be just visible at the\n         * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n         * will become the offset. If that offset is visible within the panel already, the scrollTop is\n         * not adjusted.\n         */\n        _scrollToOption() {\n            const index = this.autocomplete._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                this.autocomplete._setScrollTop(0);\n            }\n            else {\n                const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n                this.autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n        /**\n         * This method listens to a stream of panel closing actions and resets the\n         * stream every time the option list changes.\n         */\n        _subscribeToClosingActions() {\n            const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n            const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n            // Defer emitting to the stream until the next tick, because changing\n            // bindings in here will cause \"changed after checked\" errors.\n            delay(0));\n            // When the zone is stable initially, and when the option list changes...\n            return merge(firstStable, optionChanges)\n                .pipe(\n            // create a new stream of panelClosingActions, replacing any previous streams\n            // that were created, and flatten it so our stream only emits closing events...\n            switchMap(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this.autocomplete._setVisibility();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                    // event, because we may not have emitted it when the panel was attached. This\n                    // can happen if the users opens the panel and there are no options, but the\n                    // options come in slightly later or as a result of the value changing.\n                    if (wasOpen !== this.panelOpen) {\n                        this.autocomplete.opened.emit();\n                    }\n                }\n                return this.panelClosingActions;\n            }), \n            // when the first closing event occurs...\n            take(1))\n                // set the value, close the panel, and complete.\n                .subscribe(event => this._setValueAndClose(event));\n        }\n        /** Destroys the autocomplete suggestion panel. */\n        _destroyPanel() {\n            if (this._overlayRef) {\n                this.closePanel();\n                this._overlayRef.dispose();\n                this._overlayRef = null;\n            }\n        }\n        _setTriggerValue(value) {\n            const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n                this.autocomplete.displayWith(value) :\n                value;\n            // Simply falling back to an empty string if the display value is falsy does not work properly.\n            // The display value can also be the number zero and shouldn't fall back to an empty string.\n            const inputValue = toDisplay != null ? toDisplay : '';\n            // If it's used within a `MatFormField`, we should set it through the property so it can go\n            // through change detection.\n            if (this._formField) {\n                this._formField._control.value = inputValue;\n            }\n            else {\n                this._element.nativeElement.value = inputValue;\n            }\n            this._previousValue = inputValue;\n        }\n        /**\n         * This method closes the panel, and if a value is specified, also sets the associated\n         * control to that value. It will also mark the control as dirty if this interaction\n         * stemmed from the user.\n         */\n        _setValueAndClose(event) {\n            if (event && event.source) {\n                this._clearPreviousSelectedOption(event.source);\n                this._setTriggerValue(event.source.value);\n                this._onChange(event.source.value);\n                this._element.nativeElement.focus();\n                this.autocomplete._emitSelectEvent(event.source);\n            }\n            this.closePanel();\n        }\n        /**\n         * Clear any previous selected option and emit a selection change event for this option\n         */\n        _clearPreviousSelectedOption(skip) {\n            this.autocomplete.options.forEach(option => {\n                if (option != skip && option.selected) {\n                    option.deselect();\n                }\n            });\n        }\n        _attachOverlay() {\n            if (!this.autocomplete) {\n                throw getMatAutocompleteMissingPanelError();\n            }\n            // We want to resolve this once, as late as possible so that we can be\n            // sure that the element has been moved into its final place in the DOM.\n            if (this._isInsideShadowRoot == null) {\n                this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n            }\n            let overlayRef = this._overlayRef;\n            if (!overlayRef) {\n                this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n                overlayRef = this._overlay.create(this._getOverlayConfig());\n                this._overlayRef = overlayRef;\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                overlayRef.keydownEvents().subscribe(event => {\n                    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                    if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                        this._resetActiveItem();\n                        this._closeKeyEventStream.next();\n                        // We need to stop propagation, otherwise the event will eventually\n                        // reach the input itself and cause the overlay to be reopened.\n                        event.stopPropagation();\n                        event.preventDefault();\n                    }\n                });\n                this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this._getPanelWidth() });\n                    }\n                });\n            }\n            else {\n                // Update the trigger, panel width and direction, in case anything has changed.\n                this._positionStrategy.setOrigin(this._getConnectedElement());\n                overlayRef.updateSize({ width: this._getPanelWidth() });\n            }\n            if (overlayRef && !overlayRef.hasAttached()) {\n                overlayRef.attach(this._portal);\n                this._closingActionsSubscription = this._subscribeToClosingActions();\n            }\n            const wasOpen = this.panelOpen;\n            this.autocomplete._setVisibility();\n            this.autocomplete._isOpen = this._overlayAttached = true;\n            // We need to do an extra `panelOpen` check in here, because the\n            // autocomplete won't be shown if there are no options.\n            if (this.panelOpen && wasOpen !== this.panelOpen) {\n                this.autocomplete.opened.emit();\n            }\n        }\n        _getOverlayConfig() {\n            return new OverlayConfig({\n                positionStrategy: this._getOverlayPosition(),\n                scrollStrategy: this._scrollStrategy(),\n                width: this._getPanelWidth(),\n                direction: this._dir\n            });\n        }\n        _getOverlayPosition() {\n            const strategy = this._overlay.position()\n                .flexibleConnectedTo(this._getConnectedElement())\n                .withFlexibleDimensions(false)\n                .withPush(false);\n            this._setStrategyPositions(strategy);\n            this._positionStrategy = strategy;\n            return strategy;\n        }\n        /** Sets the positions on a position strategy based on the directive's input state. */\n        _setStrategyPositions(positionStrategy) {\n            // Note that we provide horizontal fallback positions, even though by default the dropdown\n            // width matches the input, because consumers can override the width. See #18854.\n            const belowPositions = [\n                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n                { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n            ];\n            // The overlay edge connected to the trigger should have squared corners, while\n            // the opposite end has rounded corners. We apply a CSS class to swap the\n            // border-radius based on the overlay position.\n            const panelClass = 'mat-autocomplete-panel-above';\n            const abovePositions = [\n                { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n                { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n            ];\n            let positions;\n            if (this.position === 'above') {\n                positions = abovePositions;\n            }\n            else if (this.position === 'below') {\n                positions = belowPositions;\n            }\n            else {\n                positions = [...belowPositions, ...abovePositions];\n            }\n            positionStrategy.withPositions(positions);\n        }\n        _getConnectedElement() {\n            if (this.connectedTo) {\n                return this.connectedTo.elementRef;\n            }\n            return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n        }\n        _getPanelWidth() {\n            return this.autocomplete.panelWidth || this._getHostWidth();\n        }\n        /** Returns the width of the input element, so the panel width can match it. */\n        _getHostWidth() {\n            return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n        }\n        /**\n         * Resets the active item to -1 so arrow events will activate the\n         * correct options, or to 0 if the consumer opted into it.\n         */\n        _resetActiveItem() {\n            this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n        }\n        /** Determines whether the panel can be opened. */\n        _canOpen() {\n            const element = this._element.nativeElement;\n            return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            var _a;\n            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n        }\n    }\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatAutocompleteTrigger.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Overlay },\n        { type: ViewContainerRef },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: ViewportRuler }\n    ];\n    MatAutocompleteTrigger.propDecorators = {\n        autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n        position: [{ type: Input, args: ['matAutocompletePosition',] }],\n        connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n        autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n        autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc4.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\n    return MatAutocompleteTrigger;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatAutocompleteModule = /** @class */ (() => {\n    class MatAutocompleteModule {\n    }\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [CdkScrollableModule, MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    CdkScrollableModule,\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatAutocompleteModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map","import { isDevMode, Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {\n}\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/** Directive to display a text badge. */\nlet MatBadge = /** @class */ (() => {\n    class MatBadge extends _MatBadgeMixinBase {\n        constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n            super();\n            this._ngZone = _ngZone;\n            this._elementRef = _elementRef;\n            this._ariaDescriber = _ariaDescriber;\n            this._renderer = _renderer;\n            this._animationMode = _animationMode;\n            /** Whether the badge has any content. */\n            this._hasContent = false;\n            this._color = 'primary';\n            this._overlap = true;\n            /**\n             * Position the badge should reside.\n             * Accepts any combination of 'above'|'below' and 'before'|'after'\n             */\n            this.position = 'above after';\n            /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n            this.size = 'medium';\n            /** Unique id for the badge */\n            this._id = nextId++;\n            if (isDevMode()) {\n                const nativeElement = _elementRef.nativeElement;\n                if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                    throw Error('matBadge must be attached to an element node.');\n                }\n            }\n        }\n        /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n        get color() { return this._color; }\n        set color(value) {\n            this._setColor(value);\n            this._color = value;\n        }\n        /** Whether the badge should overlap its contents or not */\n        get overlap() { return this._overlap; }\n        set overlap(val) {\n            this._overlap = coerceBooleanProperty(val);\n        }\n        /** Message used to describe the decorated element via aria-describedby */\n        get description() { return this._description; }\n        set description(newDescription) {\n            if (newDescription !== this._description) {\n                const badgeElement = this._badgeElement;\n                this._updateHostAriaDescription(newDescription, this._description);\n                this._description = newDescription;\n                if (badgeElement) {\n                    newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                        badgeElement.removeAttribute('aria-label');\n                }\n            }\n        }\n        /** Whether the badge is hidden. */\n        get hidden() { return this._hidden; }\n        set hidden(val) {\n            this._hidden = coerceBooleanProperty(val);\n        }\n        /** Whether the badge is above the host or not */\n        isAbove() {\n            return this.position.indexOf('below') === -1;\n        }\n        /** Whether the badge is after the host or not */\n        isAfter() {\n            return this.position.indexOf('before') === -1;\n        }\n        ngOnChanges(changes) {\n            const contentChange = changes['content'];\n            if (contentChange) {\n                const value = contentChange.currentValue;\n                this._hasContent = value != null && `${value}`.trim().length > 0;\n                this._updateTextContent();\n            }\n        }\n        ngOnDestroy() {\n            const badgeElement = this._badgeElement;\n            if (badgeElement) {\n                if (this.description) {\n                    this._ariaDescriber.removeDescription(badgeElement, this.description);\n                }\n                // When creating a badge through the Renderer, Angular will keep it in an index.\n                // We have to destroy it ourselves, otherwise it'll be retained in memory.\n                if (this._renderer.destroyNode) {\n                    this._renderer.destroyNode(badgeElement);\n                }\n            }\n        }\n        /**\n         * Gets the element into which the badge's content is being rendered.\n         * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n         */\n        getBadgeElement() {\n            return this._badgeElement;\n        }\n        /** Injects a span element into the DOM with the content. */\n        _updateTextContent() {\n            if (!this._badgeElement) {\n                this._badgeElement = this._createBadgeElement();\n            }\n            else {\n                this._badgeElement.textContent = this.content;\n            }\n            return this._badgeElement;\n        }\n        /** Creates the badge element */\n        _createBadgeElement() {\n            const badgeElement = this._renderer.createElement('span');\n            const activeClass = 'mat-badge-active';\n            const contentClass = 'mat-badge-content';\n            // Clear any existing badges which may have persisted from a server-side render.\n            this._clearExistingBadges(contentClass);\n            badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n            badgeElement.classList.add(contentClass);\n            badgeElement.textContent = this.content;\n            if (this._animationMode === 'NoopAnimations') {\n                badgeElement.classList.add('_mat-animation-noopable');\n            }\n            if (this.description) {\n                badgeElement.setAttribute('aria-label', this.description);\n            }\n            this._elementRef.nativeElement.appendChild(badgeElement);\n            // animate in after insertion\n            if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n                this._ngZone.runOutsideAngular(() => {\n                    requestAnimationFrame(() => {\n                        badgeElement.classList.add(activeClass);\n                    });\n                });\n            }\n            else {\n                badgeElement.classList.add(activeClass);\n            }\n            return badgeElement;\n        }\n        /** Sets the aria-label property on the element */\n        _updateHostAriaDescription(newDescription, oldDescription) {\n            // ensure content available before setting label\n            const content = this._updateTextContent();\n            if (oldDescription) {\n                this._ariaDescriber.removeDescription(content, oldDescription);\n            }\n            if (newDescription) {\n                this._ariaDescriber.describe(content, newDescription);\n            }\n        }\n        /** Adds css theme class given the color to the component host */\n        _setColor(colorPalette) {\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n                }\n            }\n        }\n        /** Clears any existing badges that might be left over from server-side rendering. */\n        _clearExistingBadges(cssClass) {\n            const element = this._elementRef.nativeElement;\n            let childCount = element.children.length;\n            // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n            while (childCount--) {\n                const currentChild = element.children[childCount];\n                if (currentChild.classList.contains(cssClass)) {\n                    element.removeChild(currentChild);\n                }\n            }\n        }\n    }\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatBadge.ctorParameters = () => [\n        { type: NgZone },\n        { type: ElementRef },\n        { type: AriaDescriber },\n        { type: Renderer2 },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatBadge.propDecorators = {\n        color: [{ type: Input, args: ['matBadgeColor',] }],\n        overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n        position: [{ type: Input, args: ['matBadgePosition',] }],\n        content: [{ type: Input, args: ['matBadge',] }],\n        description: [{ type: Input, args: ['matBadgeDescription',] }],\n        size: [{ type: Input, args: ['matBadgeSize',] }],\n        hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n    return MatBadge;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatBadgeModule = /** @class */ (() => {\n    class MatBadgeModule {\n    }\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); }, imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n    return MatBadgeModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, TemplatePortal, ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, NgModule, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, Injector, SkipSelf } from '@angular/core';\nimport { AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Subject, merge, of } from 'rxjs';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { filter, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/layout';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/common';\n\nfunction MatBottomSheetContainer_ng_template_0_Template(rf, ctx) { }\nconst MAT_BOTTOM_SHEET_DATA = new InjectionToken('MatBottomSheetData');\n/**\n * Configuration used when opening a bottom sheet.\n */\nclass MatBottomSheetConfig {\n    constructor() {\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** Whether the bottom sheet has a backdrop. */\n        this.hasBackdrop = true;\n        /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n        this.disableClose = false;\n        /** Aria label to assign to the bottom sheet element. */\n        this.ariaLabel = null;\n        /**\n         * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // Note that this is disabled by default, because while the a11y recommendations are to focus\n        // the first focusable element, doing so prevents screen readers from reading out the\n        // rest of the bottom sheet content.\n        /** Whether the bottom sheet should focus the first focusable element on open. */\n        this.autoFocus = false;\n        /**\n         * Whether the bottom sheet should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Animations used by the Material bottom sheet. */\nconst matBottomSheetAnimations = {\n    /** Animation that shows and hides a bottom sheet. */\n    bottomSheetState: trigger('state', [\n        state('void, hidden', style({ transform: 'translateY(100%)' })),\n        state('visible', style({ transform: 'translateY(0%)' })),\n        transition('visible => void, visible => hidden', animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n        transition('void => visible', animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\nlet MatBottomSheetContainer = /** @class */ (() => {\n    class MatBottomSheetContainer extends BasePortalOutlet {\n        constructor(_elementRef, _changeDetectorRef, _focusTrapFactory, breakpointObserver, document, \n        /** The bottom sheet configuration. */\n        bottomSheetConfig) {\n            super();\n            this._elementRef = _elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._focusTrapFactory = _focusTrapFactory;\n            this.bottomSheetConfig = bottomSheetConfig;\n            /** The state of the bottom sheet animations. */\n            this._animationState = 'void';\n            /** Emits whenever the state of the animation changes. */\n            this._animationStateChanged = new EventEmitter();\n            /** Element that was focused before the bottom sheet was opened. */\n            this._elementFocusedBeforeOpened = null;\n            /**\n             * Attaches a DOM portal to the bottom sheet container.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            this.attachDomPortal = (portal) => {\n                this._validatePortalAttached();\n                this._setPanelClass();\n                this._savePreviouslyFocusedElement();\n                return this._portalOutlet.attachDomPortal(portal);\n            };\n            this._document = document;\n            this._breakpointSubscription = breakpointObserver\n                .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n                .subscribe(() => {\n                this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(Breakpoints.Medium));\n                this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(Breakpoints.Large));\n                this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(Breakpoints.XLarge));\n            });\n        }\n        /** Attach a component portal as content to this bottom sheet container. */\n        attachComponentPortal(portal) {\n            this._validatePortalAttached();\n            this._setPanelClass();\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachComponentPortal(portal);\n        }\n        /** Attach a template portal as content to this bottom sheet container. */\n        attachTemplatePortal(portal) {\n            this._validatePortalAttached();\n            this._setPanelClass();\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        }\n        /** Begin animation of bottom sheet entrance into view. */\n        enter() {\n            if (!this._destroyed) {\n                this._animationState = 'visible';\n                this._changeDetectorRef.detectChanges();\n            }\n        }\n        /** Begin animation of the bottom sheet exiting from view. */\n        exit() {\n            if (!this._destroyed) {\n                this._animationState = 'hidden';\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        ngOnDestroy() {\n            this._breakpointSubscription.unsubscribe();\n            this._destroyed = true;\n        }\n        _onAnimationDone(event) {\n            if (event.toState === 'hidden') {\n                this._restoreFocus();\n            }\n            else if (event.toState === 'visible') {\n                this._trapFocus();\n            }\n            this._animationStateChanged.emit(event);\n        }\n        _onAnimationStart(event) {\n            this._animationStateChanged.emit(event);\n        }\n        _toggleClass(cssClass, add) {\n            const classList = this._elementRef.nativeElement.classList;\n            add ? classList.add(cssClass) : classList.remove(cssClass);\n        }\n        _validatePortalAttached() {\n            if (this._portalOutlet.hasAttached()) {\n                throw Error('Attempting to attach bottom sheet content after content is already attached');\n            }\n        }\n        _setPanelClass() {\n            const element = this._elementRef.nativeElement;\n            const panelClass = this.bottomSheetConfig.panelClass;\n            if (Array.isArray(panelClass)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClass.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else if (panelClass) {\n                element.classList.add(panelClass);\n            }\n        }\n        /** Moves the focus inside the focus trap. */\n        _trapFocus() {\n            const element = this._elementRef.nativeElement;\n            if (!this._focusTrap) {\n                this._focusTrap = this._focusTrapFactory.create(element);\n            }\n            if (this.bottomSheetConfig.autoFocus) {\n                this._focusTrap.focusInitialElementWhenReady();\n            }\n            else {\n                const activeElement = this._document.activeElement;\n                // Otherwise ensure that focus is on the container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the bottom sheet already, because it's possible that the\n                // consumer turned off `autoFocus` in order to move focus themselves.\n                if (activeElement !== element && !element.contains(activeElement)) {\n                    element.focus();\n                }\n            }\n        }\n        /** Restores focus to the element that was focused before the bottom sheet was opened. */\n        _restoreFocus() {\n            const toFocus = this._elementFocusedBeforeOpened;\n            // We need the extra check, because IE can set the `activeElement` to null in some cases.\n            if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n                const activeElement = this._document.activeElement;\n                const element = this._elementRef.nativeElement;\n                // Make sure that focus is still inside the bottom sheet or is on the body (usually because a\n                // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n                // the consumer moved it themselves before the animation was done, in which case we shouldn't\n                // do anything.\n                if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                    element.contains(activeElement)) {\n                    toFocus.focus();\n                }\n            }\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n        }\n        /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n        _savePreviouslyFocusedElement() {\n            this._elementFocusedBeforeOpened = this._document.activeElement;\n            // The `focus` method isn't available during server-side rendering.\n            if (this._elementRef.nativeElement.focus) {\n                Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n            }\n        }\n    }\nMatBottomSheetContainer.ɵfac = function MatBottomSheetContainer_Factory(t) { return new (t || MatBottomSheetContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.BreakpointObserver), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatBottomSheetConfig)); };\nMatBottomSheetContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatBottomSheetContainer, selectors: [[\"mat-bottom-sheet-container\"]], viewQuery: function MatBottomSheetContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"mat-bottom-sheet-container\"], hostVars: 2, hostBindings: function MatBottomSheetContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@state.start\", function MatBottomSheetContainer_animation_state_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@state.done\", function MatBottomSheetContainer_animation_state_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.bottomSheetConfig == null ? null : ctx.bottomSheetConfig.ariaLabel);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatBottomSheetContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatBottomSheetContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}.cdk-high-contrast-active .mat-bottom-sheet-container{outline:1px solid}.mat-bottom-sheet-container-xlarge,.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\\n\"], encapsulation: 2, data: { animation: [matBottomSheetAnimations.bottomSheetState] }, changeDetection: 0 });\n    MatBottomSheetContainer.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusTrapFactory },\n        { type: BreakpointObserver },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: MatBottomSheetConfig }\n    ];\n    MatBottomSheetContainer.propDecorators = {\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBottomSheetContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-bottom-sheet-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\r\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matBottomSheetAnimations.bottomSheetState],\n                host: {\n                    'class': 'mat-bottom-sheet-container',\n                    'tabindex': '-1',\n                    'role': 'dialog',\n                    'aria-modal': 'true',\n                    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n                    '[@state]': '_animationState',\n                    '(@state.start)': '_onAnimationStart($event)',\n                    '(@state.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-bottom-sheet-container{padding:8px 16px;min-width:100vw;box-sizing:border-box;display:block;outline:0;max-height:80vh;overflow:auto}.cdk-high-contrast-active .mat-bottom-sheet-container{outline:1px solid}.mat-bottom-sheet-container-xlarge,.mat-bottom-sheet-container-large,.mat-bottom-sheet-container-medium{border-top-left-radius:4px;border-top-right-radius:4px}.mat-bottom-sheet-container-medium{min-width:384px;max-width:calc(100vw - 128px)}.mat-bottom-sheet-container-large{min-width:512px;max-width:calc(100vw - 256px)}.mat-bottom-sheet-container-xlarge{min-width:576px;max-width:calc(100vw - 384px)}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc2.BreakpointObserver }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatBottomSheetConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n    return MatBottomSheetContainer;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatBottomSheetModule = /** @class */ (() => {\n    class MatBottomSheetModule {\n    }\nMatBottomSheetModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBottomSheetModule });\nMatBottomSheetModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatBottomSheetModule_Factory(t) { return new (t || MatBottomSheetModule)(); }, imports: [[\n            OverlayModule,\n            MatCommonModule,\n            PortalModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBottomSheetModule, { declarations: function () { return [MatBottomSheetContainer]; }, imports: function () { return [OverlayModule,\n        MatCommonModule,\n        PortalModule]; }, exports: function () { return [MatBottomSheetContainer, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBottomSheetModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatCommonModule,\n                    PortalModule,\n                ],\n                exports: [MatBottomSheetContainer, MatCommonModule],\n                declarations: [MatBottomSheetContainer],\n                entryComponents: [MatBottomSheetContainer]\n            }]\n    }], null, null); })();\n    return MatBottomSheetModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nclass MatBottomSheetRef {\n    constructor(containerInstance, _overlayRef, \n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the bottom sheet has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n        this._afterOpened = new Subject();\n        this.containerInstance = containerInstance;\n        this.disableClose = containerInstance.bottomSheetConfig.disableClose;\n        // Emit when opening animation completes\n        containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'visible'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        containerInstance._animationStateChanged\n            .pipe(filter(event => event.phaseName === 'done' && event.toState === 'hidden'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            _overlayRef.dispose();\n        });\n        _overlayRef.detachments().pipe(take(1)).subscribe(() => {\n            this._afterDismissed.next(this._result);\n            this._afterDismissed.complete();\n        });\n        merge(_overlayRef.backdropClick(), _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))).subscribe(event => {\n            if (!this.disableClose &&\n                (event.type !== 'keydown' || !hasModifierKey(event))) {\n                event.preventDefault();\n                this.dismiss();\n            }\n        });\n    }\n    /**\n     * Dismisses the bottom sheet.\n     * @param result Data to be passed back to the bottom sheet opener.\n     */\n    dismiss(result) {\n        if (!this._afterDismissed.closed) {\n            // Transition the backdrop in parallel to the bottom sheet.\n            this.containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1)).subscribe(event => {\n                // The logic that disposes of the overlay depends on the exit animation completing, however\n                // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n                // timeout which will clean everything up if the animation hasn't fired within the specified\n                // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n                // vast majority of cases the timeout will have been cleared before it has fired.\n                this._closeFallbackTimeout = setTimeout(() => {\n                    this._overlayRef.dispose();\n                }, event.totalTime + 100);\n                this._overlayRef.detachBackdrop();\n            });\n            this._result = result;\n            this.containerInstance.exit();\n        }\n    }\n    /** Gets an observable that is notified when the bottom sheet is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed.asObservable();\n    }\n    /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default bottom sheet options. */\nconst MAT_BOTTOM_SHEET_DEFAULT_OPTIONS = new InjectionToken('mat-bottom-sheet-default-options');\n/**\n * Service to trigger Material Design bottom sheets.\n */\nlet MatBottomSheet = /** @class */ (() => {\n    class MatBottomSheet {\n        constructor(_overlay, _injector, _parentBottomSheet, _location, _defaultOptions) {\n            this._overlay = _overlay;\n            this._injector = _injector;\n            this._parentBottomSheet = _parentBottomSheet;\n            this._location = _location;\n            this._defaultOptions = _defaultOptions;\n            this._bottomSheetRefAtThisLevel = null;\n        }\n        /** Reference to the currently opened bottom sheet. */\n        get _openedBottomSheetRef() {\n            const parent = this._parentBottomSheet;\n            return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n        }\n        set _openedBottomSheetRef(value) {\n            if (this._parentBottomSheet) {\n                this._parentBottomSheet._openedBottomSheetRef = value;\n            }\n            else {\n                this._bottomSheetRefAtThisLevel = value;\n            }\n        }\n        open(componentOrTemplateRef, config) {\n            const _config = _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n            const overlayRef = this._createOverlay(_config);\n            const container = this._attachContainer(overlayRef, _config);\n            const ref = new MatBottomSheetRef(container, overlayRef, this._location);\n            if (componentOrTemplateRef instanceof TemplateRef) {\n                container.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, {\n                    $implicit: _config.data,\n                    bottomSheetRef: ref\n                }));\n            }\n            else {\n                const portal = new ComponentPortal(componentOrTemplateRef, undefined, this._createInjector(_config, ref));\n                const contentRef = container.attachComponentPortal(portal);\n                ref.instance = contentRef.instance;\n            }\n            // When the bottom sheet is dismissed, clear the reference to it.\n            ref.afterDismissed().subscribe(() => {\n                // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n                if (this._openedBottomSheetRef == ref) {\n                    this._openedBottomSheetRef = null;\n                }\n            });\n            if (this._openedBottomSheetRef) {\n                // If a bottom sheet is already in view, dismiss it and enter the\n                // new bottom sheet after exit animation is complete.\n                this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n                this._openedBottomSheetRef.dismiss();\n            }\n            else {\n                // If no bottom sheet is in view, enter the new bottom sheet.\n                ref.containerInstance.enter();\n            }\n            this._openedBottomSheetRef = ref;\n            return ref;\n        }\n        /**\n         * Dismisses the currently-visible bottom sheet.\n         * @param result Data to pass to the bottom sheet instance.\n         */\n        dismiss(result) {\n            if (this._openedBottomSheetRef) {\n                this._openedBottomSheetRef.dismiss(result);\n            }\n        }\n        ngOnDestroy() {\n            if (this._bottomSheetRefAtThisLevel) {\n                this._bottomSheetRefAtThisLevel.dismiss();\n            }\n        }\n        /**\n         * Attaches the bottom sheet container component to the overlay.\n         */\n        _attachContainer(overlayRef, config) {\n            const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatBottomSheetConfig, config]\n            ]));\n            const containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n            const containerRef = overlayRef.attach(containerPortal);\n            return containerRef.instance;\n        }\n        /**\n         * Creates a new overlay and places it in the correct location.\n         * @param config The user-specified bottom sheet config.\n         */\n        _createOverlay(config) {\n            const overlayConfig = new OverlayConfig({\n                direction: config.direction,\n                hasBackdrop: config.hasBackdrop,\n                disposeOnNavigation: config.closeOnNavigation,\n                maxWidth: '100%',\n                scrollStrategy: config.scrollStrategy || this._overlay.scrollStrategies.block(),\n                positionStrategy: this._overlay.position().global().centerHorizontally().bottom('0')\n            });\n            if (config.backdropClass) {\n                overlayConfig.backdropClass = config.backdropClass;\n            }\n            return this._overlay.create(overlayConfig);\n        }\n        /**\n         * Creates an injector to be used inside of a bottom sheet component.\n         * @param config Config that was used to create the bottom sheet.\n         * @param bottomSheetRef Reference to the bottom sheet.\n         */\n        _createInjector(config, bottomSheetRef) {\n            const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            const injectionTokens = new WeakMap([\n                [MatBottomSheetRef, bottomSheetRef],\n                [MAT_BOTTOM_SHEET_DATA, config.data]\n            ]);\n            if (config.direction &&\n                (!userInjector || !userInjector.get(Directionality, null))) {\n                injectionTokens.set(Directionality, {\n                    value: config.direction,\n                    change: of()\n                });\n            }\n            return new PortalInjector(userInjector || this._injector, injectionTokens);\n        }\n    }\nMatBottomSheet.ɵfac = function MatBottomSheet_Factory(t) { return new (t || MatBottomSheet)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(MatBottomSheet, 12), ɵngcc0.ɵɵinject(ɵngcc5.Location, 8), ɵngcc0.ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8)); };\n    MatBottomSheet.ɵprov = ɵɵdefineInjectable({ factory: function MatBottomSheet_Factory() { return new MatBottomSheet(ɵɵinject(Overlay), ɵɵinject(INJECTOR), ɵɵinject(MatBottomSheet, 12), ɵɵinject(Location, 8), ɵɵinject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, 8)); }, token: MatBottomSheet, providedIn: MatBottomSheetModule });\n    MatBottomSheet.ctorParameters = () => [\n        { type: Overlay },\n        { type: Injector },\n        { type: MatBottomSheet, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: Location, decorators: [{ type: Optional }] },\n        { type: MatBottomSheetConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BOTTOM_SHEET_DEFAULT_OPTIONS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBottomSheet, [{\n        type: Injectable,\n        args: [{ providedIn: MatBottomSheetModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc0.Injector }, { type: MatBottomSheet, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc5.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatBottomSheetConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BOTTOM_SHEET_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return MatBottomSheet;\n})();\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults, config) {\n    return Object.assign(Object.assign({}, defaults), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BOTTOM_SHEET_DATA, MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, MatBottomSheet, MatBottomSheetConfig, MatBottomSheetContainer, MatBottomSheetModule, MatBottomSheetRef, matBottomSheetAnimations };\n\n//# sourceMappingURL=bottom-sheet.js.map","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\nlet _uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nlet MatButtonToggleGroup = /** @class */ (() => {\n    class MatButtonToggleGroup {\n        constructor(_changeDetector, defaultOptions) {\n            this._changeDetector = _changeDetector;\n            this._vertical = false;\n            this._multiple = false;\n            this._disabled = false;\n            /**\n             * The method to be called in order to update ngModel.\n             * Now `ngModel` binding is not supported in multiple selection mode.\n             */\n            this._controlValueAccessorChangeFn = () => { };\n            /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n            this._onTouched = () => { };\n            this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n            /**\n             * Event that emits whenever the value of the group changes.\n             * Used to facilitate two-way data binding.\n             * @docs-private\n             */\n            this.valueChange = new EventEmitter();\n            /** Event emitted when the group's value changes. */\n            this.change = new EventEmitter();\n            this.appearance =\n                defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n        }\n        /** `name` attribute for the underlying `input` element. */\n        get name() { return this._name; }\n        set name(value) {\n            this._name = value;\n            if (this._buttonToggles) {\n                this._buttonToggles.forEach(toggle => {\n                    toggle.name = this._name;\n                    toggle._markForCheck();\n                });\n            }\n        }\n        /** Whether the toggle group is vertical. */\n        get vertical() { return this._vertical; }\n        set vertical(value) {\n            this._vertical = coerceBooleanProperty(value);\n        }\n        /** Value of the toggle group. */\n        get value() {\n            const selected = this._selectionModel ? this._selectionModel.selected : [];\n            if (this.multiple) {\n                return selected.map(toggle => toggle.value);\n            }\n            return selected[0] ? selected[0].value : undefined;\n        }\n        set value(newValue) {\n            this._setSelectionByValue(newValue);\n            this.valueChange.emit(this.value);\n        }\n        /** Selected button toggles in the group. */\n        get selected() {\n            const selected = this._selectionModel ? this._selectionModel.selected : [];\n            return this.multiple ? selected : (selected[0] || null);\n        }\n        /** Whether multiple button toggles can be selected. */\n        get multiple() { return this._multiple; }\n        set multiple(value) {\n            this._multiple = coerceBooleanProperty(value);\n        }\n        /** Whether multiple button toggle group is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            if (this._buttonToggles) {\n                this._buttonToggles.forEach(toggle => toggle._markForCheck());\n            }\n        }\n        ngOnInit() {\n            this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        }\n        ngAfterContentInit() {\n            this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n        }\n        /**\n         * Sets the model value. Implemented as part of ControlValueAccessor.\n         * @param value Value to be set to the model.\n         */\n        writeValue(value) {\n            this.value = value;\n            this._changeDetector.markForCheck();\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnChange(fn) {\n            this._controlValueAccessorChangeFn = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n        }\n        /** Dispatch change event with current selection and group value. */\n        _emitChangeEvent() {\n            const selected = this.selected;\n            const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n            const event = new MatButtonToggleChange(source, this.value);\n            this._controlValueAccessorChangeFn(event.value);\n            this.change.emit(event);\n        }\n        /**\n         * Syncs a button toggle's selected state with the model value.\n         * @param toggle Toggle to be synced.\n         * @param select Whether the toggle should be selected.\n         * @param isUserInput Whether the change was a result of a user interaction.\n         * @param deferEvents Whether to defer emitting the change events.\n         */\n        _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n            // Deselect the currently-selected toggle, if we're in single-selection\n            // mode and the button being toggled isn't selected at the moment.\n            if (!this.multiple && this.selected && !toggle.checked) {\n                this.selected.checked = false;\n            }\n            if (this._selectionModel) {\n                if (select) {\n                    this._selectionModel.select(toggle);\n                }\n                else {\n                    this._selectionModel.deselect(toggle);\n                }\n            }\n            else {\n                deferEvents = true;\n            }\n            // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n            // the side-effect is that we may end up updating the model value out of sequence in others\n            // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n            if (deferEvents) {\n                Promise.resolve().then(() => this._updateModelValue(isUserInput));\n            }\n            else {\n                this._updateModelValue(isUserInput);\n            }\n        }\n        /** Checks whether a button toggle is selected. */\n        _isSelected(toggle) {\n            return this._selectionModel && this._selectionModel.isSelected(toggle);\n        }\n        /** Determines whether a button toggle should be checked on init. */\n        _isPrechecked(toggle) {\n            if (typeof this._rawValue === 'undefined') {\n                return false;\n            }\n            if (this.multiple && Array.isArray(this._rawValue)) {\n                return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n            }\n            return toggle.value === this._rawValue;\n        }\n        /** Updates the selection state of the toggles in the group based on a value. */\n        _setSelectionByValue(value) {\n            this._rawValue = value;\n            if (!this._buttonToggles) {\n                return;\n            }\n            if (this.multiple && value) {\n                if (!Array.isArray(value)) {\n                    throw Error('Value must be an array in multiple-selection mode.');\n                }\n                this._clearSelection();\n                value.forEach((currentValue) => this._selectValue(currentValue));\n            }\n            else {\n                this._clearSelection();\n                this._selectValue(value);\n            }\n        }\n        /** Clears the selected toggles. */\n        _clearSelection() {\n            this._selectionModel.clear();\n            this._buttonToggles.forEach(toggle => toggle.checked = false);\n        }\n        /** Selects a value if there's a toggle that corresponds to it. */\n        _selectValue(value) {\n            const correspondingOption = this._buttonToggles.find(toggle => {\n                return toggle.value != null && toggle.value === value;\n            });\n            if (correspondingOption) {\n                correspondingOption.checked = true;\n                this._selectionModel.select(correspondingOption);\n            }\n        }\n        /** Syncs up the group's value with the model and emits the change event. */\n        _updateModelValue(isUserInput) {\n            // Only emit the change event for user input.\n            if (isUserInput) {\n                this._emitChangeEvent();\n            }\n            // Note: we emit this one no matter whether it was a user interaction, because\n            // it is used by Angular to sync up the two-way data binding.\n            this.valueChange.emit(this.value);\n        }\n    }\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR])] });\n    MatButtonToggleGroup.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n    ];\n    MatButtonToggleGroup.propDecorators = {\n        _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                        // Note that this would technically pick up toggles\n                        // from nested groups, but that's not a case that we support.\n                        descendants: true\n                    },] }],\n        appearance: [{ type: Input }],\n        name: [{ type: Input }],\n        vertical: [{ type: Input }],\n        value: [{ type: Input }],\n        valueChange: [{ type: Output }],\n        multiple: [{ type: Input }],\n        disabled: [{ type: Input }],\n        change: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n    return MatButtonToggleGroup;\n})();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nlet MatButtonToggle = /** @class */ (() => {\n    class MatButtonToggle extends _MatButtonToggleMixinBase {\n        constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n            super();\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            this._focusMonitor = _focusMonitor;\n            this._isSingleSelector = false;\n            this._checked = false;\n            /**\n             * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n             */\n            this.ariaLabelledby = null;\n            this._disabled = false;\n            /** Event emitted when the group value changes. */\n            this.change = new EventEmitter();\n            const parsedTabIndex = Number(defaultTabIndex);\n            this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n            this.buttonToggleGroup = toggleGroup;\n            this.appearance =\n                defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n        }\n        /** Unique ID for the underlying `button` element. */\n        get buttonId() { return `${this.id}-button`; }\n        /** The appearance style of the button. */\n        get appearance() {\n            return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n        }\n        set appearance(value) {\n            this._appearance = value;\n        }\n        /** Whether the button is checked. */\n        get checked() {\n            return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n        }\n        set checked(value) {\n            const newValue = coerceBooleanProperty(value);\n            if (newValue !== this._checked) {\n                this._checked = newValue;\n                if (this.buttonToggleGroup) {\n                    this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n                }\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Whether the button is disabled. */\n        get disabled() {\n            return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n        }\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n        ngOnInit() {\n            const group = this.buttonToggleGroup;\n            this._isSingleSelector = group && !group.multiple;\n            this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n            if (this._isSingleSelector) {\n                this.name = group.name;\n            }\n            if (group) {\n                if (group._isPrechecked(this)) {\n                    this.checked = true;\n                }\n                else if (group._isSelected(this) !== this._checked) {\n                    // As as side effect of the circular dependency between the toggle group and the button,\n                    // we may end up in a state where the button is supposed to be checked on init, but it\n                    // isn't, because the checked value was assigned too early. This can happen when Ivy\n                    // assigns the static input value before the `ngOnInit` has run.\n                    group._syncButtonToggle(this, this._checked);\n                }\n            }\n        }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this._elementRef, true);\n        }\n        ngOnDestroy() {\n            const group = this.buttonToggleGroup;\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            // Remove the toggle from the selection once it's destroyed. Needs to happen\n            // on the next tick in order to avoid \"changed after checked\" errors.\n            if (group && group._isSelected(this)) {\n                group._syncButtonToggle(this, false, false, true);\n            }\n        }\n        /** Focuses the button. */\n        focus(options) {\n            this._buttonElement.nativeElement.focus(options);\n        }\n        /** Checks the button toggle due to an interaction with the underlying native button. */\n        _onButtonClick() {\n            const newChecked = this._isSingleSelector ? true : !this._checked;\n            if (newChecked !== this._checked) {\n                this._checked = newChecked;\n                if (this.buttonToggleGroup) {\n                    this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                    this.buttonToggleGroup._onTouched();\n                }\n            }\n            // Emit a change event when it's the single selector\n            this.change.emit(new MatButtonToggleChange(this, this.value));\n        }\n        /**\n         * Marks the button toggle as needing checking for change detection.\n         * This method is exposed because the parent button toggle group will directly\n         * update bound properties of the radio button.\n         */\n        _markForCheck() {\n            // When the group value changes, the button will not be notified.\n            // Use `markForCheck` to explicit update button toggle's status.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MatButtonToggleGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [1, \"mat-button-toggle\"], hostVars: 11, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatButtonToggle.ctorParameters = () => [\n        { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n    ];\n    MatButtonToggle.propDecorators = {\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        _buttonElement: [{ type: ViewChild, args: ['button',] }],\n        id: [{ type: Input }],\n        name: [{ type: Input }],\n        value: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        appearance: [{ type: Input }],\n        checked: [{ type: Input }],\n        disabled: [{ type: Input }],\n        change: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <div class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</button>\\n\\n<div class=\\\"mat-button-toggle-focus-overlay\\\"></div>\\n<div class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                    // but can still receive focus from things like cdkFocusInitial.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n    return MatButtonToggle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatButtonToggleModule = /** @class */ (() => {\n    class MatButtonToggleModule {\n    }\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); }, imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n    return MatButtonToggleModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * @breaking-change 10.0.0\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nlet MatCheckbox = /** @class */ (() => {\n    class MatCheckbox extends _MatCheckboxMixinBase {\n        constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, \n        /**\n         * @deprecated `_clickAction` parameter to be removed, use\n         * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n         * @breaking-change 10.0.0\n         */\n        _clickAction, _animationMode, _options) {\n            super(elementRef);\n            this._changeDetectorRef = _changeDetectorRef;\n            this._focusMonitor = _focusMonitor;\n            this._ngZone = _ngZone;\n            this._clickAction = _clickAction;\n            this._animationMode = _animationMode;\n            this._options = _options;\n            /**\n             * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n             * take precedence so this may be omitted.\n             */\n            this.ariaLabel = '';\n            /**\n             * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n             */\n            this.ariaLabelledby = null;\n            this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n            /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n            this.id = this._uniqueId;\n            /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n            this.labelPosition = 'after';\n            /** Name value will be applied to the input element if present */\n            this.name = null;\n            /** Event emitted when the checkbox's `checked` value changes. */\n            this.change = new EventEmitter();\n            /** Event emitted when the checkbox's `indeterminate` value changes. */\n            this.indeterminateChange = new EventEmitter();\n            /**\n             * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n             * @docs-private\n             */\n            this._onTouched = () => { };\n            this._currentAnimationClass = '';\n            this._currentCheckState = 0 /* Init */;\n            this._controlValueAccessorChangeFn = () => { };\n            this._checked = false;\n            this._disabled = false;\n            this._indeterminate = false;\n            this._options = this._options || {};\n            if (this._options.color) {\n                this.color = this._options.color;\n            }\n            this.tabIndex = parseInt(tabIndex) || 0;\n            // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n            this._clickAction = this._clickAction || this._options.clickAction;\n        }\n        /** Returns the unique id for the visual hidden input. */\n        get inputId() { return `${this.id || this._uniqueId}-input`; }\n        /** Whether the checkbox is required. */\n        get required() { return this._required; }\n        set required(value) { this._required = coerceBooleanProperty(value); }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n                if (!focusOrigin) {\n                    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                    // Angular does not expect events to be raised during change detection, so any state change\n                    // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                    // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                    // telling the form control it has been touched until the next tick.\n                    Promise.resolve().then(() => {\n                        this._onTouched();\n                        this._changeDetectorRef.markForCheck();\n                    });\n                }\n            });\n            this._syncIndeterminate(this._indeterminate);\n        }\n        // TODO: Delete next major revision.\n        ngAfterViewChecked() { }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        /**\n         * Whether the checkbox is checked.\n         */\n        get checked() { return this._checked; }\n        set checked(value) {\n            if (value != this.checked) {\n                this._checked = value;\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /**\n         * Whether the checkbox is disabled. This fully overrides the implementation provided by\n         * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n         */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            const newValue = coerceBooleanProperty(value);\n            if (newValue !== this.disabled) {\n                this._disabled = newValue;\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n         * set to false.\n         */\n        get indeterminate() { return this._indeterminate; }\n        set indeterminate(value) {\n            const changed = value != this._indeterminate;\n            this._indeterminate = coerceBooleanProperty(value);\n            if (changed) {\n                if (this._indeterminate) {\n                    this._transitionCheckState(3 /* Indeterminate */);\n                }\n                else {\n                    this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n                }\n                this.indeterminateChange.emit(this._indeterminate);\n            }\n            this._syncIndeterminate(this._indeterminate);\n        }\n        _isRippleDisabled() {\n            return this.disableRipple || this.disabled;\n        }\n        /** Method being called whenever the label text changes. */\n        _onLabelTextChange() {\n            // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n            // component will be only marked for check, but no actual change detection runs automatically.\n            // Instead of going back into the zone in order to trigger a change detection which causes\n            // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n            // an explicit change detection for the checkbox view and its children.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Implemented as part of ControlValueAccessor.\n        writeValue(value) {\n            this.checked = !!value;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnChange(fn) {\n            this._controlValueAccessorChangeFn = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n        }\n        _getAriaChecked() {\n            if (this.checked) {\n                return 'true';\n            }\n            return this.indeterminate ? 'mixed' : 'false';\n        }\n        _transitionCheckState(newState) {\n            let oldState = this._currentCheckState;\n            let element = this._elementRef.nativeElement;\n            if (oldState === newState) {\n                return;\n            }\n            if (this._currentAnimationClass.length > 0) {\n                element.classList.remove(this._currentAnimationClass);\n            }\n            this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n            this._currentCheckState = newState;\n            if (this._currentAnimationClass.length > 0) {\n                element.classList.add(this._currentAnimationClass);\n                // Remove the animation class to avoid animation when the checkbox is moved between containers\n                const animationClass = this._currentAnimationClass;\n                this._ngZone.runOutsideAngular(() => {\n                    setTimeout(() => {\n                        element.classList.remove(animationClass);\n                    }, 1000);\n                });\n            }\n        }\n        _emitChangeEvent() {\n            const event = new MatCheckboxChange();\n            event.source = this;\n            event.checked = this.checked;\n            this._controlValueAccessorChangeFn(this.checked);\n            this.change.emit(event);\n        }\n        /** Toggles the `checked` state of the checkbox. */\n        toggle() {\n            this.checked = !this.checked;\n        }\n        /**\n         * Event handler for checkbox input element.\n         * Toggles checked state if element is not disabled.\n         * Do not toggle on (change) event since IE doesn't fire change event when\n         *   indeterminate checkbox is clicked.\n         * @param event\n         */\n        _onInputClick(event) {\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `checkbox` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n            // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n            if (!this.disabled && this._clickAction !== 'noop') {\n                // When user manually click on the checkbox, `indeterminate` is set to false.\n                if (this.indeterminate && this._clickAction !== 'check') {\n                    Promise.resolve().then(() => {\n                        this._indeterminate = false;\n                        this.indeterminateChange.emit(this._indeterminate);\n                    });\n                }\n                this.toggle();\n                this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n                // Emit our custom change event if the native input emitted one.\n                // It is important to only emit it, if the native input triggered one, because\n                // we don't want to trigger a change event, when the `checked` variable changes for example.\n                this._emitChangeEvent();\n            }\n            else if (!this.disabled && this._clickAction === 'noop') {\n                // Reset native input when clicked with noop. The native checkbox becomes checked after\n                // click, reset it to be align with `checked` value of `mat-checkbox`.\n                this._inputElement.nativeElement.checked = this.checked;\n                this._inputElement.nativeElement.indeterminate = this.indeterminate;\n            }\n        }\n        /** Focuses the checkbox. */\n        focus(origin = 'keyboard', options) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        _onInteractionEvent(event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the `change` output.\n            event.stopPropagation();\n        }\n        _getAnimationClassForCheckStateTransition(oldState, newState) {\n            // Don't transition if animations are disabled.\n            if (this._animationMode === 'NoopAnimations') {\n                return '';\n            }\n            let animSuffix = '';\n            switch (oldState) {\n                case 0 /* Init */:\n                    // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                    // [checked] bound to it.\n                    if (newState === 1 /* Checked */) {\n                        animSuffix = 'unchecked-checked';\n                    }\n                    else if (newState == 3 /* Indeterminate */) {\n                        animSuffix = 'unchecked-indeterminate';\n                    }\n                    else {\n                        return '';\n                    }\n                    break;\n                case 2 /* Unchecked */:\n                    animSuffix = newState === 1 /* Checked */ ?\n                        'unchecked-checked' : 'unchecked-indeterminate';\n                    break;\n                case 1 /* Checked */:\n                    animSuffix = newState === 2 /* Unchecked */ ?\n                        'checked-unchecked' : 'checked-indeterminate';\n                    break;\n                case 3 /* Indeterminate */:\n                    animSuffix = newState === 1 /* Checked */ ?\n                        'indeterminate-checked' : 'indeterminate-unchecked';\n                    break;\n            }\n            return `mat-checkbox-anim-${animSuffix}`;\n        }\n        /**\n         * Syncs the indeterminate value with the checkbox DOM node.\n         *\n         * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n         * property is supported on an element boils down to `if (propName in element)`. Domino's\n         * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n         * server-side rendering.\n         */\n        _syncIndeterminate(value) {\n            const nativeCheckbox = this._inputElement;\n            if (nativeCheckbox) {\n                nativeCheckbox.nativeElement.indeterminate = value;\n            }\n        }\n    }\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8)); };\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(MatRipple, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 20, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(19, _c1));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatCheckbox.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusMonitor },\n        { type: NgZone },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n    ];\n    MatCheckbox.propDecorators = {\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n        id: [{ type: Input }],\n        required: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        name: [{ type: Input }],\n        change: [{ type: Output }],\n        indeterminateChange: [{ type: Output }],\n        value: [{ type: Input }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }],\n        ripple: [{ type: ViewChild, args: [MatRipple,] }],\n        checked: [{ type: Input }],\n        disabled: [{ type: Input }],\n        indeterminate: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <div class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <div matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div>\\n    </div>\\n    <div class=\\\"mat-checkbox-frame\\\"></div>\\n    <div class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <div class=\\\"mat-checkbox-mixedmark\\\"></div>\\n    </div>\\n  </div>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_CLICK_ACTION]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n    return MatCheckbox;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nlet MatCheckboxRequiredValidator = /** @class */ (() => {\n    class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n    }\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) { return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator); };\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatCheckboxRequiredValidator;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nlet _MatCheckboxRequiredValidatorModule = /** @class */ (() => {\n    class _MatCheckboxRequiredValidatorModule {\n    }\n_MatCheckboxRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatCheckboxRequiredValidatorModule });\n_MatCheckboxRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatCheckboxRequiredValidatorModule_Factory(t) { return new (t || _MatCheckboxRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, { declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\n    return _MatCheckboxRequiredValidatorModule;\n})();\nlet MatCheckboxModule = /** @class */ (() => {\n    class MatCheckboxModule {\n    }\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); }, imports: [[\n            MatRippleModule, MatCommonModule, ObserversModule,\n            _MatCheckboxRequiredValidatorModule\n        ], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule]; }, exports: function () { return [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox]\n            }]\n    }], null, null); })();\n    return MatCheckboxModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CLICK_ACTION, MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n\n//# sourceMappingURL=checkbox.js.map","import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nlet MatChipAvatar = /** @class */ (() => {\n    class MatChipAvatar {\n    }\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            }]\n    }], null, null); })();\n    return MatChipAvatar;\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nlet MatChipTrailingIcon = /** @class */ (() => {\n    class MatChipTrailingIcon {\n    }\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            }]\n    }], null, null); })();\n    return MatChipTrailingIcon;\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nlet MatChip = /** @class */ (() => {\n    class MatChip extends _MatChipMixinBase {\n        constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n        // @breaking-change 8.0.0 `animationMode` parameter to become required.\n        animationMode, \n        // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n        _changeDetectorRef, tabIndex, \n        // @breaking-change 11.0.0 `_document` parameter to become required.\n        _document) {\n            super(_elementRef);\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._changeDetectorRef = _changeDetectorRef;\n            /** Whether the chip has focus. */\n            this._hasFocus = false;\n            /** Whether the chip list is selectable */\n            this.chipListSelectable = true;\n            /** Whether the chip list is in multi-selection mode. */\n            this._chipListMultiple = false;\n            /** Whether the chip list as a whole is disabled. */\n            this._chipListDisabled = false;\n            this._selected = false;\n            this._selectable = true;\n            this._disabled = false;\n            this._removable = true;\n            /** Emits when the chip is focused. */\n            this._onFocus = new Subject();\n            /** Emits when the chip is blured. */\n            this._onBlur = new Subject();\n            /** Emitted when the chip is selected or deselected. */\n            this.selectionChange = new EventEmitter();\n            /** Emitted when the chip is destroyed. */\n            this.destroyed = new EventEmitter();\n            /** Emitted when a chip is to be removed. */\n            this.removed = new EventEmitter();\n            this._addHostClassName();\n            // Dynamically create the ripple target, append it within the chip, and use it as the\n            // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n            // the proper styles.\n            this._chipRippleTarget = (_document || document).createElement('div');\n            this._chipRippleTarget.classList.add('mat-chip-ripple');\n            this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n            this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n            this._chipRipple.setupTriggerEvents(_elementRef);\n            this.rippleConfig = globalRippleOptions || {};\n            this._animationsDisabled = animationMode === 'NoopAnimations';\n            this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n        }\n        /**\n         * Whether ripples are disabled on interaction\n         * @docs-private\n         */\n        get rippleDisabled() {\n            return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n        }\n        /** Whether the chip is selected. */\n        get selected() { return this._selected; }\n        set selected(value) {\n            const coercedValue = coerceBooleanProperty(value);\n            if (coercedValue !== this._selected) {\n                this._selected = coercedValue;\n                this._dispatchSelectionChange();\n            }\n        }\n        /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n        get value() {\n            return this._value !== undefined\n                ? this._value\n                : this._elementRef.nativeElement.textContent;\n        }\n        set value(value) { this._value = value; }\n        /**\n         * Whether or not the chip is selectable. When a chip is not selectable,\n         * changes to its selected state are always ignored. By default a chip is\n         * selectable, and it becomes non-selectable if its parent chip list is\n         * not selectable.\n         */\n        get selectable() { return this._selectable && this.chipListSelectable; }\n        set selectable(value) {\n            this._selectable = coerceBooleanProperty(value);\n        }\n        /** Whether the chip is disabled. */\n        get disabled() { return this._chipListDisabled || this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n        /**\n         * Determines whether or not the chip displays the remove styling and emits (removed) events.\n         */\n        get removable() { return this._removable; }\n        set removable(value) {\n            this._removable = coerceBooleanProperty(value);\n        }\n        /** The ARIA selected applied to the chip. */\n        get ariaSelected() {\n            // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n            // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n            return this.selectable && (this._chipListMultiple || this.selected) ?\n                this.selected.toString() : null;\n        }\n        _addHostClassName() {\n            const basicChipAttrName = 'mat-basic-chip';\n            const element = this._elementRef.nativeElement;\n            if (element.hasAttribute(basicChipAttrName) ||\n                element.tagName.toLowerCase() === basicChipAttrName) {\n                element.classList.add(basicChipAttrName);\n                return;\n            }\n            else {\n                element.classList.add('mat-standard-chip');\n            }\n        }\n        ngOnDestroy() {\n            this.destroyed.emit({ chip: this });\n            this._chipRipple._removeTriggerEvents();\n        }\n        /** Selects the chip. */\n        select() {\n            if (!this._selected) {\n                this._selected = true;\n                this._dispatchSelectionChange();\n                this._markForCheck();\n            }\n        }\n        /** Deselects the chip. */\n        deselect() {\n            if (this._selected) {\n                this._selected = false;\n                this._dispatchSelectionChange();\n                this._markForCheck();\n            }\n        }\n        /** Select this chip and emit selected event */\n        selectViaInteraction() {\n            if (!this._selected) {\n                this._selected = true;\n                this._dispatchSelectionChange(true);\n                this._markForCheck();\n            }\n        }\n        /** Toggles the current selected state of this chip. */\n        toggleSelected(isUserInput = false) {\n            this._selected = !this.selected;\n            this._dispatchSelectionChange(isUserInput);\n            this._markForCheck();\n            return this.selected;\n        }\n        /** Allows for programmatic focusing of the chip. */\n        focus() {\n            if (!this._hasFocus) {\n                this._elementRef.nativeElement.focus();\n                this._onFocus.next({ chip: this });\n            }\n            this._hasFocus = true;\n        }\n        /**\n         * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n         * BACKSPACE keys are pressed.\n         *\n         * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n         */\n        remove() {\n            if (this.removable) {\n                this.removed.emit({ chip: this });\n            }\n        }\n        /** Handles click events on the chip. */\n        _handleClick(event) {\n            if (this.disabled) {\n                event.preventDefault();\n            }\n            else {\n                event.stopPropagation();\n            }\n        }\n        /** Handle custom key presses. */\n        _handleKeydown(event) {\n            if (this.disabled) {\n                return;\n            }\n            switch (event.keyCode) {\n                case DELETE:\n                case BACKSPACE:\n                    // If we are removable, remove the focused chip\n                    this.remove();\n                    // Always prevent so page navigation does not occur\n                    event.preventDefault();\n                    break;\n                case SPACE:\n                    // If we are selectable, toggle the focused chip\n                    if (this.selectable) {\n                        this.toggleSelected(true);\n                    }\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                    break;\n            }\n        }\n        _blur() {\n            // When animations are enabled, Angular may end up removing the chip from the DOM a little\n            // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n            // that moves focus not the next item. To work around the issue, we defer marking the chip\n            // as not focused until the next time the zone stabilizes.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1))\n                .subscribe(() => {\n                this._ngZone.run(() => {\n                    this._hasFocus = false;\n                    this._onBlur.next({ chip: this });\n                });\n            });\n        }\n        _dispatchSelectionChange(isUserInput = false) {\n            this.selectionChange.emit({\n                source: this,\n                isUserInput,\n                selected: this._selected\n            });\n        }\n        _markForCheck() {\n            // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n            if (this._changeDetectorRef) {\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n    }\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatChip.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ];\n    MatChip.propDecorators = {\n        avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n        trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n        removeIcon: [{ type: ContentChild, args: [forwardRef(() => MatChipRemove),] }],\n        selected: [{ type: Input }],\n        value: [{ type: Input }],\n        selectable: [{ type: Input }],\n        disabled: [{ type: Input }],\n        removable: [{ type: Input }],\n        selectionChange: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        removed: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MatChipAvatar]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MatChipTrailingIcon]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [forwardRef(() => MatChipRemove)]\n        }] }); })();\n    return MatChip;\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nlet MatChipRemove = /** @class */ (() => {\n    class MatChipRemove {\n        constructor(_parentChip, \n        // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n        elementRef) {\n            this._parentChip = _parentChip;\n            // @breaking-change 11.0.0 Remove null check for `elementRef`.\n            if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n                elementRef.nativeElement.setAttribute('type', 'button');\n            }\n        }\n        /** Calls the parent chip's public `remove()` method if applicable. */\n        _handleClick(event) {\n            const parentChip = this._parentChip;\n            if (parentChip.removable && !parentChip.disabled) {\n                parentChip.remove();\n            }\n            // We need to stop event propagation because otherwise the event will bubble up to the\n            // form field and cause the `onContainerClick` method to be invoked. This method would then\n            // reset the focused chip that has been focused after chip removal. Usually the parent\n            // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n            // that the chip is being removed before the event bubbles up.\n            event.stopPropagation();\n        }\n    }\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } } });\n    MatChipRemove.ctorParameters = () => [\n        { type: MatChip },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                }\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatChipRemove;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nlet MatChipList = /** @class */ (() => {\n    class MatChipList extends _MatChipListMixinBase {\n        constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n        /** @docs-private */\n        ngControl) {\n            super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n            this._elementRef = _elementRef;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this.ngControl = ngControl;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            this.controlType = 'mat-chip-list';\n            /**\n             * When a chip is destroyed, we store the index of the destroyed chip until the chips\n             * query list notifies about the update. This is necessary because we cannot determine an\n             * appropriate chip that should receive focus until the array of chips updated completely.\n             */\n            this._lastDestroyedChipIndex = null;\n            /** Subject that emits when the component has been destroyed. */\n            this._destroyed = new Subject();\n            /** Uid of the chip list */\n            this._uid = `mat-chip-list-${nextUniqueId++}`;\n            /** Tab index for the chip list. */\n            this._tabIndex = 0;\n            /**\n             * User defined tab index.\n             * When it is not null, use user defined tab index. Otherwise use _tabIndex\n             */\n            this._userTabIndex = null;\n            /** Function when touched */\n            this._onTouched = () => { };\n            /** Function when changed */\n            this._onChange = () => { };\n            this._multiple = false;\n            this._compareWith = (o1, o2) => o1 === o2;\n            this._required = false;\n            this._disabled = false;\n            /** Orientation of the chip list. */\n            this.ariaOrientation = 'horizontal';\n            this._selectable = true;\n            /** Event emitted when the selected chip list value has been changed by the user. */\n            this.change = new EventEmitter();\n            /**\n             * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            this.valueChange = new EventEmitter();\n            if (this.ngControl) {\n                this.ngControl.valueAccessor = this;\n            }\n        }\n        /** The array of selected chips inside chip list. */\n        get selected() {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        }\n        /** The ARIA role applied to the chip list. */\n        get role() { return this.empty ? null : 'listbox'; }\n        /** Whether the user should be allowed to select multiple chips. */\n        get multiple() { return this._multiple; }\n        set multiple(value) {\n            this._multiple = coerceBooleanProperty(value);\n            this._syncChipsState();\n        }\n        /**\n         * A function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         */\n        get compareWith() { return this._compareWith; }\n        set compareWith(fn) {\n            this._compareWith = fn;\n            if (this._selectionModel) {\n                // A different comparator means the selection could change.\n                this._initializeSelection();\n            }\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get value() { return this._value; }\n        set value(value) {\n            this.writeValue(value);\n            this._value = value;\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get id() {\n            return this._chipInput ? this._chipInput.id : this._uid;\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get required() { return this._required; }\n        set required(value) {\n            this._required = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get placeholder() {\n            return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n        }\n        set placeholder(value) {\n            this._placeholder = value;\n            this.stateChanges.next();\n        }\n        /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n        get focused() {\n            return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get empty() {\n            return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get shouldLabelFloat() { return !this.empty || this.focused; }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._syncChipsState();\n        }\n        /**\n         * Whether or not this chip list is selectable. When a chip list is not selectable,\n         * the selected states for all the chips inside the chip list are always ignored.\n         */\n        get selectable() { return this._selectable; }\n        set selectable(value) {\n            this._selectable = coerceBooleanProperty(value);\n            if (this.chips) {\n                this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n            }\n        }\n        set tabIndex(value) {\n            this._userTabIndex = value;\n            this._tabIndex = value;\n        }\n        /** Combined stream of all of the child chips' selection change events. */\n        get chipSelectionChanges() {\n            return merge(...this.chips.map(chip => chip.selectionChange));\n        }\n        /** Combined stream of all of the child chips' focus change events. */\n        get chipFocusChanges() {\n            return merge(...this.chips.map(chip => chip._onFocus));\n        }\n        /** Combined stream of all of the child chips' blur change events. */\n        get chipBlurChanges() {\n            return merge(...this.chips.map(chip => chip._onBlur));\n        }\n        /** Combined stream of all of the child chips' remove change events. */\n        get chipRemoveChanges() {\n            return merge(...this.chips.map(chip => chip.destroyed));\n        }\n        ngAfterContentInit() {\n            this._keyManager = new FocusKeyManager(this.chips)\n                .withWrap()\n                .withVerticalOrientation()\n                .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n            if (this._dir) {\n                this._dir.change\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n            }\n            this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._allowFocusEscape();\n            });\n            // When the list changes, re-subscribe\n            this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => {\n                        this._syncChipsState();\n                    });\n                }\n                this._resetChips();\n                // Reset chips selected/deselected status\n                this._initializeSelection();\n                // Check to see if we need to update our tab index\n                this._updateTabIndex();\n                // Check to see if we have a destroyed chip and need to refocus\n                this._updateFocusForDestroyedChips();\n                this.stateChanges.next();\n            });\n        }\n        ngOnInit() {\n            this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n            this.stateChanges.next();\n        }\n        ngDoCheck() {\n            if (this.ngControl) {\n                // We need to re-evaluate this on every change detection cycle, because there are some\n                // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n                // that whatever logic is in here has to be super lean or we risk destroying the performance.\n                this.updateErrorState();\n                if (this.ngControl.disabled !== this._disabled) {\n                    this.disabled = !!this.ngControl.disabled;\n                }\n            }\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this.stateChanges.complete();\n            this._dropSubscriptions();\n        }\n        /** Associates an HTML input element with this chip list. */\n        registerInput(inputElement) {\n            this._chipInput = inputElement;\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n        // Implemented as part of ControlValueAccessor.\n        writeValue(value) {\n            if (this.chips) {\n                this._setSelectionByValue(value, false);\n            }\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n            this.stateChanges.next();\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        onContainerClick(event) {\n            if (!this._originatesFromChip(event)) {\n                this.focus();\n            }\n        }\n        /**\n         * Focuses the first non-disabled chip in this chip list, or the associated input when there\n         * are no eligible chips.\n         */\n        focus(options) {\n            if (this.disabled) {\n                return;\n            }\n            // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n            // Focus on first element if there's no chipInput inside chip-list\n            if (this._chipInput && this._chipInput.focused) {\n                // do nothing\n            }\n            else if (this.chips.length > 0) {\n                this._keyManager.setFirstItemActive();\n                this.stateChanges.next();\n            }\n            else {\n                this._focusInput(options);\n                this.stateChanges.next();\n            }\n        }\n        /** Attempt to focus an input if we have one. */\n        _focusInput(options) {\n            if (this._chipInput) {\n                this._chipInput.focus(options);\n            }\n        }\n        /**\n         * Pass events to the keyboard manager. Available here for tests.\n         */\n        _keydown(event) {\n            const target = event.target;\n            // If they are on an empty input and hit backspace, focus the last chip\n            if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else if (target && target.classList.contains('mat-chip')) {\n                if (event.keyCode === HOME) {\n                    this._keyManager.setFirstItemActive();\n                    event.preventDefault();\n                }\n                else if (event.keyCode === END) {\n                    this._keyManager.setLastItemActive();\n                    event.preventDefault();\n                }\n                else {\n                    this._keyManager.onKeydown(event);\n                }\n                this.stateChanges.next();\n            }\n        }\n        /**\n         * Check the tab index as you should not be allowed to focus an empty list.\n         */\n        _updateTabIndex() {\n            // If we have 0 chips, we should not allow keyboard focus\n            this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n        }\n        /**\n         * If the amount of chips changed, we need to update the\n         * key manager state and focus the next closest chip.\n         */\n        _updateFocusForDestroyedChips() {\n            // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n            if (this._lastDestroyedChipIndex != null) {\n                if (this.chips.length) {\n                    const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                    this._keyManager.setActiveItem(newChipIndex);\n                }\n                else {\n                    this.focus();\n                }\n            }\n            this._lastDestroyedChipIndex = null;\n        }\n        /**\n         * Utility to ensure all indexes are valid.\n         *\n         * @param index The index to be checked.\n         * @returns True if the index is valid for our list of chips.\n         */\n        _isValidIndex(index) {\n            return index >= 0 && index < this.chips.length;\n        }\n        _isInputEmpty(element) {\n            if (element && element.nodeName.toLowerCase() === 'input') {\n                let input = element;\n                return !input.value;\n            }\n            return false;\n        }\n        _setSelectionByValue(value, isUserInput = true) {\n            this._clearSelection();\n            this.chips.forEach(chip => chip.deselect());\n            if (Array.isArray(value)) {\n                value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n                this._sortValues();\n            }\n            else {\n                const correspondingChip = this._selectValue(value, isUserInput);\n                // Shift focus to the active item. Note that we shouldn't do this in multiple\n                // mode, because we don't know what chip the user interacted with last.\n                if (correspondingChip) {\n                    if (isUserInput) {\n                        this._keyManager.setActiveItem(correspondingChip);\n                    }\n                }\n            }\n        }\n        /**\n         * Finds and selects the chip based on its value.\n         * @returns Chip that has the corresponding value.\n         */\n        _selectValue(value, isUserInput = true) {\n            const correspondingChip = this.chips.find(chip => {\n                return chip.value != null && this._compareWith(chip.value, value);\n            });\n            if (correspondingChip) {\n                isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n                this._selectionModel.select(correspondingChip);\n            }\n            return correspondingChip;\n        }\n        _initializeSelection() {\n            // Defer setting the value in order to avoid the \"Expression\n            // has changed after it was checked\" errors from Angular.\n            Promise.resolve().then(() => {\n                if (this.ngControl || this._value) {\n                    this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                    this.stateChanges.next();\n                }\n            });\n        }\n        /**\n         * Deselects every chip in the list.\n         * @param skip Chip that should not be deselected.\n         */\n        _clearSelection(skip) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip !== skip) {\n                    chip.deselect();\n                }\n            });\n            this.stateChanges.next();\n        }\n        /**\n         * Sorts the model values, ensuring that they keep the same\n         * order that they have in the panel.\n         */\n        _sortValues() {\n            if (this._multiple) {\n                this._selectionModel.clear();\n                this.chips.forEach(chip => {\n                    if (chip.selected) {\n                        this._selectionModel.select(chip);\n                    }\n                });\n                this.stateChanges.next();\n            }\n        }\n        /** Emits change event to set the model value. */\n        _propagateChanges(fallbackValue) {\n            let valueToEmit = null;\n            if (Array.isArray(this.selected)) {\n                valueToEmit = this.selected.map(chip => chip.value);\n            }\n            else {\n                valueToEmit = this.selected ? this.selected.value : fallbackValue;\n            }\n            this._value = valueToEmit;\n            this.change.emit(new MatChipListChange(this, valueToEmit));\n            this.valueChange.emit(valueToEmit);\n            this._onChange(valueToEmit);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** When blurred, mark the field as touched when focus moved outside the chip list. */\n        _blur() {\n            if (!this._hasFocusedChip()) {\n                this._keyManager.setActiveItem(-1);\n            }\n            if (!this.disabled) {\n                if (this._chipInput) {\n                    // If there's a chip input, we should check whether the focus moved to chip input.\n                    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                    // to chip input, do nothing.\n                    // Timeout is needed to wait for the focus() event trigger on chip input.\n                    setTimeout(() => {\n                        if (!this.focused) {\n                            this._markAsTouched();\n                        }\n                    });\n                }\n                else {\n                    // If there's no chip input, then mark the field as touched.\n                    this._markAsTouched();\n                }\n            }\n        }\n        /** Mark the field as touched */\n        _markAsTouched() {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n        /**\n         * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n         * user to tab out of it. This prevents the list from capturing focus and redirecting\n         * it back to the first chip, creating a focus trap, if it user tries to tab away.\n         */\n        _allowFocusEscape() {\n            if (this._tabIndex !== -1) {\n                this._tabIndex = -1;\n                setTimeout(() => {\n                    this._tabIndex = this._userTabIndex || 0;\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        }\n        _resetChips() {\n            this._dropSubscriptions();\n            this._listenToChipsFocus();\n            this._listenToChipsSelection();\n            this._listenToChipsRemoved();\n        }\n        _dropSubscriptions() {\n            if (this._chipFocusSubscription) {\n                this._chipFocusSubscription.unsubscribe();\n                this._chipFocusSubscription = null;\n            }\n            if (this._chipBlurSubscription) {\n                this._chipBlurSubscription.unsubscribe();\n                this._chipBlurSubscription = null;\n            }\n            if (this._chipSelectionSubscription) {\n                this._chipSelectionSubscription.unsubscribe();\n                this._chipSelectionSubscription = null;\n            }\n            if (this._chipRemoveSubscription) {\n                this._chipRemoveSubscription.unsubscribe();\n                this._chipRemoveSubscription = null;\n            }\n        }\n        /** Listens to user-generated selection events on each chip. */\n        _listenToChipsSelection() {\n            this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n                event.source.selected\n                    ? this._selectionModel.select(event.source)\n                    : this._selectionModel.deselect(event.source);\n                // For single selection chip list, make sure the deselected value is unselected.\n                if (!this.multiple) {\n                    this.chips.forEach(chip => {\n                        if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                            chip.deselect();\n                        }\n                    });\n                }\n                if (event.isUserInput) {\n                    this._propagateChanges();\n                }\n            });\n        }\n        /** Listens to user-generated selection events on each chip. */\n        _listenToChipsFocus() {\n            this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n                let chipIndex = this.chips.toArray().indexOf(event.chip);\n                if (this._isValidIndex(chipIndex)) {\n                    this._keyManager.updateActiveItem(chipIndex);\n                }\n                this.stateChanges.next();\n            });\n            this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n                this._blur();\n                this.stateChanges.next();\n            });\n        }\n        _listenToChipsRemoved() {\n            this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n                const chip = event.chip;\n                const chipIndex = this.chips.toArray().indexOf(event.chip);\n                // In case the chip that will be removed is currently focused, we temporarily store\n                // the index in order to be able to determine an appropriate sibling chip that will\n                // receive focus.\n                if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                    this._lastDestroyedChipIndex = chipIndex;\n                }\n            });\n        }\n        /** Checks whether an event comes from inside a chip element. */\n        _originatesFromChip(event) {\n            let currentElement = event.target;\n            while (currentElement && currentElement !== this._elementRef.nativeElement) {\n                if (currentElement.classList.contains('mat-chip')) {\n                    return true;\n                }\n                currentElement = currentElement.parentElement;\n            }\n            return false;\n        }\n        /** Checks whether any of the chips is focused. */\n        _hasFocusedChip() {\n            return this.chips.some(chip => chip._hasFocus);\n        }\n        /** Syncs the list's state with the individual chips. */\n        _syncChipsState() {\n            if (this.chips) {\n                this.chips.forEach(chip => {\n                    chip._chipListDisabled = this._disabled;\n                    chip._chipListMultiple = this.multiple;\n                });\n            }\n        }\n    }\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatChipList.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: ErrorStateMatcher },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n    ];\n    MatChipList.propDecorators = {\n        errorStateMatcher: [{ type: Input }],\n        multiple: [{ type: Input }],\n        compareWith: [{ type: Input }],\n        value: [{ type: Input }],\n        required: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        disabled: [{ type: Input }],\n        ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n        selectable: [{ type: Input }],\n        tabIndex: [{ type: Input }],\n        change: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        chips: [{ type: ContentChildren, args: [MatChip, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n    return MatChipList;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nlet MatChipInput = /** @class */ (() => {\n    class MatChipInput {\n        constructor(_elementRef, _defaultOptions) {\n            this._elementRef = _elementRef;\n            this._defaultOptions = _defaultOptions;\n            /** Whether the control is focused. */\n            this.focused = false;\n            this._addOnBlur = false;\n            /**\n             * The list of key codes that will trigger a chipEnd event.\n             *\n             * Defaults to `[ENTER]`.\n             */\n            this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n            /** Emitted when a chip is to be added. */\n            this.chipEnd = new EventEmitter();\n            /** The input's placeholder text. */\n            this.placeholder = '';\n            /** Unique id for the input. */\n            this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n            this._disabled = false;\n            this._inputElement = this._elementRef.nativeElement;\n        }\n        /** Register input for chip list */\n        set chipList(value) {\n            if (value) {\n                this._chipList = value;\n                this._chipList.registerInput(this);\n            }\n        }\n        /**\n         * Whether or not the chipEnd event will be emitted when the input is blurred.\n         */\n        get addOnBlur() { return this._addOnBlur; }\n        set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n        /** Whether the input is disabled. */\n        get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n        /** Whether the input is empty. */\n        get empty() { return !this._inputElement.value; }\n        ngOnChanges() {\n            this._chipList.stateChanges.next();\n        }\n        /** Utility method to make host definition/tests more clear. */\n        _keydown(event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            this._emitChipEnd(event);\n        }\n        /** Checks to see if the blur should emit the (chipEnd) event. */\n        _blur() {\n            if (this.addOnBlur) {\n                this._emitChipEnd();\n            }\n            this.focused = false;\n            // Blur the chip list if it is not focused\n            if (!this._chipList.focused) {\n                this._chipList._blur();\n            }\n            this._chipList.stateChanges.next();\n        }\n        _focus() {\n            this.focused = true;\n            this._chipList.stateChanges.next();\n        }\n        /** Checks to see if the (chipEnd) event needs to be emitted. */\n        _emitChipEnd(event) {\n            if (!this._inputElement.value && !!event) {\n                this._chipList._keydown(event);\n            }\n            if (!event || this._isSeparatorKey(event)) {\n                this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n                if (event) {\n                    event.preventDefault();\n                }\n            }\n        }\n        _onInput() {\n            // Let chip list know whenever the value changes.\n            this._chipList.stateChanges.next();\n        }\n        /** Focuses the input. */\n        focus(options) {\n            this._inputElement.focus(options);\n        }\n        /** Checks whether a keycode is one of the configured separators. */\n        _isSeparatorKey(event) {\n            if (hasModifierKey(event)) {\n                return false;\n            }\n            const separators = this.separatorKeyCodes;\n            const keyCode = event.keyCode;\n            return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n        }\n    }\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatChipInput.ctorParameters = () => [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n    ];\n    MatChipInput.propDecorators = {\n        chipList: [{ type: Input, args: ['matChipInputFor',] }],\n        addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n        separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n        chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n        placeholder: [{ type: Input }],\n        id: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n    return MatChipInput;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nlet MatChipsModule = /** @class */ (() => {\n    class MatChipsModule {\n    }\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); }, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon], exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n    return MatChipsModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n//# sourceMappingURL=chips.js.map","import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by defalt. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nlet MatDialogContainer = /** @class */ (() => {\n    class MatDialogContainer extends BasePortalOutlet {\n        constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n        /** The dialog configuration. */\n        _config) {\n            super();\n            this._elementRef = _elementRef;\n            this._focusTrapFactory = _focusTrapFactory;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._config = _config;\n            /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n            this._elementFocusedBeforeDialogWasOpened = null;\n            /** State of the dialog animation. */\n            this._state = 'enter';\n            /** Emits when an animation state changes. */\n            this._animationStateChanged = new EventEmitter();\n            /**\n             * Attaches a DOM portal to the dialog container.\n             * @param portal Portal to be attached.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            this.attachDomPortal = (portal) => {\n                if (this._portalOutlet.hasAttached()) {\n                    throwMatDialogContentAlreadyAttachedError();\n                }\n                this._setupFocusTrap();\n                return this._portalOutlet.attachDomPortal(portal);\n            };\n            this._ariaLabelledBy = _config.ariaLabelledBy || null;\n            this._document = _document;\n        }\n        /**\n         * Attach a ComponentPortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        attachComponentPortal(portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._setupFocusTrap();\n            return this._portalOutlet.attachComponentPortal(portal);\n        }\n        /**\n         * Attach a TemplatePortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        attachTemplatePortal(portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._setupFocusTrap();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        }\n        /** Moves focus back into the dialog if it was moved out. */\n        _recaptureFocus() {\n            if (!this._containsFocus()) {\n                const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n                if (focusContainer) {\n                    this._elementRef.nativeElement.focus();\n                }\n            }\n        }\n        /** Moves the focus inside the focus trap. */\n        _trapFocus() {\n            // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n            // ready in instances where change detection has to run first. To deal with this, we simply\n            // wait for the microtask queue to be empty.\n            if (this._config.autoFocus) {\n                this._focusTrap.focusInitialElementWhenReady();\n            }\n            else if (!this._containsFocus()) {\n                // Otherwise ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                this._elementRef.nativeElement.focus();\n            }\n        }\n        /** Restores focus to the element that was focused before the dialog opened. */\n        _restoreFocus() {\n            const toFocus = this._elementFocusedBeforeDialogWasOpened;\n            // We need the extra check, because IE can set the `activeElement` to null in some cases.\n            if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n                const activeElement = this._document.activeElement;\n                const element = this._elementRef.nativeElement;\n                // Make sure that focus is still inside the dialog or is on the body (usually because a\n                // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n                // the consumer moved it themselves before the animation was done, in which case we shouldn't\n                // do anything.\n                if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                    element.contains(activeElement)) {\n                    toFocus.focus();\n                }\n            }\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n        }\n        /**\n         * Sets up the focus trand and saves a reference to the\n         * element that was focused before the dialog was opened.\n         */\n        _setupFocusTrap() {\n            if (!this._focusTrap) {\n                this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            }\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n                // Note that there is no focus method when rendering on the server.\n                if (this._elementRef.nativeElement.focus) {\n                    // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                    // opening multiple dialogs at the same time. Needs to be async, because the element\n                    // may not be focusable immediately.\n                    Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n                }\n            }\n        }\n        /** Returns whether focus is inside the dialog. */\n        _containsFocus() {\n            const element = this._elementRef.nativeElement;\n            const activeElement = this._document.activeElement;\n            return element === activeElement || element.contains(activeElement);\n        }\n        /** Callback, invoked whenever an animation on the host completes. */\n        _onAnimationDone(event) {\n            if (event.toState === 'enter') {\n                this._trapFocus();\n            }\n            else if (event.toState === 'exit') {\n                this._restoreFocus();\n            }\n            this._animationStateChanged.emit(event);\n        }\n        /** Callback, invoked when an animation on the host starts. */\n        _onAnimationStart(event) {\n            this._animationStateChanged.emit(event);\n        }\n        /** Starts the dialog exit animation. */\n        _startExitAnimation() {\n            this._state = 'exit';\n            // Mark the container for check so it can react if the\n            // view container is using OnPush change detection.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n    MatDialogContainer.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusTrapFactory },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: MatDialogConfig }\n    ];\n    MatDialogContainer.propDecorators = {\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n    return MatDialogContainer;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'enter'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            this.close();\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nlet MatDialog = /** @class */ (() => {\n    class MatDialog {\n        constructor(_overlay, _injector, \n        /**\n         * @deprecated `_location` parameter to be removed.\n         * @breaking-change 10.0.0\n         */\n        _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n            this._overlay = _overlay;\n            this._injector = _injector;\n            this._defaultOptions = _defaultOptions;\n            this._parentDialog = _parentDialog;\n            this._overlayContainer = _overlayContainer;\n            this._openDialogsAtThisLevel = [];\n            this._afterAllClosedAtThisLevel = new Subject();\n            this._afterOpenedAtThisLevel = new Subject();\n            this._ariaHiddenElements = new Map();\n            // TODO (jelbourn): tighten the typing right-hand side of this expression.\n            /**\n             * Stream that emits when all open dialog have finished closing.\n             * Will emit on subscribe if there are no open dialogs to begin with.\n             */\n            this.afterAllClosed = defer(() => this.openDialogs.length ?\n                this._afterAllClosed :\n                this._afterAllClosed.pipe(startWith(undefined)));\n            this._scrollStrategy = scrollStrategy;\n        }\n        /** Keeps track of the currently-open dialogs. */\n        get openDialogs() {\n            return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n        }\n        /** Stream that emits when a dialog has been opened. */\n        get afterOpened() {\n            return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n        }\n        get _afterAllClosed() {\n            const parent = this._parentDialog;\n            return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n        }\n        /**\n         * Opens a modal dialog containing the given component.\n         * @param componentOrTemplateRef Type of the component to load into the dialog,\n         *     or a TemplateRef to instantiate as the dialog content.\n         * @param config Extra configuration options.\n         * @returns Reference to the newly-opened dialog.\n         */\n        open(componentOrTemplateRef, config) {\n            config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n            if (config.id && this.getDialogById(config.id)) {\n                throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n            }\n            const overlayRef = this._createOverlay(config);\n            const dialogContainer = this._attachDialogContainer(overlayRef, config);\n            const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n            // If this is the first dialog that we're opening, hide all the non-overlay content.\n            if (!this.openDialogs.length) {\n                this._hideNonDialogContentFromAssistiveTechnology();\n            }\n            this.openDialogs.push(dialogRef);\n            dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n            this.afterOpened.next(dialogRef);\n            return dialogRef;\n        }\n        /**\n         * Closes all of the currently-open dialogs.\n         */\n        closeAll() {\n            this._closeDialogs(this.openDialogs);\n        }\n        /**\n         * Finds an open dialog by its id.\n         * @param id ID to use when looking up the dialog.\n         */\n        getDialogById(id) {\n            return this.openDialogs.find(dialog => dialog.id === id);\n        }\n        ngOnDestroy() {\n            // Only close the dialogs at this level on destroy\n            // since the parent service may still be active.\n            this._closeDialogs(this._openDialogsAtThisLevel);\n            this._afterAllClosedAtThisLevel.complete();\n            this._afterOpenedAtThisLevel.complete();\n        }\n        /**\n         * Creates the overlay into which the dialog will be loaded.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the OverlayRef for the created overlay.\n         */\n        _createOverlay(config) {\n            const overlayConfig = this._getOverlayConfig(config);\n            return this._overlay.create(overlayConfig);\n        }\n        /**\n         * Creates an overlay config from a dialog config.\n         * @param dialogConfig The dialog configuration.\n         * @returns The overlay configuration.\n         */\n        _getOverlayConfig(dialogConfig) {\n            const state = new OverlayConfig({\n                positionStrategy: this._overlay.position().global(),\n                scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n                panelClass: dialogConfig.panelClass,\n                hasBackdrop: dialogConfig.hasBackdrop,\n                direction: dialogConfig.direction,\n                minWidth: dialogConfig.minWidth,\n                minHeight: dialogConfig.minHeight,\n                maxWidth: dialogConfig.maxWidth,\n                maxHeight: dialogConfig.maxHeight,\n                disposeOnNavigation: dialogConfig.closeOnNavigation\n            });\n            if (dialogConfig.backdropClass) {\n                state.backdropClass = dialogConfig.backdropClass;\n            }\n            return state;\n        }\n        /**\n         * Attaches an MatDialogContainer to a dialog's already-created overlay.\n         * @param overlay Reference to the dialog's underlying overlay.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to a ComponentRef for the attached container.\n         */\n        _attachDialogContainer(overlay, config) {\n            const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            const injector = Injector.create({\n                parent: userInjector || this._injector,\n                providers: [{ provide: MatDialogConfig, useValue: config }]\n            });\n            const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n            const containerRef = overlay.attach(containerPortal);\n            return containerRef.instance;\n        }\n        /**\n         * Attaches the user-provided component to the already-created MatDialogContainer.\n         * @param componentOrTemplateRef The type of component being loaded into the dialog,\n         *     or a TemplateRef to instantiate as the content.\n         * @param dialogContainer Reference to the wrapping MatDialogContainer.\n         * @param overlayRef Reference to the overlay in which the dialog resides.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n         */\n        _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n            // Create a reference to the dialog we're creating in order to give the user a handle\n            // to modify and close it.\n            const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n            if (componentOrTemplateRef instanceof TemplateRef) {\n                dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n            }\n            else {\n                const injector = this._createInjector(config, dialogRef, dialogContainer);\n                const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n                dialogRef.componentInstance = contentRef.instance;\n            }\n            dialogRef\n                .updateSize(config.width, config.height)\n                .updatePosition(config.position);\n            return dialogRef;\n        }\n        /**\n         * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n         * of a dialog to close itself and, optionally, to return a value.\n         * @param config Config object that is used to construct the dialog.\n         * @param dialogRef Reference to the dialog.\n         * @param container Dialog container element that wraps all of the contents.\n         * @returns The custom injector that can be used inside the dialog.\n         */\n        _createInjector(config, dialogRef, dialogContainer) {\n            const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n            // content are created out of the same ViewContainerRef and as such, are siblings for injector\n            // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n            // added to the injection tokens.\n            const providers = [\n                { provide: MatDialogContainer, useValue: dialogContainer },\n                { provide: MAT_DIALOG_DATA, useValue: config.data },\n                { provide: MatDialogRef, useValue: dialogRef }\n            ];\n            if (config.direction &&\n                (!userInjector || !userInjector.get(Directionality, null))) {\n                providers.push({\n                    provide: Directionality,\n                    useValue: { value: config.direction, change: of() }\n                });\n            }\n            return Injector.create({ parent: userInjector || this._injector, providers });\n        }\n        /**\n         * Removes a dialog from the array of open dialogs.\n         * @param dialogRef Dialog to be removed.\n         */\n        _removeOpenDialog(dialogRef) {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                // If all the dialogs were closed, remove/restore the `aria-hidden`\n                // to a the siblings and emit to the `afterAllClosed` stream.\n                if (!this.openDialogs.length) {\n                    this._ariaHiddenElements.forEach((previousValue, element) => {\n                        if (previousValue) {\n                            element.setAttribute('aria-hidden', previousValue);\n                        }\n                        else {\n                            element.removeAttribute('aria-hidden');\n                        }\n                    });\n                    this._ariaHiddenElements.clear();\n                    this._afterAllClosed.next();\n                }\n            }\n        }\n        /**\n         * Hides all of the content that isn't an overlay from assistive technology.\n         */\n        _hideNonDialogContentFromAssistiveTechnology() {\n            const overlayContainer = this._overlayContainer.getContainerElement();\n            // Ensure that the overlay container is attached to the DOM.\n            if (overlayContainer.parentElement) {\n                const siblings = overlayContainer.parentElement.children;\n                for (let i = siblings.length - 1; i > -1; i--) {\n                    let sibling = siblings[i];\n                    if (sibling !== overlayContainer &&\n                        sibling.nodeName !== 'SCRIPT' &&\n                        sibling.nodeName !== 'STYLE' &&\n                        !sibling.hasAttribute('aria-live')) {\n                        this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                        sibling.setAttribute('aria-hidden', 'true');\n                    }\n                }\n            }\n        }\n        /** Closes all of the dialogs in an array. */\n        _closeDialogs(dialogs) {\n            let i = dialogs.length;\n            while (i--) {\n                // The `_openDialogs` property isn't updated after close until the rxjs subscription\n                // runs on the next microtask, in addition to modifying the array as we're going\n                // through it. We loop through all of them and call close without assuming that\n                // they'll be removed from the list instantaneously.\n                dialogs[i].close();\n            }\n        }\n    }\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: function (t) { return MatDialog.ɵfac(t); } });\n    MatDialog.ctorParameters = () => [\n        { type: Overlay },\n        { type: Injector },\n        { type: Location, decorators: [{ type: Optional }] },\n        { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n        { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: OverlayContainer }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n    return MatDialog;\n})();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nlet MatDialogClose = /** @class */ (() => {\n    class MatDialogClose {\n        constructor(dialogRef, _elementRef, _dialog) {\n            this.dialogRef = dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            /** Default to \"button\" to prevents accidental form submits. */\n            this.type = 'button';\n        }\n        ngOnInit() {\n            if (!this.dialogRef) {\n                // When this directive is included in a dialog via TemplateRef (rather than being\n                // in a Component), the DialogRef isn't available via injection because embedded\n                // views cannot be given a custom injector. Instead, we look up the DialogRef by\n                // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n                // be resolved at constructor time.\n                this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n        }\n        ngOnChanges(changes) {\n            const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n            if (proxiedChange) {\n                this.dialogResult = proxiedChange.currentValue;\n            }\n        }\n    }\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatDialogClose.ctorParameters = () => [\n        { type: MatDialogRef, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: MatDialog }\n    ];\n    MatDialogClose.propDecorators = {\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        type: [{ type: Input }],\n        dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n        _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n    return MatDialogClose;\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nlet MatDialogTitle = /** @class */ (() => {\n    class MatDialogTitle {\n        constructor(_dialogRef, _elementRef, _dialog) {\n            this._dialogRef = _dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            this.id = `mat-dialog-title-${dialogElementUid++}`;\n        }\n        ngOnInit() {\n            if (!this._dialogRef) {\n                this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n            if (this._dialogRef) {\n                Promise.resolve().then(() => {\n                    const container = this._dialogRef._containerInstance;\n                    if (container && !container._ariaLabelledBy) {\n                        container._ariaLabelledBy = this.id;\n                    }\n                });\n            }\n        }\n    }\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n    MatDialogTitle.ctorParameters = () => [\n        { type: MatDialogRef, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: MatDialog }\n    ];\n    MatDialogTitle.propDecorators = {\n        id: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n    return MatDialogTitle;\n})();\n/**\n * Scrollable content container of a dialog.\n */\nlet MatDialogContent = /** @class */ (() => {\n    class MatDialogContent {\n    }\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n    return MatDialogContent;\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nlet MatDialogActions = /** @class */ (() => {\n    class MatDialogActions {\n    }\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n    return MatDialogActions;\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatDialogModule = /** @class */ (() => {\n    class MatDialogModule {\n    }\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); }, providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n    return MatDialogModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map","import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nlet AutofillMonitor = /** @class */ (() => {\n    class AutofillMonitor {\n        constructor(_platform, _ngZone) {\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._monitoredElements = new Map();\n        }\n        monitor(elementOrRef) {\n            if (!this._platform.isBrowser) {\n                return EMPTY;\n            }\n            const element = coerceElement(elementOrRef);\n            const info = this._monitoredElements.get(element);\n            if (info) {\n                return info.subject.asObservable();\n            }\n            const result = new Subject();\n            const cssClass = 'cdk-text-field-autofilled';\n            const listener = ((event) => {\n                // Animation events fire on initial element render, we check for the presence of the autofill\n                // CSS class to make sure this is a real change in state, not just the initial render before\n                // we fire off events.\n                if (event.animationName === 'cdk-text-field-autofill-start' &&\n                    !element.classList.contains(cssClass)) {\n                    element.classList.add(cssClass);\n                    this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n                }\n                else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                    element.classList.contains(cssClass)) {\n                    element.classList.remove(cssClass);\n                    this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n                }\n            });\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('animationstart', listener, listenerOptions);\n                element.classList.add('cdk-text-field-autofill-monitored');\n            });\n            this._monitoredElements.set(element, {\n                subject: result,\n                unlisten: () => {\n                    element.removeEventListener('animationstart', listener, listenerOptions);\n                }\n            });\n            return result.asObservable();\n        }\n        stopMonitoring(elementOrRef) {\n            const element = coerceElement(elementOrRef);\n            const info = this._monitoredElements.get(element);\n            if (info) {\n                info.unlisten();\n                info.subject.complete();\n                element.classList.remove('cdk-text-field-autofill-monitored');\n                element.classList.remove('cdk-text-field-autofilled');\n                this._monitoredElements.delete(element);\n            }\n        }\n        ngOnDestroy() {\n            this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n        }\n    }\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n    AutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n    AutofillMonitor.ctorParameters = () => [\n        { type: Platform },\n        { type: NgZone }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n    return AutofillMonitor;\n})();\n/** A directive that can be used to monitor the autofill state of an input. */\nlet CdkAutofill = /** @class */ (() => {\n    class CdkAutofill {\n        constructor(_elementRef, _autofillMonitor) {\n            this._elementRef = _elementRef;\n            this._autofillMonitor = _autofillMonitor;\n            /** Emits when the autofill state of the element changes. */\n            this.cdkAutofill = new EventEmitter();\n        }\n        ngOnInit() {\n            this._autofillMonitor\n                .monitor(this._elementRef)\n                .subscribe(event => this.cdkAutofill.emit(event));\n        }\n        ngOnDestroy() {\n            this._autofillMonitor.stopMonitoring(this._elementRef);\n        }\n    }\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\n    CdkAutofill.ctorParameters = () => [\n        { type: ElementRef },\n        { type: AutofillMonitor }\n    ];\n    CdkAutofill.propDecorators = {\n        cdkAutofill: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n    return CdkAutofill;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nlet CdkTextareaAutosize = /** @class */ (() => {\n    class CdkTextareaAutosize {\n        constructor(_elementRef, _platform, _ngZone, \n        /** @breaking-change 11.0.0 make document required */\n        document) {\n            this._elementRef = _elementRef;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._destroyed = new Subject();\n            this._enabled = true;\n            /**\n             * Value of minRows as of last resize. If the minRows has decreased, the\n             * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n             * does not have the same problem because it does not affect the textarea's scrollHeight.\n             */\n            this._previousMinRows = -1;\n            this._document = document;\n            this._textareaElement = this._elementRef.nativeElement;\n            this._measuringClass = _platform.FIREFOX ?\n                'cdk-textarea-autosize-measuring-firefox' :\n                'cdk-textarea-autosize-measuring';\n        }\n        /** Minimum amount of rows in the textarea. */\n        get minRows() { return this._minRows; }\n        set minRows(value) {\n            this._minRows = coerceNumberProperty(value);\n            this._setMinHeight();\n        }\n        /** Maximum amount of rows in the textarea. */\n        get maxRows() { return this._maxRows; }\n        set maxRows(value) {\n            this._maxRows = coerceNumberProperty(value);\n            this._setMaxHeight();\n        }\n        /** Whether autosizing is enabled or not */\n        get enabled() { return this._enabled; }\n        set enabled(value) {\n            value = coerceBooleanProperty(value);\n            // Only act if the actual value changed. This specifically helps to not run\n            // resizeToFitContent too early (i.e. before ngAfterViewInit)\n            if (this._enabled !== value) {\n                (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n            }\n        }\n        /** Sets the minimum height of the textarea as determined by minRows. */\n        _setMinHeight() {\n            const minHeight = this.minRows && this._cachedLineHeight ?\n                `${this.minRows * this._cachedLineHeight}px` : null;\n            if (minHeight) {\n                this._textareaElement.style.minHeight = minHeight;\n            }\n        }\n        /** Sets the maximum height of the textarea as determined by maxRows. */\n        _setMaxHeight() {\n            const maxHeight = this.maxRows && this._cachedLineHeight ?\n                `${this.maxRows * this._cachedLineHeight}px` : null;\n            if (maxHeight) {\n                this._textareaElement.style.maxHeight = maxHeight;\n            }\n        }\n        ngAfterViewInit() {\n            if (this._platform.isBrowser) {\n                // Remember the height which we started with in case autosizing is disabled\n                this._initialHeight = this._textareaElement.style.height;\n                this.resizeToFitContent();\n                this._ngZone.runOutsideAngular(() => {\n                    const window = this._getWindow();\n                    fromEvent(window, 'resize')\n                        .pipe(auditTime(16), takeUntil(this._destroyed))\n                        .subscribe(() => this.resizeToFitContent(true));\n                });\n            }\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /**\n         * Cache the height of a single-row textarea if it has not already been cached.\n         *\n         * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n         * maxRows. For the initial version, we will assume that the height of a single line in the\n         * textarea does not ever change.\n         */\n        _cacheTextareaLineHeight() {\n            if (this._cachedLineHeight) {\n                return;\n            }\n            // Use a clone element because we have to override some styles.\n            let textareaClone = this._textareaElement.cloneNode(false);\n            textareaClone.rows = 1;\n            // Use `position: absolute` so that this doesn't cause a browser layout and use\n            // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n            // would affect the height.\n            textareaClone.style.position = 'absolute';\n            textareaClone.style.visibility = 'hidden';\n            textareaClone.style.border = 'none';\n            textareaClone.style.padding = '0';\n            textareaClone.style.height = '';\n            textareaClone.style.minHeight = '';\n            textareaClone.style.maxHeight = '';\n            // In Firefox it happens that textarea elements are always bigger than the specified amount\n            // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n            // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n            // to hidden. This ensures that there is no invalid calculation of the line height.\n            // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n            textareaClone.style.overflow = 'hidden';\n            this._textareaElement.parentNode.appendChild(textareaClone);\n            this._cachedLineHeight = textareaClone.clientHeight;\n            this._textareaElement.parentNode.removeChild(textareaClone);\n            // Min and max heights have to be re-calculated if the cached line height changes\n            this._setMinHeight();\n            this._setMaxHeight();\n        }\n        ngDoCheck() {\n            if (this._platform.isBrowser) {\n                this.resizeToFitContent();\n            }\n        }\n        /**\n         * Resize the textarea to fit its content.\n         * @param force Whether to force a height recalculation. By default the height will be\n         *    recalculated only if the value changed since the last call.\n         */\n        resizeToFitContent(force = false) {\n            // If autosizing is disabled, just skip everything else\n            if (!this._enabled) {\n                return;\n            }\n            this._cacheTextareaLineHeight();\n            // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n            // in checking the height of the textarea.\n            if (!this._cachedLineHeight) {\n                return;\n            }\n            const textarea = this._elementRef.nativeElement;\n            const value = textarea.value;\n            // Only resize if the value or minRows have changed since these calculations can be expensive.\n            if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n                return;\n            }\n            const placeholderText = textarea.placeholder;\n            // Reset the textarea height to auto in order to shrink back to its default size.\n            // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n            // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n            // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n            // need to be removed temporarily.\n            textarea.classList.add(this._measuringClass);\n            textarea.placeholder = '';\n            // The measuring class includes a 2px padding to workaround an issue with Chrome,\n            // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n            const height = textarea.scrollHeight - 4;\n            // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n            textarea.style.height = `${height}px`;\n            textarea.classList.remove(this._measuringClass);\n            textarea.placeholder = placeholderText;\n            this._ngZone.runOutsideAngular(() => {\n                if (typeof requestAnimationFrame !== 'undefined') {\n                    requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n                }\n                else {\n                    setTimeout(() => this._scrollToCaretPosition(textarea));\n                }\n            });\n            this._previousValue = value;\n            this._previousMinRows = this._minRows;\n        }\n        /**\n         * Resets the textarea to its original size\n         */\n        reset() {\n            // Do not try to change the textarea, if the initialHeight has not been determined yet\n            // This might potentially remove styles when reset() is called before ngAfterViewInit\n            if (this._initialHeight !== undefined) {\n                this._textareaElement.style.height = this._initialHeight;\n            }\n        }\n        // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n        // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n        // can move this back into `host`.\n        // tslint:disable:no-host-decorator-in-concrete\n        _noopInputHandler() {\n            // no-op handler that ensures we're running change detection on input events.\n        }\n        /** Access injected document if available or fallback to global document reference */\n        _getDocument() {\n            return this._document || document;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            const doc = this._getDocument();\n            return doc.defaultView || window;\n        }\n        /**\n         * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n         * prevent it from scrolling to the caret position. We need to re-set the selection\n         * in order for it to scroll to the proper position.\n         */\n        _scrollToCaretPosition(textarea) {\n            const { selectionStart, selectionEnd } = textarea;\n            const document = this._getDocument();\n            // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n            // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n            // between the time we requested the animation frame and when it was executed.\n            // Also note that we have to assert that the textarea is focused before we set the\n            // selection range. Setting the selection range on a non-focused textarea will cause\n            // it to receive focus on IE and Edge.\n            if (!this._destroyed.isStopped && document.activeElement === textarea) {\n                textarea.setSelectionRange(selectionStart, selectionEnd);\n            }\n        }\n    }\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\n    CdkTextareaAutosize.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Platform },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ];\n    CdkTextareaAutosize.propDecorators = {\n        minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n        maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n        enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n        _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n    return CdkTextareaAutosize;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet TextFieldModule = /** @class */ (() => {\n    class TextFieldModule {\n    }\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n    return TextFieldModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nlet MatTextareaAutosize = /** @class */ (() => {\n    class MatTextareaAutosize extends CdkTextareaAutosize {\n        get matAutosizeMinRows() { return this.minRows; }\n        set matAutosizeMinRows(value) { this.minRows = value; }\n        get matAutosizeMaxRows() { return this.maxRows; }\n        set matAutosizeMaxRows(value) { this.maxRows = value; }\n        get matAutosize() { return this.enabled; }\n        set matAutosize(value) { this.enabled = value; }\n        get matTextareaAutosize() { return this.enabled; }\n        set matTextareaAutosize(value) { this.enabled = value; }\n    }\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTextareaAutosize.propDecorators = {\n        matAutosizeMinRows: [{ type: Input }],\n        matAutosizeMaxRows: [{ type: Input }],\n        matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n        matTextareaAutosize: [{ type: Input }]\n    };\nconst ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n    return MatTextareaAutosize;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nlet MatInput = /** @class */ (() => {\n    class MatInput extends _MatInputMixinBase {\n        constructor(_elementRef, _platform, \n        /** @docs-private */\n        ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n            super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n            this._elementRef = _elementRef;\n            this._platform = _platform;\n            this.ngControl = ngControl;\n            this._autofillMonitor = _autofillMonitor;\n            this._uid = `mat-input-${nextUniqueId++}`;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            this.focused = false;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            this.stateChanges = new Subject();\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            this.controlType = 'mat-input';\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            this.autofilled = false;\n            this._disabled = false;\n            this._required = false;\n            this._type = 'text';\n            this._readonly = false;\n            this._neverEmptyInputTypes = [\n                'date',\n                'datetime',\n                'datetime-local',\n                'month',\n                'time',\n                'week'\n            ].filter(t => getSupportedInputTypes().has(t));\n            const element = this._elementRef.nativeElement;\n            const nodeName = element.nodeName.toLowerCase();\n            // If no input value accessor was explicitly specified, use the element as the input value\n            // accessor.\n            this._inputValueAccessor = inputValueAccessor || element;\n            this._previousNativeValue = this.value;\n            // Force setter to be called in case id was not specified.\n            this.id = this.id;\n            // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n            // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n            // exists on iOS, we only bother to install the listener on iOS.\n            if (_platform.IOS) {\n                ngZone.runOutsideAngular(() => {\n                    _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                        let el = event.target;\n                        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                            // `1, 1` fixes it for the first time that you type text and\n                            // then hold delete. Toggling to `1, 1` and then back to\n                            // `0, 0` seems to completely fix it.\n                            el.setSelectionRange(1, 1);\n                            el.setSelectionRange(0, 0);\n                        }\n                    });\n                });\n            }\n            this._isServer = !this._platform.isBrowser;\n            this._isNativeSelect = nodeName === 'select';\n            this._isTextarea = nodeName === 'textarea';\n            if (this._isNativeSelect) {\n                this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                    'mat-native-select';\n            }\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get disabled() {\n            if (this.ngControl && this.ngControl.disabled !== null) {\n                return this.ngControl.disabled;\n            }\n            return this._disabled;\n        }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            // Browsers may not fire the blur event if the input is disabled too quickly.\n            // Reset from here to ensure that the element doesn't become stuck.\n            if (this.focused) {\n                this.focused = false;\n                this.stateChanges.next();\n            }\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get id() { return this._id; }\n        set id(value) { this._id = value || this._uid; }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get required() { return this._required; }\n        set required(value) { this._required = coerceBooleanProperty(value); }\n        /** Input type of the element. */\n        get type() { return this._type; }\n        set type(value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n                this._elementRef.nativeElement.type = this._type;\n            }\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get value() { return this._inputValueAccessor.value; }\n        set value(value) {\n            if (value !== this.value) {\n                this._inputValueAccessor.value = value;\n                this.stateChanges.next();\n            }\n        }\n        /** Whether the element is readonly. */\n        get readonly() { return this._readonly; }\n        set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n        ngAfterViewInit() {\n            if (this._platform.isBrowser) {\n                this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                    this.autofilled = event.isAutofilled;\n                    this.stateChanges.next();\n                });\n            }\n        }\n        ngOnChanges() {\n            this.stateChanges.next();\n        }\n        ngOnDestroy() {\n            this.stateChanges.complete();\n            if (this._platform.isBrowser) {\n                this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n            }\n        }\n        ngDoCheck() {\n            if (this.ngControl) {\n                // We need to re-evaluate this on every change detection cycle, because there are some\n                // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n                // that whatever logic is in here has to be super lean or we risk destroying the performance.\n                this.updateErrorState();\n            }\n            // We need to dirty-check the native element's value, because there are some cases where\n            // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n            // updating the value using `emitEvent: false`).\n            this._dirtyCheckNativeValue();\n        }\n        /** Focuses the input. */\n        focus(options) {\n            this._elementRef.nativeElement.focus(options);\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        /** Callback for the cases where the focused state of the input changes. */\n        // tslint:disable:no-host-decorator-in-concrete\n        // tslint:enable:no-host-decorator-in-concrete\n        _focusChanged(isFocused) {\n            if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n                this.focused = isFocused;\n                this.stateChanges.next();\n            }\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _onInput() {\n            // This is a noop function and is used to let Angular know whenever the value changes.\n            // Angular will run a new change detection each time the `input` event has been dispatched.\n            // It's necessary that Angular recognizes the value change, because when floatingLabel\n            // is set to false and Angular forms aren't used, the placeholder won't recognize the\n            // value changes and will not disappear.\n            // Listening to the input event wouldn't be necessary when the input is using the\n            // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n        }\n        /** Does some manual dirty checking on the native input `value` property. */\n        _dirtyCheckNativeValue() {\n            const newValue = this._elementRef.nativeElement.value;\n            if (this._previousNativeValue !== newValue) {\n                this._previousNativeValue = newValue;\n                this.stateChanges.next();\n            }\n        }\n        /** Make sure the input is a supported type. */\n        _validateType() {\n            if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n                throw getMatInputUnsupportedTypeError(this._type);\n            }\n        }\n        /** Checks whether the input type is one of the types that are never empty. */\n        _isNeverEmpty() {\n            return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n        }\n        /** Checks whether the input is invalid based on the native validation. */\n        _isBadInput() {\n            // The `validity` property won't be present on platform-server.\n            let validity = this._elementRef.nativeElement.validity;\n            return validity && validity.badInput;\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get empty() {\n            return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n                !this.autofilled;\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get shouldLabelFloat() {\n            if (this._isNativeSelect) {\n                // For a single-selection `<select>`, the label should float when the selected option has\n                // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n                // overlapping the label with the options.\n                const selectElement = this._elementRef.nativeElement;\n                const firstOption = selectElement.options[0];\n                // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n                // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n                return this.focused || selectElement.multiple || !this.empty ||\n                    !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n            }\n            else {\n                return this.focused || !this.empty;\n            }\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        setDescribedByIds(ids) {\n            this._ariaDescribedby = ids.join(' ');\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        onContainerClick() {\n            // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n            // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n            // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n            if (!this.focused) {\n                this.focus();\n            }\n        }\n    }\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 10, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\" }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatInput.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Platform },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: ErrorStateMatcher },\n        { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n        { type: AutofillMonitor },\n        { type: NgZone }\n    ];\n    MatInput.propDecorators = {\n        disabled: [{ type: Input }],\n        id: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        required: [{ type: Input }],\n        type: [{ type: Input }],\n        errorStateMatcher: [{ type: Input }],\n        value: [{ type: Input }],\n        readonly: [{ type: Input }],\n        _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n        _onInput: [{ type: HostListener, args: ['input',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }] }); })();\n    return MatInput;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatInputModule = /** @class */ (() => {\n    class MatInputModule {\n    }\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n    return MatInputModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map","import { A11yModule } from '@angular/cdk/a11y';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ɵɵdefineInjectable, Injectable, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, NgZone, Input, Output, Directive, Optional, SkipSelf, InjectionToken, ChangeDetectorRef, Inject, ViewChild, forwardRef, ViewContainerRef, Attribute, ContentChild, InjectFlags, Injector, Self, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { ESCAPE, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { take, startWith, filter } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators, NgControl, NgForm, FormGroupDirective, ControlContainer } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/button';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/portal';\nimport * as ɵngcc7 from '@angular/material/dialog';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\nimport * as ɵngcc9 from '@angular/material/form-field';\nimport * as ɵngcc10 from '@angular/forms';\n\nconst _c0 = [\"mat-calendar-body\", \"\"];\nfunction MatCalendarBody_tr_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"td\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r0.numCols);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.label, \" \");\n} }\nfunction MatCalendarBody_tr_1_td_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"padding-top\", ctx_r4._cellPadding)(\"padding-bottom\", ctx_r4._cellPadding);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r4._firstRowOffset);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r4._firstRowOffset >= ctx_r4.labelMinRequiredCells ? ctx_r4.label : \"\", \" \");\n} }\nfunction MatCalendarBody_tr_1_td_2_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"td\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function MatCalendarBody_tr_1_td_2_Template_td_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const item_r6 = ctx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8._cellClicked(item_r6, $event); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 9);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(3, \"div\", 10);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r6 = ctx.$implicit;\n    const colIndex_r7 = ctx.index;\n    const rowIndex_r3 = ɵngcc0.ɵɵnextContext().index;\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r5._cellWidth)(\"padding-top\", ctx_r5._cellPadding)(\"padding-bottom\", ctx_r5._cellPadding);\n    ɵngcc0.ɵɵclassProp(\"mat-calendar-body-disabled\", !item_r6.enabled)(\"mat-calendar-body-active\", ctx_r5._isActiveCell(rowIndex_r3, colIndex_r7))(\"mat-calendar-body-range-start\", ctx_r5._isRangeStart(item_r6.compareValue))(\"mat-calendar-body-range-end\", ctx_r5._isRangeEnd(item_r6.compareValue))(\"mat-calendar-body-in-range\", ctx_r5._isInRange(item_r6.compareValue))(\"mat-calendar-body-comparison-bridge-start\", ctx_r5._isComparisonBridgeStart(item_r6.compareValue, rowIndex_r3, colIndex_r7))(\"mat-calendar-body-comparison-bridge-end\", ctx_r5._isComparisonBridgeEnd(item_r6.compareValue, rowIndex_r3, colIndex_r7))(\"mat-calendar-body-comparison-start\", ctx_r5._isComparisonStart(item_r6.compareValue))(\"mat-calendar-body-comparison-end\", ctx_r5._isComparisonEnd(item_r6.compareValue))(\"mat-calendar-body-in-comparison-range\", ctx_r5._isInComparisonRange(item_r6.compareValue))(\"mat-calendar-body-preview-start\", ctx_r5._isPreviewStart(item_r6.compareValue))(\"mat-calendar-body-preview-end\", ctx_r5._isPreviewEnd(item_r6.compareValue))(\"mat-calendar-body-in-preview\", ctx_r5._isInPreview(item_r6.compareValue));\n    ɵngcc0.ɵɵproperty(\"ngClass\", item_r6.cssClasses)(\"tabindex\", ctx_r5._isActiveCell(rowIndex_r3, colIndex_r7) ? 0 : 0 - 1);\n    ɵngcc0.ɵɵattribute(\"data-mat-row\", rowIndex_r3)(\"data-mat-col\", colIndex_r7)(\"aria-label\", item_r6.ariaLabel)(\"aria-disabled\", !item_r6.enabled || null)(\"aria-selected\", ctx_r5._isSelected(item_r6));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"mat-calendar-body-selected\", ctx_r5._isSelected(item_r6))(\"mat-calendar-body-today\", ctx_r5.todayValue === item_r6.compareValue);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", item_r6.displayValue, \" \");\n} }\nfunction MatCalendarBody_tr_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 4);\n    ɵngcc0.ɵɵtemplate(1, MatCalendarBody_tr_1_td_1_Template, 2, 6, \"td\", 5);\n    ɵngcc0.ɵɵtemplate(2, MatCalendarBody_tr_1_td_2_Template, 4, 44, \"td\", 6);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r2 = ctx.$implicit;\n    const rowIndex_r3 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", rowIndex_r3 === 0 && ctx_r1._firstRowOffset);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", row_r2);\n} }\nfunction MatMonthView_th_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 5);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const day_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"aria-label\", day_r1.long);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(day_r1.narrow);\n} }\nconst _c1 = [\"*\"];\nfunction MatCalendar_ng_template_0_Template(rf, ctx) { }\nfunction MatCalendar_mat_month_view_2_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-month-view\", 5);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_month_view_2_Template_mat_month_view_activeDateChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.activeDate = $event; })(\"_userSelection\", function MatCalendar_mat_month_view_2_Template_mat_month_view__userSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6._dateSelected($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r1.activeDate)(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass)(\"comparisonStart\", ctx_r1.comparisonStart)(\"comparisonEnd\", ctx_r1.comparisonEnd);\n} }\nfunction MatCalendar_mat_year_view_3_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-year-view\", 6);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_year_view_3_Template_mat_year_view_activeDateChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.activeDate = $event; })(\"monthSelected\", function MatCalendar_mat_year_view_3_Template_mat_year_view_monthSelected_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9._monthSelectedInYearView($event); })(\"selectedChange\", function MatCalendar_mat_year_view_3_Template_mat_year_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._goToDateInView($event, \"month\"); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r2.activeDate)(\"selected\", ctx_r2.selected)(\"dateFilter\", ctx_r2.dateFilter)(\"maxDate\", ctx_r2.maxDate)(\"minDate\", ctx_r2.minDate);\n} }\nfunction MatCalendar_mat_multi_year_view_4_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-multi-year-view\", 7);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_activeDateChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.activeDate = $event; })(\"yearSelected\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_yearSelected_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13._yearSelectedInMultiYearView($event); })(\"selectedChange\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_selectedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14._goToDateInView($event, \"year\"); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r3.activeDate)(\"selected\", ctx_r3.selected)(\"dateFilter\", ctx_r3.dateFilter)(\"maxDate\", ctx_r3.maxDate)(\"minDate\", ctx_r3.minDate);\n} }\nconst _c2 = [\"button\"];\nfunction MatDatepickerToggle__svg_svg_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 3);\n    ɵngcc0.ɵɵelement(1, \"path\", 4);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c3 = [[[\"\", \"matDatepickerToggleIcon\", \"\"]]];\nconst _c4 = [\"[matDatepickerToggleIcon]\"];\nconst _c5 = [[[\"input\", \"matStartDate\", \"\"]], [[\"input\", \"matEndDate\", \"\"]]];\nconst _c6 = [\"input[matStartDate]\", \"input[matEndDate]\"];\nfunction createMissingDateImplError(provider) {\n    return Error(`MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n        `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n        `custom implementation.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Datepicker data that requires internationalization. */\nlet MatDatepickerIntl = /** @class */ (() => {\n    class MatDatepickerIntl {\n        constructor() {\n            /**\n             * Stream that emits whenever the labels here are changed. Use this to notify\n             * components if the labels have changed after initialization.\n             */\n            this.changes = new Subject();\n            /** A label for the calendar popup (used by screen readers). */\n            this.calendarLabel = 'Calendar';\n            /** A label for the button used to open the calendar popup (used by screen readers). */\n            this.openCalendarLabel = 'Open calendar';\n            /** A label for the previous month button (used by screen readers). */\n            this.prevMonthLabel = 'Previous month';\n            /** A label for the next month button (used by screen readers). */\n            this.nextMonthLabel = 'Next month';\n            /** A label for the previous year button (used by screen readers). */\n            this.prevYearLabel = 'Previous year';\n            /** A label for the next year button (used by screen readers). */\n            this.nextYearLabel = 'Next year';\n            /** A label for the previous multi-year button (used by screen readers). */\n            this.prevMultiYearLabel = 'Previous 20 years';\n            /** A label for the next multi-year button (used by screen readers). */\n            this.nextMultiYearLabel = 'Next 20 years';\n            /** A label for the 'switch to month view' button (used by screen readers). */\n            this.switchToMonthViewLabel = 'Choose date';\n            /** A label for the 'switch to year view' button (used by screen readers). */\n            this.switchToMultiYearViewLabel = 'Choose month and year';\n        }\n        /** Formats a range of years. */\n        formatYearRange(start, end) {\n            return `${start} \\u2013 ${end}`;\n        }\n    }\nMatDatepickerIntl.ɵfac = function MatDatepickerIntl_Factory(t) { return new (t || MatDatepickerIntl)(); };\n    MatDatepickerIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatDatepickerIntl_Factory() { return new MatDatepickerIntl(); }, token: MatDatepickerIntl, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n    return MatDatepickerIntl;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nclass MatCalendarCell {\n    constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, compareValue = value, rawValue) {\n        this.value = value;\n        this.displayValue = displayValue;\n        this.ariaLabel = ariaLabel;\n        this.enabled = enabled;\n        this.cssClasses = cssClasses;\n        this.compareValue = compareValue;\n        this.rawValue = rawValue;\n    }\n}\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nlet MatCalendarBody = /** @class */ (() => {\n    class MatCalendarBody {\n        constructor(_elementRef, _ngZone) {\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            /** The number of columns in the table. */\n            this.numCols = 7;\n            /** The cell number of the active cell in the table. */\n            this.activeCell = 0;\n            /** Whether a range is being selected. */\n            this.isRange = false;\n            /**\n             * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n             * maintained even as the table resizes.\n             */\n            this.cellAspectRatio = 1;\n            /** Start of the preview range. */\n            this.previewStart = null;\n            /** End of the preview range. */\n            this.previewEnd = null;\n            /** Emits when a new value is selected. */\n            this.selectedValueChange = new EventEmitter();\n            /** Emits when the preview has changed as a result of a user action. */\n            this.previewChange = new EventEmitter();\n            /**\n             * Event handler for when the user enters an element\n             * inside the calendar body (e.g. by hovering in or focus).\n             */\n            this._enterHandler = (event) => {\n                if (this._skipNextFocus && event.type === 'focus') {\n                    this._skipNextFocus = false;\n                    return;\n                }\n                // We only need to hit the zone when we're selecting a range.\n                if (event.target && this.isRange) {\n                    const cell = this._getCellFromElement(event.target);\n                    if (cell) {\n                        this._ngZone.run(() => this.previewChange.emit({ value: cell.enabled ? cell : null, event }));\n                    }\n                }\n            };\n            /**\n             * Event handler for when the user's pointer leaves an element\n             * inside the calendar body (e.g. by hovering out or blurring).\n             */\n            this._leaveHandler = (event) => {\n                // We only need to hit the zone when we're selecting a range.\n                if (this.previewEnd !== null && this.isRange) {\n                    // Only reset the preview end value when leaving cells. This looks better, because\n                    // we have a gap between the cells and the rows and we don't want to remove the\n                    // range just for it to show up again when the user moves a few pixels to the side.\n                    if (event.target && isTableCell(event.target)) {\n                        this._ngZone.run(() => this.previewChange.emit({ value: null, event }));\n                    }\n                }\n            };\n            _ngZone.runOutsideAngular(() => {\n                const element = _elementRef.nativeElement;\n                element.addEventListener('mouseenter', this._enterHandler, true);\n                element.addEventListener('focus', this._enterHandler, true);\n                element.addEventListener('mouseleave', this._leaveHandler, true);\n                element.addEventListener('blur', this._leaveHandler, true);\n            });\n        }\n        /** Called when a cell is clicked. */\n        _cellClicked(cell, event) {\n            if (cell.enabled) {\n                this.selectedValueChange.emit({ value: cell.value, event });\n            }\n        }\n        /** Returns whether a cell should be marked as selected. */\n        _isSelected(cell) {\n            return this.startValue === cell.compareValue || this.endValue === cell.compareValue;\n        }\n        ngOnChanges(changes) {\n            const columnChanges = changes['numCols'];\n            const { rows, numCols } = this;\n            if (changes['rows'] || columnChanges) {\n                this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n            }\n            if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n                this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n            }\n            if (columnChanges || !this._cellWidth) {\n                this._cellWidth = `${100 / numCols}%`;\n            }\n        }\n        ngOnDestroy() {\n            const element = this._elementRef.nativeElement;\n            element.removeEventListener('mouseenter', this._enterHandler, true);\n            element.removeEventListener('focus', this._enterHandler, true);\n            element.removeEventListener('mouseleave', this._leaveHandler, true);\n            element.removeEventListener('blur', this._leaveHandler, true);\n        }\n        /** Returns whether a cell is active. */\n        _isActiveCell(rowIndex, colIndex) {\n            let cellNumber = rowIndex * this.numCols + colIndex;\n            // Account for the fact that the first row may not have as many cells.\n            if (rowIndex) {\n                cellNumber -= this._firstRowOffset;\n            }\n            return cellNumber == this.activeCell;\n        }\n        /** Focuses the active cell after the microtask queue is empty. */\n        _focusActiveCell(movePreview = true) {\n            this._ngZone.runOutsideAngular(() => {\n                this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                    const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n                    if (activeCell) {\n                        if (!movePreview) {\n                            this._skipNextFocus = true;\n                        }\n                        activeCell.focus();\n                    }\n                });\n            });\n        }\n        /** Gets whether a value is the start of the main range. */\n        _isRangeStart(value) {\n            return isStart(value, this.startValue, this.endValue);\n        }\n        /** Gets whether a value is the end of the main range. */\n        _isRangeEnd(value) {\n            return isEnd(value, this.startValue, this.endValue);\n        }\n        /** Gets whether a value is within the currently-selected range. */\n        _isInRange(value) {\n            return isInRange(value, this.startValue, this.endValue, this.isRange);\n        }\n        /** Gets whether a value is the start of the comparison range. */\n        _isComparisonStart(value) {\n            return isStart(value, this.comparisonStart, this.comparisonEnd);\n        }\n        /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n        _isComparisonBridgeStart(value, rowIndex, colIndex) {\n            if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n                return false;\n            }\n            let previousCell = this.rows[rowIndex][colIndex - 1];\n            if (!previousCell) {\n                const previousRow = this.rows[rowIndex - 1];\n                previousCell = previousRow && previousRow[previousRow.length - 1];\n            }\n            return previousCell && !this._isRangeEnd(previousCell.compareValue);\n        }\n        /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n        _isComparisonBridgeEnd(value, rowIndex, colIndex) {\n            if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n                return false;\n            }\n            let nextCell = this.rows[rowIndex][colIndex + 1];\n            if (!nextCell) {\n                const nextRow = this.rows[rowIndex + 1];\n                nextCell = nextRow && nextRow[0];\n            }\n            return nextCell && !this._isRangeStart(nextCell.compareValue);\n        }\n        /** Gets whether a value is the end of the comparison range. */\n        _isComparisonEnd(value) {\n            return isEnd(value, this.comparisonStart, this.comparisonEnd);\n        }\n        /** Gets whether a value is within the current comparison range. */\n        _isInComparisonRange(value) {\n            return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n        }\n        /** Gets whether a value is the start of the preview range. */\n        _isPreviewStart(value) {\n            return isStart(value, this.previewStart, this.previewEnd);\n        }\n        /** Gets whether a value is the end of the preview range. */\n        _isPreviewEnd(value) {\n            return isEnd(value, this.previewStart, this.previewEnd);\n        }\n        /** Gets whether a value is inside the preview range. */\n        _isInPreview(value) {\n            return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n        }\n        /** Finds the MatCalendarCell that corresponds to a DOM node. */\n        _getCellFromElement(element) {\n            let cell;\n            if (isTableCell(element)) {\n                cell = element;\n            }\n            else if (isTableCell(element.parentNode)) {\n                cell = element.parentNode;\n            }\n            if (cell) {\n                const row = cell.getAttribute('data-mat-row');\n                const col = cell.getAttribute('data-mat-col');\n                if (row && col) {\n                    return this.rows[parseInt(row)][parseInt(col)];\n                }\n            }\n            return null;\n        }\n    }\nMatCalendarBody.ɵfac = function MatCalendarBody_Factory(t) { return new (t || MatCalendarBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatCalendarBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCalendarBody, selectors: [[\"\", \"mat-calendar-body\", \"\"]], hostAttrs: [\"role\", \"grid\", \"aria-readonly\", \"true\", 1, \"mat-calendar-body\"], inputs: { numCols: \"numCols\", activeCell: \"activeCell\", isRange: \"isRange\", cellAspectRatio: \"cellAspectRatio\", previewStart: \"previewStart\", previewEnd: \"previewEnd\", label: \"label\", rows: \"rows\", todayValue: \"todayValue\", startValue: \"startValue\", endValue: \"endValue\", labelMinRequiredCells: \"labelMinRequiredCells\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, outputs: { selectedValueChange: \"selectedValueChange\", previewChange: \"previewChange\" }, exportAs: [\"matCalendarBody\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c0, decls: 2, vars: 2, consts: [[\"aria-hidden\", \"true\", 4, \"ngIf\"], [\"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"aria-hidden\", \"true\"], [1, \"mat-calendar-body-label\"], [\"role\", \"row\"], [\"aria-hidden\", \"true\", \"class\", \"mat-calendar-body-label\", 3, \"paddingTop\", \"paddingBottom\", 4, \"ngIf\"], [\"role\", \"gridcell\", \"class\", \"mat-calendar-body-cell\", 3, \"ngClass\", \"tabindex\", \"mat-calendar-body-disabled\", \"mat-calendar-body-active\", \"mat-calendar-body-range-start\", \"mat-calendar-body-range-end\", \"mat-calendar-body-in-range\", \"mat-calendar-body-comparison-bridge-start\", \"mat-calendar-body-comparison-bridge-end\", \"mat-calendar-body-comparison-start\", \"mat-calendar-body-comparison-end\", \"mat-calendar-body-in-comparison-range\", \"mat-calendar-body-preview-start\", \"mat-calendar-body-preview-end\", \"mat-calendar-body-in-preview\", \"width\", \"paddingTop\", \"paddingBottom\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-body-label\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell\", 3, \"ngClass\", \"tabindex\", \"click\"], [1, \"mat-calendar-body-cell-content\", \"mat-focus-indicator\"], [1, \"mat-calendar-body-cell-preview\"]], template: function MatCalendarBody_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatCalendarBody_tr_0_Template, 3, 6, \"tr\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatCalendarBody_tr_1_Template, 3, 2, \"tr\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._firstRowOffset < ctx.labelMinRequiredCells);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.rows);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc1.NgClass], styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;cursor:pointer}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}[dir=rtl] .mat-calendar-body-label{text-align:right}@media(hover: none){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){background-color:transparent}}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatCalendarBody.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone }\n    ];\n    MatCalendarBody.propDecorators = {\n        label: [{ type: Input }],\n        rows: [{ type: Input }],\n        todayValue: [{ type: Input }],\n        startValue: [{ type: Input }],\n        endValue: [{ type: Input }],\n        labelMinRequiredCells: [{ type: Input }],\n        numCols: [{ type: Input }],\n        activeCell: [{ type: Input }],\n        isRange: [{ type: Input }],\n        cellAspectRatio: [{ type: Input }],\n        comparisonStart: [{ type: Input }],\n        comparisonEnd: [{ type: Input }],\n        previewStart: [{ type: Input }],\n        previewEnd: [{ type: Input }],\n        selectedValueChange: [{ type: Output }],\n        previewChange: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCalendarBody, [{\n        type: Component,\n        args: [{\n                selector: '[mat-calendar-body]',\n                template: \"<!--\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\n-->\\n<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\">\\n  <td class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"numCols\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{label}}\\n  </td>\\n</tr>\\n\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\n<tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\">\\n  <!--\\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\\n    percentage of the width (a variant of the trick described here:\\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\n  -->\\n  <td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\"\\n      aria-hidden=\\\"true\\\"\\n      class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"_firstRowOffset\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\n  </td>\\n  <td *ngFor=\\\"let item of row; let colIndex = index\\\"\\n      role=\\\"gridcell\\\"\\n      class=\\\"mat-calendar-body-cell\\\"\\n      [ngClass]=\\\"item.cssClasses\\\"\\n      [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\n      [attr.data-mat-row]=\\\"rowIndex\\\"\\n      [attr.data-mat-col]=\\\"colIndex\\\"\\n      [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\n      [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\n      [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\n      [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\n      [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\n      [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\n      [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\n      [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\n      [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\n      [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\n      [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\n      [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\n      [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\n      [attr.aria-label]=\\\"item.ariaLabel\\\"\\n      [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\n      [attr.aria-selected]=\\\"_isSelected(item)\\\"\\n      (click)=\\\"_cellClicked(item, $event)\\\"\\n      [style.width]=\\\"_cellWidth\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n      <div class=\\\"mat-calendar-body-cell-content mat-focus-indicator\\\"\\n        [class.mat-calendar-body-selected]=\\\"_isSelected(item)\\\"\\n        [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\n        {{item.displayValue}}\\n      </div>\\n      <div class=\\\"mat-calendar-body-cell-preview\\\"></div>\\n  </td>\\n</tr>\\n\",\n                host: {\n                    'class': 'mat-calendar-body',\n                    'role': 'grid',\n                    'aria-readonly': 'true'\n                },\n                exportAs: 'matCalendarBody',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;cursor:pointer}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}[dir=rtl] .mat-calendar-body-label{text-align:right}@media(hover: none){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){background-color:transparent}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { numCols: [{\n            type: Input\n        }], activeCell: [{\n            type: Input\n        }], isRange: [{\n            type: Input\n        }], cellAspectRatio: [{\n            type: Input\n        }], previewStart: [{\n            type: Input\n        }], previewEnd: [{\n            type: Input\n        }], selectedValueChange: [{\n            type: Output\n        }], previewChange: [{\n            type: Output\n        }], label: [{\n            type: Input\n        }], rows: [{\n            type: Input\n        }], todayValue: [{\n            type: Input\n        }], startValue: [{\n            type: Input\n        }], endValue: [{\n            type: Input\n        }], labelMinRequiredCells: [{\n            type: Input\n        }], comparisonStart: [{\n            type: Input\n        }], comparisonEnd: [{\n            type: Input\n        }] }); })();\n    return MatCalendarBody;\n})();\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node) {\n    return node.nodeName === 'TD';\n}\n/** Checks whether a value is the start of a range. */\nfunction isStart(value, start, end) {\n    return end !== null && start !== end && value < end && value === start;\n}\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value, start, end) {\n    return start !== null && start !== end && value >= start && value === end;\n}\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value, start, end, rangeEnabled) {\n    return rangeEnabled && start !== null && end !== null && start !== end &&\n        value >= start && value <= end;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** A class representing a range of dates. */\nclass DateRange {\n    constructor(\n    /** The start date of the range. */\n    start, \n    /** The end date of the range. */\n    end) {\n        this.start = start;\n        this.end = end;\n    }\n}\n/** A selection model containing a date selection. */\nlet MatDateSelectionModel = /** @class */ (() => {\n    class MatDateSelectionModel {\n        constructor(\n        /** The current selection. */\n        selection, _adapter) {\n            this.selection = selection;\n            this._adapter = _adapter;\n            this._selectionChanged = new Subject();\n            /** Emits when the selection has changed. */\n            this.selectionChanged = this._selectionChanged.asObservable();\n            this.selection = selection;\n        }\n        /**\n         * Updates the current selection in the model.\n         * @param value New selection that should be assigned.\n         * @param source Object that triggered the selection change.\n         */\n        updateSelection(value, source) {\n            this.selection = value;\n            this._selectionChanged.next({ selection: value, source });\n        }\n        ngOnDestroy() {\n            this._selectionChanged.complete();\n        }\n        _isValidDateInstance(date) {\n            return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n        }\n    }\nMatDateSelectionModel.ɵfac = function MatDateSelectionModel_Factory(t) { return new (t || MatDateSelectionModel)(ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter)); };\nMatDateSelectionModel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDateSelectionModel });\n    MatDateSelectionModel.ctorParameters = () => [\n        { type: undefined },\n        { type: DateAdapter }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDateSelectionModel, [{\n        type: Directive\n    }], function () { return [{ type: undefined }, { type: ɵngcc2.DateAdapter }]; }, null); })();\n    return MatDateSelectionModel;\n})();\n/**  A selection model that contains a single date. */\nlet MatSingleDateSelectionModel = /** @class */ (() => {\n    class MatSingleDateSelectionModel extends MatDateSelectionModel {\n        constructor(adapter) {\n            super(null, adapter);\n        }\n        /**\n         * Adds a date to the current selection. In the case of a single date selection, the added date\n         * simply overwrites the previous selection\n         */\n        add(date) {\n            super.updateSelection(date, this);\n        }\n        /** Checks whether the current selection is valid. */\n        isValid() {\n            return this.selection != null && this._isValidDateInstance(this.selection);\n        }\n        /**\n         * Checks whether the current selection is complete. In the case of a single date selection, this\n         * is true if the current selection is not null.\n         */\n        isComplete() {\n            return this.selection != null;\n        }\n    }\nMatSingleDateSelectionModel.ɵfac = function MatSingleDateSelectionModel_Factory(t) { return new (t || MatSingleDateSelectionModel)(ɵngcc0.ɵɵinject(ɵngcc2.DateAdapter)); };\nMatSingleDateSelectionModel.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatSingleDateSelectionModel, factory: function (t) { return MatSingleDateSelectionModel.ɵfac(t); } });\n    MatSingleDateSelectionModel.ctorParameters = () => [\n        { type: DateAdapter }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSingleDateSelectionModel, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc2.DateAdapter }]; }, null); })();\n    return MatSingleDateSelectionModel;\n})();\n/**  A selection model that contains a date range. */\nlet MatRangeDateSelectionModel = /** @class */ (() => {\n    class MatRangeDateSelectionModel extends MatDateSelectionModel {\n        constructor(adapter) {\n            super(new DateRange(null, null), adapter);\n        }\n        /**\n         * Adds a date to the current selection. In the case of a date range selection, the added date\n         * fills in the next `null` value in the range. If both the start and the end already have a date,\n         * the selection is reset so that the given date is the new `start` and the `end` is null.\n         */\n        add(date) {\n            let { start, end } = this.selection;\n            if (start == null) {\n                start = date;\n            }\n            else if (end == null) {\n                end = date;\n            }\n            else {\n                start = date;\n                end = null;\n            }\n            super.updateSelection(new DateRange(start, end), this);\n        }\n        /** Checks whether the current selection is valid. */\n        isValid() {\n            const { start, end } = this.selection;\n            // Empty ranges are valid.\n            if (start == null && end == null) {\n                return true;\n            }\n            // Complete ranges are only valid if both dates are valid and the start is before the end.\n            if (start != null && end != null) {\n                return this._isValidDateInstance(start) && this._isValidDateInstance(end) &&\n                    this._adapter.compareDate(start, end) <= 0;\n            }\n            // Partial ranges are valid if the start/end is valid.\n            return (start == null || this._isValidDateInstance(start)) &&\n                (end == null || this._isValidDateInstance(end));\n        }\n        /**\n         * Checks whether the current selection is complete. In the case of a date range selection, this\n         * is true if the current selection has a non-null `start` and `end`.\n         */\n        isComplete() {\n            return this.selection.start != null && this.selection.end != null;\n        }\n    }\nMatRangeDateSelectionModel.ɵfac = function MatRangeDateSelectionModel_Factory(t) { return new (t || MatRangeDateSelectionModel)(ɵngcc0.ɵɵinject(ɵngcc2.DateAdapter)); };\nMatRangeDateSelectionModel.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatRangeDateSelectionModel, factory: function (t) { return MatRangeDateSelectionModel.ɵfac(t); } });\n    MatRangeDateSelectionModel.ctorParameters = () => [\n        { type: DateAdapter }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRangeDateSelectionModel, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc2.DateAdapter }]; }, null); })();\n    return MatRangeDateSelectionModel;\n})();\n/** @docs-private */\nfunction MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n    return parent || new MatSingleDateSelectionModel(adapter);\n}\n/** Used to provide a single selection model to a component. */\nconst MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {\n    provide: MatDateSelectionModel,\n    deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n    useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n/** @docs-private */\nfunction MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n    return parent || new MatRangeDateSelectionModel(adapter);\n}\n/** Used to provide a range selection model to a component. */\nconst MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER = {\n    provide: MatDateSelectionModel,\n    deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n    useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token used to customize the date range selection behavior. */\nconst MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('MAT_DATE_RANGE_SELECTION_STRATEGY');\n/** Provides the default date range selection behavior. */\nlet DefaultMatCalendarRangeStrategy = /** @class */ (() => {\n    class DefaultMatCalendarRangeStrategy {\n        constructor(_dateAdapter) {\n            this._dateAdapter = _dateAdapter;\n        }\n        selectionFinished(date, currentRange) {\n            let { start, end } = currentRange;\n            if (start == null) {\n                start = date;\n            }\n            else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n                end = date;\n            }\n            else {\n                start = date;\n                end = null;\n            }\n            return new DateRange(start, end);\n        }\n        createPreview(activeDate, currentRange) {\n            let start = null;\n            let end = null;\n            if (currentRange.start && !currentRange.end && activeDate) {\n                start = currentRange.start;\n                end = activeDate;\n            }\n            return new DateRange(start, end);\n        }\n    }\nDefaultMatCalendarRangeStrategy.ɵfac = function DefaultMatCalendarRangeStrategy_Factory(t) { return new (t || DefaultMatCalendarRangeStrategy)(ɵngcc0.ɵɵinject(ɵngcc2.DateAdapter)); };\nDefaultMatCalendarRangeStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DefaultMatCalendarRangeStrategy, factory: function (t) { return DefaultMatCalendarRangeStrategy.ɵfac(t); } });\n    DefaultMatCalendarRangeStrategy.ctorParameters = () => [\n        { type: DateAdapter }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DefaultMatCalendarRangeStrategy, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc2.DateAdapter }]; }, null); })();\n    return DefaultMatCalendarRangeStrategy;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nlet MatMonthView = /** @class */ (() => {\n    class MatMonthView {\n        constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir, _rangeStrategy) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dateFormats = _dateFormats;\n            this._dateAdapter = _dateAdapter;\n            this._dir = _dir;\n            this._rangeStrategy = _rangeStrategy;\n            this._rerenderSubscription = Subscription.EMPTY;\n            /** Emits when a new date is selected. */\n            this.selectedChange = new EventEmitter();\n            /** Emits when any date is selected. */\n            this._userSelection = new EventEmitter();\n            /** Emits when any date is activated. */\n            this.activeDateChange = new EventEmitter();\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n            this._activeDate = this._dateAdapter.today();\n        }\n        /**\n         * The date to display in this month view (everything other than the month and year is ignored).\n         */\n        get activeDate() { return this._activeDate; }\n        set activeDate(value) {\n            const oldActiveDate = this._activeDate;\n            const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n                this._init();\n            }\n        }\n        /** The currently selected date. */\n        get selected() { return this._selected; }\n        set selected(value) {\n            if (value instanceof DateRange) {\n                this._selected = value;\n            }\n            else {\n                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            }\n            this._setRanges(this._selected);\n        }\n        /** The minimum selectable date. */\n        get minDate() { return this._minDate; }\n        set minDate(value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        /** The maximum selectable date. */\n        get maxDate() { return this._maxDate; }\n        set maxDate(value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        ngAfterContentInit() {\n            this._rerenderSubscription = this._dateAdapter.localeChanges\n                .pipe(startWith(null))\n                .subscribe(() => this._init());\n        }\n        ngOnDestroy() {\n            this._rerenderSubscription.unsubscribe();\n        }\n        /** Handles when a new date is selected. */\n        _dateSelected(event) {\n            const date = event.value;\n            const selectedYear = this._dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n            let rangeStartDate;\n            let rangeEndDate;\n            if (this._selected instanceof DateRange) {\n                rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n                rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n            }\n            else {\n                rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n            }\n            if (rangeStartDate !== date || rangeEndDate !== date) {\n                this.selectedChange.emit(selectedDate);\n            }\n            this._userSelection.emit({ value: selectedDate, event: event.event });\n        }\n        /** Handles keydown events on the calendar body when calendar is in month view. */\n        _handleCalendarBodyKeydown(event) {\n            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n            // disabled ones from being selected. This may not be ideal, we should look into whether\n            // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n            const oldActiveDate = this._activeDate;\n            const isRtl = this._isRtl();\n            switch (event.keyCode) {\n                case LEFT_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                    break;\n                case RIGHT_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                    break;\n                case UP_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n                    break;\n                case DOWN_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n                    break;\n                case HOME:\n                    this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n                    break;\n                case END:\n                    this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this._dateAdapter.getDate(this._activeDate)));\n                    break;\n                case PAGE_UP:\n                    this.activeDate = event.altKey ?\n                        this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n                        this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n                    break;\n                case PAGE_DOWN:\n                    this.activeDate = event.altKey ?\n                        this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n                        this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n                    break;\n                case ENTER:\n                case SPACE:\n                    if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                        this._dateSelected({ value: this._dateAdapter.getDate(this._activeDate), event });\n                        // Prevent unexpected default actions such as form submission.\n                        event.preventDefault();\n                    }\n                    return;\n                case ESCAPE:\n                    // Abort the current range selection if the user presses escape mid-selection.\n                    if (this._previewEnd != null) {\n                        this._previewStart = this._previewEnd = null;\n                        this.selectedChange.emit(null);\n                        this._userSelection.emit({ value: null, event });\n                        event.preventDefault();\n                        event.stopPropagation(); // Prevents the overlay from closing.\n                    }\n                    return;\n                default:\n                    // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                    return;\n            }\n            if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n                this.activeDateChange.emit(this.activeDate);\n            }\n            this._focusActiveCell();\n            // Prevent unexpected default actions such as form submission.\n            event.preventDefault();\n        }\n        /** Initializes this month view. */\n        _init() {\n            this._setRanges(this.selected);\n            this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n            this._monthLabel =\n                this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n                    .toLocaleUpperCase();\n            let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n            this._firstWeekOffset =\n                (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n                    this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n            this._initWeekdays();\n            this._createWeekCells();\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Focuses the active cell after the microtask queue is empty. */\n        _focusActiveCell(movePreview) {\n            this._matCalendarBody._focusActiveCell(movePreview);\n        }\n        /** Called when the user has activated a new cell and the preview needs to be updated. */\n        _previewChanged({ event, value: cell }) {\n            if (this._rangeStrategy) {\n                // We can assume that this will be a range, because preview\n                // events aren't fired for single date selections.\n                const value = cell ? cell.rawValue : null;\n                const previewRange = this._rangeStrategy.createPreview(value, this.selected, event);\n                this._previewStart = this._getCellCompareValue(previewRange.start);\n                this._previewEnd = this._getCellCompareValue(previewRange.end);\n                // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n                // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n                // when navigating one month back using the keyboard which will cause this handler\n                // to throw a \"changed after checked\" error when updating the preview state.\n                this._changeDetectorRef.detectChanges();\n            }\n        }\n        /** Initializes the weekdays. */\n        _initWeekdays() {\n            const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n            const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n            const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n            // Rotate the labels for days of the week based on the configured first day of the week.\n            let weekdays = longWeekdays.map((long, i) => {\n                return { long, narrow: narrowWeekdays[i] };\n            });\n            this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n        }\n        /** Creates MatCalendarCells for the dates in this month. */\n        _createWeekCells() {\n            const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n            const dateNames = this._dateAdapter.getDateNames();\n            this._weeks = [[]];\n            for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n                if (cell == DAYS_PER_WEEK) {\n                    this._weeks.push([]);\n                    cell = 0;\n                }\n                const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n                const enabled = this._shouldEnableDate(date);\n                const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n                const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n                this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, this._getCellCompareValue(date), date));\n            }\n        }\n        /** Date filter for the month */\n        _shouldEnableDate(date) {\n            return !!date &&\n                (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n                (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\n                (!this.dateFilter || this.dateFilter(date));\n        }\n        /**\n         * Gets the date in this month that the given Date falls on.\n         * Returns null if the given Date is in another month.\n         */\n        _getDateInCurrentMonth(date) {\n            return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n                this._dateAdapter.getDate(date) : null;\n        }\n        /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n        _hasSameMonthAndYear(d1, d2) {\n            return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n                this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n        }\n        /** Gets the value that will be used to one cell to another. */\n        _getCellCompareValue(date) {\n            if (date) {\n                // We use the time since the Unix epoch to compare dates in this view, rather than the\n                // cell values, because we need to support ranges that span across multiple months/years.\n                const year = this._dateAdapter.getYear(date);\n                const month = this._dateAdapter.getMonth(date);\n                const day = this._dateAdapter.getDate(date);\n                return new Date(year, month, day).getTime();\n            }\n            return null;\n        }\n        /**\n         * @param obj The object to check.\n         * @returns The given object if it is both a date instance and valid, otherwise null.\n         */\n        _getValidDateOrNull(obj) {\n            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n        }\n        /** Determines whether the user has the RTL layout direction. */\n        _isRtl() {\n            return this._dir && this._dir.value === 'rtl';\n        }\n        /** Sets the current range based on a model value. */\n        _setRanges(selectedValue) {\n            if (selectedValue instanceof DateRange) {\n                this._rangeStart = this._getCellCompareValue(selectedValue.start);\n                this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n                this._isRange = true;\n            }\n            else {\n                this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n                this._isRange = false;\n            }\n            this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n            this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n        }\n    }\nMatMonthView.ɵfac = function MatMonthView_Factory(t) { return new (t || MatMonthView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_SELECTION_STRATEGY, 8)); };\nMatMonthView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatMonthView, selectors: [[\"mat-month-view\"]], viewQuery: function MatMonthView_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    } }, inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\", dateClass: \"dateClass\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, outputs: { selectedChange: \"selectedChange\", _userSelection: \"_userSelection\", activeDateChange: \"activeDateChange\" }, exportAs: [\"matMonthView\"], decls: 7, vars: 13, consts: [[\"role\", \"presentation\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"scope\", \"col\", 4, \"ngFor\", \"ngForOf\"], [\"colspan\", \"7\", \"aria-hidden\", \"true\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"isRange\", \"labelMinRequiredCells\", \"activeCell\", \"selectedValueChange\", \"previewChange\", \"keydown\"], [\"scope\", \"col\"]], template: function MatMonthView_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"tr\");\n        ɵngcc0.ɵɵtemplate(3, MatMonthView_th_3_Template, 2, 2, \"th\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"tr\");\n        ɵngcc0.ɵɵelement(5, \"th\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"tbody\", 4);\n        ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatMonthView_Template_tbody_selectedValueChange_6_listener($event) { return ctx._dateSelected($event); })(\"previewChange\", function MatMonthView_Template_tbody_previewChange_6_listener($event) { return ctx._previewChanged($event); })(\"keydown\", function MatMonthView_Template_tbody_keydown_6_listener($event) { return ctx._handleCalendarBodyKeydown($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._weekdays);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"label\", ctx._monthLabel)(\"rows\", ctx._weeks)(\"todayValue\", ctx._todayDate)(\"startValue\", ctx._rangeStart)(\"endValue\", ctx._rangeEnd)(\"comparisonStart\", ctx._comparisonRangeStart)(\"comparisonEnd\", ctx._comparisonRangeEnd)(\"previewStart\", ctx._previewStart)(\"previewEnd\", ctx._previewEnd)(\"isRange\", ctx._isRange)(\"labelMinRequiredCells\", 3)(\"activeCell\", ctx._dateAdapter.getDate(ctx.activeDate) - 1);\n    } }, directives: [ɵngcc1.NgForOf, MatCalendarBody], encapsulation: 2, changeDetection: 0 });\n    MatMonthView.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATE_RANGE_SELECTION_STRATEGY,] }, { type: Optional }] }\n    ];\n    MatMonthView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        comparisonStart: [{ type: Input }],\n        comparisonEnd: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        _userSelection: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMonthView, [{\n        type: Component,\n        args: [{\n                selector: 'mat-month-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr>\\n      <th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th>\\n    </tr>\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_monthLabel\\\"\\n         [rows]=\\\"_weeks\\\"\\n         [todayValue]=\\\"_todayDate!\\\"\\n         [startValue]=\\\"_rangeStart!\\\"\\n         [endValue]=\\\"_rangeEnd!\\\"\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\n         [previewStart]=\\\"_previewStart\\\"\\n         [previewEnd]=\\\"_previewEnd\\\"\\n         [isRange]=\\\"_isRange\\\"\\n         [labelMinRequiredCells]=\\\"3\\\"\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\",\n                exportAs: 'matMonthView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n            }, {\n                type: Optional\n            }] }]; }, { selectedChange: [{\n            type: Output\n        }], _userSelection: [{\n            type: Output\n        }], activeDateChange: [{\n            type: Output\n        }], activeDate: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], minDate: [{\n            type: Input\n        }], maxDate: [{\n            type: Input\n        }], dateFilter: [{\n            type: Input\n        }], dateClass: [{\n            type: Input\n        }], comparisonStart: [{\n            type: Input\n        }], comparisonEnd: [{\n            type: Input\n        }], _matCalendarBody: [{\n            type: ViewChild,\n            args: [MatCalendarBody]\n        }] }); })();\n    return MatMonthView;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst yearsPerPage = 24;\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nlet MatMultiYearView = /** @class */ (() => {\n    class MatMultiYearView {\n        constructor(_changeDetectorRef, _dateAdapter, _dir) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dateAdapter = _dateAdapter;\n            this._dir = _dir;\n            this._rerenderSubscription = Subscription.EMPTY;\n            /** Emits when a new year is selected. */\n            this.selectedChange = new EventEmitter();\n            /** Emits the selected year. This doesn't imply a change on the selected date */\n            this.yearSelected = new EventEmitter();\n            /** Emits when any date is activated. */\n            this.activeDateChange = new EventEmitter();\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            this._activeDate = this._dateAdapter.today();\n        }\n        /** The date to display in this multi-year view (everything other than the year is ignored). */\n        get activeDate() { return this._activeDate; }\n        set activeDate(value) {\n            let oldActiveDate = this._activeDate;\n            const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n                this._init();\n            }\n        }\n        /** The currently selected date. */\n        get selected() { return this._selected; }\n        set selected(value) {\n            if (value instanceof DateRange) {\n                this._selected = value;\n            }\n            else {\n                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            }\n            this._setSelectedYear(value);\n        }\n        /** The minimum selectable date. */\n        get minDate() { return this._minDate; }\n        set minDate(value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        /** The maximum selectable date. */\n        get maxDate() { return this._maxDate; }\n        set maxDate(value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        ngAfterContentInit() {\n            this._rerenderSubscription = this._dateAdapter.localeChanges\n                .pipe(startWith(null))\n                .subscribe(() => this._init());\n        }\n        ngOnDestroy() {\n            this._rerenderSubscription.unsubscribe();\n        }\n        /** Initializes this multi-year view. */\n        _init() {\n            this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n            // We want a range years such that we maximize the number of\n            // enabled dates visible at once. This prevents issues where the minimum year\n            // is the last item of a page OR the maximum year is the first item of a page.\n            // The offset from the active year to the \"slot\" for the starting year is the\n            // *actual* first rendered year in the multi-year view.\n            const activeYear = this._dateAdapter.getYear(this._activeDate);\n            const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n            this._years = [];\n            for (let i = 0, row = []; i < yearsPerPage; i++) {\n                row.push(minYearOfPage + i);\n                if (row.length == yearsPerRow) {\n                    this._years.push(row.map(year => this._createCellForYear(year)));\n                    row = [];\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Handles when a new year is selected. */\n        _yearSelected(event) {\n            const year = event.value;\n            this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n            let month = this._dateAdapter.getMonth(this.activeDate);\n            let daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n            this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n        }\n        /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n        _handleCalendarBodyKeydown(event) {\n            const oldActiveDate = this._activeDate;\n            const isRtl = this._isRtl();\n            switch (event.keyCode) {\n                case LEFT_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                    break;\n                case RIGHT_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                    break;\n                case UP_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                    break;\n                case DOWN_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                    break;\n                case HOME:\n                    this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n                    break;\n                case END:\n                    this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n                    break;\n                case PAGE_UP:\n                    this.activeDate =\n                        this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                    break;\n                case PAGE_DOWN:\n                    this.activeDate =\n                        this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                    break;\n                case ENTER:\n                case SPACE:\n                    this._yearSelected({ value: this._dateAdapter.getYear(this._activeDate), event });\n                    break;\n                default:\n                    // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                    return;\n            }\n            if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n                this.activeDateChange.emit(this.activeDate);\n            }\n            this._focusActiveCell();\n            // Prevent unexpected default actions such as form submission.\n            event.preventDefault();\n        }\n        _getActiveCell() {\n            return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n        }\n        /** Focuses the active cell after the microtask queue is empty. */\n        _focusActiveCell() {\n            this._matCalendarBody._focusActiveCell();\n        }\n        /** Creates an MatCalendarCell for the given year. */\n        _createCellForYear(year) {\n            let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n            return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n        }\n        /** Whether the given year is enabled. */\n        _shouldEnableYear(year) {\n            // disable if the year is greater than maxDate lower than minDate\n            if (year === undefined || year === null ||\n                (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n                (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n                return false;\n            }\n            // enable if it reaches here and there's no filter defined\n            if (!this.dateFilter) {\n                return true;\n            }\n            const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n            // If any date in the year is enabled count the year as enabled.\n            for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n                if (this.dateFilter(date)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /**\n         * @param obj The object to check.\n         * @returns The given object if it is both a date instance and valid, otherwise null.\n         */\n        _getValidDateOrNull(obj) {\n            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n        }\n        /** Determines whether the user has the RTL layout direction. */\n        _isRtl() {\n            return this._dir && this._dir.value === 'rtl';\n        }\n        /** Sets the currently-highlighted year based on a model value. */\n        _setSelectedYear(value) {\n            this._selectedYear = null;\n            if (value instanceof DateRange) {\n                const displayValue = value.start || value.end;\n                if (displayValue) {\n                    this._selectedYear = this._dateAdapter.getYear(displayValue);\n                }\n            }\n            else if (value) {\n                this._selectedYear = this._dateAdapter.getYear(value);\n            }\n        }\n    }\nMatMultiYearView.ɵfac = function MatMultiYearView_Factory(t) { return new (t || MatMultiYearView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nMatMultiYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatMultiYearView, selectors: [[\"mat-multi-year-view\"]], viewQuery: function MatMultiYearView_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    } }, inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", activeDateChange: \"activeDateChange\" }, exportAs: [\"matMultiYearView\"], decls: 5, vars: 7, consts: [[\"role\", \"presentation\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"numCols\", \"cellAspectRatio\", \"activeCell\", \"selectedValueChange\", \"keydown\"]], template: function MatMultiYearView_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"tr\");\n        ɵngcc0.ɵɵelement(3, \"th\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"tbody\", 3);\n        ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatMultiYearView_Template_tbody_selectedValueChange_4_listener($event) { return ctx._yearSelected($event); })(\"keydown\", function MatMultiYearView_Template_tbody_keydown_4_listener($event) { return ctx._handleCalendarBodyKeydown($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"rows\", ctx._years)(\"todayValue\", ctx._todayYear)(\"startValue\", ctx._selectedYear)(\"endValue\", ctx._selectedYear)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._getActiveCell());\n    } }, directives: [MatCalendarBody], encapsulation: 2, changeDetection: 0 });\n    MatMultiYearView.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ];\n    MatMultiYearView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        yearSelected: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMultiYearView, [{\n        type: Component,\n        args: [{\n                selector: 'mat-multi-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [rows]=\\\"_years\\\"\\n         [todayValue]=\\\"_todayYear\\\"\\n         [startValue]=\\\"_selectedYear!\\\"\\n         [endValue]=\\\"_selectedYear!\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_getActiveCell()\\\"\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\",\n                exportAs: 'matMultiYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { selectedChange: [{\n            type: Output\n        }], yearSelected: [{\n            type: Output\n        }], activeDateChange: [{\n            type: Output\n        }], activeDate: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], minDate: [{\n            type: Input\n        }], maxDate: [{\n            type: Input\n        }], dateFilter: [{\n            type: Input\n        }], _matCalendarBody: [{\n            type: ViewChild,\n            args: [MatCalendarBody]\n        }] }); })();\n    return MatMultiYearView;\n})();\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n    const year1 = dateAdapter.getYear(date1);\n    const year2 = dateAdapter.getYear(date2);\n    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n    return Math.floor((year1 - startingYear) / yearsPerPage) ===\n        Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n    const activeYear = dateAdapter.getYear(activeDate);\n    return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n    let startingYear = 0;\n    if (maxDate) {\n        const maxYear = dateAdapter.getYear(maxDate);\n        startingYear = maxYear - yearsPerPage + 1;\n    }\n    else if (minDate) {\n        startingYear = dateAdapter.getYear(minDate);\n    }\n    return startingYear;\n}\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo(a, b) {\n    return (a % b + b) % b;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nlet MatYearView = /** @class */ (() => {\n    class MatYearView {\n        constructor(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dateFormats = _dateFormats;\n            this._dateAdapter = _dateAdapter;\n            this._dir = _dir;\n            this._rerenderSubscription = Subscription.EMPTY;\n            /** Emits when a new month is selected. */\n            this.selectedChange = new EventEmitter();\n            /** Emits the selected month. This doesn't imply a change on the selected date */\n            this.monthSelected = new EventEmitter();\n            /** Emits when any date is activated. */\n            this.activeDateChange = new EventEmitter();\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n            this._activeDate = this._dateAdapter.today();\n        }\n        /** The date to display in this year view (everything other than the year is ignored). */\n        get activeDate() { return this._activeDate; }\n        set activeDate(value) {\n            let oldActiveDate = this._activeDate;\n            const validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n            this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n            if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n                this._init();\n            }\n        }\n        /** The currently selected date. */\n        get selected() { return this._selected; }\n        set selected(value) {\n            if (value instanceof DateRange) {\n                this._selected = value;\n            }\n            else {\n                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            }\n            this._setSelectedMonth(value);\n        }\n        /** The minimum selectable date. */\n        get minDate() { return this._minDate; }\n        set minDate(value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        /** The maximum selectable date. */\n        get maxDate() { return this._maxDate; }\n        set maxDate(value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        ngAfterContentInit() {\n            this._rerenderSubscription = this._dateAdapter.localeChanges\n                .pipe(startWith(null))\n                .subscribe(() => this._init());\n        }\n        ngOnDestroy() {\n            this._rerenderSubscription.unsubscribe();\n        }\n        /** Handles when a new month is selected. */\n        _monthSelected(event) {\n            const month = event.value;\n            const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n            this.monthSelected.emit(normalizedDate);\n            const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n            this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n        }\n        /** Handles keydown events on the calendar body when calendar is in year view. */\n        _handleCalendarBodyKeydown(event) {\n            // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n            // disabled ones from being selected. This may not be ideal, we should look into whether\n            // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n            const oldActiveDate = this._activeDate;\n            const isRtl = this._isRtl();\n            switch (event.keyCode) {\n                case LEFT_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                    break;\n                case RIGHT_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                    break;\n                case UP_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n                    break;\n                case DOWN_ARROW:\n                    this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n                    break;\n                case HOME:\n                    this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n                    break;\n                case END:\n                    this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n                    break;\n                case PAGE_UP:\n                    this.activeDate =\n                        this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n                    break;\n                case PAGE_DOWN:\n                    this.activeDate =\n                        this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n                    break;\n                case ENTER:\n                case SPACE:\n                    this._monthSelected({ value: this._dateAdapter.getMonth(this._activeDate), event });\n                    break;\n                default:\n                    // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                    return;\n            }\n            if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n                this.activeDateChange.emit(this.activeDate);\n            }\n            this._focusActiveCell();\n            // Prevent unexpected default actions such as form submission.\n            event.preventDefault();\n        }\n        /** Initializes this year view. */\n        _init() {\n            this._setSelectedMonth(this.selected);\n            this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n            this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n            let monthNames = this._dateAdapter.getMonthNames('short');\n            // First row of months only contains 5 elements so we can fit the year label on the same row.\n            this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Focuses the active cell after the microtask queue is empty. */\n        _focusActiveCell() {\n            this._matCalendarBody._focusActiveCell();\n        }\n        /**\n         * Gets the month in this year that the given Date falls on.\n         * Returns null if the given Date is in another year.\n         */\n        _getMonthInCurrentYear(date) {\n            return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n                this._dateAdapter.getMonth(date) : null;\n        }\n        /** Creates an MatCalendarCell for the given month. */\n        _createCellForMonth(month, monthName) {\n            let ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n            return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n        }\n        /** Whether the given month is enabled. */\n        _shouldEnableMonth(month) {\n            const activeYear = this._dateAdapter.getYear(this.activeDate);\n            if (month === undefined || month === null ||\n                this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n                this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n                return false;\n            }\n            if (!this.dateFilter) {\n                return true;\n            }\n            const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n            // If any date in the month is enabled count the month as enabled.\n            for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n                if (this.dateFilter(date)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /**\n         * Tests whether the combination month/year is after this.maxDate, considering\n         * just the month and year of this.maxDate\n         */\n        _isYearAndMonthAfterMaxDate(year, month) {\n            if (this.maxDate) {\n                const maxYear = this._dateAdapter.getYear(this.maxDate);\n                const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n                return year > maxYear || (year === maxYear && month > maxMonth);\n            }\n            return false;\n        }\n        /**\n         * Tests whether the combination month/year is before this.minDate, considering\n         * just the month and year of this.minDate\n         */\n        _isYearAndMonthBeforeMinDate(year, month) {\n            if (this.minDate) {\n                const minYear = this._dateAdapter.getYear(this.minDate);\n                const minMonth = this._dateAdapter.getMonth(this.minDate);\n                return year < minYear || (year === minYear && month < minMonth);\n            }\n            return false;\n        }\n        /**\n         * @param obj The object to check.\n         * @returns The given object if it is both a date instance and valid, otherwise null.\n         */\n        _getValidDateOrNull(obj) {\n            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n        }\n        /** Determines whether the user has the RTL layout direction. */\n        _isRtl() {\n            return this._dir && this._dir.value === 'rtl';\n        }\n        /** Sets the currently-selected month based on a model value. */\n        _setSelectedMonth(value) {\n            if (value instanceof DateRange) {\n                this._selectedMonth = this._getMonthInCurrentYear(value.start) ||\n                    this._getMonthInCurrentYear(value.end);\n            }\n            else {\n                this._selectedMonth = this._getMonthInCurrentYear(value);\n            }\n        }\n    }\nMatYearView.ɵfac = function MatYearView_Factory(t) { return new (t || MatYearView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nMatYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatYearView, selectors: [[\"mat-year-view\"]], viewQuery: function MatYearView_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    } }, inputs: { activeDate: \"activeDate\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", dateFilter: \"dateFilter\" }, outputs: { selectedChange: \"selectedChange\", monthSelected: \"monthSelected\", activeDateChange: \"activeDateChange\" }, exportAs: [\"matYearView\"], decls: 5, vars: 9, consts: [[\"role\", \"presentation\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"cellAspectRatio\", \"activeCell\", \"selectedValueChange\", \"keydown\"]], template: function MatYearView_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"tr\");\n        ɵngcc0.ɵɵelement(3, \"th\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"tbody\", 3);\n        ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatYearView_Template_tbody_selectedValueChange_4_listener($event) { return ctx._monthSelected($event); })(\"keydown\", function MatYearView_Template_tbody_keydown_4_listener($event) { return ctx._handleCalendarBodyKeydown($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"label\", ctx._yearLabel)(\"rows\", ctx._months)(\"todayValue\", ctx._todayMonth)(\"startValue\", ctx._selectedMonth)(\"endValue\", ctx._selectedMonth)(\"labelMinRequiredCells\", 2)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._dateAdapter.getMonth(ctx.activeDate));\n    } }, directives: [MatCalendarBody], encapsulation: 2, changeDetection: 0 });\n    MatYearView.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ];\n    MatYearView.propDecorators = {\n        activeDate: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        activeDateChange: [{ type: Output }],\n        _matCalendarBody: [{ type: ViewChild, args: [MatCalendarBody,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatYearView, [{\n        type: Component,\n        args: [{\n                selector: 'mat-year-view',\n                template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_yearLabel\\\"\\n         [rows]=\\\"_months\\\"\\n         [todayValue]=\\\"_todayMonth!\\\"\\n         [startValue]=\\\"_selectedMonth!\\\"\\n         [endValue]=\\\"_selectedMonth!\\\"\\n         [labelMinRequiredCells]=\\\"2\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\",\n                exportAs: 'matYearView',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { selectedChange: [{\n            type: Output\n        }], monthSelected: [{\n            type: Output\n        }], activeDateChange: [{\n            type: Output\n        }], activeDate: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], minDate: [{\n            type: Input\n        }], maxDate: [{\n            type: Input\n        }], dateFilter: [{\n            type: Input\n        }], _matCalendarBody: [{\n            type: ViewChild,\n            args: [MatCalendarBody]\n        }] }); })();\n    return MatYearView;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default header for MatCalendar */\nlet MatCalendarHeader = /** @class */ (() => {\n    class MatCalendarHeader {\n        constructor(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n            this._intl = _intl;\n            this.calendar = calendar;\n            this._dateAdapter = _dateAdapter;\n            this._dateFormats = _dateFormats;\n            this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n        }\n        /** The label for the current calendar view. */\n        get periodButtonText() {\n            if (this.calendar.currentView == 'month') {\n                return this._dateAdapter\n                    .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n                    .toLocaleUpperCase();\n            }\n            if (this.calendar.currentView == 'year') {\n                return this._dateAdapter.getYearName(this.calendar.activeDate);\n            }\n            // The offset from the active year to the \"slot\" for the starting year is the\n            // *actual* first rendered year in the multi-year view, and the last year is\n            // just yearsPerPage - 1 away.\n            const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n            const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n            const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n            const minYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n            const maxYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n            return this._intl.formatYearRange(minYearName, maxYearName);\n        }\n        get periodButtonLabel() {\n            return this.calendar.currentView == 'month' ?\n                this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n        }\n        /** The label for the previous button. */\n        get prevButtonLabel() {\n            return {\n                'month': this._intl.prevMonthLabel,\n                'year': this._intl.prevYearLabel,\n                'multi-year': this._intl.prevMultiYearLabel\n            }[this.calendar.currentView];\n        }\n        /** The label for the next button. */\n        get nextButtonLabel() {\n            return {\n                'month': this._intl.nextMonthLabel,\n                'year': this._intl.nextYearLabel,\n                'multi-year': this._intl.nextMultiYearLabel\n            }[this.calendar.currentView];\n        }\n        /** Handles user clicks on the period label. */\n        currentPeriodClicked() {\n            this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n        }\n        /** Handles user clicks on the previous button. */\n        previousClicked() {\n            this.calendar.activeDate = this.calendar.currentView == 'month' ?\n                this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n                this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n        }\n        /** Handles user clicks on the next button. */\n        nextClicked() {\n            this.calendar.activeDate = this.calendar.currentView == 'month' ?\n                this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n                this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n        }\n        /** Whether the previous period button is enabled. */\n        previousEnabled() {\n            if (!this.calendar.minDate) {\n                return true;\n            }\n            return !this.calendar.minDate ||\n                !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n        }\n        /** Whether the next period button is enabled. */\n        nextEnabled() {\n            return !this.calendar.maxDate ||\n                !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n        }\n        /** Whether the two dates represent the same view in the current view mode (month or year). */\n        _isSameView(date1, date2) {\n            if (this.calendar.currentView == 'month') {\n                return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n                    this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n            }\n            if (this.calendar.currentView == 'year') {\n                return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n            }\n            // Otherwise we are in 'multi-year' view.\n            return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n        }\n    }\nMatCalendarHeader.ɵfac = function MatCalendarHeader_Factory(t) { return new (t || MatCalendarHeader)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatCalendar)), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatCalendarHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCalendarHeader, selectors: [[\"mat-calendar-header\"]], exportAs: [\"matCalendarHeader\"], ngContentSelectors: _c1, decls: 9, vars: 8, consts: [[1, \"mat-calendar-header\"], [1, \"mat-calendar-controls\"], [\"mat-button\", \"\", \"type\", \"button\", \"cdkAriaLive\", \"polite\", 1, \"mat-calendar-period-button\", 3, \"click\"], [1, \"mat-calendar-arrow\"], [1, \"mat-calendar-spacer\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-previous-button\", 3, \"disabled\", \"click\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-next-button\", 3, \"disabled\", \"click\"]], template: function MatCalendarHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_2_listener() { return ctx.currentPeriodClicked(); });\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelement(4, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n        ɵngcc0.ɵɵprojection(6);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 5);\n        ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_7_listener() { return ctx.previousClicked(); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(8, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_8_listener() { return ctx.nextClicked(); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.periodButtonLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.periodButtonText, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"mat-calendar-invert\", ctx.calendar.currentView != \"month\");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"disabled\", !ctx.previousEnabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.prevButtonLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"disabled\", !ctx.nextEnabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.nextButtonLabel);\n    } }, directives: [ɵngcc4.MatButton, ɵngcc5.CdkAriaLive], encapsulation: 2, changeDetection: 0 });\n    MatCalendarHeader.ctorParameters = () => [\n        { type: MatDatepickerIntl },\n        { type: MatCalendar, decorators: [{ type: Inject, args: [forwardRef(() => MatCalendar),] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: ChangeDetectorRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCalendarHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-calendar-header',\n                template: \"<div class=\\\"mat-calendar-header\\\">\\n  <div class=\\\"mat-calendar-controls\\\">\\n    <button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\n            cdkAriaLive=\\\"polite\\\">\\n      {{periodButtonText}}\\n      <div class=\\\"mat-calendar-arrow\\\"\\n           [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div>\\n    </button>\\n\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\n\\n    <ng-content></ng-content>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\n            [attr.aria-label]=\\\"prevButtonLabel\\\">\\n    </button>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\n            [attr.aria-label]=\\\"nextButtonLabel\\\">\\n    </button>\\n  </div>\\n</div>\\n\",\n                exportAs: 'matCalendarHeader',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: MatDatepickerIntl }, { type: MatCalendar, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatCalendar)]\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n    return MatCalendarHeader;\n})();\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\nlet MatCalendar = /** @class */ (() => {\n    class MatCalendar {\n        constructor(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n            this._dateAdapter = _dateAdapter;\n            this._dateFormats = _dateFormats;\n            this._changeDetectorRef = _changeDetectorRef;\n            /**\n             * Used for scheduling that focus should be moved to the active cell on the next tick.\n             * We need to schedule it, rather than do it immediately, because we have to wait\n             * for Angular to re-evaluate the view children.\n             */\n            this._moveFocusOnNextTick = false;\n            /** Whether the calendar should be started in month or year view. */\n            this.startView = 'month';\n            /**\n             * Emits when the currently selected date changes.\n             * @breaking-change 11.0.0 Emitted value to change to `D | null`.\n             */\n            this.selectedChange = new EventEmitter();\n            /**\n             * Emits the year chosen in multiyear view.\n             * This doesn't imply a change on the selected date.\n             */\n            this.yearSelected = new EventEmitter();\n            /**\n             * Emits the month chosen in year view.\n             * This doesn't imply a change on the selected date.\n             */\n            this.monthSelected = new EventEmitter();\n            /** Emits when any date is selected. */\n            this._userSelection = new EventEmitter();\n            /**\n             * Emits whenever there is a state change that the header may need to respond to.\n             */\n            this.stateChanges = new Subject();\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n            this._intlChanges = _intl.changes.subscribe(() => {\n                _changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n        }\n        /** A date representing the period (month or year) to start the calendar in. */\n        get startAt() { return this._startAt; }\n        set startAt(value) {\n            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        /** The currently selected date. */\n        get selected() { return this._selected; }\n        set selected(value) {\n            if (value instanceof DateRange) {\n                this._selected = value;\n            }\n            else {\n                this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            }\n        }\n        /** The minimum selectable date. */\n        get minDate() { return this._minDate; }\n        set minDate(value) {\n            this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        /** The maximum selectable date. */\n        get maxDate() { return this._maxDate; }\n        set maxDate(value) {\n            this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        /**\n         * The current active date. This determines which time period is shown and which date is\n         * highlighted when using keyboard navigation.\n         */\n        get activeDate() { return this._clampedActiveDate; }\n        set activeDate(value) {\n            this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n            this.stateChanges.next();\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Whether the calendar is in month view. */\n        get currentView() { return this._currentView; }\n        set currentView(value) {\n            this._currentView = value;\n            this._moveFocusOnNextTick = true;\n            this._changeDetectorRef.markForCheck();\n        }\n        ngAfterContentInit() {\n            this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n            this.activeDate = this.startAt || this._dateAdapter.today();\n            // Assign to the private property since we don't want to move focus on init.\n            this._currentView = this.startView;\n        }\n        ngAfterViewChecked() {\n            if (this._moveFocusOnNextTick) {\n                this._moveFocusOnNextTick = false;\n                this.focusActiveCell();\n            }\n        }\n        ngOnDestroy() {\n            this._intlChanges.unsubscribe();\n            this.stateChanges.complete();\n        }\n        ngOnChanges(changes) {\n            const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n            if (change && !change.firstChange) {\n                const view = this._getCurrentViewComponent();\n                if (view) {\n                    // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                    // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n                    this._changeDetectorRef.detectChanges();\n                    view._init();\n                }\n            }\n            this.stateChanges.next();\n        }\n        focusActiveCell() {\n            this._getCurrentViewComponent()._focusActiveCell(false);\n        }\n        /** Updates today's date after an update of the active date */\n        updateTodaysDate() {\n            const currentView = this.currentView;\n            let view;\n            if (currentView === 'month') {\n                view = this.monthView;\n            }\n            else if (currentView === 'year') {\n                view = this.yearView;\n            }\n            else {\n                view = this.multiYearView;\n            }\n            view._init();\n        }\n        /** Handles date selection in the month view. */\n        _dateSelected(event) {\n            const date = event.value;\n            if (this.selected instanceof DateRange ||\n                (date && !this._dateAdapter.sameDate(date, this.selected))) {\n                // @breaking-change 11.0.0 remove non-null assertion\n                // once the `selectedChange` is allowed to be null.\n                this.selectedChange.emit(date);\n            }\n            this._userSelection.emit(event);\n        }\n        /** Handles year selection in the multiyear view. */\n        _yearSelectedInMultiYearView(normalizedYear) {\n            this.yearSelected.emit(normalizedYear);\n        }\n        /** Handles month selection in the year view. */\n        _monthSelectedInYearView(normalizedMonth) {\n            this.monthSelected.emit(normalizedMonth);\n        }\n        /** Handles year/month selection in the multi-year/year views. */\n        _goToDateInView(date, view) {\n            this.activeDate = date;\n            this.currentView = view;\n        }\n        /**\n         * @param obj The object to check.\n         * @returns The given object if it is both a date instance and valid, otherwise null.\n         */\n        _getValidDateOrNull(obj) {\n            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n        }\n        /** Returns the component instance that corresponds to the current calendar view. */\n        _getCurrentViewComponent() {\n            return this.monthView || this.yearView || this.multiYearView;\n        }\n    }\nMatCalendar.ɵfac = function MatCalendar_Factory(t) { return new (t || MatCalendar)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatCalendar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCalendar, selectors: [[\"mat-calendar\"]], viewQuery: function MatCalendar_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatMonthView, true);\n        ɵngcc0.ɵɵviewQuery(MatYearView, true);\n        ɵngcc0.ɵɵviewQuery(MatMultiYearView, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthView = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearView = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiYearView = _t.first);\n    } }, hostAttrs: [1, \"mat-calendar\"], inputs: { startView: \"startView\", startAt: \"startAt\", selected: \"selected\", minDate: \"minDate\", maxDate: \"maxDate\", headerComponent: \"headerComponent\", dateFilter: \"dateFilter\", dateClass: \"dateClass\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\" }, outputs: { selectedChange: \"selectedChange\", yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", _userSelection: \"_userSelection\" }, exportAs: [\"matCalendar\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 5, consts: [[3, \"cdkPortalOutlet\"], [\"cdkMonitorSubtreeFocus\", \"\", \"tabindex\", \"-1\", 1, \"mat-calendar-content\", 3, \"ngSwitch\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"activeDateChange\", \"_userSelection\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"monthSelected\", \"selectedChange\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"yearSelected\", \"selectedChange\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"activeDateChange\", \"_userSelection\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"monthSelected\", \"selectedChange\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"yearSelected\", \"selectedChange\"]], template: function MatCalendar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatCalendar_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatCalendar_mat_month_view_2_Template, 1, 8, \"mat-month-view\", 2);\n        ɵngcc0.ɵɵtemplate(3, MatCalendar_mat_year_view_3_Template, 1, 5, \"mat-year-view\", 3);\n        ɵngcc0.ɵɵtemplate(4, MatCalendar_mat_multi_year_view_4_Template, 1, 5, \"mat-multi-year-view\", 4);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._calendarHeaderPortal);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.currentView);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"month\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"year\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"multi-year\");\n    } }, directives: [ɵngcc6.CdkPortalOutlet, ɵngcc5.CdkMonitorFocus, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, MatMonthView, MatYearView, MatMultiYearView], styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-controls .mat-icon-button:hover .mat-button-focus-overlay{opacity:.04}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button::after,.mat-calendar-next-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatCalendar.ctorParameters = () => [\n        { type: MatDatepickerIntl },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: ChangeDetectorRef }\n    ];\n    MatCalendar.propDecorators = {\n        headerComponent: [{ type: Input }],\n        startAt: [{ type: Input }],\n        startView: [{ type: Input }],\n        selected: [{ type: Input }],\n        minDate: [{ type: Input }],\n        maxDate: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        comparisonStart: [{ type: Input }],\n        comparisonEnd: [{ type: Input }],\n        selectedChange: [{ type: Output }],\n        yearSelected: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        _userSelection: [{ type: Output }],\n        monthView: [{ type: ViewChild, args: [MatMonthView,] }],\n        yearView: [{ type: ViewChild, args: [MatYearView,] }],\n        multiYearView: [{ type: ViewChild, args: [MatMultiYearView,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCalendar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-calendar',\n                template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\n\\n<div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\n  <mat-month-view\\n      *ngSwitchCase=\\\"'month'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      [comparisonStart]=\\\"comparisonStart\\\"\\n      [comparisonEnd]=\\\"comparisonEnd\\\"\\n      (_userSelection)=\\\"_dateSelected($event)\\\">\\n  </mat-month-view>\\n\\n  <mat-year-view\\n      *ngSwitchCase=\\\"'year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'month')\\\">\\n  </mat-year-view>\\n\\n  <mat-multi-year-view\\n      *ngSwitchCase=\\\"'multi-year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'year')\\\">\\n  </mat-multi-year-view>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-calendar'\n                },\n                exportAs: 'matCalendar',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n                styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-controls .mat-icon-button:hover .mat-button-focus-overlay{opacity:.04}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button::after,.mat-calendar-next-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"]\n            }]\n    }], function () { return [{ type: MatDatepickerIntl }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { startView: [{\n            type: Input\n        }], selectedChange: [{\n            type: Output\n        }], yearSelected: [{\n            type: Output\n        }], monthSelected: [{\n            type: Output\n        }], _userSelection: [{\n            type: Output\n        }], startAt: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], minDate: [{\n            type: Input\n        }], maxDate: [{\n            type: Input\n        }], headerComponent: [{\n            type: Input\n        }], dateFilter: [{\n            type: Input\n        }], dateClass: [{\n            type: Input\n        }], comparisonStart: [{\n            type: Input\n        }], comparisonEnd: [{\n            type: Input\n        }], monthView: [{\n            type: ViewChild,\n            args: [MatMonthView]\n        }], yearView: [{\n            type: ViewChild,\n            args: [MatYearView]\n        }], multiYearView: [{\n            type: ViewChild,\n            args: [MatMultiYearView]\n        }] }); })();\n    return MatCalendar;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nconst matDatepickerAnimations = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n        // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/** @docs-private */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nlet MatDatepickerContent = /** @class */ (() => {\n    class MatDatepickerContent extends _MatDatepickerContentMixinBase {\n        constructor(elementRef, \n        /**\n         * @deprecated `_changeDetectorRef`, `_model` and `_rangeSelectionStrategy`\n         * parameters to become required.\n         * @breaking-change 11.0.0\n         */\n        _changeDetectorRef, _model, _dateAdapter, _rangeSelectionStrategy) {\n            super(elementRef);\n            this._changeDetectorRef = _changeDetectorRef;\n            this._model = _model;\n            this._dateAdapter = _dateAdapter;\n            this._rangeSelectionStrategy = _rangeSelectionStrategy;\n            /** Current state of the animation. */\n            this._animationState = 'enter';\n            /** Emits when an animation has finished. */\n            this._animationDone = new Subject();\n        }\n        ngAfterViewInit() {\n            this._calendar.focusActiveCell();\n        }\n        ngOnDestroy() {\n            this._animationDone.complete();\n        }\n        _handleUserSelection(event) {\n            // @breaking-change 11.0.0 Remove null checks for _model,\n            // _rangeSelectionStrategy and _dateAdapter.\n            if (this._model && this._dateAdapter) {\n                const selection = this._model.selection;\n                const value = event.value;\n                const isRange = selection instanceof DateRange;\n                // If we're selecting a range and we have a selection strategy, always pass the value through\n                // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n                // A null value when picking a range means that the user cancelled the selection (e.g. by\n                // pressing escape), whereas when selecting a single value it means that the value didn't\n                // change. This isn't very intuitive, but it's here for backwards-compatibility.\n                if (isRange && this._rangeSelectionStrategy) {\n                    const newSelection = this._rangeSelectionStrategy.selectionFinished(value, selection, event.event);\n                    this._model.updateSelection(newSelection, this);\n                }\n                else if (value && (isRange ||\n                    !this._dateAdapter.sameDate(value, selection))) {\n                    this._model.add(value);\n                }\n            }\n            if (!this._model || this._model.isComplete()) {\n                this.datepicker.close();\n            }\n        }\n        _startExitAnimation() {\n            this._animationState = 'void';\n            // @breaking-change 11.0.0 Remove null check for `_changeDetectorRef`.\n            if (this._changeDetectorRef) {\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        _getSelected() {\n            // @breaking-change 11.0.0 Remove null check for `_model`.\n            return this._model ? this._model.selection : null;\n        }\n    }\nMatDatepickerContent.ɵfac = function MatDatepickerContent_Factory(t) { return new (t || MatDatepickerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatDateSelectionModel), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_SELECTION_STRATEGY, 8)); };\nMatDatepickerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatepickerContent, selectors: [[\"mat-datepicker-content\"]], viewQuery: function MatDatepickerContent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatCalendar, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calendar = _t.first);\n    } }, hostAttrs: [1, \"mat-datepicker-content\"], hostVars: 3, hostBindings: function MatDatepickerContent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@transformPanel.done\", function MatDatepickerContent_animation_transformPanel_done_HostBindingHandler() { return ctx._animationDone.next(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@transformPanel\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-datepicker-content-touch\", ctx.datepicker.touchUi);\n    } }, inputs: { color: \"color\" }, exportAs: [\"matDatepickerContent\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 13, consts: [[\"cdkTrapFocus\", \"\", 3, \"id\", \"ngClass\", \"startAt\", \"startView\", \"minDate\", \"maxDate\", \"dateFilter\", \"headerComponent\", \"selected\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"yearSelected\", \"monthSelected\", \"_userSelection\"]], template: function MatDatepickerContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-calendar\", 0);\n        ɵngcc0.ɵɵlistener(\"yearSelected\", function MatDatepickerContent_Template_mat_calendar_yearSelected_0_listener($event) { return ctx.datepicker._selectYear($event); })(\"monthSelected\", function MatDatepickerContent_Template_mat_calendar_monthSelected_0_listener($event) { return ctx.datepicker._selectMonth($event); })(\"_userSelection\", function MatDatepickerContent_Template_mat_calendar__userSelection_0_listener($event) { return ctx._handleUserSelection($event); });\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.datepicker.id)(\"ngClass\", ctx.datepicker.panelClass)(\"startAt\", ctx.datepicker.startAt)(\"startView\", ctx.datepicker.startView)(\"minDate\", ctx.datepicker._minDate)(\"maxDate\", ctx.datepicker._maxDate)(\"dateFilter\", ctx.datepicker._dateFilter)(\"headerComponent\", ctx.datepicker.calendarHeaderComponent)(\"selected\", ctx._getSelected())(\"dateClass\", ctx.datepicker.dateClass)(\"comparisonStart\", ctx.comparisonStart)(\"comparisonEnd\", ctx.comparisonEnd)(\"@fadeInCalendar\", \"enter\");\n    } }, directives: [MatCalendar, ɵngcc5.CdkTrapFocus, ɵngcc1.NgClass], styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\\n\"], encapsulation: 2, data: { animation: [\n            matDatepickerAnimations.transformPanel,\n            matDatepickerAnimations.fadeInCalendar,\n        ] }, changeDetection: 0 });\n    MatDatepickerContent.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: MatDateSelectionModel },\n        { type: DateAdapter },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_RANGE_SELECTION_STRATEGY,] }] }\n    ];\n    MatDatepickerContent.propDecorators = {\n        _calendar: [{ type: ViewChild, args: [MatCalendar,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-datepicker-content',\n                template: \"<mat-calendar cdkTrapFocus\\n    [id]=\\\"datepicker.id\\\"\\n    [ngClass]=\\\"datepicker.panelClass\\\"\\n    [startAt]=\\\"datepicker.startAt\\\"\\n    [startView]=\\\"datepicker.startView\\\"\\n    [minDate]=\\\"datepicker._minDate\\\"\\n    [maxDate]=\\\"datepicker._maxDate\\\"\\n    [dateFilter]=\\\"datepicker._dateFilter\\\"\\n    [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\n    [selected]=\\\"_getSelected()\\\"\\n    [dateClass]=\\\"datepicker.dateClass\\\"\\n    [comparisonStart]=\\\"comparisonStart\\\"\\n    [comparisonEnd]=\\\"comparisonEnd\\\"\\n    [@fadeInCalendar]=\\\"'enter'\\\"\\n    (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\"\\n    (_userSelection)=\\\"_handleUserSelection($event)\\\">\\n</mat-calendar>\\n\",\n                host: {\n                    'class': 'mat-datepicker-content',\n                    '[@transformPanel]': '_animationState',\n                    '(@transformPanel.done)': '_animationDone.next()',\n                    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi'\n                },\n                animations: [\n                    matDatepickerAnimations.transformPanel,\n                    matDatepickerAnimations.fadeInCalendar,\n                ],\n                exportAs: 'matDatepickerContent',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['color'],\n                styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatDateSelectionModel }, { type: ɵngcc2.DateAdapter }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n            }] }]; }, { _calendar: [{\n            type: ViewChild,\n            args: [MatCalendar]\n        }] }); })();\n    return MatDatepickerContent;\n})();\n/** Base class for a datepicker. */\nlet MatDatepickerBase = /** @class */ (() => {\n    class MatDatepickerBase {\n        constructor(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document, _model) {\n            this._dialog = _dialog;\n            this._overlay = _overlay;\n            this._ngZone = _ngZone;\n            this._viewContainerRef = _viewContainerRef;\n            this._dateAdapter = _dateAdapter;\n            this._dir = _dir;\n            this._document = _document;\n            this._model = _model;\n            /** The view that the calendar should start in. */\n            this.startView = 'month';\n            this._touchUi = false;\n            /** Preferred position of the datepicker in the X axis. */\n            this.xPosition = 'start';\n            /** Preferred position of the datepicker in the Y axis. */\n            this.yPosition = 'below';\n            /**\n             * Emits selected year in multiyear view.\n             * This doesn't imply a change on the selected date.\n             */\n            this.yearSelected = new EventEmitter();\n            /**\n             * Emits selected month in year view.\n             * This doesn't imply a change on the selected date.\n             */\n            this.monthSelected = new EventEmitter();\n            /** Emits when the datepicker has been opened. */\n            this.openedStream = new EventEmitter();\n            /** Emits when the datepicker has been closed. */\n            this.closedStream = new EventEmitter();\n            this._opened = false;\n            /** The id for the datepicker calendar. */\n            this.id = `mat-datepicker-${datepickerUid++}`;\n            /** The element that was focused before the datepicker was opened. */\n            this._focusedElementBeforeOpen = null;\n            /** Emits when the datepicker is disabled. */\n            this._disabledChange = new Subject();\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            this._scrollStrategy = scrollStrategy;\n        }\n        /** The date to open the calendar to initially. */\n        get startAt() {\n            // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n            // selected value is.\n            return this._startAt || (this._datepickerInput ? this._datepickerInput.getStartValue() : null);\n        }\n        set startAt(value) {\n            this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n        }\n        /** Color palette to use on the datepicker's calendar. */\n        get color() {\n            return this._color ||\n                (this._datepickerInput ? this._datepickerInput.getThemePalette() : undefined);\n        }\n        set color(value) {\n            this._color = value;\n        }\n        /**\n         * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n         * than a popup and elements have more padding to allow for bigger touch targets.\n         */\n        get touchUi() { return this._touchUi; }\n        set touchUi(value) {\n            this._touchUi = coerceBooleanProperty(value);\n        }\n        /** Whether the datepicker pop-up should be disabled. */\n        get disabled() {\n            return this._disabled === undefined && this._datepickerInput ?\n                this._datepickerInput.disabled : !!this._disabled;\n        }\n        set disabled(value) {\n            const newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._disabledChange.next(newValue);\n            }\n        }\n        /** Whether the calendar is open. */\n        get opened() { return this._opened; }\n        set opened(value) { value ? this.open() : this.close(); }\n        /** The minimum selectable date. */\n        get _minDate() {\n            return this._datepickerInput && this._datepickerInput.min;\n        }\n        /** The maximum selectable date. */\n        get _maxDate() {\n            return this._datepickerInput && this._datepickerInput.max;\n        }\n        get _dateFilter() {\n            return this._datepickerInput && this._datepickerInput.dateFilter;\n        }\n        ngOnChanges(changes) {\n            const positionChange = changes['xPosition'] || changes['yPosition'];\n            if (positionChange && !positionChange.firstChange && this._popupRef) {\n                this._setConnectedPositions(this._popupRef.getConfig().positionStrategy);\n                if (this.opened) {\n                    this._popupRef.updatePosition();\n                }\n            }\n        }\n        ngOnDestroy() {\n            this._destroyPopup();\n            this.close();\n            this._disabledChange.complete();\n        }\n        /** Selects the given date */\n        select(date) {\n            this._model.add(date);\n        }\n        /** Emits the selected year in multiyear view */\n        _selectYear(normalizedYear) {\n            this.yearSelected.emit(normalizedYear);\n        }\n        /** Emits selected month in year view */\n        _selectMonth(normalizedMonth) {\n            this.monthSelected.emit(normalizedMonth);\n        }\n        /**\n         * Register an input with this datepicker.\n         * @param input The datepicker input to register with this datepicker.\n         * @returns Selection model that the input should hook itself up to.\n         */\n        _registerInput(input) {\n            if (this._datepickerInput) {\n                throw Error('A MatDatepicker can only be associated with a single input.');\n            }\n            this._datepickerInput = input;\n            return this._model;\n        }\n        /** Open the calendar. */\n        open() {\n            if (this._opened || this.disabled) {\n                return;\n            }\n            if (!this._datepickerInput) {\n                throw Error('Attempted to open an MatDatepicker with no associated input.');\n            }\n            if (this._document) {\n                this._focusedElementBeforeOpen = this._document.activeElement;\n            }\n            this.touchUi ? this._openAsDialog() : this._openAsPopup();\n            this._opened = true;\n            this.openedStream.emit();\n        }\n        /** Close the calendar. */\n        close() {\n            if (!this._opened) {\n                return;\n            }\n            if (this._popupComponentRef && this._popupRef) {\n                const instance = this._popupComponentRef.instance;\n                instance._startExitAnimation();\n                instance._animationDone.pipe(take(1)).subscribe(() => this._destroyPopup());\n            }\n            if (this._dialogRef) {\n                this._dialogRef.close();\n                this._dialogRef = null;\n            }\n            const completeClose = () => {\n                // The `_opened` could've been reset already if\n                // we got two events in quick succession.\n                if (this._opened) {\n                    this._opened = false;\n                    this.closedStream.emit();\n                    this._focusedElementBeforeOpen = null;\n                }\n            };\n            if (this._focusedElementBeforeOpen &&\n                typeof this._focusedElementBeforeOpen.focus === 'function') {\n                // Because IE moves focus asynchronously, we can't count on it being restored before we've\n                // marked the datepicker as closed. If the event fires out of sequence and the element that\n                // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n                // able to close the calendar at all. We work around it by making the logic, that marks\n                // the datepicker as closed, async as well.\n                this._focusedElementBeforeOpen.focus();\n                setTimeout(completeClose);\n            }\n            else {\n                completeClose();\n            }\n        }\n        /** Open the calendar as a dialog. */\n        _openAsDialog() {\n            // Usually this would be handled by `open` which ensures that we can only have one overlay\n            // open at a time, however since we reset the variables in async handlers some overlays\n            // may slip through if the user opens and closes multiple times in quick succession (e.g.\n            // by holding down the enter key).\n            if (this._dialogRef) {\n                this._dialogRef.close();\n            }\n            this._dialogRef = this._dialog.open(MatDatepickerContent, {\n                direction: this._dir ? this._dir.value : 'ltr',\n                viewContainerRef: this._viewContainerRef,\n                panelClass: 'mat-datepicker-dialog',\n                // These values are all the same as the defaults, but we set them explicitly so that the\n                // datepicker dialog behaves consistently even if the user changed the defaults.\n                hasBackdrop: true,\n                disableClose: false,\n                width: '',\n                height: '',\n                minWidth: '',\n                minHeight: '',\n                maxWidth: '80vw',\n                maxHeight: '',\n                position: {},\n                autoFocus: true,\n                // `MatDialog` has focus restoration built in, however we want to disable it since the\n                // datepicker also has focus restoration for dropdown mode. We want to do this, in order\n                // to ensure that the timing is consistent between dropdown and dialog modes since `MatDialog`\n                // restores focus when the animation is finished, but the datepicker does it immediately.\n                // Furthermore, this avoids any conflicts where the datepicker consumer might move focus\n                // inside the `closed` event which is dispatched immediately.\n                restoreFocus: false\n            });\n            this._dialogRef.afterClosed().subscribe(() => this.close());\n            this._forwardContentValues(this._dialogRef.componentInstance);\n        }\n        /** Open the calendar as a popup. */\n        _openAsPopup() {\n            const portal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n            this._destroyPopup();\n            this._createPopup();\n            this._popupComponentRef = this._popupRef.attach(portal);\n            this._forwardContentValues(this._popupComponentRef.instance);\n            // Update the position once the calendar has rendered.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this._popupRef.updatePosition();\n            });\n        }\n        /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n        _forwardContentValues(instance) {\n            instance.datepicker = this;\n            instance.color = this.color;\n        }\n        /** Create the popup. */\n        _createPopup() {\n            const positionStrategy = this._overlay.position()\n                .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n                .withTransformOriginOn('.mat-datepicker-content')\n                .withFlexibleDimensions(false)\n                .withViewportMargin(8)\n                .withLockedPosition();\n            const overlayConfig = new OverlayConfig({\n                positionStrategy: this._setConnectedPositions(positionStrategy),\n                hasBackdrop: true,\n                backdropClass: 'mat-overlay-transparent-backdrop',\n                direction: this._dir,\n                scrollStrategy: this._scrollStrategy(),\n                panelClass: 'mat-datepicker-popup',\n            });\n            this._popupRef = this._overlay.create(overlayConfig);\n            this._popupRef.overlayElement.setAttribute('role', 'dialog');\n            merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(event => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                return event.keyCode === ESCAPE ||\n                    (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))).subscribe(event => {\n                if (event) {\n                    event.preventDefault();\n                }\n                this.close();\n            });\n        }\n        /** Destroys the current popup overlay. */\n        _destroyPopup() {\n            if (this._popupRef) {\n                this._popupRef.dispose();\n                this._popupRef = this._popupComponentRef = null;\n            }\n        }\n        /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n        _setConnectedPositions(strategy) {\n            const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n            const secondaryX = primaryX === 'start' ? 'end' : 'start';\n            const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n            const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n            return strategy.withPositions([\n                {\n                    originX: primaryX,\n                    originY: secondaryY,\n                    overlayX: primaryX,\n                    overlayY: primaryY\n                },\n                {\n                    originX: primaryX,\n                    originY: primaryY,\n                    overlayX: primaryX,\n                    overlayY: secondaryY\n                },\n                {\n                    originX: secondaryX,\n                    originY: secondaryY,\n                    overlayX: secondaryX,\n                    overlayY: primaryY\n                },\n                {\n                    originX: secondaryX,\n                    originY: primaryY,\n                    overlayX: secondaryX,\n                    overlayY: secondaryY\n                }\n            ]);\n        }\n        /**\n         * @param obj The object to check.\n         * @returns The given object if it is both a date instance and valid, otherwise null.\n         */\n        _getValidDateOrNull(obj) {\n            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n        }\n    }\nMatDatepickerBase.ɵfac = function MatDatepickerBase_Factory(t) { return new (t || MatDatepickerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATEPICKER_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDateSelectionModel)); };\nMatDatepickerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDatepickerBase, inputs: { startView: \"startView\", xPosition: \"xPosition\", yPosition: \"yPosition\", startAt: \"startAt\", color: \"color\", touchUi: \"touchUi\", disabled: \"disabled\", opened: \"opened\", calendarHeaderComponent: \"calendarHeaderComponent\", panelClass: \"panelClass\", dateClass: \"dateClass\" }, outputs: { yearSelected: \"yearSelected\", monthSelected: \"monthSelected\", openedStream: \"opened\", closedStream: \"closed\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatDatepickerBase.ctorParameters = () => [\n        { type: MatDialog },\n        { type: Overlay },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY,] }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: MatDateSelectionModel }\n    ];\n    MatDatepickerBase.propDecorators = {\n        calendarHeaderComponent: [{ type: Input }],\n        startAt: [{ type: Input }],\n        startView: [{ type: Input }],\n        color: [{ type: Input }],\n        touchUi: [{ type: Input }],\n        disabled: [{ type: Input }],\n        xPosition: [{ type: Input }],\n        yPosition: [{ type: Input }],\n        yearSelected: [{ type: Output }],\n        monthSelected: [{ type: Output }],\n        panelClass: [{ type: Input }],\n        dateClass: [{ type: Input }],\n        openedStream: [{ type: Output, args: ['opened',] }],\n        closedStream: [{ type: Output, args: ['closed',] }],\n        opened: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc7.MatDialog }, { type: ɵngcc8.Overlay }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DATEPICKER_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDateSelectionModel }]; }, { startView: [{\n            type: Input\n        }], xPosition: [{\n            type: Input\n        }], yPosition: [{\n            type: Input\n        }], yearSelected: [{\n            type: Output\n        }], monthSelected: [{\n            type: Output\n        }], openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], startAt: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], touchUi: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], opened: [{\n            type: Input\n        }], calendarHeaderComponent: [{\n            type: Input\n        }], panelClass: [{\n            type: Input\n        }], dateClass: [{\n            type: Input\n        }] }); })();\n    return MatDatepickerBase;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\nlet MatDatepicker = /** @class */ (() => {\n    class MatDatepicker extends MatDatepickerBase {\n    }\nMatDatepicker.ɵfac = function MatDatepicker_Factory(t) { return ɵMatDatepicker_BaseFactory(t || MatDatepicker); };\nMatDatepicker.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatepicker, selectors: [[\"mat-datepicker\"]], exportAs: [\"matDatepicker\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function MatDatepicker_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });\nconst ɵMatDatepicker_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDatepicker);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepicker, [{\n        type: Component,\n        args: [{\n                selector: 'mat-datepicker',\n                template: '',\n                exportAs: 'matDatepicker',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatDatepicker;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nclass MatDatepickerInputEvent {\n    constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    target, \n    /** Reference to the native input element associated with the datepicker input. */\n    targetElement) {\n        this.target = target;\n        this.targetElement = targetElement;\n        this.value = this.target.value;\n    }\n}\n/** Base class for datepicker inputs. */\nlet MatDatepickerInputBase = /** @class */ (() => {\n    class MatDatepickerInputBase {\n        constructor(_elementRef, _dateAdapter, _dateFormats) {\n            this._elementRef = _elementRef;\n            this._dateAdapter = _dateAdapter;\n            this._dateFormats = _dateFormats;\n            /** Emits when a `change` event is fired on this `<input>`. */\n            this.dateChange = new EventEmitter();\n            /** Emits when an `input` event is fired on this `<input>`. */\n            this.dateInput = new EventEmitter();\n            /** Emits when the value changes (either due to user input or programmatic change). */\n            this._valueChange = new EventEmitter();\n            /** Emits when the disabled state has changed */\n            this._disabledChange = new EventEmitter();\n            this._onTouched = () => { };\n            this._validatorOnChange = () => { };\n            this._cvaOnChange = () => { };\n            this._valueChangesSubscription = Subscription.EMPTY;\n            this._localeSubscription = Subscription.EMPTY;\n            /** The form control validator for whether the input parses. */\n            this._parseValidator = () => {\n                return this._lastValueValid ?\n                    null : { 'matDatepickerParse': { 'text': this._elementRef.nativeElement.value } };\n            };\n            /** The form control validator for the date filter. */\n            this._filterValidator = (control) => {\n                const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n                const dateFilter = this._getDateFilter();\n                return !dateFilter || !controlValue || dateFilter(controlValue) ?\n                    null : { 'matDatepickerFilter': true };\n            };\n            /** The form control validator for the min date. */\n            this._minValidator = (control) => {\n                const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n                const min = this._getMinDate();\n                return (!min || !controlValue ||\n                    this._dateAdapter.compareDate(min, controlValue) <= 0) ?\n                    null : { 'matDatepickerMin': { 'min': min, 'actual': controlValue } };\n            };\n            /** The form control validator for the max date. */\n            this._maxValidator = (control) => {\n                const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n                const max = this._getMaxDate();\n                return (!max || !controlValue ||\n                    this._dateAdapter.compareDate(max, controlValue) >= 0) ?\n                    null : { 'matDatepickerMax': { 'max': max, 'actual': controlValue } };\n            };\n            /** Whether the last value set on the input was valid. */\n            this._lastValueValid = false;\n            if (!this._dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            if (!this._dateFormats) {\n                throw createMissingDateImplError('MAT_DATE_FORMATS');\n            }\n            // Update the displayed date when the locale changes.\n            this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n                this.value = this.value;\n            });\n        }\n        /** The value of the input. */\n        get value() {\n            return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n        }\n        set value(value) {\n            value = this._dateAdapter.deserialize(value);\n            this._lastValueValid = this._isValidValue(value);\n            value = this._getValidDateOrNull(value);\n            const oldDate = this.value;\n            this._assignValue(value);\n            this._formatValue(value);\n            if (!this._dateAdapter.sameDate(oldDate, value)) {\n                this._valueChange.emit(value);\n            }\n        }\n        /** Whether the datepicker-input is disabled. */\n        get disabled() { return !!this._disabled || this._parentDisabled(); }\n        set disabled(value) {\n            const newValue = coerceBooleanProperty(value);\n            const element = this._elementRef.nativeElement;\n            if (this._disabled !== newValue) {\n                this._disabled = newValue;\n                this._disabledChange.emit(newValue);\n            }\n            // We need to null check the `blur` method, because it's undefined during SSR.\n            // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n            // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n            // element has been inserted.\n            if (newValue && this._isInitialized && element.blur) {\n                // Normally, native input elements automatically blur if they turn disabled. This behavior\n                // is problematic, because it would mean that it triggers another change detection cycle,\n                // which then causes a changed after checked error if the input element was focused before.\n                element.blur();\n            }\n        }\n        /** Gets the base validator functions. */\n        _getValidators() {\n            return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n        }\n        /** Registers a date selection model with the input. */\n        _registerModel(model) {\n            this._model = model;\n            this._valueChangesSubscription.unsubscribe();\n            if (this._pendingValue) {\n                this._assignValue(this._pendingValue);\n            }\n            this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n                if (event.source !== this) {\n                    const value = this._getValueFromModel(event.selection);\n                    this._lastValueValid = this._isValidValue(value);\n                    this._cvaOnChange(value);\n                    this._onTouched();\n                    this._formatValue(value);\n                    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n                    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n                    if (this._outsideValueChanged) {\n                        this._outsideValueChanged();\n                    }\n                }\n            });\n        }\n        ngAfterViewInit() {\n            this._isInitialized = true;\n        }\n        ngOnDestroy() {\n            this._valueChangesSubscription.unsubscribe();\n            this._localeSubscription.unsubscribe();\n            this._valueChange.complete();\n            this._disabledChange.complete();\n        }\n        /** @docs-private */\n        registerOnValidatorChange(fn) {\n            this._validatorOnChange = fn;\n        }\n        /** @docs-private */\n        validate(c) {\n            return this._validator ? this._validator(c) : null;\n        }\n        // Implemented as part of ControlValueAccessor.\n        writeValue(value) {\n            this.value = value;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnChange(fn) {\n            this._cvaOnChange = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        // Implemented as part of ControlValueAccessor.\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n        }\n        _onKeydown(event) {\n            const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n            if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n                this._openPopup();\n                event.preventDefault();\n            }\n        }\n        _onInput(value) {\n            const lastValueWasValid = this._lastValueValid;\n            let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n            this._lastValueValid = this._isValidValue(date);\n            date = this._getValidDateOrNull(date);\n            if (!this._dateAdapter.sameDate(date, this.value)) {\n                this._assignValue(date);\n                this._cvaOnChange(date);\n                this._valueChange.emit(date);\n                this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            }\n            else {\n                // Call the CVA change handler for invalid values\n                // since this is what marks the control as dirty.\n                if (value && !this.value) {\n                    this._cvaOnChange(date);\n                }\n                if (lastValueWasValid !== this._lastValueValid) {\n                    this._validatorOnChange();\n                }\n            }\n        }\n        _onChange() {\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n        /** Handles blur events on the input. */\n        _onBlur() {\n            // Reformat the input only if we have a valid value.\n            if (this.value) {\n                this._formatValue(this.value);\n            }\n            this._onTouched();\n        }\n        /** Formats a value and sets it on the input element. */\n        _formatValue(value) {\n            this._elementRef.nativeElement.value =\n                value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n        }\n        /**\n         * @param obj The object to check.\n         * @returns The given object if it is both a date instance and valid, otherwise null.\n         */\n        _getValidDateOrNull(obj) {\n            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n        }\n        /** Assigns a value to the model. */\n        _assignValue(value) {\n            // We may get some incoming values before the model was\n            // assigned. Save the value so that we can assign it later.\n            if (this._model) {\n                this._assignValueToModel(value);\n                this._pendingValue = null;\n            }\n            else {\n                this._pendingValue = value;\n            }\n        }\n        /** Whether a value is considered valid. */\n        _isValidValue(value) {\n            return !value || this._dateAdapter.isValid(value);\n        }\n        /**\n         * Checks whether a parent control is disabled. This is in place so that it can be overridden\n         * by inputs extending this one which can be placed inside of a group that can be disabled.\n         */\n        _parentDisabled() {\n            return false;\n        }\n    }\nMatDatepickerInputBase.ɵfac = function MatDatepickerInputBase_Factory(t) { return new (t || MatDatepickerInputBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8)); };\nMatDatepickerInputBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDatepickerInputBase, inputs: { value: \"value\", disabled: \"disabled\" }, outputs: { dateChange: \"dateChange\", dateInput: \"dateInput\" } });\n    MatDatepickerInputBase.ctorParameters = () => [\n        { type: ElementRef },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] }\n    ];\n    MatDatepickerInputBase.propDecorators = {\n        value: [{ type: Input }],\n        disabled: [{ type: Input }],\n        dateChange: [{ type: Output }],\n        dateInput: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerInputBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }]; }, { dateChange: [{\n            type: Output\n        }], dateInput: [{\n            type: Output\n        }], value: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n    return MatDatepickerInputBase;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatDatepickerInput),\n    multi: true\n};\n/** @docs-private */\nconst MAT_DATEPICKER_VALIDATORS = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatDatepickerInput),\n    multi: true\n};\n/** Directive used to connect an input to a MatDatepicker. */\nlet MatDatepickerInput = /** @class */ (() => {\n    class MatDatepickerInput extends MatDatepickerInputBase {\n        constructor(elementRef, dateAdapter, dateFormats, _formField) {\n            super(elementRef, dateAdapter, dateFormats);\n            this._formField = _formField;\n            this._validator = Validators.compose(super._getValidators());\n        }\n        /** The datepicker that this input is associated with. */\n        set matDatepicker(datepicker) {\n            if (datepicker) {\n                this._datepicker = datepicker;\n                this._registerModel(datepicker._registerInput(this));\n            }\n        }\n        /** The minimum valid date. */\n        get min() { return this._min; }\n        set min(value) {\n            this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._validatorOnChange();\n        }\n        /** The maximum valid date. */\n        get max() { return this._max; }\n        set max(value) {\n            this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._validatorOnChange();\n        }\n        /** Function that can be used to filter out dates within the datepicker. */\n        get dateFilter() { return this._dateFilter; }\n        set dateFilter(value) {\n            this._dateFilter = value;\n            this._validatorOnChange();\n        }\n        /**\n         * Gets the element that the datepicker popup should be connected to.\n         * @return The element to connect the popup to.\n         */\n        getConnectedOverlayOrigin() {\n            return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n        }\n        /** Returns the palette used by the input's form field, if any. */\n        getThemePalette() {\n            return this._formField ? this._formField.color : undefined;\n        }\n        /** Gets the value at which the calendar should start. */\n        getStartValue() {\n            return this.value;\n        }\n        /**\n         * @deprecated\n         * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n         */\n        getPopupConnectionElementRef() {\n            return this.getConnectedOverlayOrigin();\n        }\n        /** Opens the associated datepicker. */\n        _openPopup() {\n            if (this._datepicker) {\n                this._datepicker.open();\n            }\n        }\n        _getValueFromModel(modelValue) {\n            return modelValue;\n        }\n        _assignValueToModel(value) {\n            if (this._model) {\n                this._model.updateSelection(value, this);\n            }\n        }\n        /** Gets the input's minimum date. */\n        _getMinDate() {\n            return this._min;\n        }\n        /** Gets the input's maximum date. */\n        _getMaxDate() {\n            return this._max;\n        }\n        /** Gets the input's date filtering function. */\n        _getDateFilter() {\n            return this._dateFilter;\n        }\n    }\nMatDatepickerInput.ɵfac = function MatDatepickerInput_Factory(t) { return new (t || MatDatepickerInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatDatepickerInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDatepickerInput, selectors: [[\"input\", \"matDatepicker\", \"\"]], hostVars: 5, hostBindings: function MatDatepickerInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MatDatepickerInput_input_HostBindingHandler($event) { return ctx._onInput($event.target.value); })(\"change\", function MatDatepickerInput_change_HostBindingHandler() { return ctx._onChange(); })(\"blur\", function MatDatepickerInput_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatDatepickerInput_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx._datepicker ? \"dialog\" : null)(\"aria-owns\", (ctx._datepicker == null ? null : ctx._datepicker.opened) && ctx._datepicker.id || null)(\"min\", ctx.min ? ctx._dateAdapter.toIso8601(ctx.min) : null)(\"max\", ctx.max ? ctx._dateAdapter.toIso8601(ctx.max) : null);\n    } }, inputs: { matDatepicker: \"matDatepicker\", min: \"min\", max: \"max\", dateFilter: [\"matDatepickerFilter\", \"dateFilter\"] }, exportAs: [\"matDatepickerInput\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_DATEPICKER_VALUE_ACCESSOR,\n            MAT_DATEPICKER_VALIDATORS,\n            { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatDatepickerInput.ctorParameters = () => [\n        { type: ElementRef },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] },\n        { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n    ];\n    MatDatepickerInput.propDecorators = {\n        matDatepicker: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        dateFilter: [{ type: Input, args: ['matDatepickerFilter',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matDatepicker]',\n                providers: [\n                    MAT_DATEPICKER_VALUE_ACCESSOR,\n                    MAT_DATEPICKER_VALIDATORS,\n                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput },\n                ],\n                host: {\n                    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n                    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n                    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n                    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n                    '[disabled]': 'disabled',\n                    '(input)': '_onInput($event.target.value)',\n                    '(change)': '_onChange()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)'\n                },\n                exportAs: 'matDatepickerInput'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }, { type: ɵngcc9.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { matDatepicker: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], dateFilter: [{\n            type: Input,\n            args: ['matDatepickerFilter']\n        }] }); })();\n    return MatDatepickerInput;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nlet MatDatepickerToggleIcon = /** @class */ (() => {\n    class MatDatepickerToggleIcon {\n    }\nMatDatepickerToggleIcon.ɵfac = function MatDatepickerToggleIcon_Factory(t) { return new (t || MatDatepickerToggleIcon)(); };\nMatDatepickerToggleIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDatepickerToggleIcon, selectors: [[\"\", \"matDatepickerToggleIcon\", \"\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerToggleIcon, [{\n        type: Directive,\n        args: [{\n                selector: '[matDatepickerToggleIcon]'\n            }]\n    }], null, null); })();\n    return MatDatepickerToggleIcon;\n})();\nlet MatDatepickerToggle = /** @class */ (() => {\n    class MatDatepickerToggle {\n        constructor(_intl, _changeDetectorRef, defaultTabIndex) {\n            this._intl = _intl;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._stateChanges = Subscription.EMPTY;\n            const parsedTabIndex = Number(defaultTabIndex);\n            this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        }\n        /** Whether the toggle button is disabled. */\n        get disabled() {\n            if (this._disabled === undefined && this.datepicker) {\n                return this.datepicker.disabled;\n            }\n            return !!this._disabled;\n        }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n        ngOnChanges(changes) {\n            if (changes['datepicker']) {\n                this._watchStateChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._stateChanges.unsubscribe();\n        }\n        ngAfterContentInit() {\n            this._watchStateChanges();\n        }\n        _open(event) {\n            if (this.datepicker && !this.disabled) {\n                this.datepicker.open();\n                event.stopPropagation();\n            }\n        }\n        _watchStateChanges() {\n            const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n            const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n                this.datepicker._datepickerInput._disabledChange : of();\n            const datepickerToggled = this.datepicker ?\n                merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n                of();\n            this._stateChanges.unsubscribe();\n            this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n    }\nMatDatepickerToggle.ɵfac = function MatDatepickerToggle_Factory(t) { return new (t || MatDatepickerToggle)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatDatepickerToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatepickerToggle, selectors: [[\"mat-datepicker-toggle\"]], contentQueries: function MatDatepickerToggle_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDatepickerToggleIcon, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n    } }, viewQuery: function MatDatepickerToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._button = _t.first);\n    } }, hostAttrs: [1, \"mat-datepicker-toggle\"], hostVars: 7, hostBindings: function MatDatepickerToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatDatepickerToggle_focus_HostBindingHandler() { return ctx._button.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1);\n        ɵngcc0.ɵɵclassProp(\"mat-datepicker-toggle-active\", ctx.datepicker && ctx.datepicker.opened)(\"mat-accent\", ctx.datepicker && ctx.datepicker.color === \"accent\")(\"mat-warn\", ctx.datepicker && ctx.datepicker.color === \"warn\");\n    } }, inputs: { tabIndex: \"tabIndex\", disabled: \"disabled\", datepicker: [\"for\", \"datepicker\"], disableRipple: \"disableRipple\" }, exportAs: [\"matDatepickerToggle\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c4, decls: 4, vars: 6, consts: [[\"mat-icon-button\", \"\", \"type\", \"button\", 3, \"disabled\", \"disableRipple\", \"click\"], [\"button\", \"\"], [\"class\", \"mat-datepicker-toggle-default-icon\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", 1, \"mat-datepicker-toggle-default-icon\"], [\"d\", \"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"]], template: function MatDatepickerToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatDatepickerToggle_Template_button_click_0_listener($event) { return ctx._open($event); });\n        ɵngcc0.ɵɵtemplate(2, MatDatepickerToggle__svg_svg_2_Template, 2, 0, \"svg\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"disableRipple\", ctx.disableRipple);\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx.datepicker ? \"dialog\" : null)(\"aria-label\", ctx._intl.openCalendarLabel)(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n    } }, directives: [ɵngcc4.MatButton, ɵngcc1.NgIf], styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatDatepickerToggle.ctorParameters = () => [\n        { type: MatDatepickerIntl },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n    ];\n    MatDatepickerToggle.propDecorators = {\n        datepicker: [{ type: Input, args: ['for',] }],\n        tabIndex: [{ type: Input }],\n        disabled: [{ type: Input }],\n        disableRipple: [{ type: Input }],\n        _customIcon: [{ type: ContentChild, args: [MatDatepickerToggleIcon,] }],\n        _button: [{ type: ViewChild, args: ['button',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-datepicker-toggle',\n                template: \"<button\\n  #button\\n  mat-icon-button\\n  type=\\\"button\\\"\\n  [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\"\\n  [attr.aria-label]=\\\"_intl.openCalendarLabel\\\"\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [disableRipple]=\\\"disableRipple\\\"\\n  (click)=\\\"_open($event)\\\">\\n\\n  <svg\\n    *ngIf=\\\"!_customIcon\\\"\\n    class=\\\"mat-datepicker-toggle-default-icon\\\"\\n    viewBox=\\\"0 0 24 24\\\"\\n    width=\\\"24px\\\"\\n    height=\\\"24px\\\"\\n    fill=\\\"currentColor\\\"\\n    focusable=\\\"false\\\">\\n    <path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/>\\n  </svg>\\n\\n  <ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\",\n                host: {\n                    'class': 'mat-datepicker-toggle',\n                    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n                    // consumer may have provided, while still being able to receive focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n                    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n                    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n                    '(focus)': '_button.focus()'\n                },\n                exportAs: 'matDatepickerToggle',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: MatDatepickerIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], datepicker: [{\n            type: Input,\n            args: ['for']\n        }], disableRipple: [{\n            type: Input\n        }], _customIcon: [{\n            type: ContentChild,\n            args: [MatDatepickerToggleIcon]\n        }], _button: [{\n            type: ViewChild,\n            args: ['button']\n        }] }); })();\n    return MatDatepickerToggle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n */\nconst MAT_DATE_RANGE_INPUT_PARENT = new InjectionToken('MAT_DATE_RANGE_INPUT_PARENT');\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\nlet MatDateRangeInputPartBase = /** @class */ (() => {\n    class MatDateRangeInputPartBase extends MatDatepickerInputBase {\n        constructor(_rangeInput, elementRef, _defaultErrorStateMatcher, _injector, _parentForm, _parentFormGroup, dateAdapter, dateFormats) {\n            super(elementRef, dateAdapter, dateFormats);\n            this._rangeInput = _rangeInput;\n            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n            this._injector = _injector;\n            this._parentForm = _parentForm;\n            this._parentFormGroup = _parentFormGroup;\n            this._outsideValueChanged = () => {\n                // Whenever the value changes outside the input we need to revalidate, because\n                // the validation state of each of the inputs depends on the other one.\n                this._validatorOnChange();\n            };\n        }\n        ngOnInit() {\n            // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n            // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n            // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n            // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n            // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n            // everything has been resolved.\n            const ngControl = this._injector.get(NgControl, null, InjectFlags.Self);\n            if (ngControl) {\n                this.ngControl = ngControl;\n            }\n        }\n        ngDoCheck() {\n            if (this.ngControl) {\n                // We need to re-evaluate this on every change detection cycle, because there are some\n                // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n                // that whatever logic is in here has to be super lean or we risk destroying the performance.\n                this.updateErrorState();\n            }\n        }\n        /** Gets whether the input is empty. */\n        isEmpty() {\n            return this._elementRef.nativeElement.value.length === 0;\n        }\n        /** Gets the placeholder of the input. */\n        _getPlaceholder() {\n            return this._elementRef.nativeElement.placeholder;\n        }\n        /** Focuses the input. */\n        focus() {\n            this._elementRef.nativeElement.focus();\n        }\n        /** Handles `input` events on the input element. */\n        _onInput(value) {\n            super._onInput(value);\n            this._rangeInput._handleChildValueChange();\n        }\n        /** Opens the datepicker associated with the input. */\n        _openPopup() {\n            this._rangeInput._openDatepicker();\n        }\n        /** Gets the minimum date from the range input. */\n        _getMinDate() {\n            return this._rangeInput.min;\n        }\n        /** Gets the maximum date from the range input. */\n        _getMaxDate() {\n            return this._rangeInput.max;\n        }\n        /** Gets the date filter function from the range input. */\n        _getDateFilter() {\n            return this._rangeInput.dateFilter;\n        }\n        _parentDisabled() {\n            return this._rangeInput._groupDisabled;\n        }\n    }\nMatDateRangeInputPartBase.ɵfac = function MatDateRangeInputPartBase_Factory(t) { return new (t || MatDateRangeInputPartBase)(ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_INPUT_PARENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8)); };\nMatDateRangeInputPartBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDateRangeInputPartBase, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatDateRangeInputPartBase.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATE_RANGE_INPUT_PARENT,] }] },\n        { type: ElementRef },\n        { type: ErrorStateMatcher },\n        { type: Injector },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDateRangeInputPartBase, [{\n        type: Directive\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DATE_RANGE_INPUT_PARENT]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc10.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc10.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }]; }, null); })();\n    return MatDateRangeInputPartBase;\n})();\nconst _MatDateRangeInputBase = \n// Needs to be `as any`, because the base class is abstract.\nmixinErrorState(MatDateRangeInputPartBase);\n/** Input for entering the start date in a `mat-date-range-input`. */\nlet MatStartDate = /** @class */ (() => {\n    class MatStartDate extends _MatDateRangeInputBase {\n        constructor(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats) {\n            // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n            // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n            // constructor once ViewEngine is removed.\n            super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats);\n            /** Validator that checks that the start date isn't after the end date. */\n            this._startValidator = (control) => {\n                const start = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n                const end = this._model ? this._model.selection.end : null;\n                return (!start || !end ||\n                    this._dateAdapter.compareDate(start, end) <= 0) ?\n                    null : { 'matStartDateInvalid': { 'end': end, 'actual': start } };\n            };\n            this._validator = Validators.compose([...super._getValidators(), this._startValidator]);\n        }\n        _getValueFromModel(modelValue) {\n            return modelValue.start;\n        }\n        _assignValueToModel(value) {\n            if (this._model) {\n                const range = new DateRange(value, this._model.selection.end);\n                this._model.updateSelection(range, this);\n                this._cvaOnChange(value);\n            }\n        }\n        _formatValue(value) {\n            super._formatValue(value);\n            // Any time the input value is reformatted we need to tell the parent.\n            this._rangeInput._handleChildValueChange();\n        }\n        /** Gets the value that should be used when mirroring the input's size. */\n        getMirrorValue() {\n            const element = this._elementRef.nativeElement;\n            const value = element.value;\n            return value.length > 0 ? value : element.placeholder;\n        }\n    }\nMatStartDate.ɵfac = function MatStartDate_Factory(t) { return new (t || MatStartDate)(ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_INPUT_PARENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8)); };\nMatStartDate.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatStartDate, selectors: [[\"input\", \"matStartDate\", \"\"]], hostAttrs: [\"type\", \"text\", 1, \"mat-date-range-input-inner\"], hostVars: 6, hostBindings: function MatStartDate_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MatStartDate_input_HostBindingHandler($event) { return ctx._onInput($event.target.value); })(\"change\", function MatStartDate_change_HostBindingHandler() { return ctx._onChange(); })(\"keydown\", function MatStartDate_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"blur\", function MatStartDate_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._rangeInput.id)(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", (ctx._rangeInput.rangePicker == null ? null : ctx._rangeInput.rangePicker.opened) && ctx._rangeInput.rangePicker.id || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true },\n            { provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatStartDate.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATE_RANGE_INPUT_PARENT,] }] },\n        { type: ElementRef },\n        { type: ErrorStateMatcher },\n        { type: Injector },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStartDate, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matStartDate]',\n                host: {\n                    'class': 'mat-date-range-input-inner',\n                    '[disabled]': 'disabled',\n                    '(input)': '_onInput($event.target.value)',\n                    '(change)': '_onChange()',\n                    '(keydown)': '_onKeydown($event)',\n                    '[attr.id]': '_rangeInput.id',\n                    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n                    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n                    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n                    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n                    '(blur)': '_onBlur()',\n                    'type': 'text'\n                },\n                providers: [\n                    { provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true },\n                    { provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true }\n                ]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DATE_RANGE_INPUT_PARENT]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc10.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc10.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }]; }, null); })();\n    return MatStartDate;\n})();\n/** Input for entering the end date in a `mat-date-range-input`. */\nlet MatEndDate = /** @class */ (() => {\n    class MatEndDate extends _MatDateRangeInputBase {\n        constructor(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats) {\n            // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n            // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n            // constructor once ViewEngine is removed.\n            super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats);\n            /** Validator that checks that the end date isn't before the start date. */\n            this._endValidator = (control) => {\n                const end = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n                const start = this._model ? this._model.selection.start : null;\n                return (!end || !start ||\n                    this._dateAdapter.compareDate(end, start) >= 0) ?\n                    null : { 'matEndDateInvalid': { 'start': start, 'actual': end } };\n            };\n            this._validator = Validators.compose([...super._getValidators(), this._endValidator]);\n        }\n        _getValueFromModel(modelValue) {\n            return modelValue.end;\n        }\n        _assignValueToModel(value) {\n            if (this._model) {\n                const range = new DateRange(this._model.selection.start, value);\n                this._model.updateSelection(range, this);\n                this._cvaOnChange(value);\n            }\n        }\n        _onKeydown(event) {\n            // If the user is pressing backspace on an empty end input, move focus back to the start.\n            if (event.keyCode === BACKSPACE && !this._elementRef.nativeElement.value) {\n                this._rangeInput._startInput.focus();\n            }\n            super._onKeydown(event);\n        }\n    }\nMatEndDate.ɵfac = function MatEndDate_Factory(t) { return new (t || MatEndDate)(ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_INPUT_PARENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8)); };\nMatEndDate.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatEndDate, selectors: [[\"input\", \"matEndDate\", \"\"]], hostAttrs: [\"type\", \"text\", 1, \"mat-date-range-input-inner\"], hostVars: 5, hostBindings: function MatEndDate_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function MatEndDate_input_HostBindingHandler($event) { return ctx._onInput($event.target.value); })(\"change\", function MatEndDate_change_HostBindingHandler() { return ctx._onChange(); })(\"keydown\", function MatEndDate_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"blur\", function MatEndDate_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", (ctx._rangeInput.rangePicker == null ? null : ctx._rangeInput.rangePicker.opened) && ctx._rangeInput.rangePicker.id || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true },\n            { provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatEndDate.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DATE_RANGE_INPUT_PARENT,] }] },\n        { type: ElementRef },\n        { type: ErrorStateMatcher },\n        { type: Injector },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatEndDate, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matEndDate]',\n                host: {\n                    'class': 'mat-date-range-input-inner',\n                    '[disabled]': 'disabled',\n                    '(input)': '_onInput($event.target.value)',\n                    '(change)': '_onChange()',\n                    '(keydown)': '_onKeydown($event)',\n                    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n                    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n                    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n                    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n                    '(blur)': '_onBlur()',\n                    'type': 'text'\n                },\n                providers: [\n                    { provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true },\n                    { provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true }\n                ]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DATE_RANGE_INPUT_PARENT]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc10.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc10.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DATE_FORMATS]\n            }] }]; }, null); })();\n    return MatEndDate;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\nlet MatDateRangePicker = /** @class */ (() => {\n    class MatDateRangePicker extends MatDatepickerBase {\n        _forwardContentValues(instance) {\n            super._forwardContentValues(instance);\n            const input = this._datepickerInput;\n            if (input) {\n                instance.comparisonStart = input.comparisonStart;\n                instance.comparisonEnd = input.comparisonEnd;\n            }\n        }\n    }\nMatDateRangePicker.ɵfac = function MatDateRangePicker_Factory(t) { return ɵMatDateRangePicker_BaseFactory(t || MatDateRangePicker); };\nMatDateRangePicker.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDateRangePicker, selectors: [[\"mat-date-range-picker\"]], exportAs: [\"matDateRangePicker\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function MatDateRangePicker_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });\nconst ɵMatDateRangePicker_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDateRangePicker);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDateRangePicker, [{\n        type: Component,\n        args: [{\n                selector: 'mat-date-range-picker',\n                template: '',\n                exportAs: 'matDateRangePicker',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatDateRangePicker;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\nlet MatDateRangeInput = /** @class */ (() => {\n    class MatDateRangeInput {\n        constructor(_changeDetectorRef, _elementRef, control, _dateAdapter, _formField) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            this._dateAdapter = _dateAdapter;\n            this._formField = _formField;\n            /** Emits when the input's state has changed. */\n            this.stateChanges = new Subject();\n            /** Unique ID for the input. */\n            this.id = `mat-date-range-input-${nextUniqueId++}`;\n            /** Whether the control is focused. */\n            this.focused = false;\n            /** Name of the form control. */\n            this.controlType = 'mat-date-range-input';\n            this._groupDisabled = false;\n            /** Value for the `aria-describedby` attribute of the inputs. */\n            this._ariaDescribedBy = null;\n            /** Value for the `aria-labelledby` attribute of the inputs. */\n            this._ariaLabelledBy = null;\n            /** Separator text to be shown between the inputs. */\n            this.separator = '–';\n            /** Start of the comparison range that should be shown in the calendar. */\n            this.comparisonStart = null;\n            /** End of the comparison range that should be shown in the calendar. */\n            this.comparisonEnd = null;\n            /** Emits when the input's disabled state changes. */\n            this._disabledChange = new Subject();\n            if (!_dateAdapter) {\n                throw createMissingDateImplError('DateAdapter');\n            }\n            // TODO(crisbeto): remove `as any` after #18206 lands.\n            this.ngControl = control;\n            this._ariaLabelledBy = _formField ? _formField._labelId : null;\n        }\n        /** Current value of the range input. */\n        get value() {\n            return this._model ? this._model.selection : null;\n        }\n        /** Whether the control's label should float. */\n        get shouldLabelFloat() {\n            return this.focused || !this.empty;\n        }\n        /**\n         * Implemented as a part of `MatFormFieldControl`.\n         * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n         * @docs-private\n         */\n        get placeholder() {\n            var _a, _b;\n            const start = ((_a = this._startInput) === null || _a === void 0 ? void 0 : _a._getPlaceholder()) || '';\n            const end = ((_b = this._endInput) === null || _b === void 0 ? void 0 : _b._getPlaceholder()) || '';\n            return (start || end) ? `${start} ${this.separator} ${end}` : '';\n        }\n        /** The range picker that this input is associated with. */\n        get rangePicker() { return this._rangePicker; }\n        set rangePicker(rangePicker) {\n            if (rangePicker) {\n                this._model = rangePicker._registerInput(this);\n                this._rangePicker = rangePicker;\n                this._registerModel(this._model);\n            }\n        }\n        /** Whether the input is required. */\n        get required() { return !!this._required; }\n        set required(value) {\n            this._required = coerceBooleanProperty(value);\n        }\n        /** Function that can be used to filter out dates within the date range picker. */\n        get dateFilter() { return this._dateFilter; }\n        set dateFilter(value) {\n            this._dateFilter = value;\n            this._revalidate();\n        }\n        /** The minimum valid date. */\n        get min() { return this._min; }\n        set min(value) {\n            this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._revalidate();\n        }\n        /** The maximum valid date. */\n        get max() { return this._max; }\n        set max(value) {\n            this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n            this._revalidate();\n        }\n        /** Whether the input is disabled. */\n        get disabled() {\n            return (this._startInput && this._endInput) ?\n                (this._startInput.disabled && this._endInput.disabled) :\n                this._groupDisabled;\n        }\n        set disabled(value) {\n            const newValue = coerceBooleanProperty(value);\n            if (newValue !== this._groupDisabled) {\n                this._groupDisabled = newValue;\n                this._disabledChange.next(this.disabled);\n            }\n        }\n        /** Whether the input is in an error state. */\n        get errorState() {\n            if (this._startInput && this._endInput) {\n                return this._startInput.errorState || this._endInput.errorState;\n            }\n            return false;\n        }\n        /** Whether the datepicker input is empty. */\n        get empty() {\n            const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n            const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n            return startEmpty && endEmpty;\n        }\n        /**\n         * Implemented as a part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        setDescribedByIds(ids) {\n            this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n        }\n        /**\n         * Implemented as a part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        onContainerClick() {\n            if (!this.focused && !this.disabled) {\n                if (!this._model || !this._model.selection.start) {\n                    this._startInput.focus();\n                }\n                else {\n                    this._endInput.focus();\n                }\n            }\n        }\n        ngAfterContentInit() {\n            if (!this._startInput) {\n                throw Error('mat-date-range-input must contain a matStartDate input');\n            }\n            if (!this._endInput) {\n                throw Error('mat-date-range-input must contain a matEndDate input');\n            }\n            if (this._model) {\n                this._registerModel(this._model);\n            }\n            // We don't need to unsubscribe from this, because we\n            // know that the input streams will be completed on destroy.\n            merge(this._startInput._disabledChange, this._endInput._disabledChange).subscribe(() => {\n                this._disabledChange.next(this.disabled);\n            });\n        }\n        ngOnDestroy() {\n            this.stateChanges.complete();\n            this._disabledChange.unsubscribe();\n        }\n        /** Gets the date at which the calendar should start. */\n        getStartValue() {\n            return this.value ? this.value.start : null;\n        }\n        /** Gets the input's theme palette. */\n        getThemePalette() {\n            return this._formField ? this._formField.color : undefined;\n        }\n        /** Gets the element to which the calendar overlay should be attached. */\n        getConnectedOverlayOrigin() {\n            return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n        }\n        /** Gets the value that is used to mirror the state input. */\n        _getInputMirrorValue() {\n            return this._startInput ? this._startInput.getMirrorValue() : '';\n        }\n        /** Whether the input placeholders should be hidden. */\n        _shouldHidePlaceholders() {\n            return this._startInput ? !this._startInput.isEmpty() : false;\n        }\n        /** Handles the value in one of the child inputs changing. */\n        _handleChildValueChange() {\n            this.stateChanges.next();\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Opens the date range picker associated with the input. */\n        _openDatepicker() {\n            if (this._rangePicker) {\n                this._rangePicker.open();\n            }\n        }\n        /** Whether the separate text should be hidden. */\n        _shouldHideSeparator() {\n            return (!this._formField || this._formField._hideControlPlaceholder()) && this.empty;\n        }\n        /**\n         * @param obj The object to check.\n         * @returns The given object if it is both a date instance and valid, otherwise null.\n         */\n        _getValidDateOrNull(obj) {\n            return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n        }\n        /** Re-runs the validators on the start/end inputs. */\n        _revalidate() {\n            if (this._startInput) {\n                this._startInput._validatorOnChange();\n            }\n            if (this._endInput) {\n                this._endInput._validatorOnChange();\n            }\n        }\n        /** Registers the current date selection model with the start/end inputs. */\n        _registerModel(model) {\n            if (this._startInput) {\n                this._startInput._registerModel(model);\n            }\n            if (this._endInput) {\n                this._endInput._registerModel(model);\n            }\n        }\n    }\nMatDateRangeInput.ɵfac = function MatDateRangeInput_Factory(t) { return new (t || MatDateRangeInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.ControlContainer, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.MatFormField, 8)); };\nMatDateRangeInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDateRangeInput, selectors: [[\"mat-date-range-input\"]], contentQueries: function MatDateRangeInput_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatStartDate, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatEndDate, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._startInput = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._endInput = _t.first);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-date-range-input\"], hostVars: 5, hostBindings: function MatDateRangeInput_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", null)(\"aria-labelledby\", ctx._ariaLabelledBy)(\"aria-describedby\", ctx._ariaDescribedBy);\n        ɵngcc0.ɵɵclassProp(\"mat-date-range-input-hide-placeholders\", ctx._shouldHidePlaceholders());\n    } }, inputs: { separator: \"separator\", comparisonStart: \"comparisonStart\", comparisonEnd: \"comparisonEnd\", rangePicker: \"rangePicker\", required: \"required\", dateFilter: \"dateFilter\", min: \"min\", max: \"max\", disabled: \"disabled\" }, exportAs: [\"matDateRangeInput\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatDateRangeInput },\n            { provide: MAT_DATE_RANGE_INPUT_PARENT, useExisting: MatDateRangeInput },\n        ])], ngContentSelectors: _c6, decls: 9, vars: 4, consts: [[\"cdkMonitorSubtreeFocus\", \"\", 1, \"mat-date-range-input-container\", 3, \"cdkFocusChange\"], [1, \"mat-date-range-input-start-wrapper\"], [\"aria-hidden\", \"true\", 1, \"mat-date-range-input-mirror\"], [1, \"mat-date-range-input-separator\"], [1, \"mat-date-range-input-end-wrapper\"]], template: function MatDateRangeInput_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c5);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"cdkFocusChange\", function MatDateRangeInput_Template_div_cdkFocusChange_0_listener($event) { return ctx.focused = $event !== null; });\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementStart(3, \"span\", 2);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"span\", 3);\n        ɵngcc0.ɵɵtext(6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 4);\n        ɵngcc0.ɵɵprojection(8, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵtextInterpolate(ctx._getInputMirrorValue());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"mat-date-range-input-separator-hidden\", ctx._shouldHideSeparator());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.separator);\n    } }, directives: [ɵngcc5.CdkMonitorFocus], styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px}.mat-date-range-input-separator-hidden{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-inner{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.mat-date-range-input-inner::-ms-clear,.mat-date-range-input-inner::-ms-reveal{display:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-start-wrapper .mat-date-range-input-inner{position:absolute;top:0;left:0}.mat-date-range-input-end-wrapper{flex-grow:1;max-width:calc(50% - 4px)}.mat-form-field-type-mat-date-range-input .mat-form-field-infix{width:200px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatDateRangeInput.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Self }] },\n        { type: DateAdapter, decorators: [{ type: Optional }] },\n        { type: MatFormField, decorators: [{ type: Optional }] }\n    ];\n    MatDateRangeInput.propDecorators = {\n        rangePicker: [{ type: Input }],\n        required: [{ type: Input }],\n        dateFilter: [{ type: Input }],\n        min: [{ type: Input }],\n        max: [{ type: Input }],\n        disabled: [{ type: Input }],\n        separator: [{ type: Input }],\n        comparisonStart: [{ type: Input }],\n        comparisonEnd: [{ type: Input }],\n        _startInput: [{ type: ContentChild, args: [MatStartDate,] }],\n        _endInput: [{ type: ContentChild, args: [MatEndDate,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDateRangeInput, [{\n        type: Component,\n        args: [{\n                selector: 'mat-date-range-input',\n                template: \"<div\\n  class=\\\"mat-date-range-input-container\\\"\\n  cdkMonitorSubtreeFocus\\n  (cdkFocusChange)=\\\"focused = $event !== null\\\">\\n  <div class=\\\"mat-date-range-input-start-wrapper\\\">\\n    <ng-content select=\\\"input[matStartDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue()}}</span>\\n  </div>\\n\\n  <span\\n    class=\\\"mat-date-range-input-separator\\\"\\n    [class.mat-date-range-input-separator-hidden]=\\\"_shouldHideSeparator()\\\">{{separator}}</span>\\n\\n  <div class=\\\"mat-date-range-input-end-wrapper\\\">\\n    <ng-content select=\\\"input[matEndDate]\\\"></ng-content>\\n  </div>\\n</div>\\n\\n\",\n                exportAs: 'matDateRangeInput',\n                host: {\n                    'class': 'mat-date-range-input',\n                    '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n                    '[attr.id]': 'null',\n                    'role': 'group',\n                    '[attr.aria-labelledby]': '_ariaLabelledBy',\n                    '[attr.aria-describedby]': '_ariaDescribedBy'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatDateRangeInput },\n                    { provide: MAT_DATE_RANGE_INPUT_PARENT, useExisting: MatDateRangeInput },\n                ],\n                styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px}.mat-date-range-input-separator-hidden{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-inner{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.mat-date-range-input-inner::-ms-clear,.mat-date-range-input-inner::-ms-reveal{display:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-start-wrapper .mat-date-range-input-inner{position:absolute;top:0;left:0}.mat-date-range-input-end-wrapper{flex-grow:1;max-width:calc(50% - 4px)}.mat-form-field-type-mat-date-range-input .mat-form-field-infix{width:200px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc10.ControlContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.DateAdapter, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc9.MatFormField, decorators: [{\n                type: Optional\n            }] }]; }, { separator: [{\n            type: Input\n        }], comparisonStart: [{\n            type: Input\n        }], comparisonEnd: [{\n            type: Input\n        }], rangePicker: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], dateFilter: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _startInput: [{\n            type: ContentChild,\n            args: [MatStartDate]\n        }], _endInput: [{\n            type: ContentChild,\n            args: [MatEndDate]\n        }] }); })();\n    return MatDateRangeInput;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatDatepickerModule = /** @class */ (() => {\n    class MatDatepickerModule {\n    }\nMatDatepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDatepickerModule });\nMatDatepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDatepickerModule_Factory(t) { return new (t || MatDatepickerModule)(); }, providers: [\n        MatDatepickerIntl,\n        MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n        {\n            provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n            useClass: DefaultMatCalendarRangeStrategy\n        }\n    ], imports: [[\n            CommonModule,\n            MatButtonModule,\n            MatDialogModule,\n            OverlayModule,\n            A11yModule,\n            PortalModule,\n        ], CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDatepickerModule, { declarations: function () { return [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker]; }, imports: function () { return [CommonModule,\n        MatButtonModule,\n        MatDialogModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule]; }, exports: function () { return [CdkScrollableModule, MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatepickerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatDialogModule,\n                    OverlayModule,\n                    A11yModule,\n                    PortalModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                    MatDateRangeInput,\n                    MatStartDate,\n                    MatEndDate,\n                    MatDateRangePicker,\n                ],\n                declarations: [\n                    MatCalendar,\n                    MatCalendarBody,\n                    MatDatepicker,\n                    MatDatepickerContent,\n                    MatDatepickerInput,\n                    MatDatepickerToggle,\n                    MatDatepickerToggleIcon,\n                    MatMonthView,\n                    MatYearView,\n                    MatMultiYearView,\n                    MatCalendarHeader,\n                    MatDateRangeInput,\n                    MatStartDate,\n                    MatEndDate,\n                    MatDateRangePicker,\n                ],\n                providers: [\n                    MatDatepickerIntl,\n                    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                    {\n                        provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n                        useClass: DefaultMatCalendarRangeStrategy\n                    }\n                ],\n                entryComponents: [\n                    MatDatepickerContent,\n                    MatCalendarHeader,\n                ]\n            }]\n    }], null, null); })();\n    return MatDatepickerModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DateRange, DefaultMatCalendarRangeStrategy, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATE_RANGE_SELECTION_STRATEGY, MAT_RANGE_DATE_SELECTION_MODEL_FACTORY, MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY, MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, MatCalendar, MatCalendarBody, MatCalendarCell, MatCalendarHeader, MatDateRangeInput, MatDateRangePicker, MatDateSelectionModel, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerInputEvent, MatDatepickerIntl, MatDatepickerModule, MatDatepickerToggle, MatDatepickerToggleIcon, MatEndDate, MatMonthView, MatMultiYearView, MatRangeDateSelectionModel, MatSingleDateSelectionModel, MatStartDate, MatYearView, matDatepickerAnimations, yearsPerPage, yearsPerRow, MatDatepickerBase as ɵangular_material_src_material_datepicker_datepicker_a, MatDatepickerInputBase as ɵangular_material_src_material_datepicker_datepicker_b, MAT_DATE_RANGE_INPUT_PARENT as ɵangular_material_src_material_datepicker_datepicker_c };\n\n//# sourceMappingURL=datepicker.js.map","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nlet MatDivider = /** @class */ (() => {\n    class MatDivider {\n        constructor() {\n            this._vertical = false;\n            this._inset = false;\n        }\n        /** Whether the divider is vertically aligned. */\n        get vertical() { return this._vertical; }\n        set vertical(value) { this._vertical = coerceBooleanProperty(value); }\n        /** Whether the divider is an inset divider. */\n        get inset() { return this._inset; }\n        set inset(value) { this._inset = coerceBooleanProperty(value); }\n    }\nMatDivider.ɵfac = function MatDivider_Factory(t) { return new (t || MatDivider)(); };\nMatDivider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDivider, selectors: [[\"mat-divider\"]], hostAttrs: [\"role\", \"separator\", 1, \"mat-divider\"], hostVars: 7, hostBindings: function MatDivider_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-divider-vertical\", ctx.vertical)(\"mat-divider-horizontal\", !ctx.vertical)(\"mat-divider-inset\", ctx.inset);\n    } }, inputs: { vertical: \"vertical\", inset: \"inset\" }, decls: 0, vars: 0, template: function MatDivider_Template(rf, ctx) { }, styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatDivider.propDecorators = {\n        vertical: [{ type: Input }],\n        inset: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDivider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-divider',\n                host: {\n                    'role': 'separator',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-divider-vertical]': 'vertical',\n                    '[class.mat-divider-horizontal]': '!vertical',\n                    '[class.mat-divider-inset]': 'inset',\n                    'class': 'mat-divider'\n                },\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"]\n            }]\n    }], function () { return []; }, { vertical: [{\n            type: Input\n        }], inset: [{\n            type: Input\n        }] }); })();\n    return MatDivider;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatDividerModule = /** @class */ (() => {\n    class MatDividerModule {\n    }\nMatDividerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDividerModule });\nMatDividerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDividerModule_Factory(t) { return new (t || MatDividerModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDividerModule, { declarations: function () { return [MatDivider]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatDivider, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDividerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatDivider, MatCommonModule],\n                declarations: [MatDivider]\n            }]\n    }], null, null); })();\n    return MatDividerModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };\n\n//# sourceMappingURL=divider.js.map","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatGridTile = /** @class */ (() => {\n    class MatGridTile {\n        constructor(_element, _gridList) {\n            this._element = _element;\n            this._gridList = _gridList;\n            this._rowspan = 1;\n            this._colspan = 1;\n        }\n        /** Amount of rows that the grid tile takes up. */\n        get rowspan() { return this._rowspan; }\n        set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n        /** Amount of columns that the grid tile takes up. */\n        get colspan() { return this._colspan; }\n        set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n        /**\n         * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n         * \"Changed after checked\" errors that would occur with HostBinding.\n         */\n        _setStyle(property, value) {\n            this._element.nativeElement.style[property] = value;\n        }\n    }\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatGridTile.ctorParameters = () => [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n    ];\n    MatGridTile.propDecorators = {\n        rowspan: [{ type: Input }],\n        colspan: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\n    return MatGridTile;\n})();\nlet MatGridTileText = /** @class */ (() => {\n    class MatGridTileText {\n        constructor(_element) {\n            this._element = _element;\n        }\n        ngAfterContentInit() {\n            setLines(this._lines, this._element);\n        }\n    }\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n    MatGridTileText.ctorParameters = () => [\n        { type: ElementRef }\n    ];\n    MatGridTileText.propDecorators = {\n        _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\n    return MatGridTileText;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nlet MatGridAvatarCssMatStyler = /** @class */ (() => {\n    class MatGridAvatarCssMatStyler {\n    }\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n    return MatGridAvatarCssMatStyler;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nlet MatGridTileHeaderCssMatStyler = /** @class */ (() => {\n    class MatGridTileHeaderCssMatStyler {\n    }\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n    return MatGridTileHeaderCssMatStyler;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nlet MatGridTileFooterCssMatStyler = /** @class */ (() => {\n    class MatGridTileFooterCssMatStyler {\n    }\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n    return MatGridTileFooterCssMatStyler;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /** Index at which the search for the next gap will start. */\n        this.columnIndex = 0;\n        /** The current row index. */\n        this.rowIndex = 0;\n    }\n    /** Gets the total number of rows occupied by tiles */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     */\n    get rowspan() {\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     * @param tiles Tiles to be positioned.\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map(tile => this._trackTile(tile));\n    }\n    /** Calculates the row and col position of a tile. */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /** Finds the next available space large enough to fit the tile. */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        let gapStartIndex = -1;\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /** Move \"down\" to the next row. */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /** Update the tile tracker to account for the given tile in the given space. */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /** Sets the horizontal placement of the tile in the list. */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    getComputedHeight() { return null; }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach(tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        });\n    }\n    _parseRatio(value) {\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach(tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            });\n        }\n    }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nlet MatGridList = /** @class */ (() => {\n    class MatGridList {\n        constructor(_element, _dir) {\n            this._element = _element;\n            this._dir = _dir;\n            /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n            this._gutter = '1px';\n        }\n        /** Amount of columns in the grid list. */\n        get cols() { return this._cols; }\n        set cols(value) {\n            this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n        }\n        /** Size of the grid list's gutter in pixels. */\n        get gutterSize() { return this._gutter; }\n        set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n        /** Set internal representation of row height from the user-provided value. */\n        get rowHeight() { return this._rowHeight; }\n        set rowHeight(value) {\n            const newValue = `${value == null ? '' : value}`;\n            if (newValue !== this._rowHeight) {\n                this._rowHeight = newValue;\n                this._setTileStyler(this._rowHeight);\n            }\n        }\n        ngOnInit() {\n            this._checkCols();\n            this._checkRowHeight();\n        }\n        /**\n         * The layout calculation is fairly cheap if nothing changes, so there's little cost\n         * to run it frequently.\n         */\n        ngAfterContentChecked() {\n            this._layoutTiles();\n        }\n        /** Throw a friendly error if cols property is missing */\n        _checkCols() {\n            if (!this.cols) {\n                throw Error(`mat-grid-list: must pass in number of columns. ` +\n                    `Example: <mat-grid-list cols=\"3\">`);\n            }\n        }\n        /** Default to equal width:height if rowHeight property is missing */\n        _checkRowHeight() {\n            if (!this._rowHeight) {\n                this._setTileStyler('1:1');\n            }\n        }\n        /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n        _setTileStyler(rowHeight) {\n            if (this._tileStyler) {\n                this._tileStyler.reset(this);\n            }\n            if (rowHeight === MAT_FIT_MODE) {\n                this._tileStyler = new FitTileStyler();\n            }\n            else if (rowHeight && rowHeight.indexOf(':') > -1) {\n                this._tileStyler = new RatioTileStyler(rowHeight);\n            }\n            else {\n                this._tileStyler = new FixedTileStyler(rowHeight);\n            }\n        }\n        /** Computes and applies the size and position for all children grid tiles. */\n        _layoutTiles() {\n            if (!this._tileCoordinator) {\n                this._tileCoordinator = new TileCoordinator();\n            }\n            const tracker = this._tileCoordinator;\n            const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n            const direction = this._dir ? this._dir.value : 'ltr';\n            this._tileCoordinator.update(this.cols, tiles);\n            this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n            tiles.forEach((tile, index) => {\n                const pos = tracker.positions[index];\n                this._tileStyler.setStyle(tile, pos.row, pos.col);\n            });\n            this._setListStyle(this._tileStyler.getComputedHeight());\n        }\n        /** Sets style on the main grid-list element, given the style name and value. */\n        _setListStyle(style) {\n            if (style) {\n                this._element.nativeElement.style[style[0]] = style[1];\n            }\n        }\n    }\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatGridList.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ];\n    MatGridList.propDecorators = {\n        _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n        cols: [{ type: Input }],\n        gutterSize: [{ type: Input }],\n        rowHeight: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\n    return MatGridList;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatGridListModule = /** @class */ (() => {\n    class MatGridListModule {\n    }\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); }, imports: [[MatLineModule, MatCommonModule], MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList, MatGridTile, MatGridTileText, MatLineModule,\n        MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n    return MatGridListModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map","import { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, ContentChild, Input, forwardRef, ViewChild, EventEmitter, isDevMode, Attribute, Output, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinDisableRipple, setLines, MatLine, MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, A, END, HOME, ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDividerModule } from '@angular/material/divider';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/core';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = [\"text\"];\nfunction MatListOption_mat_pseudo_checkbox_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-pseudo-checkbox\", 5);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\")(\"disabled\", ctx_r0.disabled);\n} }\nconst _c4 = [\"*\", [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]]];\nconst _c5 = [\"*\", \"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\"];\nclass MatListBase {\n}\nconst _MatListMixinBase = mixinDisabled(mixinDisableRipple(MatListBase));\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {\n}\nconst _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_LIST = new InjectionToken('MatList');\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_NAV_LIST = new InjectionToken('MatNavList');\nlet MatNavList = /** @class */ (() => {\n    class MatNavList extends _MatListMixinBase {\n        constructor() {\n            super(...arguments);\n            /** Emits when the state of the list changes. */\n            this._stateChanges = new Subject();\n        }\n        ngOnChanges() {\n            this._stateChanges.next();\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n    }\nMatNavList.ɵfac = function MatNavList_Factory(t) { return ɵMatNavList_BaseFactory(t || MatNavList); };\nMatNavList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatNavList, selectors: [[\"mat-nav-list\"]], hostAttrs: [\"role\", \"navigation\", 1, \"mat-nav-list\", \"mat-list-base\"], inputs: { disableRipple: \"disableRipple\", disabled: \"disabled\" }, exportAs: [\"matNavList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_NAV_LIST, useExisting: MatNavList }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatNavList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"], encapsulation: 2, changeDetection: 0 });\nconst ɵMatNavList_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatNavList);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNavList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-nav-list',\n                exportAs: 'matNavList',\n                host: {\n                    'role': 'navigation',\n                    'class': 'mat-nav-list mat-list-base'\n                },\n                template: \"<ng-content></ng-content>\\n\\n\",\n                inputs: ['disableRipple', 'disabled'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{ provide: MAT_NAV_LIST, useExisting: MatNavList }],\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n            }]\n    }], null, null); })();\n    return MatNavList;\n})();\nlet MatList = /** @class */ (() => {\n    class MatList extends _MatListMixinBase {\n        constructor(_elementRef) {\n            super();\n            this._elementRef = _elementRef;\n            /** Emits when the state of the list changes. */\n            this._stateChanges = new Subject();\n            if (this._getListType() === 'action-list') {\n                _elementRef.nativeElement.classList.add('mat-action-list');\n            }\n        }\n        _getListType() {\n            const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n            if (nodeName === 'mat-list') {\n                return 'list';\n            }\n            if (nodeName === 'mat-action-list') {\n                return 'action-list';\n            }\n            return null;\n        }\n        ngOnChanges() {\n            this._stateChanges.next();\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n    }\nMatList.ɵfac = function MatList_Factory(t) { return new (t || MatList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatList, selectors: [[\"mat-list\"], [\"mat-action-list\"]], hostAttrs: [1, \"mat-list\", \"mat-list-base\"], inputs: { disableRipple: \"disableRipple\", disabled: \"disabled\" }, exportAs: [\"matList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_LIST, useExisting: MatList }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatList.ctorParameters = () => [\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-list, mat-action-list',\n                exportAs: 'matList',\n                template: \"<ng-content></ng-content>\\n\\n\",\n                host: {\n                    'class': 'mat-list mat-list-base'\n                },\n                inputs: ['disableRipple', 'disabled'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{ provide: MAT_LIST, useExisting: MatList }],\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatList;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nlet MatListAvatarCssMatStyler = /** @class */ (() => {\n    class MatListAvatarCssMatStyler {\n    }\nMatListAvatarCssMatStyler.ɵfac = function MatListAvatarCssMatStyler_Factory(t) { return new (t || MatListAvatarCssMatStyler)(); };\nMatListAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatListAvatarCssMatStyler, selectors: [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"matListAvatar\", \"\"]], hostAttrs: [1, \"mat-list-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatListAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-list-avatar], [matListAvatar]',\n                host: { 'class': 'mat-list-avatar' }\n            }]\n    }], null, null); })();\n    return MatListAvatarCssMatStyler;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nlet MatListIconCssMatStyler = /** @class */ (() => {\n    class MatListIconCssMatStyler {\n    }\nMatListIconCssMatStyler.ɵfac = function MatListIconCssMatStyler_Factory(t) { return new (t || MatListIconCssMatStyler)(); };\nMatListIconCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatListIconCssMatStyler, selectors: [[\"\", \"mat-list-icon\", \"\"], [\"\", \"matListIcon\", \"\"]], hostAttrs: [1, \"mat-list-icon\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatListIconCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-list-icon], [matListIcon]',\n                host: { 'class': 'mat-list-icon' }\n            }]\n    }], null, null); })();\n    return MatListIconCssMatStyler;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nlet MatListSubheaderCssMatStyler = /** @class */ (() => {\n    class MatListSubheaderCssMatStyler {\n    }\nMatListSubheaderCssMatStyler.ɵfac = function MatListSubheaderCssMatStyler_Factory(t) { return new (t || MatListSubheaderCssMatStyler)(); };\nMatListSubheaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatListSubheaderCssMatStyler, selectors: [[\"\", \"mat-subheader\", \"\"], [\"\", \"matSubheader\", \"\"]], hostAttrs: [1, \"mat-subheader\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatListSubheaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-subheader], [matSubheader]',\n                host: { 'class': 'mat-subheader' }\n            }]\n    }], null, null); })();\n    return MatListSubheaderCssMatStyler;\n})();\n/** An item within a Material Design list. */\nlet MatListItem = /** @class */ (() => {\n    class MatListItem extends _MatListItemMixinBase {\n        constructor(_element, _changeDetectorRef, navList, list) {\n            super();\n            this._element = _element;\n            this._isInteractiveList = false;\n            this._destroyed = new Subject();\n            this._disabled = false;\n            this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n            this._list = navList || list;\n            // If no type attributed is specified for <button>, set it to \"button\".\n            // If a type attribute is already specified, do nothing.\n            const element = this._getHostElement();\n            if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n                element.setAttribute('type', 'button');\n            }\n            if (this._list) {\n                // React to changes in the state of the parent list since\n                // some of the item's properties depend on it (e.g. `disableRipple`).\n                this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                    _changeDetectorRef.markForCheck();\n                });\n            }\n        }\n        /** Whether the option is disabled. */\n        get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n        ngAfterContentInit() {\n            setLines(this._lines, this._element);\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Whether this list item should show a ripple effect when clicked. */\n        _isRippleDisabled() {\n            return !this._isInteractiveList || this.disableRipple ||\n                !!(this._list && this._list.disableRipple);\n        }\n        /** Retrieves the DOM element of the component host. */\n        _getHostElement() {\n            return this._element.nativeElement;\n        }\n    }\nMatListItem.ɵfac = function MatListItem_Factory(t) { return new (t || MatListItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_NAV_LIST, 8), ɵngcc0.ɵɵdirectiveInject(MAT_LIST, 8)); };\nMatListItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatListItem, selectors: [[\"mat-list-item\"], [\"a\", \"mat-list-item\", \"\"], [\"button\", \"mat-list-item\", \"\"]], contentQueries: function MatListItem_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, hostAttrs: [1, \"mat-list-item\", \"mat-focus-indicator\"], hostVars: 6, hostBindings: function MatListItem_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-list-item-disabled\", ctx.disabled)(\"mat-list-item-avatar\", ctx._avatar || ctx._icon)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon);\n    } }, inputs: { disableRipple: \"disableRipple\", disabled: \"disabled\" }, exportAs: [\"matListItem\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 6, vars: 2, consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-list-text\"]], template: function MatListItem_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(5, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n    } }, directives: [ɵngcc1.MatRipple], encapsulation: 2, changeDetection: 0 });\n    MatListItem.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: MatNavList, decorators: [{ type: Optional }, { type: Inject, args: [MAT_NAV_LIST,] }] },\n        { type: MatList, decorators: [{ type: Optional }, { type: Inject, args: [MAT_LIST,] }] }\n    ];\n    MatListItem.propDecorators = {\n        _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }],\n        _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler,] }],\n        _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler,] }],\n        disabled: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatListItem, [{\n        type: Component,\n        args: [{\n                selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n                exportAs: 'matListItem',\n                host: {\n                    'class': 'mat-list-item mat-focus-indicator',\n                    '[class.mat-list-item-disabled]': 'disabled',\n                    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n                    '[class.mat-list-item-avatar]': '_avatar || _icon',\n                    '[class.mat-list-item-with-avatar]': '_avatar || _icon'\n                },\n                inputs: ['disableRipple'],\n                template: \"<div class=\\\"mat-list-item-content\\\">\\n  <div class=\\\"mat-list-item-ripple\\\" mat-ripple\\n       [matRippleTrigger]=\\\"_getHostElement()\\\"\\n       [matRippleDisabled]=\\\"_isRippleDisabled()\\\">\\n  </div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n  <div class=\\\"mat-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n\\n  <ng-content></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatNavList, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_NAV_LIST]\n            }] }, { type: MatList, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_LIST]\n            }] }]; }, { disabled: [{\n            type: Input\n        }], _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }], _avatar: [{\n            type: ContentChild,\n            args: [MatListAvatarCssMatStyler]\n        }], _icon: [{\n            type: ContentChild,\n            args: [MatListIconCssMatStyler]\n        }] }); })();\n    return MatListItem;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectionListBase {\n}\nconst _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\nclass MatListOptionBase {\n}\nconst _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n/** @docs-private */\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSelectionList),\n    multi: true\n};\n/** Change event that is being fired whenever the selected state of an option changes. */\nclass MatSelectionListChange {\n    constructor(\n    /** Reference to the selection list that emitted the event. */\n    source, \n    /** Reference to the option that has been changed. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nlet MatListOption = /** @class */ (() => {\n    class MatListOption extends _MatListOptionMixinBase {\n        constructor(_element, _changeDetector, \n        /** @docs-private */\n        selectionList) {\n            super();\n            this._element = _element;\n            this._changeDetector = _changeDetector;\n            this.selectionList = selectionList;\n            this._selected = false;\n            this._disabled = false;\n            this._hasFocus = false;\n            /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n            this.checkboxPosition = 'after';\n            /**\n             * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n             * in the first cycle.\n             */\n            this._inputsInitialized = false;\n        }\n        /** Theme color of the list option. This sets the color of the checkbox. */\n        get color() { return this._color || this.selectionList.color; }\n        set color(newValue) { this._color = newValue; }\n        /** Value of the option */\n        get value() { return this._value; }\n        set value(newValue) {\n            if (this.selected && newValue !== this.value && this._inputsInitialized) {\n                this.selected = false;\n            }\n            this._value = newValue;\n        }\n        /** Whether the option is disabled. */\n        get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n        set disabled(value) {\n            const newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._changeDetector.markForCheck();\n            }\n        }\n        /** Whether the option is selected. */\n        get selected() { return this.selectionList.selectedOptions.isSelected(this); }\n        set selected(value) {\n            const isSelected = coerceBooleanProperty(value);\n            if (isSelected !== this._selected) {\n                this._setSelected(isSelected);\n                this.selectionList._reportValueChange();\n            }\n        }\n        ngOnInit() {\n            const list = this.selectionList;\n            if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n                this._setSelected(true);\n            }\n            const wasSelected = this._selected;\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n            this._inputsInitialized = true;\n        }\n        ngAfterContentInit() {\n            setLines(this._lines, this._element);\n        }\n        ngOnDestroy() {\n            if (this.selected) {\n                // We have to delay this until the next tick in order\n                // to avoid changed after checked errors.\n                Promise.resolve().then(() => {\n                    this.selected = false;\n                });\n            }\n            const hadFocus = this._hasFocus;\n            const newActiveItem = this.selectionList._removeOptionFromList(this);\n            // Only move focus if this option was focused at the time it was destroyed.\n            if (hadFocus && newActiveItem) {\n                newActiveItem.focus();\n            }\n        }\n        /** Toggles the selection state of the option. */\n        toggle() {\n            this.selected = !this.selected;\n        }\n        /** Allows for programmatic focusing of the option. */\n        focus() {\n            this._element.nativeElement.focus();\n        }\n        /**\n         * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n         * @docs-private\n         */\n        getLabel() {\n            return this._text ? (this._text.nativeElement.textContent || '') : '';\n        }\n        /** Whether this list item should show a ripple effect when clicked. */\n        _isRippleDisabled() {\n            return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n        }\n        _handleClick() {\n            if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n                this.toggle();\n                // Emit a change event if the selected state of the option changed through user interaction.\n                this.selectionList._emitChangeEvent(this);\n            }\n        }\n        _handleFocus() {\n            this.selectionList._setFocusedOption(this);\n            this._hasFocus = true;\n        }\n        _handleBlur() {\n            this.selectionList._onTouched();\n            this._hasFocus = false;\n        }\n        /** Retrieves the DOM element of the component host. */\n        _getHostElement() {\n            return this._element.nativeElement;\n        }\n        /** Sets the selected state of the option. Returns whether the value has changed. */\n        _setSelected(selected) {\n            if (selected === this._selected) {\n                return false;\n            }\n            this._selected = selected;\n            if (selected) {\n                this.selectionList.selectedOptions.select(this);\n            }\n            else {\n                this.selectionList.selectedOptions.deselect(this);\n            }\n            this._changeDetector.markForCheck();\n            return true;\n        }\n        /**\n         * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n         * used to trigger an update of the list option if the disabled state of the selection list\n         * changed.\n         */\n        _markForCheck() {\n            this._changeDetector.markForCheck();\n        }\n    }\nMatListOption.ɵfac = function MatListOption_Factory(t) { return new (t || MatListOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatSelectionList))); };\nMatListOption.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatListOption, selectors: [[\"mat-list-option\"]], contentQueries: function MatListOption_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, viewQuery: function MatListOption_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._text = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-list-item\", \"mat-list-option\", \"mat-focus-indicator\"], hostVars: 15, hostBindings: function MatListOption_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatListOption_focus_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatListOption_blur_HostBindingHandler() { return ctx._handleBlur(); })(\"click\", function MatListOption_click_HostBindingHandler() { return ctx._handleClick(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-selected\", ctx.selected)(\"aria-disabled\", ctx.disabled)(\"tabindex\", 0 - 1);\n        ɵngcc0.ɵɵclassProp(\"mat-list-item-disabled\", ctx.disabled)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon)(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color !== \"primary\" && ctx.color !== \"warn\")(\"mat-warn\", ctx.color === \"warn\")(\"mat-list-single-selected-option\", ctx.selected && !ctx.selectionList.multiple);\n    } }, inputs: { disableRipple: \"disableRipple\", checkboxPosition: \"checkboxPosition\", color: \"color\", value: \"value\", selected: \"selected\", disabled: \"disabled\" }, exportAs: [\"matListOption\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c5, decls: 7, vars: 5, consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [3, \"state\", \"disabled\", 4, \"ngIf\"], [1, \"mat-list-text\"], [\"text\", \"\"], [3, \"state\", \"disabled\"]], template: function MatListOption_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c4);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatListOption_mat_pseudo_checkbox_2_Template, 1, 2, \"mat-pseudo-checkbox\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-list-item-content-reverse\", ctx.checkboxPosition == \"after\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selectionList.multiple);\n    } }, directives: [ɵngcc1.MatRipple, ɵngcc2.NgIf, ɵngcc1.MatPseudoCheckbox], encapsulation: 2, changeDetection: 0 });\n    MatListOption.ctorParameters = () => [\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: MatSelectionList, decorators: [{ type: Inject, args: [forwardRef(() => MatSelectionList),] }] }\n    ];\n    MatListOption.propDecorators = {\n        _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler,] }],\n        _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler,] }],\n        _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }],\n        _text: [{ type: ViewChild, args: ['text',] }],\n        checkboxPosition: [{ type: Input }],\n        color: [{ type: Input }],\n        value: [{ type: Input }],\n        disabled: [{ type: Input }],\n        selected: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatListOption, [{\n        type: Component,\n        args: [{\n                selector: 'mat-list-option',\n                exportAs: 'matListOption',\n                inputs: ['disableRipple'],\n                host: {\n                    'role': 'option',\n                    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n                    '(focus)': '_handleFocus()',\n                    '(blur)': '_handleBlur()',\n                    '(click)': '_handleClick()',\n                    '[class.mat-list-item-disabled]': 'disabled',\n                    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n                    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n                    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n                    // its theme.\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    // Even though accent is the default, we need to set this class anyway, because the  list might\n                    // be placed inside a parent that has one of the other colors with a higher specificity.\n                    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n                    '[attr.aria-selected]': 'selected',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.tabindex]': '-1'\n                },\n                template: \"<div class=\\\"mat-list-item-content\\\"\\n  [class.mat-list-item-content-reverse]=\\\"checkboxPosition == 'after'\\\">\\n\\n  <div mat-ripple\\n    class=\\\"mat-list-item-ripple\\\"\\n    [matRippleTrigger]=\\\"_getHostElement()\\\"\\n    [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div>\\n\\n  <mat-pseudo-checkbox\\n    *ngIf=\\\"selectionList.multiple\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n    [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n  <div class=\\\"mat-list-text\\\" #text><ng-content></ng-content></div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSelectionList, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatSelectionList)]\n            }] }]; }, { checkboxPosition: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _avatar: [{\n            type: ContentChild,\n            args: [MatListAvatarCssMatStyler]\n        }], _icon: [{\n            type: ContentChild,\n            args: [MatListIconCssMatStyler]\n        }], _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }], _text: [{\n            type: ViewChild,\n            args: ['text']\n        }] }); })();\n    return MatListOption;\n})();\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nlet MatSelectionList = /** @class */ (() => {\n    class MatSelectionList extends _MatSelectionListMixinBase {\n        constructor(_element, \n        // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n        tabIndex, _changeDetector) {\n            super();\n            this._element = _element;\n            this._changeDetector = _changeDetector;\n            this._multiple = true;\n            this._contentInitialized = false;\n            /** Emits a change event whenever the selected state of an option changes. */\n            this.selectionChange = new EventEmitter();\n            /**\n             * Tabindex of the selection list.\n             * @breaking-change 11.0.0 Remove `tabIndex` input.\n             */\n            this.tabIndex = 0;\n            /** Theme color of the selection list. This sets the checkbox color for all list options. */\n            this.color = 'accent';\n            /**\n             * Function used for comparing an option against the selected value when determining which\n             * options should appear as selected. The first argument is the value of an options. The second\n             * one is a value from the selected value. A boolean must be returned.\n             */\n            this.compareWith = (a1, a2) => a1 === a2;\n            this._disabled = false;\n            /** The currently selected options. */\n            this.selectedOptions = new SelectionModel(this._multiple);\n            /** The tabindex of the selection list. */\n            this._tabIndex = -1;\n            /** View to model callback that should be called whenever the selected options change. */\n            this._onChange = (_) => { };\n            /** Emits when the list has been destroyed. */\n            this._destroyed = new Subject();\n            /** View to model callback that should be called if the list or its options lost focus. */\n            this._onTouched = () => { };\n        }\n        /** Whether the selection list is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n            // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n            // changed its state. Since we know that a change to `disabled` property of the list affects\n            // the state of the options, we manually mark each option for check.\n            this._markOptionsForCheck();\n        }\n        /** Whether selection is limited to one or multiple items (default multiple). */\n        get multiple() { return this._multiple; }\n        set multiple(value) {\n            const newValue = coerceBooleanProperty(value);\n            if (newValue !== this._multiple) {\n                if (isDevMode() && this._contentInitialized) {\n                    throw new Error('Cannot change `multiple` mode of mat-selection-list after initialization.');\n                }\n                this._multiple = newValue;\n                this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n            }\n        }\n        ngAfterContentInit() {\n            this._contentInitialized = true;\n            this._keyManager = new FocusKeyManager(this.options)\n                .withWrap()\n                .withTypeAhead()\n                // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n                // screenreader users, that allows reading the different options of the list.\n                .skipPredicate(() => false)\n                .withAllowedModifierKeys(['shiftKey']);\n            if (this._value) {\n                this._setOptionsFromValues(this._value);\n            }\n            // If the user attempts to tab out of the selection list, allow focus to escape.\n            this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._allowFocusEscape();\n            });\n            // When the number of options change, update the tabindex of the selection list.\n            this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateTabIndex();\n            });\n            // Sync external changes to the model back to the options.\n            this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n                if (event.added) {\n                    for (let item of event.added) {\n                        item.selected = true;\n                    }\n                }\n                if (event.removed) {\n                    for (let item of event.removed) {\n                        item.selected = false;\n                    }\n                }\n            });\n        }\n        ngOnChanges(changes) {\n            const disableRippleChanges = changes['disableRipple'];\n            const colorChanges = changes['color'];\n            if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n                (colorChanges && !colorChanges.firstChange)) {\n                this._markOptionsForCheck();\n            }\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._isDestroyed = true;\n        }\n        /** Focuses the selection list. */\n        focus(options) {\n            this._element.nativeElement.focus(options);\n        }\n        /** Selects all of the options. */\n        selectAll() {\n            this._setAllOptionsSelected(true);\n        }\n        /** Deselects all of the options. */\n        deselectAll() {\n            this._setAllOptionsSelected(false);\n        }\n        /** Sets the focused option of the selection-list. */\n        _setFocusedOption(option) {\n            this._keyManager.updateActiveItem(option);\n        }\n        /**\n         * Removes an option from the selection list and updates the active item.\n         * @returns Currently-active item.\n         */\n        _removeOptionFromList(option) {\n            const optionIndex = this._getOptionIndex(option);\n            if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n                // Check whether the option is the last item\n                if (optionIndex > 0) {\n                    this._keyManager.updateActiveItem(optionIndex - 1);\n                }\n                else if (optionIndex === 0 && this.options.length > 1) {\n                    this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n                }\n            }\n            return this._keyManager.activeItem;\n        }\n        /** Passes relevant key presses to our key manager. */\n        _keydown(event) {\n            const keyCode = event.keyCode;\n            const manager = this._keyManager;\n            const previousFocusIndex = manager.activeItemIndex;\n            const hasModifier = hasModifierKey(event);\n            switch (keyCode) {\n                case SPACE:\n                case ENTER:\n                    if (!hasModifier && !manager.isTyping()) {\n                        this._toggleFocusedOption();\n                        // Always prevent space from scrolling the page since the list has focus\n                        event.preventDefault();\n                    }\n                    break;\n                case HOME:\n                case END:\n                    if (!hasModifier) {\n                        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                        event.preventDefault();\n                    }\n                    break;\n                default:\n                    // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n                    if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n                        !manager.isTyping()) {\n                        const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n                        this._setAllOptionsSelected(shouldSelect, true);\n                        event.preventDefault();\n                    }\n                    else {\n                        manager.onKeydown(event);\n                    }\n            }\n            if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n                manager.activeItemIndex !== previousFocusIndex) {\n                this._toggleFocusedOption();\n            }\n        }\n        /** Reports a value change to the ControlValueAccessor */\n        _reportValueChange() {\n            // Stop reporting value changes after the list has been destroyed. This avoids\n            // cases where the list might wrongly reset its value once it is removed, but\n            // the form control is still live.\n            if (this.options && !this._isDestroyed) {\n                const value = this._getSelectedOptionValues();\n                this._onChange(value);\n                this._value = value;\n            }\n        }\n        /** Emits a change event if the selected state of an option changed. */\n        _emitChangeEvent(option) {\n            this.selectionChange.emit(new MatSelectionListChange(this, option));\n        }\n        /**\n         * When the selection list is focused, we want to move focus to an option within the list. Do this\n         * by setting the appropriate option to be active.\n         */\n        _onFocus() {\n            const activeIndex = this._keyManager.activeItemIndex;\n            if (!activeIndex || (activeIndex === -1)) {\n                // If there is no active index, set focus to the first option.\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                // Otherwise, set focus to the active option.\n                this._keyManager.setActiveItem(activeIndex);\n            }\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        writeValue(values) {\n            this._value = values;\n            if (this.options) {\n                this._setOptionsFromValues(values || []);\n            }\n        }\n        /** Implemented as a part of ControlValueAccessor. */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        /** Sets the selected options based on the specified values. */\n        _setOptionsFromValues(values) {\n            this.options.forEach(option => option._setSelected(false));\n            values.forEach(value => {\n                const correspondingOption = this.options.find(option => {\n                    // Skip options that are already in the model. This allows us to handle cases\n                    // where the same primitive value is selected multiple times.\n                    return option.selected ? false : this.compareWith(option.value, value);\n                });\n                if (correspondingOption) {\n                    correspondingOption._setSelected(true);\n                }\n            });\n        }\n        /** Returns the values of the selected options. */\n        _getSelectedOptionValues() {\n            return this.options.filter(option => option.selected).map(option => option.value);\n        }\n        /** Toggles the state of the currently focused option if enabled. */\n        _toggleFocusedOption() {\n            let focusedIndex = this._keyManager.activeItemIndex;\n            if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n                let focusedOption = this.options.toArray()[focusedIndex];\n                if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n                    focusedOption.toggle();\n                    // Emit a change event because the focused option changed its state through user\n                    // interaction.\n                    this._emitChangeEvent(focusedOption);\n                }\n            }\n        }\n        /**\n         * Sets the selected state on all of the options\n         * and emits an event if anything changed.\n         */\n        _setAllOptionsSelected(isSelected, skipDisabled) {\n            // Keep track of whether anything changed, because we only want to\n            // emit the changed event when something actually changed.\n            let hasChanged = false;\n            this.options.forEach(option => {\n                if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n                    hasChanged = true;\n                }\n            });\n            if (hasChanged) {\n                this._reportValueChange();\n            }\n        }\n        /**\n         * Utility to ensure all indexes are valid.\n         * @param index The index to be checked.\n         * @returns True if the index is valid for our list of options.\n         */\n        _isValidIndex(index) {\n            return index >= 0 && index < this.options.length;\n        }\n        /** Returns the index of the specified list option. */\n        _getOptionIndex(option) {\n            return this.options.toArray().indexOf(option);\n        }\n        /** Marks all the options to be checked in the next change detection run. */\n        _markOptionsForCheck() {\n            if (this.options) {\n                this.options.forEach(option => option._markForCheck());\n            }\n        }\n        /**\n         * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n         * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n         * the list, creating a focus trap if it user tries to tab away.\n         */\n        _allowFocusEscape() {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = 0;\n                this._changeDetector.markForCheck();\n            });\n        }\n        /** Updates the tabindex based upon if the selection list is empty. */\n        _updateTabIndex() {\n            this._tabIndex = (this.options.length === 0) ? -1 : 0;\n        }\n    }\nMatSelectionList.ɵfac = function MatSelectionList_Factory(t) { return new (t || MatSelectionList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatSelectionList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelectionList, selectors: [[\"mat-selection-list\"]], contentQueries: function MatSelectionList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatListOption, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-selection-list\", \"mat-list-base\"], hostVars: 3, hostBindings: function MatSelectionList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSelectionList_focus_HostBindingHandler() { return ctx._onFocus(); })(\"keydown\", function MatSelectionList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-multiselectable\", ctx.multiple)(\"aria-disabled\", ctx.disabled.toString())(\"tabindex\", ctx._tabIndex);\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", color: \"color\", compareWith: \"compareWith\", disabled: \"disabled\", multiple: \"multiple\" }, outputs: { selectionChange: \"selectionChange\" }, exportAs: [\"matSelectionList\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SELECTION_LIST_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatSelectionList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSelectionList.ctorParameters = () => [\n        { type: ElementRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: ChangeDetectorRef }\n    ];\n    MatSelectionList.propDecorators = {\n        options: [{ type: ContentChildren, args: [MatListOption, { descendants: true },] }],\n        selectionChange: [{ type: Output }],\n        tabIndex: [{ type: Input }],\n        color: [{ type: Input }],\n        compareWith: [{ type: Input }],\n        disabled: [{ type: Input }],\n        multiple: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectionList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-selection-list',\n                exportAs: 'matSelectionList',\n                inputs: ['disableRipple'],\n                host: {\n                    'role': 'listbox',\n                    'class': 'mat-selection-list mat-list-base',\n                    '(focus)': '_onFocus()',\n                    '(keydown)': '_keydown($event)',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.tabindex]': '_tabIndex'\n                },\n                template: '<ng-content></ng-content>',\n                encapsulation: ViewEncapsulation.None,\n                providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { selectionChange: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], options: [{\n            type: ContentChildren,\n            args: [MatListOption, { descendants: true }]\n        }] }); })();\n    return MatSelectionList;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatListModule = /** @class */ (() => {\n    class MatListModule {\n    }\nMatListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatListModule });\nMatListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatListModule_Factory(t) { return new (t || MatListModule)(); }, imports: [[MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule], MatLineModule,\n        MatCommonModule,\n        MatPseudoCheckboxModule,\n        MatDividerModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatListModule, { declarations: function () { return [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatSelectionList, MatListOption]; }, imports: function () { return [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule]; }, exports: function () { return [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatLineModule,\n        MatCommonModule, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatPseudoCheckboxModule, MatSelectionList, MatListOption, MatDividerModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n                exports: [\n                    MatList,\n                    MatNavList,\n                    MatListItem,\n                    MatListAvatarCssMatStyler,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatListIconCssMatStyler,\n                    MatListSubheaderCssMatStyler,\n                    MatPseudoCheckboxModule,\n                    MatSelectionList,\n                    MatListOption,\n                    MatDividerModule\n                ],\n                declarations: [\n                    MatList,\n                    MatNavList,\n                    MatListItem,\n                    MatListAvatarCssMatStyler,\n                    MatListIconCssMatStyler,\n                    MatListSubheaderCssMatStyler,\n                    MatSelectionList,\n                    MatListOption\n                ]\n            }]\n    }], null, null); })();\n    return MatListModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LIST, MAT_NAV_LIST, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListItem, MatListModule, MatListOption, MatListSubheaderCssMatStyler, MatNavList, MatSelectionList, MatSelectionListChange };\n\n//# sourceMappingURL=list.js.map","import { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, END, hasModifierKey, HOME, RIGHT_ARROW, LEFT_ARROW, ESCAPE } from '@angular/cdk/keycodes';\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, query, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\n\nconst _c0 = [\"mat-menu-item\", \"\"];\nconst _c1 = [\"*\"];\nfunction _MatMenu_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function _MatMenu_ng_template_0_Template_div_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1._handleKeydown($event); })(\"click\", function _MatMenu_ng_template_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.closed.emit(\"click\"); })(\"@transformMenu.start\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4._onAnimationStart($event); })(\"@transformMenu.done\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5._onAnimationDone($event); });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n} }\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n                opacity: 1\n            }))),\n            animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n        ])),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nlet MatMenuContent = /** @class */ (() => {\n    class MatMenuContent {\n        constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n            this._template = _template;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._appRef = _appRef;\n            this._injector = _injector;\n            this._viewContainerRef = _viewContainerRef;\n            this._document = _document;\n            this._changeDetectorRef = _changeDetectorRef;\n            /** Emits when the menu content has been attached. */\n            this._attached = new Subject();\n        }\n        /**\n         * Attaches the content with a particular context.\n         * @docs-private\n         */\n        attach(context = {}) {\n            if (!this._portal) {\n                this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n            }\n            this.detach();\n            if (!this._outlet) {\n                this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n            }\n            const element = this._template.elementRef.nativeElement;\n            // Because we support opening the same menu from different triggers (which in turn have their\n            // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n            // risk it staying attached to a pane that's no longer in the DOM.\n            element.parentNode.insertBefore(this._outlet.outletElement, element);\n            // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n            // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n            // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n            // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n            // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n            // @breaking-change 9.0.0 Make change detector ref required\n            if (this._changeDetectorRef) {\n                this._changeDetectorRef.markForCheck();\n            }\n            this._portal.attach(this._outlet, context);\n            this._attached.next();\n        }\n        /**\n         * Detaches the content.\n         * @docs-private\n         */\n        detach() {\n            if (this._portal.isAttached) {\n                this._portal.detach();\n            }\n        }\n        ngOnDestroy() {\n            if (this._outlet) {\n                this._outlet.dispose();\n            }\n        }\n    }\nMatMenuContent.ɵfac = function MatMenuContent_Factory(t) { return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatMenuContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatMenuContent, selectors: [[\"ng-template\", \"matMenuContent\", \"\"]] });\n    MatMenuContent.ctorParameters = () => [\n        { type: TemplateRef },\n        { type: ComponentFactoryResolver },\n        { type: ApplicationRef },\n        { type: Injector },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: ChangeDetectorRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matMenuContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n    return MatMenuContent;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {\n}\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nlet MatMenuItem = /** @class */ (() => {\n    class MatMenuItem extends _MatMenuItemMixinBase {\n        constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n            // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n            super();\n            this._elementRef = _elementRef;\n            this._focusMonitor = _focusMonitor;\n            this._parentMenu = _parentMenu;\n            /** ARIA role for the menu item. */\n            this.role = 'menuitem';\n            /** Stream that emits when the menu item is hovered. */\n            this._hovered = new Subject();\n            /** Stream that emits when the menu item is focused. */\n            this._focused = new Subject();\n            /** Whether the menu item is highlighted. */\n            this._highlighted = false;\n            /** Whether the menu item acts as a trigger for a sub-menu. */\n            this._triggersSubmenu = false;\n            if (_parentMenu && _parentMenu.addItem) {\n                _parentMenu.addItem(this);\n            }\n            this._document = document;\n        }\n        /** Focuses the menu item. */\n        focus(origin = 'program', options) {\n            if (this._focusMonitor) {\n                this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n            }\n            else {\n                this._getHostElement().focus(options);\n            }\n            this._focused.next(this);\n        }\n        ngAfterViewInit() {\n            if (this._focusMonitor) {\n                // Start monitoring the element so it gets the appropriate focused classes. We want\n                // to show the focus style for menu items only when the focus was not caused by a\n                // mouse or touch interaction.\n                this._focusMonitor.monitor(this._elementRef, false);\n            }\n        }\n        ngOnDestroy() {\n            if (this._focusMonitor) {\n                this._focusMonitor.stopMonitoring(this._elementRef);\n            }\n            if (this._parentMenu && this._parentMenu.removeItem) {\n                this._parentMenu.removeItem(this);\n            }\n            this._hovered.complete();\n            this._focused.complete();\n        }\n        /** Used to set the `tabindex`. */\n        _getTabIndex() {\n            return this.disabled ? '-1' : '0';\n        }\n        /** Returns the host DOM element. */\n        _getHostElement() {\n            return this._elementRef.nativeElement;\n        }\n        /** Prevents the default element actions if it is disabled. */\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _checkDisabled(event) {\n            if (this.disabled) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        }\n        /** Emits to the hover stream. */\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _handleMouseEnter() {\n            this._hovered.next(this);\n        }\n        /** Gets the label to be used when determining whether the option should be focused. */\n        getLabel() {\n            const element = this._elementRef.nativeElement;\n            const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n            let output = '';\n            if (element.childNodes) {\n                const length = element.childNodes.length;\n                // Go through all the top-level text nodes and extract their text.\n                // We skip anything that's not a text node to prevent the text from\n                // being thrown off by something like an icon.\n                for (let i = 0; i < length; i++) {\n                    if (element.childNodes[i].nodeType === textNodeType) {\n                        output += element.childNodes[i].textContent;\n                    }\n                }\n            }\n            return output.trim();\n        }\n    }\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) { return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8)); };\nMatMenuItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatMenuItem, selectors: [[\"\", \"mat-menu-item\", \"\"]], hostAttrs: [1, \"mat-focus-indicator\"], hostVars: 10, hostBindings: function MatMenuItem_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) { return ctx._checkDisabled($event); })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() { return ctx._handleMouseEnter(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, exportAs: [\"matMenuItem\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 2, consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]], template: function MatMenuItem_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelement(1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n    } }, directives: [ɵngcc2.MatRipple], encapsulation: 2, changeDetection: 0 });\n    MatMenuItem.ctorParameters = () => [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: FocusMonitor },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n    ];\n    MatMenuItem.propDecorators = {\n        role: [{ type: Input }],\n        _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n        _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuItem, [{\n        type: Component,\n        args: [{\n                selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    '[class.mat-menu-item]': 'true',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                    'class': 'mat-focus-indicator'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_PANEL]\n            }, {\n                type: Optional\n            }] }]; }, { role: [{\n            type: Input\n        }], _checkDisabled: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], _handleMouseEnter: [{\n            type: HostListener,\n            args: ['mouseenter']\n        }] }); })();\n    return MatMenuItem;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nlet _MatMenuBase = /** @class */ (() => {\n    class _MatMenuBase {\n        constructor(_elementRef, _ngZone, _defaultOptions) {\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._defaultOptions = _defaultOptions;\n            this._xPosition = this._defaultOptions.xPosition;\n            this._yPosition = this._defaultOptions.yPosition;\n            /** Only the direct descendant menu items. */\n            this._directDescendantItems = new QueryList();\n            /** Subscription to tab events on the menu panel */\n            this._tabSubscription = Subscription.EMPTY;\n            /** Config object to be passed into the menu's ngClass */\n            this._classList = {};\n            /** Current state of the panel animation. */\n            this._panelAnimationState = 'void';\n            /** Emits whenever an animation on the menu completes. */\n            this._animationDone = new Subject();\n            /** Class to be added to the backdrop element. */\n            this.backdropClass = this._defaultOptions.backdropClass;\n            this._overlapTrigger = this._defaultOptions.overlapTrigger;\n            this._hasBackdrop = this._defaultOptions.hasBackdrop;\n            /** Event emitted when the menu is closed. */\n            this.closed = new EventEmitter();\n            /**\n             * Event emitted when the menu is closed.\n             * @deprecated Switch to `closed` instead\n             * @breaking-change 8.0.0\n             */\n            this.close = this.closed;\n            this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n        }\n        /** Position of the menu in the X axis. */\n        get xPosition() { return this._xPosition; }\n        set xPosition(value) {\n            if (value !== 'before' && value !== 'after') {\n                throwMatMenuInvalidPositionX();\n            }\n            this._xPosition = value;\n            this.setPositionClasses();\n        }\n        /** Position of the menu in the Y axis. */\n        get yPosition() { return this._yPosition; }\n        set yPosition(value) {\n            if (value !== 'above' && value !== 'below') {\n                throwMatMenuInvalidPositionY();\n            }\n            this._yPosition = value;\n            this.setPositionClasses();\n        }\n        /** Whether the menu should overlap its trigger. */\n        get overlapTrigger() { return this._overlapTrigger; }\n        set overlapTrigger(value) {\n            this._overlapTrigger = coerceBooleanProperty(value);\n        }\n        /** Whether the menu has a backdrop. */\n        get hasBackdrop() { return this._hasBackdrop; }\n        set hasBackdrop(value) {\n            this._hasBackdrop = coerceBooleanProperty(value);\n        }\n        /**\n         * This method takes classes set on the host mat-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @param classes list of class names\n         */\n        set panelClass(classes) {\n            const previousPanelClass = this._previousPanelClass;\n            if (previousPanelClass && previousPanelClass.length) {\n                previousPanelClass.split(' ').forEach((className) => {\n                    this._classList[className] = false;\n                });\n            }\n            this._previousPanelClass = classes;\n            if (classes && classes.length) {\n                classes.split(' ').forEach((className) => {\n                    this._classList[className] = true;\n                });\n                this._elementRef.nativeElement.className = '';\n            }\n        }\n        /**\n         * This method takes classes set on the host mat-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @deprecated Use `panelClass` instead.\n         * @breaking-change 8.0.0\n         */\n        get classList() { return this.panelClass; }\n        set classList(classes) { this.panelClass = classes; }\n        ngOnInit() {\n            this.setPositionClasses();\n        }\n        ngAfterContentInit() {\n            this._updateDirectDescendants();\n            this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n            this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n            // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n            // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n            // is internal and we know that it gets completed on destroy.\n            this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        }\n        ngOnDestroy() {\n            this._directDescendantItems.destroy();\n            this._tabSubscription.unsubscribe();\n            this.closed.complete();\n        }\n        /** Stream that emits whenever the hovered menu item changes. */\n        _hovered() {\n            // Coerce the `changes` property because Angular types it as `Observable<any>`\n            const itemChanges = this._directDescendantItems.changes;\n            return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n        }\n        /*\n         * Registers a menu item with the menu.\n         * @docs-private\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 9.0.0\n         */\n        addItem(_item) { }\n        /**\n         * Removes an item from the menu.\n         * @docs-private\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 9.0.0\n         */\n        removeItem(_item) { }\n        /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n        _handleKeydown(event) {\n            const keyCode = event.keyCode;\n            const manager = this._keyManager;\n            switch (keyCode) {\n                case ESCAPE:\n                    if (!hasModifierKey(event)) {\n                        event.preventDefault();\n                        this.closed.emit('keydown');\n                    }\n                    break;\n                case LEFT_ARROW:\n                    if (this.parentMenu && this.direction === 'ltr') {\n                        this.closed.emit('keydown');\n                    }\n                    break;\n                case RIGHT_ARROW:\n                    if (this.parentMenu && this.direction === 'rtl') {\n                        this.closed.emit('keydown');\n                    }\n                    break;\n                case HOME:\n                case END:\n                    if (!hasModifierKey(event)) {\n                        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                        event.preventDefault();\n                    }\n                    break;\n                default:\n                    if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                        manager.setFocusOrigin('keyboard');\n                    }\n                    manager.onKeydown(event);\n            }\n        }\n        /**\n         * Focus the first item in the menu.\n         * @param origin Action from which the focus originated. Used to set the correct styling.\n         */\n        focusFirstItem(origin = 'program') {\n            // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n            if (this.lazyContent) {\n                this._ngZone.onStable.asObservable()\n                    .pipe(take(1))\n                    .subscribe(() => this._focusFirstItem(origin));\n            }\n            else {\n                this._focusFirstItem(origin);\n            }\n        }\n        /**\n         * Actual implementation that focuses the first item. Needs to be separated\n         * out so we don't repeat the same logic in the public `focusFirstItem` method.\n         */\n        _focusFirstItem(origin) {\n            const manager = this._keyManager;\n            manager.setFocusOrigin(origin).setFirstItemActive();\n            // If there's no active item at this point, it means that all the items are disabled.\n            // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n            // give _some_ feedback to screen readers.\n            if (!manager.activeItem && this._directDescendantItems.length) {\n                let element = this._directDescendantItems.first._getHostElement().parentElement;\n                // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                while (element) {\n                    if (element.getAttribute('role') === 'menu') {\n                        element.focus();\n                        break;\n                    }\n                    else {\n                        element = element.parentElement;\n                    }\n                }\n            }\n        }\n        /**\n         * Resets the active item in the menu. This is used when the menu is opened, allowing\n         * the user to start from the first option when pressing the down arrow.\n         */\n        resetActiveItem() {\n            this._keyManager.setActiveItem(-1);\n        }\n        /**\n         * Sets the menu panel elevation.\n         * @param depth Number of parent menus that come before the menu.\n         */\n        setElevation(depth) {\n            // The elevation starts at the base and increases by one for each level.\n            // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n            const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n            const newElevation = `mat-elevation-z${elevation}`;\n            const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n            if (!customElevation || customElevation === this._previousElevation) {\n                if (this._previousElevation) {\n                    this._classList[this._previousElevation] = false;\n                }\n                this._classList[newElevation] = true;\n                this._previousElevation = newElevation;\n            }\n        }\n        /**\n         * Adds classes to the menu panel based on its position. Can be used by\n         * consumers to add specific styling based on the position.\n         * @param posX Position of the menu along the x axis.\n         * @param posY Position of the menu along the y axis.\n         * @docs-private\n         */\n        setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n            const classes = this._classList;\n            classes['mat-menu-before'] = posX === 'before';\n            classes['mat-menu-after'] = posX === 'after';\n            classes['mat-menu-above'] = posY === 'above';\n            classes['mat-menu-below'] = posY === 'below';\n        }\n        /** Starts the enter animation. */\n        _startAnimation() {\n            // @breaking-change 8.0.0 Combine with _resetAnimation.\n            this._panelAnimationState = 'enter';\n        }\n        /** Resets the panel animation to its initial state. */\n        _resetAnimation() {\n            // @breaking-change 8.0.0 Combine with _startAnimation.\n            this._panelAnimationState = 'void';\n        }\n        /** Callback that is invoked when the panel animation completes. */\n        _onAnimationDone(event) {\n            this._animationDone.next(event);\n            this._isAnimating = false;\n        }\n        _onAnimationStart(event) {\n            this._isAnimating = true;\n            // Scroll the content element to the top as soon as the animation starts. This is necessary,\n            // because we move focus to the first item while it's still being animated, which can throw\n            // the browser off when it determines the scroll position. Alternatively we can move focus\n            // when the animation is done, however moving focus asynchronously will interrupt screen\n            // readers which are in the process of reading out the menu already. We take the `element`\n            // from the `event` since we can't use a `ViewChild` to access the pane.\n            if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n                event.element.scrollTop = 0;\n            }\n        }\n        /**\n         * Sets up a stream that will keep track of any newly-added menu items and will update the list\n         * of direct descendants. We collect the descendants this way, because `_allItems` can include\n         * items that are part of child menus, and using a custom way of registering items is unreliable\n         * when it comes to maintaining the item order.\n         */\n        _updateDirectDescendants() {\n            this._allItems.changes\n                .pipe(startWith(this._allItems))\n                .subscribe((items) => {\n                this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n                this._directDescendantItems.notifyOnChanges();\n            });\n        }\n    }\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) { return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\n_MatMenuBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatMenuBase, contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuContent, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n    } }, viewQuery: function _MatMenuBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    } }, inputs: { backdropClass: \"backdropClass\", xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { closed: \"closed\", close: \"close\" } });\n    _MatMenuBase.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n    ];\n    _MatMenuBase.propDecorators = {\n        _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n        backdropClass: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n        xPosition: [{ type: Input }],\n        yPosition: [{ type: Input }],\n        templateRef: [{ type: ViewChild, args: [TemplateRef,] }],\n        items: [{ type: ContentChildren, args: [MatMenuItem, { descendants: false },] }],\n        lazyContent: [{ type: ContentChild, args: [MatMenuContent,] }],\n        overlapTrigger: [{ type: Input }],\n        hasBackdrop: [{ type: Input }],\n        panelClass: [{ type: Input, args: ['class',] }],\n        classList: [{ type: Input }],\n        closed: [{ type: Output }],\n        close: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatMenuBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, { backdropClass: [{\n            type: Input\n        }], closed: [{\n            type: Output\n        }], close: [{\n            type: Output\n        }], xPosition: [{\n            type: Input\n        }], yPosition: [{\n            type: Input\n        }], overlapTrigger: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], panelClass: [{\n            type: Input,\n            args: ['class']\n        }], classList: [{\n            type: Input\n        }], _allItems: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: true }]\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], templateRef: [{\n            type: ViewChild,\n            args: [TemplateRef]\n        }], items: [{\n            type: ContentChildren,\n            args: [MatMenuItem, { descendants: false }]\n        }], lazyContent: [{\n            type: ContentChild,\n            args: [MatMenuContent]\n        }] }); })();\n    return _MatMenuBase;\n})();\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\nlet MatMenu = /** @class */ (() => {\n    class MatMenu extends _MatMenuBase {\n    }\nMatMenu.ɵfac = function MatMenu_Factory(t) { return ɵMatMenu_BaseFactory(t || MatMenu); };\nMatMenu.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatMenu, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatMenu_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatMenu);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenu, [{\n        type: Directive\n    }], null, null); })();\n    return MatMenu;\n})();\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n/** @docs-public MatMenu */\nlet _MatMenu = /** @class */ (() => {\n    class _MatMenu extends MatMenu {\n        constructor(elementRef, ngZone, defaultOptions) {\n            super(elementRef, ngZone, defaultOptions);\n        }\n    }\n_MatMenu.ɵfac = function _MatMenu_Factory(t) { return new (t || _MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS)); };\n_MatMenu.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: _MatMenu, selectors: [[\"mat-menu\"]], exportAs: [\"matMenu\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n            { provide: MatMenu, useExisting: _MatMenu }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]], template: function _MatMenu_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, _MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    } }, directives: [ɵngcc3.NgClass], styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], encapsulation: 2, data: { animation: [\n            matMenuAnimations.transformMenu,\n            matMenuAnimations.fadeInItems\n        ] }, changeDetection: 0 });\n    _MatMenu.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatMenu, [{\n        type: Component,\n        args: [{\n                selector: 'mat-menu',\n                template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matMenu',\n                animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ],\n                providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                    { provide: MatMenu, useExisting: _MatMenu }\n                ],\n                styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return _MatMenu;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/** Directive applied to an element that should trigger a `mat-menu`. */\nlet MatMenuTrigger = /** @class */ (() => {\n    class MatMenuTrigger {\n        constructor(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, \n        // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n        // @breaking-change 8.0.0\n        _focusMonitor) {\n            this._overlay = _overlay;\n            this._element = _element;\n            this._viewContainerRef = _viewContainerRef;\n            this._parentMenu = _parentMenu;\n            this._menuItemInstance = _menuItemInstance;\n            this._dir = _dir;\n            this._focusMonitor = _focusMonitor;\n            this._overlayRef = null;\n            this._menuOpen = false;\n            this._closingActionsSubscription = Subscription.EMPTY;\n            this._hoverSubscription = Subscription.EMPTY;\n            this._menuCloseSubscription = Subscription.EMPTY;\n            /**\n             * Handles touch start events on the trigger.\n             * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n             */\n            this._handleTouchStart = () => this._openedBy = 'touch';\n            // Tracking input type is necessary so it's possible to only auto-focus\n            // the first item of the list when the menu is opened via the keyboard\n            this._openedBy = null;\n            /**\n             * Whether focus should be restored when the menu is closed.\n             * Note that disabling this option can have accessibility implications\n             * and it's up to you to manage focus, if you decide to turn it off.\n             */\n            this.restoreFocus = true;\n            /** Event emitted when the associated menu is opened. */\n            this.menuOpened = new EventEmitter();\n            /**\n             * Event emitted when the associated menu is opened.\n             * @deprecated Switch to `menuOpened` instead\n             * @breaking-change 8.0.0\n             */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onMenuOpen = this.menuOpened;\n            /** Event emitted when the associated menu is closed. */\n            this.menuClosed = new EventEmitter();\n            /**\n             * Event emitted when the associated menu is closed.\n             * @deprecated Switch to `menuClosed` instead\n             * @breaking-change 8.0.0\n             */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onMenuClose = this.menuClosed;\n            _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n            if (_menuItemInstance) {\n                _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n            }\n            this._scrollStrategy = scrollStrategy;\n        }\n        /**\n         * @deprecated\n         * @breaking-change 8.0.0\n         */\n        get _deprecatedMatMenuTriggerFor() { return this.menu; }\n        set _deprecatedMatMenuTriggerFor(v) {\n            this.menu = v;\n        }\n        /** References the menu instance that the trigger is associated with. */\n        get menu() { return this._menu; }\n        set menu(menu) {\n            if (menu === this._menu) {\n                return;\n            }\n            this._menu = menu;\n            this._menuCloseSubscription.unsubscribe();\n            if (menu) {\n                this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n                    this._destroyMenu();\n                    // If a click closed the menu, we should close the entire chain of nested menus.\n                    if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n                        this._parentMenu.closed.emit(reason);\n                    }\n                });\n            }\n        }\n        ngAfterContentInit() {\n            this._checkMenu();\n            this._handleHover();\n        }\n        ngOnDestroy() {\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n                this._overlayRef = null;\n            }\n            this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n            this._menuCloseSubscription.unsubscribe();\n            this._closingActionsSubscription.unsubscribe();\n            this._hoverSubscription.unsubscribe();\n        }\n        /** Whether the menu is open. */\n        get menuOpen() {\n            return this._menuOpen;\n        }\n        /** The text direction of the containing app. */\n        get dir() {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        }\n        /** Whether the menu triggers a sub-menu or a top-level one. */\n        triggersSubmenu() {\n            return !!(this._menuItemInstance && this._parentMenu);\n        }\n        /** Toggles the menu between the open and closed states. */\n        toggleMenu() {\n            return this._menuOpen ? this.closeMenu() : this.openMenu();\n        }\n        /** Opens the menu. */\n        openMenu() {\n            if (this._menuOpen) {\n                return;\n            }\n            this._checkMenu();\n            const overlayRef = this._createOverlay();\n            const overlayConfig = overlayRef.getConfig();\n            this._setPosition(overlayConfig.positionStrategy);\n            overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n                this.menu.hasBackdrop;\n            overlayRef.attach(this._getPortal());\n            if (this.menu.lazyContent) {\n                this.menu.lazyContent.attach(this.menuData);\n            }\n            this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n            this._initMenu();\n            if (this.menu instanceof MatMenu) {\n                this.menu._startAnimation();\n            }\n        }\n        /** Closes the menu. */\n        closeMenu() {\n            this.menu.close.emit();\n        }\n        /**\n         * Focuses the menu trigger.\n         * @param origin Source of the menu trigger's focus.\n         */\n        focus(origin = 'program', options) {\n            if (this._focusMonitor) {\n                this._focusMonitor.focusVia(this._element, origin, options);\n            }\n            else {\n                this._element.nativeElement.focus(options);\n            }\n        }\n        /** Closes the menu and does the necessary cleanup. */\n        _destroyMenu() {\n            if (!this._overlayRef || !this.menuOpen) {\n                return;\n            }\n            const menu = this.menu;\n            this._closingActionsSubscription.unsubscribe();\n            this._overlayRef.detach();\n            this._restoreFocus();\n            if (menu instanceof MatMenu) {\n                menu._resetAnimation();\n                if (menu.lazyContent) {\n                    // Wait for the exit animation to finish before detaching the content.\n                    menu._animationDone\n                        .pipe(filter(event => event.toState === 'void'), take(1), \n                    // Interrupt if the content got re-attached.\n                    takeUntil(menu.lazyContent._attached))\n                        .subscribe({\n                        next: () => menu.lazyContent.detach(),\n                        // No matter whether the content got re-attached, reset the menu.\n                        complete: () => this._setIsMenuOpen(false)\n                    });\n                }\n                else {\n                    this._setIsMenuOpen(false);\n                }\n            }\n            else {\n                this._setIsMenuOpen(false);\n                if (menu.lazyContent) {\n                    menu.lazyContent.detach();\n                }\n            }\n        }\n        /**\n         * This method sets the menu state to open and focuses the first item if\n         * the menu was opened via the keyboard.\n         */\n        _initMenu() {\n            this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n            this.menu.direction = this.dir;\n            this._setMenuElevation();\n            this._setIsMenuOpen(true);\n            this.menu.focusFirstItem(this._openedBy || 'program');\n        }\n        /** Updates the menu elevation based on the amount of parent menus that it has. */\n        _setMenuElevation() {\n            if (this.menu.setElevation) {\n                let depth = 0;\n                let parentMenu = this.menu.parentMenu;\n                while (parentMenu) {\n                    depth++;\n                    parentMenu = parentMenu.parentMenu;\n                }\n                this.menu.setElevation(depth);\n            }\n        }\n        /** Restores focus to the element that was focused before the menu was open. */\n        _restoreFocus() {\n            // We should reset focus if the user is navigating using a keyboard or\n            // if we have a top-level trigger which might cause focus to be lost\n            // when clicking on the backdrop.\n            if (this.restoreFocus) {\n                if (!this._openedBy) {\n                    // Note that the focus style will show up both for `program` and\n                    // `keyboard` so we don't have to specify which one it is.\n                    this.focus();\n                }\n                else if (!this.triggersSubmenu()) {\n                    this.focus(this._openedBy);\n                }\n            }\n            this._openedBy = null;\n        }\n        // set state rather than toggle to support triggers sharing a menu\n        _setIsMenuOpen(isOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._highlighted = isOpen;\n            }\n        }\n        /**\n         * This method checks that a valid instance of MatMenu has been passed into\n         * matMenuTriggerFor. If not, an exception is thrown.\n         */\n        _checkMenu() {\n            if (!this.menu) {\n                throwMatMenuMissingError();\n            }\n        }\n        /**\n         * This method creates the overlay from the provided menu's template and saves its\n         * OverlayRef so that it can be attached to the DOM when openMenu is called.\n         */\n        _createOverlay() {\n            if (!this._overlayRef) {\n                const config = this._getOverlayConfig();\n                this._subscribeToPositions(config.positionStrategy);\n                this._overlayRef = this._overlay.create(config);\n                // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n                // Ideally we'd also have our keyboard event logic in here, however doing so will\n                // break anybody that may have implemented the `MatMenuPanel` themselves.\n                this._overlayRef.keydownEvents().subscribe();\n            }\n            return this._overlayRef;\n        }\n        /**\n         * This method builds the configuration object needed to create the overlay, the OverlayState.\n         * @returns OverlayConfig\n         */\n        _getOverlayConfig() {\n            return new OverlayConfig({\n                positionStrategy: this._overlay.position()\n                    .flexibleConnectedTo(this._element)\n                    .withLockedPosition()\n                    .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n                backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n                scrollStrategy: this._scrollStrategy(),\n                direction: this._dir\n            });\n        }\n        /**\n         * Listens to changes in the position of the overlay and sets the correct classes\n         * on the menu based on the new position. This ensures the animation origin is always\n         * correct, even if a fallback position is used for the overlay.\n         */\n        _subscribeToPositions(position) {\n            if (this.menu.setPositionClasses) {\n                position.positionChanges.subscribe(change => {\n                    const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                    const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                    this.menu.setPositionClasses(posX, posY);\n                });\n            }\n        }\n        /**\n         * Sets the appropriate positions on a position strategy\n         * so the overlay connects with the trigger correctly.\n         * @param positionStrategy Strategy whose position to update.\n         */\n        _setPosition(positionStrategy) {\n            let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n            let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n            let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n            let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n            let offsetY = 0;\n            if (this.triggersSubmenu()) {\n                // When the menu is a sub-menu, it should always align itself\n                // to the edges of the trigger, instead of overlapping it.\n                overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n                offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n            }\n            else if (!this.menu.overlapTrigger) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n            positionStrategy.withPositions([\n                { originX, originY, overlayX, overlayY, offsetY },\n                { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n                {\n                    originX,\n                    originY: originFallbackY,\n                    overlayX,\n                    overlayY: overlayFallbackY,\n                    offsetY: -offsetY\n                },\n                {\n                    originX: originFallbackX,\n                    originY: originFallbackY,\n                    overlayX: overlayFallbackX,\n                    overlayY: overlayFallbackY,\n                    offsetY: -offsetY\n                }\n            ]);\n        }\n        /** Returns a stream that emits whenever an action that should close the menu occurs. */\n        _menuClosingActions() {\n            const backdrop = this._overlayRef.backdropClick();\n            const detachments = this._overlayRef.detachments();\n            const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n            const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n            return merge(backdrop, parentClose, hover, detachments);\n        }\n        /** Handles mouse presses on the trigger. */\n        _handleMousedown(event) {\n            if (!isFakeMousedownFromScreenReader(event)) {\n                // Since right or middle button clicks won't trigger the `click` event,\n                // we shouldn't consider the menu as opened by mouse in those cases.\n                this._openedBy = event.button === 0 ? 'mouse' : null;\n                // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n                // we should prevent focus from moving onto it via click to avoid the\n                // highlight from lingering on the menu item.\n                if (this.triggersSubmenu()) {\n                    event.preventDefault();\n                }\n            }\n        }\n        /** Handles key presses on the trigger. */\n        _handleKeydown(event) {\n            const keyCode = event.keyCode;\n            if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n                this.openMenu();\n            }\n        }\n        /** Handles click events on the trigger. */\n        _handleClick(event) {\n            if (this.triggersSubmenu()) {\n                // Stop event propagation to avoid closing the parent menu.\n                event.stopPropagation();\n                this.openMenu();\n            }\n            else {\n                this.toggleMenu();\n            }\n        }\n        /** Handles the cases where the user hovers over the trigger. */\n        _handleHover() {\n            // Subscribe to changes in the hovered item in order to toggle the panel.\n            if (!this.triggersSubmenu()) {\n                return;\n            }\n            this._hoverSubscription = this._parentMenu._hovered()\n                // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n                // with different data and triggers), we have to delay it by a tick to ensure that\n                // it won't be closed immediately after it is opened.\n                .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n                .subscribe(() => {\n                this._openedBy = 'mouse';\n                // If the same menu is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.menu._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n                        .subscribe(() => this.openMenu());\n                }\n                else {\n                    this.openMenu();\n                }\n            });\n        }\n        /** Gets the portal that should be attached to the overlay. */\n        _getPortal() {\n            // Note that we can avoid this check by keeping the portal on the menu panel.\n            // While it would be cleaner, we'd have to introduce another required method on\n            // `MatMenuPanel`, making it harder to consume.\n            if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n                this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n            }\n            return this._portal;\n        }\n    }\nMatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) { return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MatMenu, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\nMatMenuTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatMenuTrigger, selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]], hostAttrs: [\"aria-haspopup\", \"true\", 1, \"mat-menu-trigger\"], hostVars: 2, hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) { return ctx._handleMousedown($event); })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n    } }, inputs: { restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"], _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, exportAs: [\"matMenuTrigger\"] });\n    MatMenuTrigger.ctorParameters = () => [\n        { type: Overlay },\n        { type: ElementRef },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n        { type: MatMenu, decorators: [{ type: Optional }] },\n        { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: FocusMonitor }\n    ];\n    MatMenuTrigger.propDecorators = {\n        _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n        menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n        menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n        restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n        menuOpened: [{ type: Output }],\n        onMenuOpen: [{ type: Output }],\n        menuClosed: [{ type: Output }],\n        onMenuClose: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'class': 'mat-menu-trigger',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'menuOpen || null',\n                    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(click)': '_handleClick($event)'\n                },\n                exportAs: 'matMenuTrigger'\n            }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_MENU_SCROLL_STRATEGY]\n            }] }, { type: MatMenu, decorators: [{\n                type: Optional\n            }] }, { type: MatMenuItem, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }]; }, { restoreFocus: [{\n            type: Input,\n            args: ['matMenuTriggerRestoreFocus']\n        }], menuOpened: [{\n            type: Output\n        }], onMenuOpen: [{\n            type: Output\n        }], menuClosed: [{\n            type: Output\n        }], onMenuClose: [{\n            type: Output\n        }], _deprecatedMatMenuTriggerFor: [{\n            type: Input,\n            args: ['mat-menu-trigger-for']\n        }], menu: [{\n            type: Input,\n            args: ['matMenuTriggerFor']\n        }], menuData: [{\n            type: Input,\n            args: ['matMenuTriggerData']\n        }] }); })();\n    return MatMenuTrigger;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\nlet _MatMenuDirectivesModule = /** @class */ (() => {\n    class _MatMenuDirectivesModule {\n    }\n_MatMenuDirectivesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatMenuDirectivesModule });\n_MatMenuDirectivesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatMenuDirectivesModule_Factory(t) { return new (t || _MatMenuDirectivesModule)(); }, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatMenuDirectivesModule, { declarations: function () { return [MatMenuTrigger, MatMenuContent]; }, exports: function () { return [MatMenuTrigger, MatMenuContent, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatMenuDirectivesModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n                declarations: [\n                    MatMenuTrigger,\n                    MatMenuContent,\n                ],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n    return _MatMenuDirectivesModule;\n})();\nlet MatMenuModule = /** @class */ (() => {\n    class MatMenuModule {\n    }\nMatMenuModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatMenuModule });\nMatMenuModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatMenuModule_Factory(t) { return new (t || MatMenuModule)(); }, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            CommonModule,\n            MatCommonModule,\n            MatRippleModule,\n            OverlayModule,\n            _MatMenuDirectivesModule,\n        ], CdkScrollableModule, MatCommonModule, _MatMenuDirectivesModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, { declarations: function () { return [_MatMenu, MatMenuItem]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        MatRippleModule,\n        OverlayModule, _MatMenuDirectivesModule]; }, exports: function () { return [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatMenuModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                    _MatMenuDirectivesModule,\n                ],\n                exports: [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                declarations: [_MatMenu, MatMenuItem],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatMenuModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenu, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };\n\n//# sourceMappingURL=menu.js.map","import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, isDevMode, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, ContentChildren, Input, ContentChild, Output, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, ErrorStateMatcher, MatOption, MatOptgroup, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, HOME, END, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/material/form-field';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_2_Template, 1, 0, undefined, 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nlet MatSelectTrigger = /** @class */ (() => {\n    class MatSelectTrigger {\n    }\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger'\n            }]\n    }], null, null); })();\n    return MatSelectTrigger;\n})();\nlet MatSelect = /** @class */ (() => {\n    class MatSelect extends _MatSelectMixinBase {\n        constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, defaults) {\n            super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n            this._viewportRuler = _viewportRuler;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._ngZone = _ngZone;\n            this._dir = _dir;\n            this._parentFormField = _parentFormField;\n            this.ngControl = ngControl;\n            this._liveAnnouncer = _liveAnnouncer;\n            /** Whether or not the overlay panel is open. */\n            this._panelOpen = false;\n            /** Whether filling out the select is required in the form. */\n            this._required = false;\n            /** The scroll position of the overlay panel, calculated to center the selected option. */\n            this._scrollTop = 0;\n            /** Whether the component is in multiple selection mode. */\n            this._multiple = false;\n            /** Comparison function to specify which option is displayed. Defaults to object equality. */\n            this._compareWith = (o1, o2) => o1 === o2;\n            /** Unique id for this input. */\n            this._uid = `mat-select-${nextUniqueId++}`;\n            /** Emits whenever the component is destroyed. */\n            this._destroy = new Subject();\n            /** The cached font-size of the trigger element. */\n            this._triggerFontSize = 0;\n            /** `View -> model callback called when value changes` */\n            this._onChange = () => { };\n            /** `View -> model callback called when select has been touched` */\n            this._onTouched = () => { };\n            /** The IDs of child options to be passed to the aria-owns attribute. */\n            this._optionIds = '';\n            /** The value of the select panel's transform-origin property. */\n            this._transformOrigin = 'top';\n            /** Emits when the panel element is finished transforming in. */\n            this._panelDoneAnimatingStream = new Subject();\n            /**\n             * The y-offset of the overlay panel in relation to the trigger's top start corner.\n             * This must be adjusted to align the selected option text over the trigger text.\n             * when the panel opens. Will change based on the y-position of the selected option.\n             */\n            this._offsetY = 0;\n            /**\n             * This position config ensures that the top \"start\" corner of the overlay\n             * is aligned with with the top \"start\" of the origin by default (overlapping\n             * the trigger completely). If the panel cannot fit below the trigger, it\n             * will fall back to a position above the trigger.\n             */\n            this._positions = [\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'top',\n                },\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n                },\n            ];\n            /** Whether the component is disabling centering of the active option over the trigger. */\n            this._disableOptionCentering = false;\n            this._focused = false;\n            /** A name for this control that can be used by `mat-form-field`. */\n            this.controlType = 'mat-select';\n            /** Aria label of the select. If not specified, the placeholder will be used as label. */\n            this.ariaLabel = '';\n            /** Combined stream of all of the child options' change events. */\n            this.optionSelectionChanges = defer(() => {\n                const options = this.options;\n                if (options) {\n                    return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n                }\n                return this._ngZone.onStable\n                    .asObservable()\n                    .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n            });\n            /** Event emitted when the select panel has been toggled. */\n            this.openedChange = new EventEmitter();\n            /** Event emitted when the select has been opened. */\n            this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n            /** Event emitted when the select has been closed. */\n            this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n            /** Event emitted when the selected value has been changed by the user. */\n            this.selectionChange = new EventEmitter();\n            /**\n             * Event that emits whenever the raw value of the select changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            this.valueChange = new EventEmitter();\n            if (this.ngControl) {\n                // Note: we provide the value accessor through here, instead of\n                // the `providers` to avoid running into a circular import.\n                this.ngControl.valueAccessor = this;\n            }\n            this._scrollStrategyFactory = scrollStrategyFactory;\n            this._scrollStrategy = this._scrollStrategyFactory();\n            this.tabIndex = parseInt(tabIndex) || 0;\n            // Force setter to be called in case id was not specified.\n            this.id = this.id;\n            if (defaults) {\n                if (defaults.disableOptionCentering != null) {\n                    this.disableOptionCentering = defaults.disableOptionCentering;\n                }\n                if (defaults.typeaheadDebounceInterval != null) {\n                    this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n                }\n            }\n        }\n        /** Whether the select is focused. */\n        get focused() {\n            return this._focused || this._panelOpen;\n        }\n        /** Placeholder to be shown if no value has been selected. */\n        get placeholder() { return this._placeholder; }\n        set placeholder(value) {\n            this._placeholder = value;\n            this.stateChanges.next();\n        }\n        /** Whether the component is required. */\n        get required() { return this._required; }\n        set required(value) {\n            this._required = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        }\n        /** Whether the user should be allowed to select multiple options. */\n        get multiple() { return this._multiple; }\n        set multiple(value) {\n            if (this._selectionModel) {\n                throw getMatSelectDynamicMultipleError();\n            }\n            this._multiple = coerceBooleanProperty(value);\n        }\n        /** Whether to center the active option over the trigger. */\n        get disableOptionCentering() { return this._disableOptionCentering; }\n        set disableOptionCentering(value) {\n            this._disableOptionCentering = coerceBooleanProperty(value);\n        }\n        /**\n         * Function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         */\n        get compareWith() { return this._compareWith; }\n        set compareWith(fn) {\n            if (typeof fn !== 'function') {\n                throw getMatSelectNonFunctionValueError();\n            }\n            this._compareWith = fn;\n            if (this._selectionModel) {\n                // A different comparator means the selection could change.\n                this._initializeSelection();\n            }\n        }\n        /** Value of the select control. */\n        get value() { return this._value; }\n        set value(newValue) {\n            if (newValue !== this._value) {\n                this.writeValue(newValue);\n                this._value = newValue;\n            }\n        }\n        /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n        get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n        set typeaheadDebounceInterval(value) {\n            this._typeaheadDebounceInterval = coerceNumberProperty(value);\n        }\n        /** Unique id of the element. */\n        get id() { return this._id; }\n        set id(value) {\n            this._id = value || this._uid;\n            this.stateChanges.next();\n        }\n        ngOnInit() {\n            this._selectionModel = new SelectionModel(this.multiple);\n            this.stateChanges.next();\n            // We need `distinctUntilChanged` here, because some browsers will\n            // fire the animation end event twice for the same animation. See:\n            // https://github.com/angular/angular/issues/24084\n            this._panelDoneAnimatingStream\n                .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n                .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                }\n                else {\n                    this.openedChange.emit(false);\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n            this._viewportRuler.change()\n                .pipe(takeUntil(this._destroy))\n                .subscribe(() => {\n                if (this._panelOpen) {\n                    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n        }\n        ngAfterContentInit() {\n            this._initKeyManager();\n            this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n                event.added.forEach(option => option.select());\n                event.removed.forEach(option => option.deselect());\n            });\n            this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n        }\n        ngDoCheck() {\n            if (this.ngControl) {\n                this.updateErrorState();\n            }\n        }\n        ngOnChanges(changes) {\n            // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n            // the parent form field know to run change detection when the disabled state changes.\n            if (changes['disabled']) {\n                this.stateChanges.next();\n            }\n            if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n                this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n            }\n        }\n        ngOnDestroy() {\n            this._destroy.next();\n            this._destroy.complete();\n            this.stateChanges.complete();\n        }\n        /** Toggles the overlay panel open or closed. */\n        toggle() {\n            this.panelOpen ? this.close() : this.open();\n        }\n        /** Opens the overlay panel. */\n        open() {\n            if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n                return;\n            }\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._calculateOverlayPosition();\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n        /** Closes the overlay panel and focuses the host element. */\n        close() {\n            if (this._panelOpen) {\n                this._panelOpen = false;\n                this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n                this._changeDetectorRef.markForCheck();\n                this._onTouched();\n            }\n        }\n        /**\n         * Sets the select's value. Part of the ControlValueAccessor interface\n         * required to integrate with Angular's core forms API.\n         *\n         * @param value New value to be written to the model.\n         */\n        writeValue(value) {\n            if (this.options) {\n                this._setSelectionByValue(value);\n            }\n        }\n        /**\n         * Saves a callback function to be invoked when the select's value\n         * changes from user input. Part of the ControlValueAccessor interface\n         * required to integrate with Angular's core forms API.\n         *\n         * @param fn Callback to be triggered when the value changes.\n         */\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        /**\n         * Saves a callback function to be invoked when the select is blurred\n         * by the user. Part of the ControlValueAccessor interface required\n         * to integrate with Angular's core forms API.\n         *\n         * @param fn Callback to be triggered when the component has been touched.\n         */\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        /**\n         * Disables the select. Part of the ControlValueAccessor interface required\n         * to integrate with Angular's core forms API.\n         *\n         * @param isDisabled Sets whether the component is disabled.\n         */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n        /** Whether or not the overlay panel is open. */\n        get panelOpen() {\n            return this._panelOpen;\n        }\n        /** The currently selected option. */\n        get selected() {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        }\n        /** The value displayed in the trigger. */\n        get triggerValue() {\n            if (this.empty) {\n                return '';\n            }\n            if (this._multiple) {\n                const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n                if (this._isRtl()) {\n                    selectedOptions.reverse();\n                }\n                // TODO(crisbeto): delimiter should be configurable for proper localization.\n                return selectedOptions.join(', ');\n            }\n            return this._selectionModel.selected[0].viewValue;\n        }\n        /** Whether the element is in RTL mode. */\n        _isRtl() {\n            return this._dir ? this._dir.value === 'rtl' : false;\n        }\n        /** Handles all keydown events on the select. */\n        _handleKeydown(event) {\n            if (!this.disabled) {\n                this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n            }\n        }\n        /** Handles keyboard events while the select is closed. */\n        _handleClosedKeydown(event) {\n            const keyCode = event.keyCode;\n            const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n            const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n            const manager = this._keyManager;\n            // Open the select on ALT + arrow key to match the native <select>\n            if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n                ((this.multiple || event.altKey) && isArrowKey)) {\n                event.preventDefault(); // prevents the page from scrolling down when pressing space\n                this.open();\n            }\n            else if (!this.multiple) {\n                const previouslySelectedOption = this.selected;\n                if (keyCode === HOME || keyCode === END) {\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                else {\n                    manager.onKeydown(event);\n                }\n                const selectedOption = this.selected;\n                // Since the value has changed, we need to announce it ourselves.\n                if (selectedOption && previouslySelectedOption !== selectedOption) {\n                    // We set a duration on the live announcement, because we want the live element to be\n                    // cleared after a while so that users can't navigate to it using the arrow keys.\n                    this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n                }\n            }\n        }\n        /** Handles keyboard events when the selected is open. */\n        _handleOpenKeydown(event) {\n            const manager = this._keyManager;\n            const keyCode = event.keyCode;\n            const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n            const isTyping = manager.isTyping();\n            if (keyCode === HOME || keyCode === END) {\n                event.preventDefault();\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            }\n            else if (isArrowKey && event.altKey) {\n                // Close the select on ALT + arrow key to match the native <select>\n                event.preventDefault();\n                this.close();\n                // Don't do anything in this case if the user is typing,\n                // because the typing sequence can include the space key.\n            }\n            else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n                !hasModifierKey(event)) {\n                event.preventDefault();\n                manager.activeItem._selectViaInteraction();\n            }\n            else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n                event.preventDefault();\n                const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n                this.options.forEach(option => {\n                    if (!option.disabled) {\n                        hasDeselectedOptions ? option.select() : option.deselect();\n                    }\n                });\n            }\n            else {\n                const previouslyFocusedIndex = manager.activeItemIndex;\n                manager.onKeydown(event);\n                if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                    manager.activeItemIndex !== previouslyFocusedIndex) {\n                    manager.activeItem._selectViaInteraction();\n                }\n            }\n        }\n        _onFocus() {\n            if (!this.disabled) {\n                this._focused = true;\n                this.stateChanges.next();\n            }\n        }\n        /**\n         * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n         * \"blur\" to the panel when it opens, causing a false positive.\n         */\n        _onBlur() {\n            this._focused = false;\n            if (!this.disabled && !this.panelOpen) {\n                this._onTouched();\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            }\n        }\n        /**\n         * Callback that is invoked when the overlay panel has been attached.\n         */\n        _onAttached() {\n            this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n        }\n        /** Returns the theme to be used on the panel. */\n        _getPanelTheme() {\n            return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n        }\n        /** Whether the select has a value. */\n        get empty() {\n            return !this._selectionModel || this._selectionModel.isEmpty();\n        }\n        _initializeSelection() {\n            // Defer setting the value in order to avoid the \"Expression\n            // has changed after it was checked\" errors from Angular.\n            Promise.resolve().then(() => {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n                this.stateChanges.next();\n            });\n        }\n        /**\n         * Sets the selected option based on a value. If no option can be\n         * found with the designated value, the select trigger is cleared.\n         */\n        _setSelectionByValue(value) {\n            if (this.multiple && value) {\n                if (!Array.isArray(value)) {\n                    throw getMatSelectNonArrayValueError();\n                }\n                this._selectionModel.clear();\n                value.forEach((currentValue) => this._selectValue(currentValue));\n                this._sortValues();\n            }\n            else {\n                this._selectionModel.clear();\n                const correspondingOption = this._selectValue(value);\n                // Shift focus to the active item. Note that we shouldn't do this in multiple\n                // mode, because we don't know what option the user interacted with last.\n                if (correspondingOption) {\n                    this._keyManager.setActiveItem(correspondingOption);\n                }\n                else if (!this.panelOpen) {\n                    // Otherwise reset the highlighted option. Note that we only want to do this while\n                    // closed, because doing it while open can shift the user's focus unnecessarily.\n                    this._keyManager.setActiveItem(-1);\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n        /**\n         * Finds and selects and option based on its value.\n         * @returns Option that has the corresponding value.\n         */\n        _selectValue(value) {\n            const correspondingOption = this.options.find((option) => {\n                try {\n                    // Treat null as a special reset value.\n                    return option.value != null && this._compareWith(option.value, value);\n                }\n                catch (error) {\n                    if (isDevMode()) {\n                        // Notify developers of errors in their comparator.\n                        console.warn(error);\n                    }\n                    return false;\n                }\n            });\n            if (correspondingOption) {\n                this._selectionModel.select(correspondingOption);\n            }\n            return correspondingOption;\n        }\n        /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n        _initKeyManager() {\n            this._keyManager = new ActiveDescendantKeyManager(this.options)\n                .withTypeAhead(this._typeaheadDebounceInterval)\n                .withVerticalOrientation()\n                .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n                .withAllowedModifierKeys(['shiftKey']);\n            this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n                if (this.panelOpen) {\n                    // Select the active item when tabbing away. This is consistent with how the native\n                    // select behaves. Note that we only want to do this in single selection mode.\n                    if (!this.multiple && this._keyManager.activeItem) {\n                        this._keyManager.activeItem._selectViaInteraction();\n                    }\n                    // Restore focus to the trigger before closing. Ensures that the focus\n                    // position won't be lost if the user got focus into the overlay.\n                    this.focus();\n                    this.close();\n                }\n            });\n            this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                }\n                else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n        }\n        /** Drops current option subscriptions and IDs and resets from scratch. */\n        _resetOptions() {\n            const changedOrDestroyed = merge(this.options.changes, this._destroy);\n            this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n                this._onSelect(event.source, event.isUserInput);\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n            // Listen to changes in the internal state of the options and react accordingly.\n            // Handles cases like the labels of the selected options changing.\n            merge(...this.options.map(option => option._stateChanges))\n                .pipe(takeUntil(changedOrDestroyed))\n                .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n            this._setOptionIds();\n        }\n        /** Invoked when an option is clicked. */\n        _onSelect(option, isUserInput) {\n            const wasSelected = this._selectionModel.isSelected(option);\n            if (option.value == null && !this._multiple) {\n                option.deselect();\n                this._selectionModel.clear();\n                this._propagateChanges(option.value);\n            }\n            else {\n                if (wasSelected !== option.selected) {\n                    option.selected ? this._selectionModel.select(option) :\n                        this._selectionModel.deselect(option);\n                }\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(option);\n                }\n                if (this.multiple) {\n                    this._sortValues();\n                    if (isUserInput) {\n                        // In case the user selected the option with their mouse, we\n                        // want to restore focus back to the trigger, in order to\n                        // prevent the select keyboard controls from clashing with\n                        // the ones from `mat-option`.\n                        this.focus();\n                    }\n                }\n            }\n            if (wasSelected !== this._selectionModel.isSelected(option)) {\n                this._propagateChanges();\n            }\n            this.stateChanges.next();\n        }\n        /** Sorts the selected values in the selected based on their order in the panel. */\n        _sortValues() {\n            if (this.multiple) {\n                const options = this.options.toArray();\n                this._selectionModel.sort((a, b) => {\n                    return this.sortComparator ? this.sortComparator(a, b, options) :\n                        options.indexOf(a) - options.indexOf(b);\n                });\n                this.stateChanges.next();\n            }\n        }\n        /** Emits change event to set the model value. */\n        _propagateChanges(fallbackValue) {\n            let valueToEmit = null;\n            if (this.multiple) {\n                valueToEmit = this.selected.map(option => option.value);\n            }\n            else {\n                valueToEmit = this.selected ? this.selected.value : fallbackValue;\n            }\n            this._value = valueToEmit;\n            this.valueChange.emit(valueToEmit);\n            this._onChange(valueToEmit);\n            this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Records option IDs to pass to the aria-owns property. */\n        _setOptionIds() {\n            this._optionIds = this.options.map(option => option.id).join(' ');\n        }\n        /**\n         * Highlights the selected item. If no option is selected, it will highlight\n         * the first item instead.\n         */\n        _highlightCorrectOption() {\n            if (this._keyManager) {\n                if (this.empty) {\n                    this._keyManager.setFirstItemActive();\n                }\n                else {\n                    this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n                }\n            }\n        }\n        /** Scrolls the active option into view. */\n        _scrollActiveOptionIntoView() {\n            const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n        /** Focuses the select element. */\n        focus(options) {\n            this._elementRef.nativeElement.focus(options);\n        }\n        /** Gets the index of the provided option in the option list. */\n        _getOptionIndex(option) {\n            return this.options.reduce((result, current, index) => {\n                if (result !== undefined) {\n                    return result;\n                }\n                return option === current ? index : undefined;\n            }, undefined);\n        }\n        /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n        _calculateOverlayPosition() {\n            const itemHeight = this._getItemHeight();\n            const items = this._getItemCount();\n            const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n            const scrollContainerHeight = items * itemHeight;\n            // The farthest the panel can be scrolled before it hits the bottom\n            const maxScroll = scrollContainerHeight - panelHeight;\n            // If no value is selected we open the popup to the first item.\n            let selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);\n            selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n            // We must maintain a scroll buffer so the selected option will be scrolled to the\n            // center of the overlay panel rather than the top.\n            const scrollBuffer = panelHeight / 2;\n            this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n            this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n            this._checkOverlayWithinViewport(maxScroll);\n        }\n        /**\n         * Calculates the scroll position of the select's overlay panel.\n         *\n         * Attempts to center the selected option in the panel. If the option is\n         * too high or too low in the panel to be scrolled to the center, it clamps the\n         * scroll position to the min or max scroll positions respectively.\n         */\n        _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n            const itemHeight = this._getItemHeight();\n            const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n            const halfOptionHeight = itemHeight / 2;\n            // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n            // scroll container, then subtracts the scroll buffer to scroll the option down to\n            // the center of the overlay panel. Half the option height must be re-added to the\n            // scrollTop so the option is centered based on its middle, not its top edge.\n            const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n            return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n        }\n        /** Returns the aria-label of the select component. */\n        _getAriaLabel() {\n            // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n            // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n            return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n        }\n        /** Returns the aria-labelledby of the select component. */\n        _getAriaLabelledby() {\n            if (this.ariaLabelledby) {\n                return this.ariaLabelledby;\n            }\n            // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n            // computed label. `this.ariaLabel` is only the user-specified label.\n            if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n                this._getAriaLabel()) {\n                return null;\n            }\n            return this._parentFormField._labelId || null;\n        }\n        /** Determines the `aria-activedescendant` to be set on the host. */\n        _getAriaActiveDescendant() {\n            if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n                return this._keyManager.activeItem.id;\n            }\n            return null;\n        }\n        /**\n         * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text when\n         * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n         * can't be calculated until the panel has been attached, because we need to know the\n         * content width in order to constrain the panel within the viewport.\n         */\n        _calculateOverlayOffsetX() {\n            const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n            const viewportSize = this._viewportRuler.getViewportSize();\n            const isRtl = this._isRtl();\n            const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                SELECT_PANEL_PADDING_X * 2;\n            let offsetX;\n            // Adjust the offset, depending on the option padding.\n            if (this.multiple) {\n                offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n            }\n            else {\n                let selected = this._selectionModel.selected[0] || this.options.first;\n                offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n            }\n            // Invert the offset in LTR.\n            if (!isRtl) {\n                offsetX *= -1;\n            }\n            // Determine how much the select overflows on each side.\n            const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n            const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                + (isRtl ? 0 : paddingWidth);\n            // If the element overflows on either side, reduce the offset to allow it to fit.\n            if (leftOverflow > 0) {\n                offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n            }\n            else if (rightOverflow > 0) {\n                offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n            }\n            // Set the offset directly in order to avoid having to go through change detection and\n            // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n            // blurry content in some browsers.\n            this.overlayDir.offsetX = Math.round(offsetX);\n            this.overlayDir.overlayRef.updatePosition();\n        }\n        /**\n         * Calculates the y-offset of the select's overlay panel in relation to the\n         * top start corner of the trigger. It has to be adjusted in order for the\n         * selected option to be aligned over the trigger when the panel opens.\n         */\n        _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n            const itemHeight = this._getItemHeight();\n            const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n            const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n            let optionOffsetFromPanelTop;\n            // Disable offset if requested by user by returning 0 as value to offset\n            if (this._disableOptionCentering) {\n                return 0;\n            }\n            if (this._scrollTop === 0) {\n                optionOffsetFromPanelTop = selectedIndex * itemHeight;\n            }\n            else if (this._scrollTop === maxScroll) {\n                const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n                const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n                // The first item is partially out of the viewport. Therefore we need to calculate what\n                // portion of it is shown in the viewport and account for it in our offset.\n                let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n                // Because the panel height is longer than the height of the options alone,\n                // there is always extra padding at the top or bottom of the panel. When\n                // scrolled to the very bottom, this padding is at the top of the panel and\n                // must be added to the offset.\n                optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n            }\n            else {\n                // If the option was scrolled to the middle of the panel using a scroll buffer,\n                // its offset will be the scroll buffer minus the half height that was added to\n                // center it.\n                optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n            }\n            // The final offset is the option's offset from the top, adjusted for the height difference,\n            // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n            // The value is rounded to prevent some browsers from blurring the content.\n            return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n        }\n        /**\n         * Checks that the attempted overlay position will fit within the viewport.\n         * If it will not fit, tries to adjust the scroll position and the associated\n         * y-offset so the panel can open fully on-screen. If it still won't fit,\n         * sets the offset back to 0 to allow the fallback position to take over.\n         */\n        _checkOverlayWithinViewport(maxScroll) {\n            const itemHeight = this._getItemHeight();\n            const viewportSize = this._viewportRuler.getViewportSize();\n            const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n            const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n            const panelHeightTop = Math.abs(this._offsetY);\n            const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n            const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n            if (panelHeightBottom > bottomSpaceAvailable) {\n                this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n            }\n            else if (panelHeightTop > topSpaceAvailable) {\n                this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n            }\n            else {\n                this._transformOrigin = this._getOriginBasedOnOption();\n            }\n        }\n        /** Adjusts the overlay panel up to fit in the viewport. */\n        _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n            // Browsers ignore fractional scroll offsets, so we need to round.\n            const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n            // Scrolls the panel up by the distance it was extending past the boundary, then\n            // adjusts the offset by that amount to move the panel up into the viewport.\n            this._scrollTop -= distanceBelowViewport;\n            this._offsetY -= distanceBelowViewport;\n            this._transformOrigin = this._getOriginBasedOnOption();\n            // If the panel is scrolled to the very top, it won't be able to fit the panel\n            // by scrolling, so set the offset to 0 to allow the fallback position to take\n            // effect.\n            if (this._scrollTop <= 0) {\n                this._scrollTop = 0;\n                this._offsetY = 0;\n                this._transformOrigin = `50% bottom 0px`;\n            }\n        }\n        /** Adjusts the overlay panel down to fit in the viewport. */\n        _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n            // Browsers ignore fractional scroll offsets, so we need to round.\n            const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n            // Scrolls the panel down by the distance it was extending past the boundary, then\n            // adjusts the offset by that amount to move the panel down into the viewport.\n            this._scrollTop += distanceAboveViewport;\n            this._offsetY += distanceAboveViewport;\n            this._transformOrigin = this._getOriginBasedOnOption();\n            // If the panel is scrolled to the very bottom, it won't be able to fit the\n            // panel by scrolling, so set the offset to 0 to allow the fallback position\n            // to take effect.\n            if (this._scrollTop >= maxScroll) {\n                this._scrollTop = maxScroll;\n                this._offsetY = 0;\n                this._transformOrigin = `50% top 0px`;\n                return;\n            }\n        }\n        /** Sets the transform origin point based on the selected option. */\n        _getOriginBasedOnOption() {\n            const itemHeight = this._getItemHeight();\n            const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n            const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n            return `50% ${originY}px 0px`;\n        }\n        /** Calculates the amount of items in the select. This includes options and group labels. */\n        _getItemCount() {\n            return this.options.length + this.optionGroups.length;\n        }\n        /** Calculates the height of the select's options. */\n        _getItemHeight() {\n            return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        setDescribedByIds(ids) {\n            this._ariaDescribedby = ids.join(' ');\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        onContainerClick() {\n            this.focus();\n            this.open();\n        }\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get shouldLabelFloat() {\n            return this._panelOpen || !this.empty;\n        }\n    }\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 19, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", disableOptionCentering: \"disableOptionCentering\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 11, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\n    MatSelect.ctorParameters = () => [\n        { type: ViewportRuler },\n        { type: ChangeDetectorRef },\n        { type: NgZone },\n        { type: ErrorStateMatcher },\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n        { type: LiveAnnouncer },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n    ];\n    MatSelect.propDecorators = {\n        trigger: [{ type: ViewChild, args: ['trigger',] }],\n        panel: [{ type: ViewChild, args: ['panel',] }],\n        overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n        options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n        optionGroups: [{ type: ContentChildren, args: [MatOptgroup, { descendants: true },] }],\n        panelClass: [{ type: Input }],\n        customTrigger: [{ type: ContentChild, args: [MatSelectTrigger,] }],\n        placeholder: [{ type: Input }],\n        required: [{ type: Input }],\n        multiple: [{ type: Input }],\n        disableOptionCentering: [{ type: Input }],\n        compareWith: [{ type: Input }],\n        value: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        errorStateMatcher: [{ type: Input }],\n        typeaheadDebounceInterval: [{ type: Input }],\n        sortComparator: [{ type: Input }],\n        id: [{ type: Input }],\n        openedChange: [{ type: Output }],\n        _openedStream: [{ type: Output, args: ['opened',] }],\n        _closedStream: [{ type: Output, args: ['closed',] }],\n        selectionChange: [{ type: Output }],\n        valueChange: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin\\n     class=\\\"mat-select-trigger\\\"\\n     aria-hidden=\\\"true\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc8.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup, { descendants: true }]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MatSelectTrigger]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n    return MatSelect;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSelectModule = /** @class */ (() => {\n    class MatSelectModule {\n    }\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); }, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatSelectModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map","import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nlet MatTooltip = /** @class */ (() => {\n    class MatTooltip {\n        constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {\n            this._overlay = _overlay;\n            this._elementRef = _elementRef;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewContainerRef = _viewContainerRef;\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            this._ariaDescriber = _ariaDescriber;\n            this._focusMonitor = _focusMonitor;\n            this._dir = _dir;\n            this._defaultOptions = _defaultOptions;\n            this._position = 'below';\n            this._disabled = false;\n            /** The default delay in ms before showing the tooltip after show is called */\n            this.showDelay = this._defaultOptions.showDelay;\n            /** The default delay in ms before hiding the tooltip after hide is called */\n            this.hideDelay = this._defaultOptions.hideDelay;\n            /**\n             * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n             * uses a long press gesture to show and hide, however it can conflict with the native browser\n             * gestures. To work around the conflict, Angular Material disables native gestures on the\n             * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n             * elements). The different values for this option configure the touch event handling as follows:\n             * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n             *   browser gestures on particular elements. In particular, it allows text selection on inputs\n             *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n             * - `on` - Enables touch gestures for all elements and disables native\n             *   browser gestures with no exceptions.\n             * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n             *   showing on touch devices.\n             */\n            this.touchGestures = 'auto';\n            this._message = '';\n            /** Manually-bound passive event listeners. */\n            this._passiveListeners = new Map();\n            /** Emits when the component is destroyed. */\n            this._destroyed = new Subject();\n            /**\n             * Handles the keydown events on the host element.\n             * Needs to be an arrow function so that we can use it in addEventListener.\n             */\n            this._handleKeydown = (event) => {\n                if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this._ngZone.run(() => this.hide(0));\n                }\n            };\n            this._scrollStrategy = scrollStrategy;\n            if (_defaultOptions) {\n                if (_defaultOptions.position) {\n                    this.position = _defaultOptions.position;\n                }\n                if (_defaultOptions.touchGestures) {\n                    this.touchGestures = _defaultOptions.touchGestures;\n                }\n            }\n            _ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n            });\n        }\n        /** Allows the user to define the position of the tooltip relative to the parent element */\n        get position() { return this._position; }\n        set position(value) {\n            if (value !== this._position) {\n                this._position = value;\n                if (this._overlayRef) {\n                    this._updatePosition();\n                    if (this._tooltipInstance) {\n                        this._tooltipInstance.show(0);\n                    }\n                    this._overlayRef.updatePosition();\n                }\n            }\n        }\n        /** Disables the display of the tooltip. */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            // If tooltip is disabled, hide immediately.\n            if (this._disabled) {\n                this.hide(0);\n            }\n        }\n        /** The message to be displayed in the tooltip */\n        get message() { return this._message; }\n        set message(value) {\n            this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n            // If the message is not a string (e.g. number), convert it to a string and trim it.\n            this._message = value != null ? `${value}`.trim() : '';\n            if (!this._message && this._isTooltipVisible()) {\n                this.hide(0);\n            }\n            else {\n                this._updateTooltipMessage();\n                this._ngZone.runOutsideAngular(() => {\n                    // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                    // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                    // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                    // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                    Promise.resolve().then(() => {\n                        this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n                    });\n                });\n            }\n        }\n        /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n        get tooltipClass() { return this._tooltipClass; }\n        set tooltipClass(value) {\n            this._tooltipClass = value;\n            if (this._tooltipInstance) {\n                this._setTooltipClass(this._tooltipClass);\n            }\n        }\n        ngAfterViewInit() {\n            // This needs to happen after view init so the initial values for all inputs have been set.\n            this._setupPointerEvents();\n            this._focusMonitor.monitor(this._elementRef)\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(origin => {\n                // Note that the focus monitor runs outside the Angular zone.\n                if (!origin) {\n                    this._ngZone.run(() => this.hide(0));\n                }\n                else if (origin === 'keyboard') {\n                    this._ngZone.run(() => this.show());\n                }\n            });\n        }\n        /**\n         * Dispose the tooltip when destroyed.\n         */\n        ngOnDestroy() {\n            const nativeElement = this._elementRef.nativeElement;\n            clearTimeout(this._touchstartTimeout);\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n                this._tooltipInstance = null;\n            }\n            // Clean up the event listeners set in the constructor\n            nativeElement.removeEventListener('keydown', this._handleKeydown);\n            this._passiveListeners.forEach((listener, event) => {\n                nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n            });\n            this._passiveListeners.clear();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._ariaDescriber.removeDescription(nativeElement, this.message);\n            this._focusMonitor.stopMonitoring(nativeElement);\n        }\n        /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n        show(delay = this.showDelay) {\n            if (this.disabled || !this.message || (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n                return;\n            }\n            const overlayRef = this._createOverlay();\n            this._detach();\n            this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n            this._tooltipInstance = overlayRef.attach(this._portal).instance;\n            this._tooltipInstance.afterHidden()\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._detach());\n            this._setTooltipClass(this._tooltipClass);\n            this._updateTooltipMessage();\n            this._tooltipInstance.show(delay);\n        }\n        /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n        hide(delay = this.hideDelay) {\n            if (this._tooltipInstance) {\n                this._tooltipInstance.hide(delay);\n            }\n        }\n        /** Shows/hides the tooltip */\n        toggle() {\n            this._isTooltipVisible() ? this.hide() : this.show();\n        }\n        /** Returns true if the tooltip is currently visible to the user */\n        _isTooltipVisible() {\n            return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n        }\n        /** Create the overlay config and position strategy */\n        _createOverlay() {\n            if (this._overlayRef) {\n                return this._overlayRef;\n            }\n            const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n            // Create connected position strategy that listens for scroll events to reposition.\n            const strategy = this._overlay.position()\n                .flexibleConnectedTo(this._elementRef)\n                .withTransformOriginOn('.mat-tooltip')\n                .withFlexibleDimensions(false)\n                .withViewportMargin(8)\n                .withScrollableContainers(scrollableAncestors);\n            strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n                if (this._tooltipInstance) {\n                    if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                        // After position changes occur and the overlay is clipped by\n                        // a parent scrollable then close the tooltip.\n                        this._ngZone.run(() => this.hide(0));\n                    }\n                }\n            });\n            this._overlayRef = this._overlay.create({\n                direction: this._dir,\n                positionStrategy: strategy,\n                panelClass: TOOLTIP_PANEL_CLASS,\n                scrollStrategy: this._scrollStrategy()\n            });\n            this._updatePosition();\n            this._overlayRef.detachments()\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._detach());\n            return this._overlayRef;\n        }\n        /** Detaches the currently-attached tooltip. */\n        _detach() {\n            if (this._overlayRef && this._overlayRef.hasAttached()) {\n                this._overlayRef.detach();\n            }\n            this._tooltipInstance = null;\n        }\n        /** Updates the position of the current tooltip. */\n        _updatePosition() {\n            const position = this._overlayRef.getConfig().positionStrategy;\n            const origin = this._getOrigin();\n            const overlay = this._getOverlayPosition();\n            position.withPositions([\n                Object.assign(Object.assign({}, origin.main), overlay.main),\n                Object.assign(Object.assign({}, origin.fallback), overlay.fallback)\n            ]);\n        }\n        /**\n         * Returns the origin position and a fallback position based on the user's position preference.\n         * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n         */\n        _getOrigin() {\n            const isLtr = !this._dir || this._dir.value == 'ltr';\n            const position = this.position;\n            let originPosition;\n            if (position == 'above' || position == 'below') {\n                originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n            }\n            else if (position == 'before' ||\n                (position == 'left' && isLtr) ||\n                (position == 'right' && !isLtr)) {\n                originPosition = { originX: 'start', originY: 'center' };\n            }\n            else if (position == 'after' ||\n                (position == 'right' && isLtr) ||\n                (position == 'left' && !isLtr)) {\n                originPosition = { originX: 'end', originY: 'center' };\n            }\n            else {\n                throw getMatTooltipInvalidPositionError(position);\n            }\n            const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n            return {\n                main: originPosition,\n                fallback: { originX: x, originY: y }\n            };\n        }\n        /** Returns the overlay position and a fallback position based on the user's preference */\n        _getOverlayPosition() {\n            const isLtr = !this._dir || this._dir.value == 'ltr';\n            const position = this.position;\n            let overlayPosition;\n            if (position == 'above') {\n                overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n            }\n            else if (position == 'below') {\n                overlayPosition = { overlayX: 'center', overlayY: 'top' };\n            }\n            else if (position == 'before' ||\n                (position == 'left' && isLtr) ||\n                (position == 'right' && !isLtr)) {\n                overlayPosition = { overlayX: 'end', overlayY: 'center' };\n            }\n            else if (position == 'after' ||\n                (position == 'right' && isLtr) ||\n                (position == 'left' && !isLtr)) {\n                overlayPosition = { overlayX: 'start', overlayY: 'center' };\n            }\n            else {\n                throw getMatTooltipInvalidPositionError(position);\n            }\n            const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n            return {\n                main: overlayPosition,\n                fallback: { overlayX: x, overlayY: y }\n            };\n        }\n        /** Updates the tooltip message and repositions the overlay according to the new message length */\n        _updateTooltipMessage() {\n            // Must wait for the message to be painted to the tooltip so that the overlay can properly\n            // calculate the correct positioning based on the size of the text.\n            if (this._tooltipInstance) {\n                this._tooltipInstance.message = this.message;\n                this._tooltipInstance._markForCheck();\n                this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                    if (this._tooltipInstance) {\n                        this._overlayRef.updatePosition();\n                    }\n                });\n            }\n        }\n        /** Updates the tooltip class */\n        _setTooltipClass(tooltipClass) {\n            if (this._tooltipInstance) {\n                this._tooltipInstance.tooltipClass = tooltipClass;\n                this._tooltipInstance._markForCheck();\n            }\n        }\n        /** Inverts an overlay position. */\n        _invertPosition(x, y) {\n            if (this.position === 'above' || this.position === 'below') {\n                if (y === 'top') {\n                    y = 'bottom';\n                }\n                else if (y === 'bottom') {\n                    y = 'top';\n                }\n            }\n            else {\n                if (x === 'end') {\n                    x = 'start';\n                }\n                else if (x === 'start') {\n                    x = 'end';\n                }\n            }\n            return { x, y };\n        }\n        /** Binds the pointer events to the tooltip trigger. */\n        _setupPointerEvents() {\n            // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n            // first tap from firing its click event or can cause the tooltip to open for clicks.\n            if (!this._platform.IOS && !this._platform.ANDROID) {\n                this._passiveListeners\n                    .set('mouseenter', () => this.show())\n                    .set('mouseleave', () => this.hide());\n            }\n            else if (this.touchGestures !== 'off') {\n                this._disableNativeGesturesIfNecessary();\n                const touchendListener = () => {\n                    clearTimeout(this._touchstartTimeout);\n                    this.hide(this._defaultOptions.touchendHideDelay);\n                };\n                this._passiveListeners\n                    .set('touchend', touchendListener)\n                    .set('touchcancel', touchendListener)\n                    .set('touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                });\n            }\n            this._passiveListeners.forEach((listener, event) => {\n                this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n            });\n        }\n        /** Disables the native browser gestures, based on how the tooltip has been configured. */\n        _disableNativeGesturesIfNecessary() {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            const gestures = this.touchGestures;\n            if (gestures !== 'off') {\n                // If gestures are set to `auto`, we don't disable text selection on inputs and\n                // textareas, because it prevents the user from typing into them on iOS Safari.\n                if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                    style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                        style.MozUserSelect = 'none';\n                }\n                // If we have `auto` gestures and the element uses native HTML dragging,\n                // we don't set `-webkit-user-drag` because it prevents the native behavior.\n                if (gestures === 'on' || !element.draggable) {\n                    style.webkitUserDrag = 'none';\n                }\n                style.touchAction = 'none';\n                style.webkitTapHighlightColor = 'transparent';\n            }\n        }\n    }\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8)); };\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\n    MatTooltip.ctorParameters = () => [\n        { type: Overlay },\n        { type: ElementRef },\n        { type: ScrollDispatcher },\n        { type: ViewContainerRef },\n        { type: NgZone },\n        { type: Platform },\n        { type: AriaDescriber },\n        { type: FocusMonitor },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] }\n    ];\n    MatTooltip.propDecorators = {\n        position: [{ type: Input, args: ['matTooltipPosition',] }],\n        disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n        showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n        hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n        touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n        message: [{ type: Input, args: ['matTooltip',] }],\n        tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n    return MatTooltip;\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nlet TooltipComponent = /** @class */ (() => {\n    class TooltipComponent {\n        constructor(_changeDetectorRef, _breakpointObserver) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._breakpointObserver = _breakpointObserver;\n            /** Property watched by the animation framework to show or hide the tooltip */\n            this._visibility = 'initial';\n            /** Whether interactions on the page should close the tooltip */\n            this._closeOnInteraction = false;\n            /** Subject for notifying that the tooltip has been hidden from the view */\n            this._onHide = new Subject();\n            /** Stream that emits whether the user has a handset-sized display.  */\n            this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n        }\n        /**\n         * Shows the tooltip with an animation originating from the provided origin\n         * @param delay Amount of milliseconds to the delay showing the tooltip.\n         */\n        show(delay) {\n            // Cancel the delayed hide if it is scheduled\n            if (this._hideTimeoutId) {\n                clearTimeout(this._hideTimeoutId);\n                this._hideTimeoutId = null;\n            }\n            // Body interactions should cancel the tooltip if there is a delay in showing.\n            this._closeOnInteraction = true;\n            this._showTimeoutId = setTimeout(() => {\n                this._visibility = 'visible';\n                this._showTimeoutId = null;\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, delay);\n        }\n        /**\n         * Begins the animation to hide the tooltip after the provided delay in ms.\n         * @param delay Amount of milliseconds to delay showing the tooltip.\n         */\n        hide(delay) {\n            // Cancel the delayed show if it is scheduled\n            if (this._showTimeoutId) {\n                clearTimeout(this._showTimeoutId);\n                this._showTimeoutId = null;\n            }\n            this._hideTimeoutId = setTimeout(() => {\n                this._visibility = 'hidden';\n                this._hideTimeoutId = null;\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, delay);\n        }\n        /** Returns an observable that notifies when the tooltip has been hidden from view. */\n        afterHidden() {\n            return this._onHide.asObservable();\n        }\n        /** Whether the tooltip is being displayed. */\n        isVisible() {\n            return this._visibility === 'visible';\n        }\n        ngOnDestroy() {\n            this._onHide.complete();\n        }\n        _animationStart() {\n            this._closeOnInteraction = false;\n        }\n        _animationDone(event) {\n            const toState = event.toState;\n            if (toState === 'hidden' && !this.isVisible()) {\n                this._onHide.next();\n            }\n            if (toState === 'visible' || toState === 'hidden') {\n                this._closeOnInteraction = true;\n            }\n        }\n        /**\n         * Interactions on the HTML body should close the tooltip immediately as defined in the\n         * material design spec.\n         * https://material.io/design/components/tooltips.html#behavior\n         */\n        _handleBodyInteraction() {\n            if (this._closeOnInteraction) {\n                this.hide(0);\n            }\n        }\n        /**\n         * Marks that the tooltip needs to be checked in the next change detection run.\n         * Mainly used for rendering the initial text before positioning a tooltip, which\n         * can be problematic in components with OnPush change detection.\n         */\n        _markForCheck() {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var tmp_0_0 = null;\n        const currVal_0 = (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", currVal_0);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\n    TooltipComponent.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: BreakpointObserver }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n    return TooltipComponent;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatTooltipModule = /** @class */ (() => {\n    class MatTooltipModule {\n    }\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); }, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatTooltipModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n//# sourceMappingURL=tooltip.js.map","import { CommonModule } from '@angular/common';\nimport { ɵɵdefineInjectable, Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, Input, Output, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { mixinDisabled, mixinInitialized } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/material/tooltip';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/material/select';\nimport * as ɵngcc6 from '@angular/material/core';\n\nfunction MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 19);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const pageSizeOption_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", pageSizeOption_r6);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", pageSizeOption_r6, \" \");\n} }\nfunction MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-form-field\", 16);\n    ɵngcc0.ɵɵelementStart(1, \"mat-select\", 17);\n    ɵngcc0.ɵɵlistener(\"selectionChange\", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7._changePageSize($event.value); });\n    ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, \"mat-option\", 18);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r3.pageSize)(\"disabled\", ctx_r3.disabled)(\"aria-label\", ctx_r3._intl.itemsPerPageLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3._displayedPageSizeOptions);\n} }\nfunction MatPaginator_div_2_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 20);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.pageSize);\n} }\nfunction MatPaginator_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, MatPaginator_div_2_mat_form_field_3_Template, 3, 5, \"mat-form-field\", 14);\n    ɵngcc0.ɵɵtemplate(4, MatPaginator_div_2_div_4_Template, 2, 1, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0._intl.itemsPerPageLabel, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length > 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length <= 1);\n} }\nfunction MatPaginator_button_6_Template(rf, ctx) { if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 21);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.firstPage(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 22);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r1._intl.firstPageLabel)(\"matTooltipDisabled\", ctx_r1._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r1._previousButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1._intl.firstPageLabel);\n} }\nfunction MatPaginator_button_13_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 23);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_13_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.lastPage(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 24);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r2._intl.lastPageLabel)(\"matTooltipDisabled\", ctx_r2._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r2._nextButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2._intl.lastPageLabel);\n} }\nlet MatPaginatorIntl = /** @class */ (() => {\n    class MatPaginatorIntl {\n        constructor() {\n            /**\n             * Stream to emit from when labels are changed. Use this to notify components when the labels have\n             * changed after initialization.\n             */\n            this.changes = new Subject();\n            /** A label for the page size selector. */\n            this.itemsPerPageLabel = 'Items per page:';\n            /** A label for the button that increments the current page. */\n            this.nextPageLabel = 'Next page';\n            /** A label for the button that decrements the current page. */\n            this.previousPageLabel = 'Previous page';\n            /** A label for the button that moves to the first page. */\n            this.firstPageLabel = 'First page';\n            /** A label for the button that moves to the last page. */\n            this.lastPageLabel = 'Last page';\n            /** A label for the range of items within the current page and the length of the whole list. */\n            this.getRangeLabel = (page, pageSize, length) => {\n                if (length == 0 || pageSize == 0) {\n                    return `0 of ${length}`;\n                }\n                length = Math.max(length, 0);\n                const startIndex = page * pageSize;\n                // If the start index exceeds the list length, do not try and fix the end index to the end.\n                const endIndex = startIndex < length ?\n                    Math.min(startIndex + pageSize, length) :\n                    startIndex + pageSize;\n                return `${startIndex + 1} – ${endIndex} of ${length}`;\n            };\n        }\n    }\nMatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) { return new (t || MatPaginatorIntl)(); };\n    MatPaginatorIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPaginatorIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n    return MatPaginatorIntl;\n})();\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {\n}\nconst _MatPaginatorBase = mixinDisabled(mixinInitialized(MatPaginatorBase));\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nlet MatPaginator = /** @class */ (() => {\n    class MatPaginator extends _MatPaginatorBase {\n        constructor(_intl, _changeDetectorRef, defaults) {\n            super();\n            this._intl = _intl;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._pageIndex = 0;\n            this._length = 0;\n            this._pageSizeOptions = [];\n            this._hidePageSize = false;\n            this._showFirstLastButtons = false;\n            /** Event emitted when the paginator changes the page size or page index. */\n            this.page = new EventEmitter();\n            this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n            if (defaults) {\n                const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n                if (pageSize != null) {\n                    this._pageSize = pageSize;\n                }\n                if (pageSizeOptions != null) {\n                    this._pageSizeOptions = pageSizeOptions;\n                }\n                if (hidePageSize != null) {\n                    this._hidePageSize = hidePageSize;\n                }\n                if (showFirstLastButtons != null) {\n                    this._showFirstLastButtons = showFirstLastButtons;\n                }\n            }\n        }\n        /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n        get pageIndex() { return this._pageIndex; }\n        set pageIndex(value) {\n            this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** The length of the total number of items that are being paginated. Defaulted to 0. */\n        get length() { return this._length; }\n        set length(value) {\n            this._length = coerceNumberProperty(value);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Number of items to display on a page. By default set to 50. */\n        get pageSize() { return this._pageSize; }\n        set pageSize(value) {\n            this._pageSize = Math.max(coerceNumberProperty(value), 0);\n            this._updateDisplayedPageSizeOptions();\n        }\n        /** The set of provided page size options to display to the user. */\n        get pageSizeOptions() { return this._pageSizeOptions; }\n        set pageSizeOptions(value) {\n            this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n            this._updateDisplayedPageSizeOptions();\n        }\n        /** Whether to hide the page size selection UI from the user. */\n        get hidePageSize() { return this._hidePageSize; }\n        set hidePageSize(value) {\n            this._hidePageSize = coerceBooleanProperty(value);\n        }\n        /** Whether to show the first/last buttons UI to the user. */\n        get showFirstLastButtons() { return this._showFirstLastButtons; }\n        set showFirstLastButtons(value) {\n            this._showFirstLastButtons = coerceBooleanProperty(value);\n        }\n        ngOnInit() {\n            this._initialized = true;\n            this._updateDisplayedPageSizeOptions();\n            this._markInitialized();\n        }\n        ngOnDestroy() {\n            this._intlChanges.unsubscribe();\n        }\n        /** Advances to the next page if it exists. */\n        nextPage() {\n            if (!this.hasNextPage()) {\n                return;\n            }\n            const previousPageIndex = this.pageIndex;\n            this.pageIndex++;\n            this._emitPageEvent(previousPageIndex);\n        }\n        /** Move back to the previous page if it exists. */\n        previousPage() {\n            if (!this.hasPreviousPage()) {\n                return;\n            }\n            const previousPageIndex = this.pageIndex;\n            this.pageIndex--;\n            this._emitPageEvent(previousPageIndex);\n        }\n        /** Move to the first page if not already there. */\n        firstPage() {\n            // hasPreviousPage being false implies at the start\n            if (!this.hasPreviousPage()) {\n                return;\n            }\n            const previousPageIndex = this.pageIndex;\n            this.pageIndex = 0;\n            this._emitPageEvent(previousPageIndex);\n        }\n        /** Move to the last page if not already there. */\n        lastPage() {\n            // hasNextPage being false implies at the end\n            if (!this.hasNextPage()) {\n                return;\n            }\n            const previousPageIndex = this.pageIndex;\n            this.pageIndex = this.getNumberOfPages() - 1;\n            this._emitPageEvent(previousPageIndex);\n        }\n        /** Whether there is a previous page. */\n        hasPreviousPage() {\n            return this.pageIndex >= 1 && this.pageSize != 0;\n        }\n        /** Whether there is a next page. */\n        hasNextPage() {\n            const maxPageIndex = this.getNumberOfPages() - 1;\n            return this.pageIndex < maxPageIndex && this.pageSize != 0;\n        }\n        /** Calculate the number of pages */\n        getNumberOfPages() {\n            if (!this.pageSize) {\n                return 0;\n            }\n            return Math.ceil(this.length / this.pageSize);\n        }\n        /**\n         * Changes the page size so that the first item displayed on the page will still be\n         * displayed using the new page size.\n         *\n         * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n         * switching so that the page size is 5 will set the third page as the current page so\n         * that the 10th item will still be displayed.\n         */\n        _changePageSize(pageSize) {\n            // Current page needs to be updated to reflect the new page size. Navigate to the page\n            // containing the previous page's first item.\n            const startIndex = this.pageIndex * this.pageSize;\n            const previousPageIndex = this.pageIndex;\n            this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n            this.pageSize = pageSize;\n            this._emitPageEvent(previousPageIndex);\n        }\n        /** Checks whether the buttons for going forwards should be disabled. */\n        _nextButtonsDisabled() {\n            return this.disabled || !this.hasNextPage();\n        }\n        /** Checks whether the buttons for going backwards should be disabled. */\n        _previousButtonsDisabled() {\n            return this.disabled || !this.hasPreviousPage();\n        }\n        /**\n         * Updates the list of page size options to display to the user. Includes making sure that\n         * the page size is an option and that the list is sorted.\n         */\n        _updateDisplayedPageSizeOptions() {\n            if (!this._initialized) {\n                return;\n            }\n            // If no page size is provided, use the first page size option or the default page size.\n            if (!this.pageSize) {\n                this._pageSize = this.pageSizeOptions.length != 0 ?\n                    this.pageSizeOptions[0] :\n                    DEFAULT_PAGE_SIZE;\n            }\n            this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n            if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n                this._displayedPageSizeOptions.push(this.pageSize);\n            }\n            // Sort the numbers using a number-specific sort function.\n            this._displayedPageSizeOptions.sort((a, b) => a - b);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n        _emitPageEvent(previousPageIndex) {\n            this.page.emit({\n                previousPageIndex,\n                pageIndex: this.pageIndex,\n                pageSize: this.pageSize,\n                length: this.length\n            });\n        }\n    }\nMatPaginator.ɵfac = function MatPaginator_Factory(t) { return new (t || MatPaginator)(ɵngcc0.ɵɵdirectiveInject(MatPaginatorIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_PAGINATOR_DEFAULT_OPTIONS, 8)); };\nMatPaginator.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatPaginator, selectors: [[\"mat-paginator\"]], hostAttrs: [1, \"mat-paginator\"], inputs: { disabled: \"disabled\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", color: \"color\" }, outputs: { page: \"page\" }, exportAs: [\"matPaginator\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 14, vars: 14, consts: [[1, \"mat-paginator-outer-container\"], [1, \"mat-paginator-container\"], [\"class\", \"mat-paginator-page-size\", 4, \"ngIf\"], [1, \"mat-paginator-range-actions\"], [1, \"mat-paginator-range-label\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-previous\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", 1, \"mat-paginator-icon\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-next\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [1, \"mat-paginator-page-size\"], [1, \"mat-paginator-page-size-label\"], [\"class\", \"mat-paginator-page-size-select\", 3, \"color\", 4, \"ngIf\"], [\"class\", \"mat-paginator-page-size-value\", 4, \"ngIf\"], [1, \"mat-paginator-page-size-select\", 3, \"color\"], [3, \"value\", \"disabled\", \"aria-label\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"mat-paginator-page-size-value\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"]], template: function MatPaginator_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_Template, 5, 3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, MatPaginator_button_6_Template, 3, 5, \"button\", 5);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_7_listener() { return ctx.previousPage(); });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(8, \"svg\", 7);\n        ɵngcc0.ɵɵelement(9, \"path\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelementStart(10, \"button\", 9);\n        ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_10_listener() { return ctx.nextPage(); });\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(11, \"svg\", 7);\n        ɵngcc0.ɵɵelement(12, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(13, MatPaginator_button_13_Template, 3, 5, \"button\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hidePageSize);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length), \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.previousPageLabel)(\"matTooltipDisabled\", ctx._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._previousButtonsDisabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.previousPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.nextPageLabel)(\"matTooltipDisabled\", ctx._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._nextButtonsDisabled());\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.nextPageLabel);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton, ɵngcc3.MatTooltip, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc1.NgForOf, ɵngcc6.MatOption], styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatPaginator.ctorParameters = () => [\n        { type: MatPaginatorIntl },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PAGINATOR_DEFAULT_OPTIONS,] }] }\n    ];\n    MatPaginator.propDecorators = {\n        color: [{ type: Input }],\n        pageIndex: [{ type: Input }],\n        length: [{ type: Input }],\n        pageSize: [{ type: Input }],\n        pageSizeOptions: [{ type: Input }],\n        hidePageSize: [{ type: Input }],\n        showFirstLastButtons: [{ type: Input }],\n        page: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPaginator, [{\n        type: Component,\n        args: [{\n                selector: 'mat-paginator',\n                exportAs: 'matPaginator',\n                template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-paginator'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"]\n            }]\n    }], function () { return [{ type: MatPaginatorIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n            }] }]; }, { page: [{\n            type: Output\n        }], pageIndex: [{\n            type: Input\n        }], length: [{\n            type: Input\n        }], pageSize: [{\n            type: Input\n        }], pageSizeOptions: [{\n            type: Input\n        }], hidePageSize: [{\n            type: Input\n        }], showFirstLastButtons: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n    return MatPaginator;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatPaginatorModule = /** @class */ (() => {\n    class MatPaginatorModule {\n    }\nMatPaginatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatPaginatorModule });\nMatPaginatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatPaginatorModule_Factory(t) { return new (t || MatPaginatorModule)(); }, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [[\n            CommonModule,\n            MatButtonModule,\n            MatSelectModule,\n            MatTooltipModule,\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPaginatorModule, { declarations: function () { return [MatPaginator]; }, imports: function () { return [CommonModule,\n        MatButtonModule,\n        MatSelectModule,\n        MatTooltipModule]; }, exports: function () { return [MatPaginator]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatPaginatorModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatSelectModule,\n                    MatTooltipModule,\n                ],\n                exports: [MatPaginator],\n                declarations: [MatPaginator],\n                providers: [MAT_PAGINATOR_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatPaginatorModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent };\n\n//# sourceMappingURL=paginator.js.map","import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nlet MatProgressSpinner = /** @class */ (() => {\n    class MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n        constructor(_elementRef, platform, _document, animationMode, defaults) {\n            super(_elementRef);\n            this._elementRef = _elementRef;\n            this._document = _document;\n            this._diameter = BASE_SIZE;\n            this._value = 0;\n            this._fallbackAnimation = false;\n            /** Mode of the progress circle */\n            this.mode = 'determinate';\n            const trackedDiameters = MatProgressSpinner._diameters;\n            // The base size is already inserted via the component's structural styles. We still\n            // need to track it so we don't end up adding the same styles again.\n            if (!trackedDiameters.has(_document.head)) {\n                trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n            }\n            this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n            this._noopAnimations = animationMode === 'NoopAnimations' &&\n                (!!defaults && !defaults._forceAnimations);\n            if (defaults) {\n                if (defaults.diameter) {\n                    this.diameter = defaults.diameter;\n                }\n                if (defaults.strokeWidth) {\n                    this.strokeWidth = defaults.strokeWidth;\n                }\n            }\n        }\n        /** The diameter of the progress spinner (will set width and height of svg). */\n        get diameter() { return this._diameter; }\n        set diameter(size) {\n            this._diameter = coerceNumberProperty(size);\n            // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n            if (!this._fallbackAnimation && this._styleRoot) {\n                this._attachStyleNode();\n            }\n        }\n        /** Stroke width of the progress spinner. */\n        get strokeWidth() {\n            return this._strokeWidth || this.diameter / 10;\n        }\n        set strokeWidth(value) {\n            this._strokeWidth = coerceNumberProperty(value);\n        }\n        /** Value of the progress circle. */\n        get value() {\n            return this.mode === 'determinate' ? this._value : 0;\n        }\n        set value(newValue) {\n            this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n        }\n        ngOnInit() {\n            const element = this._elementRef.nativeElement;\n            // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n            // Angular seems to create the element outside the shadow root and then moves it inside, if the\n            // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n            this._styleRoot = _getShadowRoot(element) || this._document.head;\n            this._attachStyleNode();\n            // On IE and Edge, we can't animate the `stroke-dashoffset`\n            // reliably so we fall back to a non-spec animation.\n            const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n            element.classList.add(animationClass);\n        }\n        /** The radius of the spinner, adjusted for stroke width. */\n        get _circleRadius() {\n            return (this.diameter - BASE_STROKE_WIDTH) / 2;\n        }\n        /** The view box of the spinner's svg element. */\n        get _viewBox() {\n            const viewBox = this._circleRadius * 2 + this.strokeWidth;\n            return `0 0 ${viewBox} ${viewBox}`;\n        }\n        /** The stroke circumference of the svg circle. */\n        get _strokeCircumference() {\n            return 2 * Math.PI * this._circleRadius;\n        }\n        /** The dash offset of the svg circle. */\n        get _strokeDashOffset() {\n            if (this.mode === 'determinate') {\n                return this._strokeCircumference * (100 - this._value) / 100;\n            }\n            // In fallback mode set the circle to 80% and rotate it with CSS.\n            if (this._fallbackAnimation && this.mode === 'indeterminate') {\n                return this._strokeCircumference * 0.2;\n            }\n            return null;\n        }\n        /** Stroke width of the circle in percent. */\n        get _circleStrokeWidth() {\n            return this.strokeWidth / this.diameter * 100;\n        }\n        /** Dynamically generates a style tag containing the correct animation for this diameter. */\n        _attachStyleNode() {\n            const styleRoot = this._styleRoot;\n            const currentDiameter = this._diameter;\n            const diameters = MatProgressSpinner._diameters;\n            let diametersForElement = diameters.get(styleRoot);\n            if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n                const styleTag = this._document.createElement('style');\n                styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n                styleTag.textContent = this._getAnimationText();\n                styleRoot.appendChild(styleTag);\n                if (!diametersForElement) {\n                    diametersForElement = new Set();\n                    diameters.set(styleRoot, diametersForElement);\n                }\n                diametersForElement.add(currentDiameter);\n            }\n        }\n        /** Generates animation styles adjusted for the spinner's diameter. */\n        _getAnimationText() {\n            return INDETERMINATE_ANIMATION_TEMPLATE\n                // Animation should begin at 5% and end at 80%\n                .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n                .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n                .replace(/DIAMETER/g, `${this.diameter}`);\n        }\n    }\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n    /**\n     * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n     * We need to keep track of which elements the diameters were attached to, because for\n     * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n     * than the document head.\n     */\n    MatProgressSpinner._diameters = new WeakMap();\n    MatProgressSpinner.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n    ];\n    MatProgressSpinner.propDecorators = {\n        diameter: [{ type: Input }],\n        strokeWidth: [{ type: Input }],\n        mode: [{ type: Input }],\n        value: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n    return MatProgressSpinner;\n})();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nlet MatSpinner = /** @class */ (() => {\n    class MatSpinner extends MatProgressSpinner {\n        constructor(elementRef, platform, document, animationMode, defaults) {\n            super(elementRef, platform, document, animationMode, defaults);\n            this.mode = 'indeterminate';\n        }\n    }\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSpinner.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return MatSpinner;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatProgressSpinnerModule = /** @class */ (() => {\n    class MatProgressSpinnerModule {\n    }\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); }, imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n    return MatProgressSpinnerModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, Optional, ElementRef, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nlet _MatRadioGroupBase = /** @class */ (() => {\n    class _MatRadioGroupBase {\n        constructor(_changeDetector) {\n            this._changeDetector = _changeDetector;\n            /** Selected value for the radio group. */\n            this._value = null;\n            /** The HTML name attribute applied to radio buttons in this group. */\n            this._name = `mat-radio-group-${nextUniqueId++}`;\n            /** The currently selected radio button. Should match value. */\n            this._selected = null;\n            /** Whether the `value` has been set to its initial value. */\n            this._isInitialized = false;\n            /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n            this._labelPosition = 'after';\n            /** Whether the radio group is disabled. */\n            this._disabled = false;\n            /** Whether the radio group is required. */\n            this._required = false;\n            /** The method to be called in order to update ngModel */\n            this._controlValueAccessorChangeFn = () => { };\n            /**\n             * onTouch function registered via registerOnTouch (ControlValueAccessor).\n             * @docs-private\n             */\n            this.onTouched = () => { };\n            /**\n             * Event emitted when the group value changes.\n             * Change events are only emitted when the value changes due to user interaction with\n             * a radio button (the same behavior as `<input type-\"radio\">`).\n             */\n            this.change = new EventEmitter();\n        }\n        /** Name of the radio button group. All radio buttons inside this group will use this name. */\n        get name() { return this._name; }\n        set name(value) {\n            this._name = value;\n            this._updateRadioButtonNames();\n        }\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        get labelPosition() {\n            return this._labelPosition;\n        }\n        set labelPosition(v) {\n            this._labelPosition = v === 'before' ? 'before' : 'after';\n            this._markRadiosForCheck();\n        }\n        /**\n         * Value for the radio-group. Should equal the value of the selected radio button if there is\n         * a corresponding radio button with a matching value. If there is not such a corresponding\n         * radio button, this value persists to be applied in case a new radio button is added with a\n         * matching value.\n         */\n        get value() { return this._value; }\n        set value(newValue) {\n            if (this._value !== newValue) {\n                // Set this before proceeding to ensure no circular loop occurs with selection.\n                this._value = newValue;\n                this._updateSelectedRadioFromValue();\n                this._checkSelectedRadioButton();\n            }\n        }\n        _checkSelectedRadioButton() {\n            if (this._selected && !this._selected.checked) {\n                this._selected.checked = true;\n            }\n        }\n        /**\n         * The currently selected radio button. If set to a new radio button, the radio group value\n         * will be updated to match the new selected button.\n         */\n        get selected() { return this._selected; }\n        set selected(selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n            this._checkSelectedRadioButton();\n        }\n        /** Whether the radio group is disabled */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._markRadiosForCheck();\n        }\n        /** Whether the radio group is required */\n        get required() { return this._required; }\n        set required(value) {\n            this._required = coerceBooleanProperty(value);\n            this._markRadiosForCheck();\n        }\n        /**\n         * Initialize properties once content children are available.\n         * This allows us to propagate relevant attributes to associated buttons.\n         */\n        ngAfterContentInit() {\n            // Mark this component as initialized in AfterContentInit because the initial value can\n            // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n            // NgModel occurs *after* the OnInit of the MatRadioGroup.\n            this._isInitialized = true;\n        }\n        /**\n         * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n         * radio buttons upon their blur.\n         */\n        _touch() {\n            if (this.onTouched) {\n                this.onTouched();\n            }\n        }\n        _updateRadioButtonNames() {\n            if (this._radios) {\n                this._radios.forEach(radio => {\n                    radio.name = this.name;\n                    radio._markForCheck();\n                });\n            }\n        }\n        /** Updates the `selected` radio button from the internal _value state. */\n        _updateSelectedRadioFromValue() {\n            // If the value already matches the selected radio, do nothing.\n            const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n            if (this._radios && !isAlreadySelected) {\n                this._selected = null;\n                this._radios.forEach(radio => {\n                    radio.checked = this.value === radio.value;\n                    if (radio.checked) {\n                        this._selected = radio;\n                    }\n                });\n            }\n        }\n        /** Dispatch change event with current selection and group value. */\n        _emitChangeEvent() {\n            if (this._isInitialized) {\n                this.change.emit(new MatRadioChange(this._selected, this._value));\n            }\n        }\n        _markRadiosForCheck() {\n            if (this._radios) {\n                this._radios.forEach(radio => radio._markForCheck());\n            }\n        }\n        /**\n         * Sets the model value. Implemented as part of ControlValueAccessor.\n         * @param value\n         */\n        writeValue(value) {\n            this.value = value;\n            this._changeDetector.markForCheck();\n        }\n        /**\n         * Registers a callback to be triggered when the model value changes.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        registerOnChange(fn) {\n            this._controlValueAccessorChangeFn = fn;\n        }\n        /**\n         * Registers a callback to be triggered when the control is touched.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        registerOnTouched(fn) {\n            this.onTouched = fn;\n        }\n        /**\n         * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n         * @param isDisabled Whether the control should be disabled.\n         */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetector.markForCheck();\n        }\n    }\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n    _MatRadioGroupBase.ctorParameters = () => [\n        { type: ChangeDetectorRef }\n    ];\n    _MatRadioGroupBase.propDecorators = {\n        change: [{ type: Output }],\n        color: [{ type: Input }],\n        name: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        value: [{ type: Input }],\n        selected: [{ type: Input }],\n        disabled: [{ type: Input }],\n        required: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n    return _MatRadioGroupBase;\n})();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nlet MatRadioGroup = /** @class */ (() => {\n    class MatRadioGroup extends _MatRadioGroupBase {\n    }\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) { return ɵMatRadioGroup_BaseFactory(t || MatRadioGroup); };\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatRadioGroup.propDecorators = {\n        _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n    };\nconst ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n    return MatRadioGroup;\n})();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nlet _MatRadioButtonBase = /** @class */ (() => {\n    class _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n        constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n            super(elementRef);\n            this._changeDetector = _changeDetector;\n            this._focusMonitor = _focusMonitor;\n            this._radioDispatcher = _radioDispatcher;\n            this._animationMode = _animationMode;\n            this._providerOverride = _providerOverride;\n            this._uniqueId = `mat-radio-${++nextUniqueId}`;\n            /** The unique ID for the radio button. */\n            this.id = this._uniqueId;\n            /**\n             * Event emitted when the checked state of this radio button changes.\n             * Change events are only emitted when the value changes due to user interaction with\n             * the radio button (the same behavior as `<input type-\"radio\">`).\n             */\n            this.change = new EventEmitter();\n            /** Whether this radio is checked. */\n            this._checked = false;\n            /** Value assigned to this radio. */\n            this._value = null;\n            /** Unregister function for _radioDispatcher */\n            this._removeUniqueSelectionListener = () => { };\n            // Assertions. Ideally these should be stripped out by the compiler.\n            // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n            this.radioGroup = radioGroup;\n            this._removeUniqueSelectionListener =\n                _radioDispatcher.listen((id, name) => {\n                    if (id !== this.id && name === this.name) {\n                        this.checked = false;\n                    }\n                });\n        }\n        /** Whether this radio button is checked. */\n        get checked() { return this._checked; }\n        set checked(value) {\n            const newCheckedState = coerceBooleanProperty(value);\n            if (this._checked !== newCheckedState) {\n                this._checked = newCheckedState;\n                if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                    this.radioGroup.selected = this;\n                }\n                else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                    // When unchecking the selected radio button, update the selected radio\n                    // property on the group.\n                    this.radioGroup.selected = null;\n                }\n                if (newCheckedState) {\n                    // Notify all radio buttons with the same name to un-check.\n                    this._radioDispatcher.notify(this.id, this.name);\n                }\n                this._changeDetector.markForCheck();\n            }\n        }\n        /** The value of this radio button. */\n        get value() { return this._value; }\n        set value(value) {\n            if (this._value !== value) {\n                this._value = value;\n                if (this.radioGroup !== null) {\n                    if (!this.checked) {\n                        // Update checked when the value changed to match the radio group's value\n                        this.checked = this.radioGroup.value === value;\n                    }\n                    if (this.checked) {\n                        this.radioGroup.selected = this;\n                    }\n                }\n            }\n        }\n        /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n        get labelPosition() {\n            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n        }\n        set labelPosition(value) {\n            this._labelPosition = value;\n        }\n        /** Whether the radio button is disabled. */\n        get disabled() {\n            return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n        }\n        set disabled(value) {\n            this._setDisabled(coerceBooleanProperty(value));\n        }\n        /** Whether the radio button is required. */\n        get required() {\n            return this._required || (this.radioGroup && this.radioGroup.required);\n        }\n        set required(value) {\n            this._required = coerceBooleanProperty(value);\n        }\n        /** Theme color of the radio button. */\n        get color() {\n            return this._color ||\n                (this.radioGroup && this.radioGroup.color) ||\n                this._providerOverride && this._providerOverride.color || 'accent';\n        }\n        set color(newValue) { this._color = newValue; }\n        /** ID of the native input element inside `<mat-radio-button>` */\n        get inputId() { return `${this.id || this._uniqueId}-input`; }\n        /** Focuses the radio button. */\n        focus(options) {\n            this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n        }\n        /**\n         * Marks the radio button as needing checking for change detection.\n         * This method is exposed because the parent radio group will directly\n         * update bound properties of the radio button.\n         */\n        _markForCheck() {\n            // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n            // update radio button's status\n            this._changeDetector.markForCheck();\n        }\n        ngOnInit() {\n            if (this.radioGroup) {\n                // If the radio is inside a radio group, determine if it should be checked\n                this.checked = this.radioGroup.value === this._value;\n                // Copy name from parent radio group\n                this.name = this.radioGroup.name;\n            }\n        }\n        ngAfterViewInit() {\n            this._focusMonitor\n                .monitor(this._elementRef, true)\n                .subscribe(focusOrigin => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup._touch();\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            this._removeUniqueSelectionListener();\n        }\n        /** Dispatch change event with current value. */\n        _emitChangeEvent() {\n            this.change.emit(new MatRadioChange(this, this._value));\n        }\n        _isRippleDisabled() {\n            return this.disableRipple || this.disabled;\n        }\n        _onInputClick(event) {\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `radio-button` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n        }\n        /**\n         * Triggered when the radio button received a click or the input recognized any change.\n         * Clicking on a label element, will trigger a change event on the associated input.\n         */\n        _onInputChange(event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the `change` output.\n            event.stopPropagation();\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n        /** Sets the disabled state and marks for check if a change occurred. */\n        _setDisabled(value) {\n            if (this._disabled !== value) {\n                this._disabled = value;\n                this._changeDetector.markForCheck();\n            }\n        }\n    }\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8)); };\n_MatRadioButtonBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    _MatRadioButtonBase.ctorParameters = () => [\n        { type: _MatRadioGroupBase, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusMonitor },\n        { type: UniqueSelectionDispatcher },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n    ];\n    _MatRadioButtonBase.propDecorators = {\n        id: [{ type: Input }],\n        name: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n        checked: [{ type: Input }],\n        value: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        disabled: [{ type: Input }],\n        required: [{ type: Input }],\n        color: [{ type: Input }],\n        change: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n    return _MatRadioButtonBase;\n})();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nlet MatRadioButton = /** @class */ (() => {\n    class MatRadioButton extends _MatRadioButtonBase {\n        constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride) {\n            super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride);\n        }\n    }\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8)); };\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatRadioButton.ctorParameters = () => [\n        { type: MatRadioGroup, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: FocusMonitor },\n        { type: UniqueSelectionDispatcher },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n    return MatRadioButton;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatRadioModule = /** @class */ (() => {\n    class MatRadioModule {\n    }\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); }, imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n    return MatRadioModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n//# sourceMappingURL=radio.js.map","import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, takeUntil, distinctUntilChanged, map, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\n\nconst _c0 = [\"*\"];\nfunction MatDrawerContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\nfunction MatSidenavContainer_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2._onBackdropClicked(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n} }\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nlet MatDrawerContent = /** @class */ (() => {\n    class MatDrawerContent extends CdkScrollable {\n        constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n            super(elementRef, scrollDispatcher, ngZone);\n            this._changeDetectorRef = _changeDetectorRef;\n            this._container = _container;\n        }\n        ngAfterContentInit() {\n            this._container._contentMarginChanges.subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) { return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatDrawerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContent, selectors: [[\"mat-drawer-content\"]], hostAttrs: [1, \"mat-drawer-content\"], hostVars: 4, hostBindings: function MatDrawerContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatDrawerContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\n    MatDrawerContent.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatDrawerContainer),] }] },\n        { type: ElementRef },\n        { type: ScrollDispatcher },\n        { type: NgZone }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDrawerContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatDrawerContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatDrawerContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n    return MatDrawerContent;\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nlet MatDrawer = /** @class */ (() => {\n    class MatDrawer {\n        constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, \n        /**\n         * @deprecated `_container` parameter to be made required.\n         * @breaking-change 10.0.0\n         */\n        _container) {\n            this._elementRef = _elementRef;\n            this._focusTrapFactory = _focusTrapFactory;\n            this._focusMonitor = _focusMonitor;\n            this._platform = _platform;\n            this._ngZone = _ngZone;\n            this._doc = _doc;\n            this._container = _container;\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            /** Whether the drawer is initialized. Used for disabling the initial animation. */\n            this._enableAnimations = false;\n            this._position = 'start';\n            this._mode = 'over';\n            this._disableClose = false;\n            this._opened = false;\n            /** Emits whenever the drawer has started animating. */\n            this._animationStarted = new Subject();\n            /** Emits whenever the drawer is done animating. */\n            this._animationEnd = new Subject();\n            /** Current state of the sidenav animation. */\n            // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n            // metadata is not inherited by child classes, instead the host binding data is defined in a way\n            // that can be inherited.\n            // tslint:disable:no-host-decorator-in-concrete\n            this._animationState = 'void';\n            /** Event emitted when the drawer open state is changed. */\n            this.openedChange = \n            // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n            new EventEmitter(/* isAsync */ true);\n            /** Emits when the component is destroyed. */\n            this._destroyed = new Subject();\n            /** Event emitted when the drawer's position changes. */\n            // tslint:disable-next-line:no-output-on-prefix\n            this.onPositionChanged = new EventEmitter();\n            /**\n             * An observable that emits when the drawer mode changes. This is used by the drawer container to\n             * to know when to when the mode changes so it can adapt the margins on the content.\n             */\n            this._modeChanged = new Subject();\n            this.openedChange.subscribe((opened) => {\n                if (opened) {\n                    if (this._doc) {\n                        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                    }\n                    this._takeFocus();\n                }\n                else if (this._isFocusWithinDrawer()) {\n                    this._restoreFocus();\n                }\n            });\n            /**\n             * Listen to `keydown` events outside the zone so that change detection is not run every\n             * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n             * and we don't have close disabled.\n             */\n            this._ngZone.runOutsideAngular(() => {\n                fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n                    return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n                }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n                    this.close();\n                    event.stopPropagation();\n                    event.preventDefault();\n                }));\n            });\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe((event) => {\n                const { fromState, toState } = event;\n                if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                    (toState === 'void' && fromState.indexOf('open') === 0)) {\n                    this.openedChange.emit(this._opened);\n                }\n            });\n        }\n        /** The side that the drawer is attached to. */\n        get position() { return this._position; }\n        set position(value) {\n            // Make sure we have a valid value.\n            value = value === 'end' ? 'end' : 'start';\n            if (value != this._position) {\n                this._position = value;\n                this.onPositionChanged.emit();\n            }\n        }\n        /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n        get mode() { return this._mode; }\n        set mode(value) {\n            this._mode = value;\n            this._updateFocusTrapState();\n            this._modeChanged.next();\n        }\n        /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n        get disableClose() { return this._disableClose; }\n        set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n        /**\n         * Whether the drawer should focus the first focusable element automatically when opened.\n         * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n         * enabled, focus will be moved into the sidenav in `side` mode as well.\n         */\n        get autoFocus() {\n            const value = this._autoFocus;\n            // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n            // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n            // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n            return value == null ? this.mode !== 'side' : value;\n        }\n        set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n        /**\n         * Whether the drawer is opened. We overload this because we trigger an event when it\n         * starts or end.\n         */\n        get opened() { return this._opened; }\n        set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n        /** Event emitted when the drawer has been opened. */\n        get _openedStream() {\n            return this.openedChange.pipe(filter(o => o), map(() => { }));\n        }\n        /** Event emitted when the drawer has started opening. */\n        get openedStart() {\n            return this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), map(() => { }));\n        }\n        /** Event emitted when the drawer has been closed. */\n        get _closedStream() {\n            return this.openedChange.pipe(filter(o => !o), map(() => { }));\n        }\n        /** Event emitted when the drawer has started closing. */\n        get closedStart() {\n            return this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), map(() => { }));\n        }\n        /**\n         * Moves focus into the drawer. Note that this works even if\n         * the focus trap is disabled in `side` mode.\n         */\n        _takeFocus() {\n            if (!this.autoFocus || !this._focusTrap) {\n                return;\n            }\n            this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n                // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n                // still works. We need to check that `focus` is a function due to Universal.\n                if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                    this._elementRef.nativeElement.focus();\n                }\n            });\n        }\n        /**\n         * Restores focus to the element that was originally focused when the drawer opened.\n         * If no element was focused at that time, the focus will be restored to the drawer.\n         */\n        _restoreFocus() {\n            if (!this.autoFocus) {\n                return;\n            }\n            // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n            if (this._elementFocusedBeforeDrawerWasOpened) {\n                this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n            }\n            else {\n                this._elementRef.nativeElement.blur();\n            }\n            this._elementFocusedBeforeDrawerWasOpened = null;\n            this._openedVia = null;\n        }\n        /** Whether focus is currently within the drawer. */\n        _isFocusWithinDrawer() {\n            var _a;\n            const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n            return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n        }\n        ngAfterContentInit() {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            this._updateFocusTrapState();\n        }\n        ngAfterContentChecked() {\n            // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n            // drawers that are open by default. When we're on the server, we shouldn't enable the\n            // animations, because we don't want the drawer to animate the first time the user sees\n            // the page.\n            if (this._platform.isBrowser) {\n                this._enableAnimations = true;\n            }\n        }\n        ngOnDestroy() {\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n            this._animationStarted.complete();\n            this._animationEnd.complete();\n            this._modeChanged.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /**\n         * Open the drawer.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        open(openedVia) {\n            return this.toggle(true, openedVia);\n        }\n        /** Close the drawer. */\n        close() {\n            return this.toggle(false);\n        }\n        /** Closes the drawer with context that the backdrop was clicked. */\n        _closeViaBackdropClick() {\n            // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n            // don't need to check whether focus is currently in the drawer, as clicking on the\n            // backdrop causes blurring of the active element.\n            return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);\n        }\n        /**\n         * Toggle this drawer.\n         * @param isOpen Whether the drawer should be open.\n         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n         * Used for focus management after the sidenav is closed.\n         */\n        toggle(isOpen = !this.opened, openedVia) {\n            // If the focus is currently inside the drawer content and we are closing the drawer,\n            // restore the focus to the initially focused element (when the drawer opened).\n            return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);\n        }\n        /**\n         * Toggles the opened state of the drawer.\n         * @param isOpen Whether the drawer should open or close.\n         * @param restoreFocus Whether focus should be restored on close.\n         * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n         *   origin will be used later when focus is restored on drawer close.\n         */\n        _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n            this._opened = isOpen;\n            if (isOpen) {\n                this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n                this._openedVia = openedVia;\n            }\n            else {\n                this._animationState = 'void';\n                if (restoreFocus) {\n                    this._restoreFocus();\n                }\n            }\n            this._updateFocusTrapState();\n            return new Promise(resolve => {\n                this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n            });\n        }\n        get _width() {\n            return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n        }\n        /** Updates the enabled state of the focus trap. */\n        _updateFocusTrapState() {\n            if (this._focusTrap) {\n                // The focus trap is only enabled when the drawer is open in any mode other than side.\n                this._focusTrap.enabled = this.opened && this.mode !== 'side';\n            }\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _animationStartListener(event) {\n            this._animationStarted.next(event);\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _animationDoneListener(event) {\n            this._animationEnd.next(event);\n        }\n    }\nMatDrawer.ɵfac = function MatDrawer_Factory(t) { return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8)); };\nMatDrawer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDrawer, selectors: [[\"mat-drawer\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"], hostVars: 12, hostBindings: function MatDrawer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) { return ctx._animationStartListener($event); })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) { return ctx._animationDoneListener($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@transform\", ctx._animationState);\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n    } }, inputs: { position: \"position\", mode: \"mode\", disableClose: \"disableClose\", autoFocus: \"autoFocus\", opened: \"opened\" }, outputs: { openedChange: \"openedChange\", onPositionChanged: \"positionChanged\", _openedStream: \"opened\", openedStart: \"openedStart\", _closedStream: \"closed\", closedStart: \"closedStart\" }, exportAs: [\"matDrawer\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-drawer-inner-container\"]], template: function MatDrawer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\n    MatDrawer.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusTrapFactory },\n        { type: FocusMonitor },\n        { type: Platform },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: MatDrawerContainer, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n    ];\n    MatDrawer.propDecorators = {\n        position: [{ type: Input }],\n        mode: [{ type: Input }],\n        disableClose: [{ type: Input }],\n        autoFocus: [{ type: Input }],\n        opened: [{ type: Input }],\n        _animationState: [{ type: HostBinding, args: ['@transform',] }],\n        openedChange: [{ type: Output }],\n        _openedStream: [{ type: Output, args: ['opened',] }],\n        openedStart: [{ type: Output }],\n        _closedStream: [{ type: Output, args: ['closed',] }],\n        closedStart: [{ type: Output }],\n        onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n        _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n        _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDrawer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    'tabIndex': '-1'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.FocusTrapFactory }, { type: ɵngcc2.FocusMonitor }, { type: ɵngcc3.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDrawerContainer, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DRAWER_CONTAINER]\n            }] }]; }, { _animationState: [{\n            type: HostBinding,\n            args: ['@transform']\n        }], openedChange: [{\n            type: Output\n        }], onPositionChanged: [{\n            type: Output,\n            args: ['positionChanged']\n        }], position: [{\n            type: Input\n        }], mode: [{\n            type: Input\n        }], disableClose: [{\n            type: Input\n        }], autoFocus: [{\n            type: Input\n        }], opened: [{\n            type: Input\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], openedStart: [{\n            type: Output\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], closedStart: [{\n            type: Output\n        }], _animationStartListener: [{\n            type: HostListener,\n            args: ['@transform.start', ['$event']]\n        }], _animationDoneListener: [{\n            type: HostListener,\n            args: ['@transform.done', ['$event']]\n        }] }); })();\n    return MatDrawer;\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nlet MatDrawerContainer = /** @class */ (() => {\n    class MatDrawerContainer {\n        constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n            this._dir = _dir;\n            this._element = _element;\n            this._ngZone = _ngZone;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._animationMode = _animationMode;\n            /** Drawers that belong to this container. */\n            this._drawers = new QueryList();\n            /** Event emitted when the drawer backdrop is clicked. */\n            this.backdropClick = new EventEmitter();\n            /** Emits when the component is destroyed. */\n            this._destroyed = new Subject();\n            /** Emits on every ngDoCheck. Used for debouncing reflows. */\n            this._doCheckSubject = new Subject();\n            /**\n             * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n             * drawer is open. We use margin rather than transform even for push mode because transform breaks\n             * fixed position elements inside of the transformed element.\n             */\n            this._contentMargins = { left: null, right: null };\n            this._contentMarginChanges = new Subject();\n            // If a `Dir` directive exists up the tree, listen direction changes\n            // and update the left/right properties to point to the proper start/end.\n            if (_dir) {\n                _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                    this._validateDrawers();\n                    this.updateContentMargins();\n                });\n            }\n            // Since the minimum width of the sidenav depends on the viewport width,\n            // we need to recompute the margins if the viewport changes.\n            viewportRuler.change()\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this.updateContentMargins());\n            this._autosize = defaultAutosize;\n        }\n        /** The drawer child with the `start` position. */\n        get start() { return this._start; }\n        /** The drawer child with the `end` position. */\n        get end() { return this._end; }\n        /**\n         * Whether to automatically resize the container whenever\n         * the size of any of its drawers changes.\n         *\n         * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n         * the drawers on every change detection cycle. Can be configured globally via the\n         * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n         */\n        get autosize() { return this._autosize; }\n        set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n        /**\n         * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n         * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n         * mode as well.\n         */\n        get hasBackdrop() {\n            if (this._backdropOverride == null) {\n                return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n            }\n            return this._backdropOverride;\n        }\n        set hasBackdrop(value) {\n            this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n        }\n        /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n        get scrollable() {\n            return this._userContent || this._content;\n        }\n        ngAfterContentInit() {\n            this._allDrawers.changes\n                .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n                .subscribe((drawer) => {\n                // @breaking-change 10.0.0 Remove `_container` check once container parameter is required.\n                this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n                this._drawers.notifyOnChanges();\n            });\n            this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n                this._validateDrawers();\n                this._drawers.forEach((drawer) => {\n                    this._watchDrawerToggle(drawer);\n                    this._watchDrawerPosition(drawer);\n                    this._watchDrawerMode(drawer);\n                });\n                if (!this._drawers.length ||\n                    this._isDrawerOpen(this._start) ||\n                    this._isDrawerOpen(this._end)) {\n                    this.updateContentMargins();\n                }\n                this._changeDetectorRef.markForCheck();\n            });\n            this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n        }\n        ngOnDestroy() {\n            this._contentMarginChanges.complete();\n            this._doCheckSubject.complete();\n            this._drawers.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Calls `open` of both start and end drawers */\n        open() {\n            this._drawers.forEach(drawer => drawer.open());\n        }\n        /** Calls `close` of both start and end drawers */\n        close() {\n            this._drawers.forEach(drawer => drawer.close());\n        }\n        /**\n         * Recalculates and updates the inline styles for the content. Note that this should be used\n         * sparingly, because it causes a reflow.\n         */\n        updateContentMargins() {\n            // 1. For drawers in `over` mode, they don't affect the content.\n            // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n            //    left margin (for left drawer) or right margin (for right the drawer).\n            // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n            //    adding to the left or right margin and simultaneously subtracting the same amount of\n            //    margin from the other side.\n            let left = 0;\n            let right = 0;\n            if (this._left && this._left.opened) {\n                if (this._left.mode == 'side') {\n                    left += this._left._width;\n                }\n                else if (this._left.mode == 'push') {\n                    const width = this._left._width;\n                    left += width;\n                    right -= width;\n                }\n            }\n            if (this._right && this._right.opened) {\n                if (this._right.mode == 'side') {\n                    right += this._right._width;\n                }\n                else if (this._right.mode == 'push') {\n                    const width = this._right._width;\n                    right += width;\n                    left -= width;\n                }\n            }\n            // If either `right` or `left` is zero, don't set a style to the element. This\n            // allows users to specify a custom size via CSS class in SSR scenarios where the\n            // measured widths will always be zero. Note that we reset to `null` here, rather\n            // than below, in order to ensure that the types in the `if` below are consistent.\n            left = left || null;\n            right = right || null;\n            if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n                this._contentMargins = { left, right };\n                // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n                // to do it only when something changed, otherwise we can end up hitting the zone too often.\n                this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n            }\n        }\n        ngDoCheck() {\n            // If users opted into autosizing, do a check every change detection cycle.\n            if (this._autosize && this._isPushed()) {\n                // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n                this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n            }\n        }\n        /**\n         * Subscribes to drawer events in order to set a class on the main container element when the\n         * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n         * is properly hidden.\n         */\n        _watchDrawerToggle(drawer) {\n            drawer._animationStarted.pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n                .subscribe((event) => {\n                // Set the transition class on the container so that the animations occur. This should not\n                // be set initially because animations should only be triggered via a change in state.\n                if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                    this._element.nativeElement.classList.add('mat-drawer-transition');\n                }\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n            if (drawer.mode !== 'side') {\n                drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n            }\n        }\n        /**\n         * Subscribes to drawer onPositionChanged event in order to\n         * re-validate drawers when the position changes.\n         */\n        _watchDrawerPosition(drawer) {\n            if (!drawer) {\n                return;\n            }\n            // NOTE: We need to wait for the microtask queue to be empty before validating,\n            // since both drawers may be swapping positions at the same time.\n            drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n                this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n                    this._validateDrawers();\n                });\n            });\n        }\n        /** Subscribes to changes in drawer mode so we can run change detection. */\n        _watchDrawerMode(drawer) {\n            if (drawer) {\n                drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                    .subscribe(() => {\n                    this.updateContentMargins();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        }\n        /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n        _setContainerClass(isAdd) {\n            const classList = this._element.nativeElement.classList;\n            const className = 'mat-drawer-container-has-open';\n            if (isAdd) {\n                classList.add(className);\n            }\n            else {\n                classList.remove(className);\n            }\n        }\n        /** Validate the state of the drawer children components. */\n        _validateDrawers() {\n            this._start = this._end = null;\n            // Ensure that we have at most one start and one end drawer.\n            this._drawers.forEach(drawer => {\n                if (drawer.position == 'end') {\n                    if (this._end != null) {\n                        throwMatDuplicatedDrawerError('end');\n                    }\n                    this._end = drawer;\n                }\n                else {\n                    if (this._start != null) {\n                        throwMatDuplicatedDrawerError('start');\n                    }\n                    this._start = drawer;\n                }\n            });\n            this._right = this._left = null;\n            // Detect if we're LTR or RTL.\n            if (this._dir && this._dir.value === 'rtl') {\n                this._left = this._end;\n                this._right = this._start;\n            }\n            else {\n                this._left = this._start;\n                this._right = this._end;\n            }\n        }\n        /** Whether the container is being pushed to the side by one of the drawers. */\n        _isPushed() {\n            return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n                (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n        }\n        _onBackdropClicked() {\n            this.backdropClick.emit();\n            this._closeModalDrawersViaBackdrop();\n        }\n        _closeModalDrawersViaBackdrop() {\n            // Close all open drawers where closing is not disabled and the mode is not `side`.\n            [this._start, this._end]\n                .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n                .forEach(drawer => drawer._closeViaBackdropClick());\n        }\n        _isShowingBackdrop() {\n            return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n                (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n        }\n        _canHaveBackdrop(drawer) {\n            return drawer.mode !== 'side' || !!this._backdropOverride;\n        }\n        _isDrawerOpen(drawer) {\n            return drawer != null && drawer.opened;\n        }\n    }\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) { return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatDrawerContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDrawerContainer, selectors: [[\"mat-drawer-container\"]], contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, viewQuery: function MatDrawerContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatDrawerContent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    } }, hostAttrs: [1, \"mat-drawer-container\"], hostVars: 2, hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, inputs: { autosize: \"autosize\", hasBackdrop: \"hasBackdrop\" }, outputs: { backdropClick: \"backdropClick\" }, exportAs: [\"matDrawerContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatDrawerContainer\n            }])], ngContentSelectors: _c2, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]], template: function MatDrawerContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatDrawerContent], styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatDrawerContainer.ctorParameters = () => [\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: NgZone },\n        { type: ChangeDetectorRef },\n        { type: ViewportRuler },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatDrawerContainer.propDecorators = {\n        _allDrawers: [{ type: ContentChildren, args: [MatDrawer, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }],\n        _content: [{ type: ContentChild, args: [MatDrawerContent,] }],\n        _userContent: [{ type: ViewChild, args: [MatDrawerContent,] }],\n        autosize: [{ type: Input }],\n        hasBackdrop: [{ type: Input }],\n        backdropClick: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDrawerContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatDrawerContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { backdropClick: [{\n            type: Output\n        }], autosize: [{\n            type: Input\n        }], hasBackdrop: [{\n            type: Input\n        }], _allDrawers: [{\n            type: ContentChildren,\n            args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatDrawerContent]\n        }], _userContent: [{\n            type: ViewChild,\n            args: [MatDrawerContent]\n        }] }); })();\n    return MatDrawerContainer;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSidenavContent = /** @class */ (() => {\n    class MatSidenavContent extends MatDrawerContent {\n        constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n            super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n        }\n    }\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) { return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatSidenavContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContent, selectors: [[\"mat-sidenav-content\"]], hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"], hostVars: 4, hostBindings: function MatSidenavContent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatSidenavContent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\n    MatSidenavContent.ctorParameters = () => [\n        { type: ChangeDetectorRef },\n        { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatSidenavContainer),] }] },\n        { type: ElementRef },\n        { type: ScrollDispatcher },\n        { type: NgZone }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenavContent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: MatSidenavContainer, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatSidenavContainer)]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n    return MatSidenavContent;\n})();\nlet MatSidenav = /** @class */ (() => {\n    class MatSidenav extends MatDrawer {\n        constructor() {\n            super(...arguments);\n            this._fixedInViewport = false;\n            this._fixedTopGap = 0;\n            this._fixedBottomGap = 0;\n        }\n        /** Whether the sidenav is fixed in the viewport. */\n        get fixedInViewport() { return this._fixedInViewport; }\n        set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n        /**\n         * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n         * mode.\n         */\n        get fixedTopGap() { return this._fixedTopGap; }\n        set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n        /**\n         * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n         * fixed mode.\n         */\n        get fixedBottomGap() { return this._fixedBottomGap; }\n        set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n    }\nMatSidenav.ɵfac = function MatSidenav_Factory(t) { return ɵMatSidenav_BaseFactory(t || MatSidenav); };\nMatSidenav.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSidenav, selectors: [[\"mat-sidenav\"]], hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"], hostVars: 17, hostBindings: function MatSidenav_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"align\", null);\n        ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    } }, inputs: { fixedInViewport: \"fixedInViewport\", fixedTopGap: \"fixedTopGap\", fixedBottomGap: \"fixedBottomGap\" }, exportAs: [\"matSidenav\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-drawer-inner-container\"]], template: function MatSidenav_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2, data: { animation: [matDrawerAnimations.transformDrawer] }, changeDetection: 0 });\n    MatSidenav.propDecorators = {\n        fixedInViewport: [{ type: Input }],\n        fixedTopGap: [{ type: Input }],\n        fixedBottomGap: [{ type: Input }]\n    };\nconst ɵMatSidenav_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenav);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenav, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, { fixedInViewport: [{\n            type: Input\n        }], fixedTopGap: [{\n            type: Input\n        }], fixedBottomGap: [{\n            type: Input\n        }] }); })();\n    return MatSidenav;\n})();\nlet MatSidenavContainer = /** @class */ (() => {\n    class MatSidenavContainer extends MatDrawerContainer {\n    }\nMatSidenavContainer.ɵfac = function MatSidenavContainer_Factory(t) { return ɵMatSidenavContainer_BaseFactory(t || MatSidenavContainer); };\nMatSidenavContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSidenavContainer, selectors: [[\"mat-sidenav-container\"]], contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    } }, hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"], hostVars: 2, hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    } }, exportAs: [\"matSidenavContainer\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_DRAWER_CONTAINER,\n                useExisting: MatSidenavContainer\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 4, vars: 2, consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]], template: function MatSidenavContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c3);\n        ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    } }, directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable], styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSidenavContainer.propDecorators = {\n        _allDrawers: [{ type: ContentChildren, args: [MatSidenav, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }],\n        _content: [{ type: ContentChild, args: [MatSidenavContent,] }]\n    };\nconst ɵMatSidenavContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenavContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatSidenavContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }]\n    }], null, { _allDrawers: [{\n            type: ContentChildren,\n            args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }], _content: [{\n            type: ContentChild,\n            args: [MatSidenavContent]\n        }] }); })();\n    return MatSidenavContainer;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSidenavModule = /** @class */ (() => {\n    class MatSidenavModule {\n    }\nMatSidenavModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSidenavModule });\nMatSidenavModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSidenavModule_Factory(t) { return new (t || MatSidenavModule)(); }, imports: [[\n            CommonModule,\n            MatCommonModule,\n            PlatformModule,\n            CdkScrollableModule,\n        ], CdkScrollableModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, { declarations: function () { return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; }, imports: function () { return [CommonModule,\n        MatCommonModule,\n        PlatformModule,\n        CdkScrollableModule]; }, exports: function () { return [CdkScrollableModule,\n        MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSidenavModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PlatformModule,\n                    CdkScrollableModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ]\n            }]\n    }], null, null); })();\n    return MatSidenavModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };\n\n//# sourceMappingURL=sidenav.js.map","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nlet MatSlideToggle = /** @class */ (() => {\n    class MatSlideToggle extends _MatSlideToggleMixinBase {\n        constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n            super(elementRef);\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this.defaults = defaults;\n            this._animationMode = _animationMode;\n            this._onChange = (_) => { };\n            this._onTouched = () => { };\n            this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n            this._required = false;\n            this._checked = false;\n            /** Name value will be applied to the input element if present. */\n            this.name = null;\n            /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n            this.id = this._uniqueId;\n            /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n            this.labelPosition = 'after';\n            /** Used to set the aria-label attribute on the underlying input element. */\n            this.ariaLabel = null;\n            /** Used to set the aria-labelledby attribute on the underlying input element. */\n            this.ariaLabelledby = null;\n            /** An event will be dispatched each time the slide-toggle changes its value. */\n            this.change = new EventEmitter();\n            /**\n             * An event will be dispatched each time the slide-toggle input is toggled.\n             * This event is always emitted when the user toggles the slide toggle, but this does not mean\n             * the slide toggle's value has changed.\n             */\n            this.toggleChange = new EventEmitter();\n            this.tabIndex = parseInt(tabIndex) || 0;\n        }\n        /** Whether the slide-toggle is required. */\n        get required() { return this._required; }\n        set required(value) { this._required = coerceBooleanProperty(value); }\n        /** Whether the slide-toggle element is checked or not. */\n        get checked() { return this._checked; }\n        set checked(value) {\n            this._checked = coerceBooleanProperty(value);\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Returns the unique id for the visual hidden input. */\n        get inputId() { return `${this.id || this._uniqueId}-input`; }\n        ngAfterContentInit() {\n            this._focusMonitor\n                .monitor(this._elementRef, true)\n                .subscribe(focusOrigin => {\n                // Only forward focus manually when it was received programmatically or through the\n                // keyboard. We should not do this for mouse/touch focus for two reasons:\n                // 1. It can prevent clicks from landing in Chrome (see #18269).\n                // 2. They're already handled by the wrapping `label` element.\n                if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                    this._inputElement.nativeElement.focus();\n                }\n                else if (!focusOrigin) {\n                    // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                    // Angular does not expect events to be raised during change detection, so any state\n                    // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                    // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                    // we defer telling the form control it has been touched until the next tick.\n                    Promise.resolve().then(() => this._onTouched());\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        /** Method being called whenever the underlying input emits a change event. */\n        _onChangeEvent(event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the component's `change` output.\n            event.stopPropagation();\n            this.toggleChange.emit();\n            // When the slide toggle's config disables toggle change event by setting\n            // `disableToggleValue: true`, the slide toggle's value does not change, and the\n            // checked state of the underlying input needs to be changed back.\n            if (this.defaults.disableToggleValue) {\n                this._inputElement.nativeElement.checked = this.checked;\n                return;\n            }\n            // Sync the value from the underlying input element with the component instance.\n            this.checked = this._inputElement.nativeElement.checked;\n            // Emit our custom change event only if the underlying input emitted one. This ensures that\n            // there is no change event, when the checked state changes programmatically.\n            this._emitChangeEvent();\n        }\n        /** Method being called whenever the slide-toggle has been clicked. */\n        _onInputClick(event) {\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `slide-toggle` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        writeValue(value) {\n            this.checked = !!value;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnChange(fn) {\n            this._onChange = fn;\n        }\n        /** Implemented as part of ControlValueAccessor. */\n        registerOnTouched(fn) {\n            this._onTouched = fn;\n        }\n        /** Implemented as a part of ControlValueAccessor. */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Focuses the slide-toggle. */\n        focus(options) {\n            this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n        }\n        /** Toggles the checked state of the slide-toggle. */\n        toggle() {\n            this.checked = !this.checked;\n            this._onChange(this.checked);\n        }\n        /**\n         * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n         */\n        _emitChangeEvent() {\n            this._onChange(this.checked);\n            this.change.emit(new MatSlideToggleChange(this, this.checked));\n        }\n        /** Method being called whenever the label text changes. */\n        _onLabelTextChange() {\n            // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n            // slide-toggle component will be only marked for check, but no actual change detection runs\n            // automatically. Instead of going back into the zone in order to trigger a change detection\n            // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n            // we only trigger an explicit change detection for the slide-toggle view and its children.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSlideToggle.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatSlideToggle.propDecorators = {\n        _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n        _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n        name: [{ type: Input }],\n        id: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        required: [{ type: Input }],\n        checked: [{ type: Input }],\n        change: [{ type: Output }],\n        toggleChange: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n    return MatSlideToggle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nlet MatSlideToggleRequiredValidator = /** @class */ (() => {\n    class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n    }\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatSlideToggleRequiredValidator;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nlet _MatSlideToggleRequiredValidatorModule = /** @class */ (() => {\n    class _MatSlideToggleRequiredValidatorModule {\n    }\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n    return _MatSlideToggleRequiredValidatorModule;\n})();\nlet MatSlideToggleModule = /** @class */ (() => {\n    class MatSlideToggleModule {\n    }\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n    return MatSlideToggleModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlider),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nlet MatSlider = /** @class */ (() => {\n    class MatSlider extends _MatSliderMixinBase {\n        constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n            super(elementRef);\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._ngZone = _ngZone;\n            this._animationMode = _animationMode;\n            this._invert = false;\n            this._max = 100;\n            this._min = 0;\n            this._step = 1;\n            this._thumbLabel = false;\n            this._tickInterval = 0;\n            this._value = null;\n            this._vertical = false;\n            /** Event emitted when the slider value has changed. */\n            this.change = new EventEmitter();\n            /** Event emitted when the slider thumb moves. */\n            this.input = new EventEmitter();\n            /**\n             * Emits when the raw value of the slider changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            this.valueChange = new EventEmitter();\n            /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n            this.onTouched = () => { };\n            this._percent = 0;\n            /**\n             * Whether or not the thumb is sliding.\n             * Used to determine if there should be a transition for the thumb and fill track.\n             */\n            this._isSliding = false;\n            /**\n             * Whether or not the slider is active (clicked or sliding).\n             * Used to shrink and grow the thumb as according to the Material Design spec.\n             */\n            this._isActive = false;\n            /** The size of a tick interval as a percentage of the size of the track. */\n            this._tickIntervalPercent = 0;\n            /** The dimensions of the slider. */\n            this._sliderDimensions = null;\n            this._controlValueAccessorChangeFn = () => { };\n            /** Subscription to the Directionality change EventEmitter. */\n            this._dirChangeSubscription = Subscription.EMPTY;\n            /** Called when the user has put their pointer down on the slider. */\n            this._pointerDown = (event) => {\n                // Don't do anything if the slider is disabled or the\n                // user is using anything other than the main mouse button.\n                if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                    return;\n                }\n                this._ngZone.run(() => {\n                    const oldValue = this.value;\n                    const pointerPosition = getPointerPositionOnPage(event);\n                    this._isSliding = true;\n                    this._lastPointerEvent = event;\n                    event.preventDefault();\n                    this._focusHostElement();\n                    this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                    this._bindGlobalEvents(event);\n                    this._focusHostElement();\n                    this._updateValueFromPosition(pointerPosition);\n                    this._valueOnSlideStart = this.value;\n                    this._pointerPositionOnStart = pointerPosition;\n                    // Emit a change and input event if the value changed.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                        this._emitChangeEvent();\n                    }\n                });\n            };\n            /**\n             * Called when the user has moved their pointer after\n             * starting to drag. Bound on the document level.\n             */\n            this._pointerMove = (event) => {\n                if (this._isSliding) {\n                    // Prevent the slide from selecting anything else.\n                    event.preventDefault();\n                    const oldValue = this.value;\n                    this._lastPointerEvent = event;\n                    this._updateValueFromPosition(getPointerPositionOnPage(event));\n                    // Native range elements always emit `input` events when the value changed while sliding.\n                    if (oldValue != this.value) {\n                        this._emitInputEvent();\n                    }\n                }\n            };\n            /** Called when the user has lifted their pointer. Bound on the document level. */\n            this._pointerUp = (event) => {\n                if (this._isSliding) {\n                    const pointerPositionOnStart = this._pointerPositionOnStart;\n                    const currentPointerPosition = getPointerPositionOnPage(event);\n                    event.preventDefault();\n                    this._removeGlobalEvents();\n                    this._valueOnSlideStart = this._pointerPositionOnStart = this._lastPointerEvent = null;\n                    this._isSliding = false;\n                    if (this._valueOnSlideStart != this.value && !this.disabled &&\n                        pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x ||\n                        pointerPositionOnStart.y !== currentPointerPosition.y)) {\n                        this._emitChangeEvent();\n                    }\n                }\n            };\n            /** Called when the window has lost focus. */\n            this._windowBlur = () => {\n                // If the window is blurred while dragging we need to stop dragging because the\n                // browser won't dispatch the `mouseup` and `touchend` events anymore.\n                if (this._lastPointerEvent) {\n                    this._pointerUp(this._lastPointerEvent);\n                }\n            };\n            this._document = _document;\n            this.tabIndex = parseInt(tabIndex) || 0;\n            _ngZone.runOutsideAngular(() => {\n                const element = elementRef.nativeElement;\n                element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n                element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n            });\n        }\n        /** Whether the slider is inverted. */\n        get invert() { return this._invert; }\n        set invert(value) {\n            this._invert = coerceBooleanProperty(value);\n        }\n        /** The maximum value that the slider can have. */\n        get max() { return this._max; }\n        set max(v) {\n            this._max = coerceNumberProperty(v, this._max);\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n        /** The minimum value that the slider can have. */\n        get min() { return this._min; }\n        set min(v) {\n            this._min = coerceNumberProperty(v, this._min);\n            // If the value wasn't explicitly set by the user, set it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n        /** The values at which the thumb will snap. */\n        get step() { return this._step; }\n        set step(v) {\n            this._step = coerceNumberProperty(v, this._step);\n            if (this._step % 1 !== 0) {\n                this._roundToDecimal = this._step.toString().split('.').pop().length;\n            }\n            // Since this could modify the label, we need to notify the change detection.\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Whether or not to show the thumb label. */\n        get thumbLabel() { return this._thumbLabel; }\n        set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n        /**\n         * How often to show ticks. Relative to the step so that a tick always appears on a step.\n         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n         */\n        get tickInterval() { return this._tickInterval; }\n        set tickInterval(value) {\n            if (value === 'auto') {\n                this._tickInterval = 'auto';\n            }\n            else if (typeof value === 'number' || typeof value === 'string') {\n                this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n            }\n            else {\n                this._tickInterval = 0;\n            }\n        }\n        /** Value of the slider. */\n        get value() {\n            // If the value needs to be read and it is still uninitialized, initialize it to the min.\n            if (this._value === null) {\n                this.value = this._min;\n            }\n            return this._value;\n        }\n        set value(v) {\n            if (v !== this._value) {\n                let value = coerceNumberProperty(v);\n                // While incrementing by a decimal we can end up with values like 33.300000000000004.\n                // Truncate it to ensure that it matches the label and to make it easier to work with.\n                if (this._roundToDecimal) {\n                    value = parseFloat(value.toFixed(this._roundToDecimal));\n                }\n                this._value = value;\n                this._percent = this._calculatePercentage(this._value);\n                // Since this also modifies the percentage, we need to let the change detection know.\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Whether the slider is vertical. */\n        get vertical() { return this._vertical; }\n        set vertical(value) {\n            this._vertical = coerceBooleanProperty(value);\n        }\n        /** The value to be used for display purposes. */\n        get displayValue() {\n            if (this.displayWith) {\n                // Value is never null but since setters and getters cannot have\n                // different types, the value getter is also typed to return null.\n                return this.displayWith(this.value);\n            }\n            // Note that this could be improved further by rounding something like 0.999 to 1 or\n            // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n            // every change detection cycle.\n            if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n                return this.value.toFixed(this._roundToDecimal);\n            }\n            return this.value || 0;\n        }\n        /** set focus to the host element */\n        focus(options) {\n            this._focusHostElement(options);\n        }\n        /** blur the host element */\n        blur() {\n            this._blurHostElement();\n        }\n        /** The percentage of the slider that coincides with the value. */\n        get percent() { return this._clamp(this._percent); }\n        /**\n         * Whether the axis of the slider is inverted.\n         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n         */\n        get _invertAxis() {\n            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n            // top. However from a y-axis standpoint this is inverted.\n            return this.vertical ? !this.invert : this.invert;\n        }\n        /** Whether the slider is at its minimum value. */\n        get _isMinValue() {\n            return this.percent === 0;\n        }\n        /**\n         * The amount of space to leave between the slider thumb and the track fill & track background\n         * elements.\n         */\n        get _thumbGap() {\n            if (this.disabled) {\n                return DISABLED_THUMB_GAP;\n            }\n            if (this._isMinValue && !this.thumbLabel) {\n                return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n            }\n            return 0;\n        }\n        /** CSS styles for the track background element. */\n        get _trackBackgroundStyles() {\n            const axis = this.vertical ? 'Y' : 'X';\n            const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n            const sign = this._shouldInvertMouseCoords() ? '-' : '';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n            };\n        }\n        /** CSS styles for the track fill element. */\n        get _trackFillStyles() {\n            const percent = this.percent;\n            const axis = this.vertical ? 'Y' : 'X';\n            const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n            const sign = this._shouldInvertMouseCoords() ? '' : '-';\n            return {\n                // scale3d avoids some rendering issues in Chrome. See #12071.\n                transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n                // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n                // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n                // the value of the slider is 0, we can easily get into this situation. We force a\n                // recalculation by changing the element's `display` when it goes from 0 to any other value.\n                display: percent === 0 ? 'none' : ''\n            };\n        }\n        /** CSS styles for the ticks container element. */\n        get _ticksContainerStyles() {\n            let axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the ticks container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n            let offset = this._tickIntervalPercent / 2 * 100;\n            return {\n                'transform': `translate${axis}(${sign}${offset}%)`\n            };\n        }\n        /** CSS styles for the ticks element. */\n        get _ticksStyles() {\n            let tickSize = this._tickIntervalPercent * 100;\n            let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n            let axis = this.vertical ? 'Y' : 'X';\n            // Depending on the direction we pushed the ticks container, push the ticks the opposite\n            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n            // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n            let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n            let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n            let styles = {\n                'backgroundSize': backgroundSize,\n                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n                'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n            };\n            if (this._isMinValue && this._thumbGap) {\n                let side;\n                if (this.vertical) {\n                    side = this._invertAxis ? 'Bottom' : 'Top';\n                }\n                else {\n                    side = this._invertAxis ? 'Right' : 'Left';\n                }\n                styles[`padding${side}`] = `${this._thumbGap}px`;\n            }\n            return styles;\n        }\n        get _thumbContainerStyles() {\n            let axis = this.vertical ? 'Y' : 'X';\n            // For a horizontal slider in RTL languages we push the thumb container off the left edge\n            // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n            let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n            let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n            return {\n                'transform': `translate${axis}(-${offset}%)`\n            };\n        }\n        /**\n         * Whether mouse events should be converted to a slider position by calculating their distance\n         * from the right or bottom edge of the slider as opposed to the top or left.\n         */\n        _shouldInvertMouseCoords() {\n            return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        }\n        /** The language direction for this slider element. */\n        _getDirection() {\n            return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n        }\n        ngAfterViewInit() {\n            this._focusMonitor\n                .monitor(this._elementRef, true)\n                .subscribe((origin) => {\n                this._isActive = !!origin && origin !== 'keyboard';\n                this._changeDetectorRef.detectChanges();\n            });\n            if (this._dir) {\n                this._dirChangeSubscription = this._dir.change.subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        }\n        ngOnDestroy() {\n            const element = this._elementRef.nativeElement;\n            element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n            this._lastPointerEvent = null;\n            this._removeGlobalEvents();\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            this._dirChangeSubscription.unsubscribe();\n        }\n        _onMouseenter() {\n            if (this.disabled) {\n                return;\n            }\n            // We save the dimensions of the slider here so we can use them to update the spacing of the\n            // ticks and determine where on the slider click and slide events happen.\n            this._sliderDimensions = this._getSliderDimensions();\n            this._updateTickIntervalPercent();\n        }\n        _onFocus() {\n            // We save the dimensions of the slider here so we can use them to update the spacing of the\n            // ticks and determine where on the slider click and slide events happen.\n            this._sliderDimensions = this._getSliderDimensions();\n            this._updateTickIntervalPercent();\n        }\n        _onBlur() {\n            this.onTouched();\n        }\n        _onKeydown(event) {\n            if (this.disabled || hasModifierKey(event)) {\n                return;\n            }\n            const oldValue = this.value;\n            switch (event.keyCode) {\n                case PAGE_UP:\n                    this._increment(10);\n                    break;\n                case PAGE_DOWN:\n                    this._increment(-10);\n                    break;\n                case END:\n                    this.value = this.max;\n                    break;\n                case HOME:\n                    this.value = this.min;\n                    break;\n                case LEFT_ARROW:\n                    // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                    // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                    // about the slider indicates that it is inverted. They will expect left to be decrement,\n                    // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                    // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                    // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                    // sighted users, therefore we do not swap the meaning.\n                    this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                    break;\n                case UP_ARROW:\n                    this._increment(1);\n                    break;\n                case RIGHT_ARROW:\n                    // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                    this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                    break;\n                case DOWN_ARROW:\n                    this._increment(-1);\n                    break;\n                default:\n                    // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                    // it.\n                    return;\n            }\n            if (oldValue != this.value) {\n                this._emitInputEvent();\n                this._emitChangeEvent();\n            }\n            this._isSliding = true;\n            event.preventDefault();\n        }\n        _onKeyup() {\n            this._isSliding = false;\n        }\n        /** Use defaultView of injected document if available or fallback to global window reference */\n        _getWindow() {\n            return this._document.defaultView || window;\n        }\n        /**\n         * Binds our global move and end events. They're bound at the document level and only while\n         * dragging so that the user doesn't have to keep their pointer exactly over the slider\n         * as they're swiping across the screen.\n         */\n        _bindGlobalEvents(triggerEvent) {\n            // Note that we bind the events to the `document`, because it allows us to capture\n            // drag cancel events where the user's pointer is outside the browser window.\n            const document = this._document;\n            const isTouch = isTouchEvent(triggerEvent);\n            const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n            const endEventName = isTouch ? 'touchend' : 'mouseup';\n            document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n            document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n            if (isTouch) {\n                document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n            }\n            const window = this._getWindow();\n            if (typeof window !== 'undefined' && window) {\n                window.addEventListener('blur', this._windowBlur);\n            }\n        }\n        /** Removes any global event listeners that we may have added. */\n        _removeGlobalEvents() {\n            const document = this._document;\n            document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n            const window = this._getWindow();\n            if (typeof window !== 'undefined' && window) {\n                window.removeEventListener('blur', this._windowBlur);\n            }\n        }\n        /** Increments the slider by the given number of steps (negative number decrements). */\n        _increment(numSteps) {\n            this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n        }\n        /** Calculate the new value from the new physical location. The value will always be snapped. */\n        _updateValueFromPosition(pos) {\n            if (!this._sliderDimensions) {\n                return;\n            }\n            let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n            let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            let posComponent = this.vertical ? pos.y : pos.x;\n            // The exact value is calculated from the event and used to find the closest snap value.\n            let percent = this._clamp((posComponent - offset) / size);\n            if (this._shouldInvertMouseCoords()) {\n                percent = 1 - percent;\n            }\n            // Since the steps may not divide cleanly into the max value, if the user\n            // slid to 0 or 100 percent, we jump to the min/max value. This approach\n            // is slightly more intuitive than using `Math.ceil` below, because it\n            // follows the user's pointer closer.\n            if (percent === 0) {\n                this.value = this.min;\n            }\n            else if (percent === 1) {\n                this.value = this.max;\n            }\n            else {\n                const exactValue = this._calculateValue(percent);\n                // This calculation finds the closest step by finding the closest\n                // whole number divisible by the step relative to the min.\n                const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n                // The value needs to snap to the min and max.\n                this.value = this._clamp(closestValue, this.min, this.max);\n            }\n        }\n        /** Emits a change event if the current value is different from the last emitted value. */\n        _emitChangeEvent() {\n            this._controlValueAccessorChangeFn(this.value);\n            this.valueChange.emit(this.value);\n            this.change.emit(this._createChangeEvent());\n        }\n        /** Emits an input event when the current value is different from the last emitted value. */\n        _emitInputEvent() {\n            this.input.emit(this._createChangeEvent());\n        }\n        /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n        _updateTickIntervalPercent() {\n            if (!this.tickInterval || !this._sliderDimensions) {\n                return;\n            }\n            if (this.tickInterval == 'auto') {\n                let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n                let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n                let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n                let pixelsPerTick = stepsPerTick * this.step;\n                this._tickIntervalPercent = pixelsPerTick / trackSize;\n            }\n            else {\n                this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n            }\n        }\n        /** Creates a slider change object from the specified value. */\n        _createChangeEvent(value = this.value) {\n            let event = new MatSliderChange();\n            event.source = this;\n            event.value = value;\n            return event;\n        }\n        /** Calculates the percentage of the slider that a value is. */\n        _calculatePercentage(value) {\n            return ((value || 0) - this.min) / (this.max - this.min);\n        }\n        /** Calculates the value a percentage of the slider corresponds to. */\n        _calculateValue(percentage) {\n            return this.min + percentage * (this.max - this.min);\n        }\n        /** Return a number between two numbers. */\n        _clamp(value, min = 0, max = 1) {\n            return Math.max(min, Math.min(value, max));\n        }\n        /**\n         * Get the bounding client rect of the slider track element.\n         * The track is used rather than the native element to ignore the extra space that the thumb can\n         * take up.\n         */\n        _getSliderDimensions() {\n            return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n        }\n        /**\n         * Focuses the native element.\n         * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n         */\n        _focusHostElement(options) {\n            this._elementRef.nativeElement.focus(options);\n        }\n        /** Blurs the native element. */\n        _blurHostElement() {\n            this._elementRef.nativeElement.blur();\n        }\n        /**\n         * Sets the model value. Implemented as part of ControlValueAccessor.\n         * @param value\n         */\n        writeValue(value) {\n            this.value = value;\n        }\n        /**\n         * Registers a callback to be triggered when the value has changed.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        registerOnChange(fn) {\n            this._controlValueAccessorChangeFn = fn;\n        }\n        /**\n         * Registers a callback to be triggered when the component is touched.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        registerOnTouched(fn) {\n            this.onTouched = fn;\n        }\n        /**\n         * Sets whether the component should be disabled.\n         * Implemented as part of ControlValueAccessor.\n         * @param isDisabled\n         */\n        setDisabledState(isDisabled) {\n            this.disabled = isDisabled;\n        }\n    }\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 28, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", value: \"value\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", vertical: \"vertical\", displayWith: \"displayWith\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatSlider.ctorParameters = () => [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ];\n    MatSlider.propDecorators = {\n        invert: [{ type: Input }],\n        max: [{ type: Input }],\n        min: [{ type: Input }],\n        step: [{ type: Input }],\n        thumbLabel: [{ type: Input }],\n        tickInterval: [{ type: Input }],\n        value: [{ type: Input }],\n        displayWith: [{ type: Input }],\n        vertical: [{ type: Input }],\n        change: [{ type: Output }],\n        input: [{ type: Output }],\n        valueChange: [{ type: Output }],\n        _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\n    return MatSlider;\n})();\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event) {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n    return { x: point.clientX, y: point.clientY };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSliderModule = /** @class */ (() => {\n    class MatSliderModule {\n    }\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); }, imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n    return MatSliderModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n//# sourceMappingURL=slider.js.map","import { EventEmitter, isDevMode, Directive, Input, Output, ɵɵdefineInjectable, Injectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Inject, ElementRef, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = [\"mat-sort-header\", \"\"];\nfunction MatSortHeader_div_3_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1._disableViewStateAnimation = true; })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3._disableViewStateAnimation = false; });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6);\n    ɵngcc0.ɵɵelement(4, \"div\", 7);\n    ɵngcc0.ɵɵelement(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n} }\nconst _c1 = [\"*\"];\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {\n}\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nlet MatSort = /** @class */ (() => {\n    class MatSort extends _MatSortMixinBase {\n        constructor() {\n            super(...arguments);\n            /** Collection of all registered sortables that this directive manages. */\n            this.sortables = new Map();\n            /** Used to notify any child components listening to state changes. */\n            this._stateChanges = new Subject();\n            /**\n             * The direction to set when an MatSortable is initially sorted.\n             * May be overriden by the MatSortable's sort start.\n             */\n            this.start = 'asc';\n            this._direction = '';\n            /** Event emitted when the user changes either the active sort or sort direction. */\n            this.sortChange = new EventEmitter();\n        }\n        /** The sort direction of the currently active MatSortable. */\n        get direction() { return this._direction; }\n        set direction(direction) {\n            if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n                throw getSortInvalidDirectionError(direction);\n            }\n            this._direction = direction;\n        }\n        /**\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n         * May be overriden by the MatSortable's disable clear input.\n         */\n        get disableClear() { return this._disableClear; }\n        set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n        /**\n         * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n         * collection of MatSortables.\n         */\n        register(sortable) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n            this.sortables.set(sortable.id, sortable);\n        }\n        /**\n         * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n         * collection of contained MatSortables.\n         */\n        deregister(sortable) {\n            this.sortables.delete(sortable.id);\n        }\n        /** Sets the active sort id and determines the new sort direction. */\n        sort(sortable) {\n            if (this.active != sortable.id) {\n                this.active = sortable.id;\n                this.direction = sortable.start ? sortable.start : this.start;\n            }\n            else {\n                this.direction = this.getNextSortDirection(sortable);\n            }\n            this.sortChange.emit({ active: this.active, direction: this.direction });\n        }\n        /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n        getNextSortDirection(sortable) {\n            if (!sortable) {\n                return '';\n            }\n            // Get the sort direction cycle with the potential sortable overrides.\n            const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n            let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n            // Get and return the next direction in the cycle\n            let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n            if (nextDirectionIndex >= sortDirectionCycle.length) {\n                nextDirectionIndex = 0;\n            }\n            return sortDirectionCycle[nextDirectionIndex];\n        }\n        ngOnInit() {\n            this._markInitialized();\n        }\n        ngOnChanges() {\n            this._stateChanges.next();\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n    }\nMatSort.ɵfac = function MatSort_Factory(t) { return ɵMatSort_BaseFactory(t || MatSort); };\nMatSort.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSort, selectors: [[\"\", \"matSort\", \"\"]], hostAttrs: [1, \"mat-sort\"], inputs: { disabled: [\"matSortDisabled\", \"disabled\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"], active: [\"matSortActive\", \"active\"] }, outputs: { sortChange: \"matSortChange\" }, exportAs: [\"matSort\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n    MatSort.propDecorators = {\n        active: [{ type: Input, args: ['matSortActive',] }],\n        start: [{ type: Input, args: ['matSortStart',] }],\n        direction: [{ type: Input, args: ['matSortDirection',] }],\n        disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n        sortChange: [{ type: Output, args: ['matSortChange',] }]\n    };\nconst ɵMatSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSort);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSort, [{\n        type: Directive,\n        args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                host: { 'class': 'mat-sort' },\n                inputs: ['disabled: matSortDisabled']\n            }]\n    }], null, { start: [{\n            type: Input,\n            args: ['matSortStart']\n        }], sortChange: [{\n            type: Output,\n            args: ['matSortChange']\n        }], direction: [{\n            type: Input,\n            args: ['matSortDirection']\n        }], disableClear: [{\n            type: Input,\n            args: ['matSortDisableClear']\n        }], active: [{\n            type: Input,\n            args: ['matSortActive']\n        }] }); })();\n    return MatSort;\n})();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nlet MatSortHeaderIntl = /** @class */ (() => {\n    class MatSortHeaderIntl {\n        constructor() {\n            /**\n             * Stream that emits whenever the labels here are changed. Use this to notify\n             * components if the labels have changed after initialization.\n             */\n            this.changes = new Subject();\n            /** ARIA label for the sorting button. */\n            this.sortButtonLabel = (id) => {\n                return `Change sorting for ${id}`;\n            };\n        }\n    }\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) { return new (t || MatSortHeaderIntl)(); };\n    MatSortHeaderIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n    return MatSortHeaderIntl;\n})();\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {\n}\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nlet MatSortHeader = /** @class */ (() => {\n    class MatSortHeader extends _MatSortHeaderMixinBase {\n        constructor(_intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef) {\n            // Note that we use a string token for the `_columnDef`, because the value is provided both by\n            // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n            // and we want to avoid having the sort header depending on the CDK table because\n            // of this single reference.\n            super();\n            this._intl = _intl;\n            this._sort = _sort;\n            this._columnDef = _columnDef;\n            this._focusMonitor = _focusMonitor;\n            this._elementRef = _elementRef;\n            /**\n             * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n             * provide an affordance that the header is sortable by showing on focus and hover.\n             */\n            this._showIndicatorHint = false;\n            /** The direction the arrow should be facing according to the current state. */\n            this._arrowDirection = '';\n            /**\n             * Whether the view state animation should show the transition between the `from` and `to` states.\n             */\n            this._disableViewStateAnimation = false;\n            /** Sets the position of the arrow that displays when sorted. */\n            this.arrowPosition = 'after';\n            if (!_sort) {\n                throw getSortHeaderNotContainedWithinSortError();\n            }\n            this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n                .subscribe(() => {\n                if (this._isSorted()) {\n                    this._updateArrowDirection();\n                }\n                // If this header was recently active and now no longer sorted, animate away the arrow.\n                if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = false;\n                    this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n                }\n                changeDetectorRef.markForCheck();\n            });\n        }\n        /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n        get disableClear() { return this._disableClear; }\n        set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n        ngOnInit() {\n            if (!this.id && this._columnDef) {\n                this.id = this._columnDef.name;\n            }\n            // Initialize the direction of the arrow and set the view state to be immediately that state.\n            this._updateArrowDirection();\n            this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n            this._sort.register(this);\n        }\n        ngAfterViewInit() {\n            // We use the focus monitor because we also want to style\n            // things differently based on the focus origin.\n            this._focusMonitor.monitor(this._elementRef, true)\n                .subscribe(origin => this._setIndicatorHintVisible(!!origin));\n        }\n        ngOnDestroy() {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            this._sort.deregister(this);\n            this._rerenderSubscription.unsubscribe();\n        }\n        /**\n         * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n         * user showing what the active sort will become. If set to false, the arrow will fade away.\n         */\n        _setIndicatorHintVisible(visible) {\n            // No-op if the sort header is disabled - should not make the hint visible.\n            if (this._isDisabled() && visible) {\n                return;\n            }\n            this._showIndicatorHint = visible;\n            if (!this._isSorted()) {\n                this._updateArrowDirection();\n                if (this._showIndicatorHint) {\n                    this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n                }\n                else {\n                    this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n                }\n            }\n        }\n        /**\n         * Sets the animation transition view state for the arrow's position and opacity. If the\n         * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n         * no animation appears.\n         */\n        _setAnimationTransitionState(viewState) {\n            this._viewState = viewState;\n            // If the animation for arrow position state (opacity/translation) should be disabled,\n            // remove the fromState so that it jumps right to the toState.\n            if (this._disableViewStateAnimation) {\n                this._viewState = { toState: viewState.toState };\n            }\n        }\n        /** Triggers the sort on this sort header and removes the indicator hint. */\n        _handleClick() {\n            if (this._isDisabled()) {\n                return;\n            }\n            this._sort.sort(this);\n            // Do not show the animation if the header was already shown in the right position.\n            if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = true;\n            }\n            // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n            // the direction it is facing.\n            const viewState = this._isSorted() ?\n                { fromState: this._arrowDirection, toState: 'active' } :\n                { fromState: 'active', toState: this._arrowDirection };\n            this._setAnimationTransitionState(viewState);\n            this._showIndicatorHint = false;\n        }\n        /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n        _isSorted() {\n            return this._sort.active == this.id &&\n                (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n        }\n        /** Returns the animation state for the arrow direction (indicator and pointers). */\n        _getArrowDirectionState() {\n            return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n        }\n        /** Returns the arrow position state (opacity, translation). */\n        _getArrowViewState() {\n            const fromState = this._viewState.fromState;\n            return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n        }\n        /**\n         * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n         * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n         * active sorted direction. The reason this is updated through a function is because the direction\n         * should only be changed at specific times - when deactivated but the hint is displayed and when\n         * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n         * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n         * preserving its direction, even though the next sort direction is actually different and should\n         * only be changed once the arrow displays again (hint or activation).\n         */\n        _updateArrowDirection() {\n            this._arrowDirection = this._isSorted() ?\n                this._sort.direction :\n                (this.start || this._sort.start);\n        }\n        _isDisabled() {\n            return this._sort.disabled || this.disabled;\n        }\n        /**\n         * Gets the aria-sort attribute that should be applied to this sort header. If this header\n         * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n         * says that the aria-sort property should only be present on one header at a time, so removing\n         * ensures this is true.\n         */\n        _getAriaSortAttribute() {\n            if (!this._isSorted()) {\n                return null;\n            }\n            return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n        }\n        /** Whether the arrow inside the sort header should be rendered. */\n        _renderArrow() {\n            return !this._isDisabled() || this._isSorted();\n        }\n    }\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) { return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatSortHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSortHeader, selectors: [[\"\", \"mat-sort-header\", \"\"]], hostAttrs: [1, \"mat-sort-header\"], hostVars: 3, hostBindings: function MatSortHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() { return ctx._handleClick(); })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() { return ctx._setIndicatorHintVisible(true); })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() { return ctx._setIndicatorHintVisible(false); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    } }, inputs: { disabled: \"disabled\", arrowPosition: \"arrowPosition\", disableClear: \"disableClear\", id: [\"mat-sort-header\", \"id\"], start: \"start\" }, exportAs: [\"matSortHeader\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 7, consts: [[1, \"mat-sort-header-container\"], [\"type\", \"button\", 1, \"mat-sort-header-button\", \"mat-focus-indicator\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]], template: function MatSortHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx._isDisabled() || null)(\"aria-label\", ctx._intl.sortButtonLabel(ctx.id));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n    } }, directives: [ɵngcc2.NgIf], styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], encapsulation: 2, data: { animation: [\n            matSortAnimations.indicator,\n            matSortAnimations.leftPointer,\n            matSortAnimations.rightPointer,\n            matSortAnimations.arrowOpacity,\n            matSortAnimations.arrowPosition,\n            matSortAnimations.allowChildren,\n        ] }, changeDetection: 0 });\n    MatSortHeader.ctorParameters = () => [\n        { type: MatSortHeaderIntl },\n        { type: ChangeDetectorRef },\n        { type: MatSort, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] },\n        { type: FocusMonitor },\n        { type: ElementRef }\n    ];\n    MatSortHeader.propDecorators = {\n        id: [{ type: Input, args: ['mat-sort-header',] }],\n        arrowPosition: [{ type: Input }],\n        start: [{ type: Input }],\n        disableClear: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n        type: Component,\n        args: [{\n                selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\">\\n  <button class=\\\"mat-sort-header-button mat-focus-indicator\\\" type=\\\"button\\\"\\n          [attr.disabled]=\\\"_isDisabled() || null\\\"\\n          [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\">\\n    <ng-content></ng-content>\\n  </button>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-sort-header',\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ],\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatSortHeaderIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: ['MAT_SORT_HEADER_COLUMN_DEF']\n            }, {\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }]; }, { arrowPosition: [{\n            type: Input\n        }], disableClear: [{\n            type: Input\n        }], id: [{\n            type: Input,\n            args: ['mat-sort-header']\n        }], start: [{\n            type: Input\n        }] }); })();\n    return MatSortHeader;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatSortModule = /** @class */ (() => {\n    class MatSortModule {\n    }\nMatSortModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSortModule });\nMatSortModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSortModule_Factory(t) { return new (t || MatSortModule)(); }, providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, { declarations: function () { return [MatSort, MatSortHeader]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MatSort, MatSortHeader]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n    return MatSortModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n\n//# sourceMappingURL=sort.js.map","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER, HOME, END } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, TemplateRef, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, forwardRef, Optional, ContentChild, ViewChild, Input, EventEmitter, ChangeDetectorRef, ContentChildren, Output, HostListener, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nfunction CdkStep_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nconst _c0 = [\"*\"];\nlet CdkStepHeader = /** @class */ (() => {\n    class CdkStepHeader {\n        constructor(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        /** Focuses the step header. */\n        focus() {\n            this._elementRef.nativeElement.focus();\n        }\n    }\nCdkStepHeader.ɵfac = function CdkStepHeader_Factory(t) { return new (t || CdkStepHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkStepHeader.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkStepHeader, selectors: [[\"\", \"cdkStepHeader\", \"\"]], hostAttrs: [\"role\", \"tab\"] });\n    CdkStepHeader.ctorParameters = () => [\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkStepHeader, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkStepHeader]',\n                host: {\n                    'role': 'tab'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n    return CdkStepHeader;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet CdkStepLabel = /** @class */ (() => {\n    class CdkStepLabel {\n        constructor(/** @docs-private */ template) {\n            this.template = template;\n        }\n    }\nCdkStepLabel.ɵfac = function CdkStepLabel_Factory(t) { return new (t || CdkStepLabel)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkStepLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkStepLabel, selectors: [[\"\", \"cdkStepLabel\", \"\"]] });\n    CdkStepLabel.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkStepLabel, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkStepLabel]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return CdkStepLabel;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n/** Change event emitted on selection changes. */\nclass StepperSelectionEvent {\n}\n/** Enum to represent the different states of the steps. */\nconst STEP_STATE = {\n    NUMBER: 'number',\n    EDIT: 'edit',\n    DONE: 'done',\n    ERROR: 'error'\n};\n/** InjectionToken that can be used to specify the global stepper options. */\nconst STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * @breaking-change 8.0.0.\n */\nconst MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\nlet CdkStep = /** @class */ (() => {\n    class CdkStep {\n        /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n        constructor(_stepper, stepperOptions) {\n            this._stepper = _stepper;\n            /** Whether user has seen the expanded step content or not. */\n            this.interacted = false;\n            this._editable = true;\n            this._optional = false;\n            this._completedOverride = null;\n            this._customError = null;\n            this._stepperOptions = stepperOptions ? stepperOptions : {};\n            this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n            this._showError = !!this._stepperOptions.showError;\n        }\n        /** Whether the user can return to this step once it has been marked as completed. */\n        get editable() {\n            return this._editable;\n        }\n        set editable(value) {\n            this._editable = coerceBooleanProperty(value);\n        }\n        /** Whether the completion of step is optional. */\n        get optional() {\n            return this._optional;\n        }\n        set optional(value) {\n            this._optional = coerceBooleanProperty(value);\n        }\n        /** Whether step is marked as completed. */\n        get completed() {\n            return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n        }\n        set completed(value) {\n            this._completedOverride = coerceBooleanProperty(value);\n        }\n        _getDefaultCompleted() {\n            return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n        }\n        /** Whether step has an error. */\n        get hasError() {\n            return this._customError == null ? this._getDefaultError() : this._customError;\n        }\n        set hasError(value) {\n            this._customError = coerceBooleanProperty(value);\n        }\n        _getDefaultError() {\n            return this.stepControl && this.stepControl.invalid && this.interacted;\n        }\n        /** Selects this step component. */\n        select() {\n            this._stepper.selected = this;\n        }\n        /** Resets the step to its initial state. Note that this includes resetting form data. */\n        reset() {\n            this.interacted = false;\n            if (this._completedOverride != null) {\n                this._completedOverride = false;\n            }\n            if (this._customError != null) {\n                this._customError = false;\n            }\n            if (this.stepControl) {\n                this.stepControl.reset();\n            }\n        }\n        ngOnChanges() {\n            // Since basically all inputs of the MatStep get proxied through the view down to the\n            // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n            this._stepper._stateChanged();\n        }\n    }\nCdkStep.ɵfac = function CdkStep_Factory(t) { return new (t || CdkStep)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => CdkStepper)), ɵngcc0.ɵɵdirectiveInject(STEPPER_GLOBAL_OPTIONS, 8)); };\nCdkStep.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkStep, selectors: [[\"cdk-step\"]], contentQueries: function CdkStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepLabel, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepLabel = _t.first);\n    } }, viewQuery: function CdkStep_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    } }, inputs: { editable: \"editable\", optional: \"optional\", completed: \"completed\", hasError: \"hasError\", stepControl: \"stepControl\", label: \"label\", errorMessage: \"errorMessage\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], state: \"state\" }, exportAs: [\"cdkStep\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function CdkStep_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, CdkStep_ng_template_0_Template, 1, 0, \"ng-template\");\n    } }, encapsulation: 2, changeDetection: 0 });\n    CdkStep.ctorParameters = () => [\n        { type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef(() => CdkStepper),] }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n    ];\n    CdkStep.propDecorators = {\n        stepLabel: [{ type: ContentChild, args: [CdkStepLabel,] }],\n        content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n        stepControl: [{ type: Input }],\n        label: [{ type: Input }],\n        errorMessage: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        state: [{ type: Input }],\n        editable: [{ type: Input }],\n        optional: [{ type: Input }],\n        completed: [{ type: Input }],\n        hasError: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkStep, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-step',\n                exportAs: 'cdkStep',\n                template: '<ng-template><ng-content></ng-content></ng-template>',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: CdkStepper, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => CdkStepper)]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [STEPPER_GLOBAL_OPTIONS]\n            }] }]; }, { editable: [{\n            type: Input\n        }], optional: [{\n            type: Input\n        }], completed: [{\n            type: Input\n        }], hasError: [{\n            type: Input\n        }], stepLabel: [{\n            type: ContentChild,\n            args: [CdkStepLabel]\n        }], content: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], stepControl: [{\n            type: Input\n        }], label: [{\n            type: Input\n        }], errorMessage: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], state: [{\n            type: Input\n        }] }); })();\n    return CdkStep;\n})();\nlet CdkStepper = /** @class */ (() => {\n    class CdkStepper {\n        constructor(_dir, _changeDetectorRef, \n        // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n        _elementRef, _document) {\n            this._dir = _dir;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            /** Emits when the component is destroyed. */\n            this._destroyed = new Subject();\n            this._linear = false;\n            this._selectedIndex = 0;\n            /** Event emitted when the selected step has changed. */\n            this.selectionChange = new EventEmitter();\n            this._orientation = 'horizontal';\n            this._groupId = nextId++;\n            this._document = _document;\n        }\n        /** The list of step components that the stepper is holding. */\n        get steps() {\n            return this._steps;\n        }\n        /** Whether the validity of previous steps should be checked or not. */\n        get linear() {\n            return this._linear;\n        }\n        set linear(value) {\n            this._linear = coerceBooleanProperty(value);\n        }\n        /** The index of the selected step. */\n        get selectedIndex() {\n            return this._selectedIndex;\n        }\n        set selectedIndex(index) {\n            const newIndex = coerceNumberProperty(index);\n            if (this.steps) {\n                // Ensure that the index can't be out of bounds.\n                if (newIndex < 0 || newIndex > this.steps.length - 1) {\n                    throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n                }\n                if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n                    (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n                    this._updateSelectedItemIndex(index);\n                }\n            }\n            else {\n                this._selectedIndex = newIndex;\n            }\n        }\n        /** The step that is selected. */\n        get selected() {\n            // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n            return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n        }\n        set selected(step) {\n            this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n        }\n        ngAfterViewInit() {\n            // Note that while the step headers are content children by default, any components that\n            // extend this one might have them as view children. We initialize the keyboard handling in\n            // AfterViewInit so we're guaranteed for both view and content children to be defined.\n            this._keyManager = new FocusKeyManager(this._stepHeader)\n                .withWrap()\n                .withVerticalOrientation(this._orientation === 'vertical');\n            (this._dir ? this._dir.change : of())\n                .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n                .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n            this._keyManager.updateActiveItem(this._selectedIndex);\n            this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (!this.selected) {\n                    this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n                }\n            });\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Selects and focuses the next step in list. */\n        next() {\n            this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n        }\n        /** Selects and focuses the previous step in list. */\n        previous() {\n            this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n        }\n        /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n        reset() {\n            this._updateSelectedItemIndex(0);\n            this.steps.forEach(step => step.reset());\n            this._stateChanged();\n        }\n        /** Returns a unique id for each step label element. */\n        _getStepLabelId(i) {\n            return `cdk-step-label-${this._groupId}-${i}`;\n        }\n        /** Returns unique id for each step content element. */\n        _getStepContentId(i) {\n            return `cdk-step-content-${this._groupId}-${i}`;\n        }\n        /** Marks the component to be change detected. */\n        _stateChanged() {\n            this._changeDetectorRef.markForCheck();\n        }\n        /** Returns position state of the step with the given index. */\n        _getAnimationDirection(index) {\n            const position = index - this._selectedIndex;\n            if (position < 0) {\n                return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n            }\n            else if (position > 0) {\n                return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n            }\n            return 'current';\n        }\n        /** Returns the type of icon to be displayed. */\n        _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n            const step = this.steps.toArray()[index];\n            const isCurrentStep = this._isCurrentStep(index);\n            return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n                this._getGuidelineLogic(step, isCurrentStep, state);\n        }\n        _getDefaultIndicatorLogic(step, isCurrentStep) {\n            if (step._showError && step.hasError && !isCurrentStep) {\n                return STEP_STATE.ERROR;\n            }\n            else if (!step.completed || isCurrentStep) {\n                return STEP_STATE.NUMBER;\n            }\n            else {\n                return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n            }\n        }\n        _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n            if (step._showError && step.hasError && !isCurrentStep) {\n                return STEP_STATE.ERROR;\n            }\n            else if (step.completed && !isCurrentStep) {\n                return STEP_STATE.DONE;\n            }\n            else if (step.completed && isCurrentStep) {\n                return state;\n            }\n            else if (step.editable && isCurrentStep) {\n                return STEP_STATE.EDIT;\n            }\n            else {\n                return state;\n            }\n        }\n        _isCurrentStep(index) {\n            return this._selectedIndex === index;\n        }\n        /** Returns the index of the currently-focused step header. */\n        _getFocusIndex() {\n            return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n        }\n        _updateSelectedItemIndex(newIndex) {\n            const stepsArray = this.steps.toArray();\n            this.selectionChange.emit({\n                selectedIndex: newIndex,\n                previouslySelectedIndex: this._selectedIndex,\n                selectedStep: stepsArray[newIndex],\n                previouslySelectedStep: stepsArray[this._selectedIndex],\n            });\n            // If focus is inside the stepper, move it to the next header, otherwise it may become\n            // lost when the active step content is hidden. We can't be more granular with the check\n            // (e.g. checking whether focus is inside the active step), because we don't have a\n            // reference to the elements that are rendering out the content.\n            this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n                this._keyManager.updateActiveItem(newIndex);\n            this._selectedIndex = newIndex;\n            this._stateChanged();\n        }\n        _onKeydown(event) {\n            const hasModifier = hasModifierKey(event);\n            const keyCode = event.keyCode;\n            const manager = this._keyManager;\n            if (manager.activeItemIndex != null && !hasModifier &&\n                (keyCode === SPACE || keyCode === ENTER)) {\n                this.selectedIndex = manager.activeItemIndex;\n                event.preventDefault();\n            }\n            else if (keyCode === HOME) {\n                manager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (keyCode === END) {\n                manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n        }\n        _anyControlsInvalidOrPending(index) {\n            const steps = this.steps.toArray();\n            steps[this._selectedIndex].interacted = true;\n            if (this._linear && index >= 0) {\n                return steps.slice(0, index).some(step => {\n                    const control = step.stepControl;\n                    const isIncomplete = control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n                    return isIncomplete && !step.optional && !step._completedOverride;\n                });\n            }\n            return false;\n        }\n        _layoutDirection() {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        }\n        /** Checks whether the stepper contains the focused element. */\n        _containsFocus() {\n            if (!this._document || !this._elementRef) {\n                return false;\n            }\n            const stepperElement = this._elementRef.nativeElement;\n            const focusedElement = this._document.activeElement;\n            return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n        }\n    }\nCdkStepper.ɵfac = function CdkStepper_Factory(t) { return new (t || CdkStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkStepper.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkStepper, selectors: [[\"\", \"cdkStepper\", \"\"]], contentQueries: function CdkStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStep, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepHeader, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._steps = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stepHeader = _t);\n    } }, inputs: { linear: \"linear\", selectedIndex: \"selectedIndex\", selected: \"selected\" }, outputs: { selectionChange: \"selectionChange\" }, exportAs: [\"cdkStepper\"] });\n    CdkStepper.ctorParameters = () => [\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n    CdkStepper.propDecorators = {\n        _steps: [{ type: ContentChildren, args: [CdkStep, { descendants: true },] }],\n        _stepHeader: [{ type: ContentChildren, args: [CdkStepHeader, { descendants: true },] }],\n        linear: [{ type: Input }],\n        selectedIndex: [{ type: Input }],\n        selected: [{ type: Input }],\n        selectionChange: [{ type: Output }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkStepper, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkStepper]',\n                exportAs: 'cdkStepper'\n            }]\n    }], function () { return [{ type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], linear: [{\n            type: Input\n        }], selectedIndex: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], _steps: [{\n            type: ContentChildren,\n            args: [CdkStep, { descendants: true }]\n        }], _stepHeader: [{\n            type: ContentChildren,\n            args: [CdkStepHeader, { descendants: true }]\n        }] }); })();\n    return CdkStepper;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nlet CdkStepperNext = /** @class */ (() => {\n    class CdkStepperNext {\n        constructor(_stepper) {\n            this._stepper = _stepper;\n            /** Type of the next button. Defaults to \"submit\" if not specified. */\n            this.type = 'submit';\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _handleClick() {\n            this._stepper.next();\n        }\n    }\nCdkStepperNext.ɵfac = function CdkStepperNext_Factory(t) { return new (t || CdkStepperNext)(ɵngcc0.ɵɵdirectiveInject(CdkStepper)); };\nCdkStepperNext.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkStepperNext, selectors: [[\"button\", \"cdkStepperNext\", \"\"]], hostVars: 1, hostBindings: function CdkStepperNext_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkStepperNext_click_HostBindingHandler() { return ctx._handleClick(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" } });\n    CdkStepperNext.ctorParameters = () => [\n        { type: CdkStepper }\n    ];\n    CdkStepperNext.propDecorators = {\n        type: [{ type: Input }],\n        _handleClick: [{ type: HostListener, args: ['click',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkStepperNext, [{\n        type: Directive,\n        args: [{\n                selector: 'button[cdkStepperNext]',\n                host: {\n                    '[type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: CdkStepper }]; }, { type: [{\n            type: Input\n        }], _handleClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n    return CdkStepperNext;\n})();\n/** Button that moves to the previous step in a stepper workflow. */\nlet CdkStepperPrevious = /** @class */ (() => {\n    class CdkStepperPrevious {\n        constructor(_stepper) {\n            this._stepper = _stepper;\n            /** Type of the previous button. Defaults to \"button\" if not specified. */\n            this.type = 'button';\n        }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _handleClick() {\n            this._stepper.previous();\n        }\n    }\nCdkStepperPrevious.ɵfac = function CdkStepperPrevious_Factory(t) { return new (t || CdkStepperPrevious)(ɵngcc0.ɵɵdirectiveInject(CdkStepper)); };\nCdkStepperPrevious.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkStepperPrevious, selectors: [[\"button\", \"cdkStepperPrevious\", \"\"]], hostVars: 1, hostBindings: function CdkStepperPrevious_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkStepperPrevious_click_HostBindingHandler() { return ctx._handleClick(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" } });\n    CdkStepperPrevious.ctorParameters = () => [\n        { type: CdkStepper }\n    ];\n    CdkStepperPrevious.propDecorators = {\n        type: [{ type: Input }],\n        _handleClick: [{ type: HostListener, args: ['click',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkStepperPrevious, [{\n        type: Directive,\n        args: [{\n                selector: 'button[cdkStepperPrevious]',\n                host: {\n                    '[type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: CdkStepper }]; }, { type: [{\n            type: Input\n        }], _handleClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n    return CdkStepperPrevious;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet CdkStepperModule = /** @class */ (() => {\n    class CdkStepperModule {\n    }\nCdkStepperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkStepperModule });\nCdkStepperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkStepperModule_Factory(t) { return new (t || CdkStepperModule)(); }, imports: [[BidiModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkStepperModule, { declarations: function () { return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]; }, imports: function () { return [BidiModule]; }, exports: function () { return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkStepperModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule],\n                exports: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ],\n                declarations: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ]\n            }]\n    }], null, null); })();\n    return CdkStepperModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkStep, CdkStepHeader, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious, MAT_STEPPER_GLOBAL_OPTIONS, STEPPER_GLOBAL_OPTIONS, STEP_STATE, StepperSelectionEvent };\n\n//# sourceMappingURL=stepper.js.map","import { PortalModule } from '@angular/cdk/portal';\nimport { CdkStepLabel, CdkStepHeader, CdkStep, STEPPER_GLOBAL_OPTIONS, CdkStepper, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Directive, ɵɵdefineInjectable, Injectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Input, TemplateRef, Inject, forwardRef, ContentChild, EventEmitter, ViewChildren, ContentChildren, Output, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/material/icon';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\n\nfunction MatStepHeader_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 9);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.iconOverrides[ctx_r0.state])(\"ngTemplateOutletContext\", ctx_r0._getIconContext());\n} }\nfunction MatStepHeader_ng_container_4_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r6._getDefaultTextForState(ctx_r6.state));\n} }\nfunction MatStepHeader_ng_container_4_mat_icon_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-icon\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r7._getDefaultTextForState(ctx_r7.state));\n} }\nfunction MatStepHeader_ng_container_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0, 10);\n    ɵngcc0.ɵɵtemplate(1, MatStepHeader_ng_container_4_span_1_Template, 2, 1, \"span\", 11);\n    ɵngcc0.ɵɵtemplate(2, MatStepHeader_ng_container_4_mat_icon_2_Template, 2, 1, \"mat-icon\", 12);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx_r1.state);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"number\");\n} }\nfunction MatStepHeader_ng_container_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 13);\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2._templateLabel().template);\n} }\nfunction MatStepHeader_div_7_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.label);\n} }\nfunction MatStepHeader_div_8_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4._intl.optionalLabel);\n} }\nfunction MatStepHeader_div_9_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.errorMessage);\n} }\nfunction MatStep_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nconst _c0 = [\"*\"];\nfunction MatHorizontalStepper_ng_container_1_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 6);\n} }\nfunction MatHorizontalStepper_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"mat-step-header\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function MatHorizontalStepper_ng_container_1_Template_mat_step_header_click_1_listener() { const step_r2 = ctx.$implicit; return step_r2.select(); })(\"keydown\", function MatHorizontalStepper_ng_container_1_Template_mat_step_header_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7._onKeydown($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, MatHorizontalStepper_ng_container_1_div_2_Template, 1, 0, \"div\", 5);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const step_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const isLast_r4 = ctx.last;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"tabIndex\", ctx_r0._getFocusIndex() === i_r3 ? 0 : 0 - 1)(\"id\", ctx_r0._getStepLabelId(i_r3))(\"index\", i_r3)(\"state\", ctx_r0._getIndicatorType(i_r3, step_r2.state))(\"label\", step_r2.stepLabel || step_r2.label)(\"selected\", ctx_r0.selectedIndex === i_r3)(\"active\", step_r2.completed || ctx_r0.selectedIndex === i_r3 || !ctx_r0.linear)(\"optional\", step_r2.optional)(\"errorMessage\", step_r2.errorMessage)(\"iconOverrides\", ctx_r0._iconOverrides)(\"disableRipple\", ctx_r0.disableRipple);\n    ɵngcc0.ɵɵattribute(\"aria-posinset\", i_r3 + 1)(\"aria-setsize\", ctx_r0.steps.length)(\"aria-controls\", ctx_r0._getStepContentId(i_r3))(\"aria-selected\", ctx_r0.selectedIndex == i_r3)(\"aria-label\", step_r2.ariaLabel || null)(\"aria-labelledby\", !step_r2.ariaLabel && step_r2.ariaLabelledby ? step_r2.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !isLast_r4);\n} }\nfunction MatHorizontalStepper_div_3_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵlistener(\"@stepTransition.done\", function MatHorizontalStepper_div_3_Template_div_animation_stepTransition_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11._animationDone.next($event); });\n    ɵngcc0.ɵɵelementContainer(1, 8);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const step_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@stepTransition\", ctx_r1._getAnimationDirection(i_r10))(\"id\", ctx_r1._getStepContentId(i_r10));\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r1.selectedIndex === i_r10 ? 0 : null)(\"aria-labelledby\", ctx_r1._getStepLabelId(i_r10))(\"aria-expanded\", ctx_r1.selectedIndex === i_r10);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r9.content);\n} }\nfunction MatVerticalStepper_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"mat-step-header\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatVerticalStepper_div_0_Template_mat_step_header_click_1_listener() { const step_r1 = ctx.$implicit; return step_r1.select(); })(\"keydown\", function MatVerticalStepper_div_0_Template_mat_step_header_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5._onKeydown($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 4);\n    ɵngcc0.ɵɵlistener(\"@stepTransition.done\", function MatVerticalStepper_div_0_Template_div_animation_stepTransition_done_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7._animationDone.next($event); });\n    ɵngcc0.ɵɵelementStart(4, \"div\", 5);\n    ɵngcc0.ɵɵelementContainer(5, 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const step_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const isLast_r3 = ctx.last;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"tabIndex\", ctx_r0._getFocusIndex() == i_r2 ? 0 : 0 - 1)(\"id\", ctx_r0._getStepLabelId(i_r2))(\"index\", i_r2)(\"state\", ctx_r0._getIndicatorType(i_r2, step_r1.state))(\"label\", step_r1.stepLabel || step_r1.label)(\"selected\", ctx_r0.selectedIndex === i_r2)(\"active\", step_r1.completed || ctx_r0.selectedIndex === i_r2 || !ctx_r0.linear)(\"optional\", step_r1.optional)(\"errorMessage\", step_r1.errorMessage)(\"iconOverrides\", ctx_r0._iconOverrides)(\"disableRipple\", ctx_r0.disableRipple);\n    ɵngcc0.ɵɵattribute(\"aria-posinset\", i_r2 + 1)(\"aria-setsize\", ctx_r0.steps.length)(\"aria-controls\", ctx_r0._getStepContentId(i_r2))(\"aria-selected\", ctx_r0.selectedIndex === i_r2)(\"aria-label\", step_r1.ariaLabel || null)(\"aria-labelledby\", !step_r1.ariaLabel && step_r1.ariaLabelledby ? step_r1.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"mat-stepper-vertical-line\", !isLast_r3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@stepTransition\", ctx_r0._getAnimationDirection(i_r2))(\"id\", ctx_r0._getStepContentId(i_r2));\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r0.selectedIndex === i_r2 ? 0 : null)(\"aria-labelledby\", ctx_r0._getStepLabelId(i_r2))(\"aria-expanded\", ctx_r0.selectedIndex === i_r2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.content);\n} }\nlet MatStepLabel = /** @class */ (() => {\n    class MatStepLabel extends CdkStepLabel {\n    }\nMatStepLabel.ɵfac = function MatStepLabel_Factory(t) { return ɵMatStepLabel_BaseFactory(t || MatStepLabel); };\nMatStepLabel.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatStepLabel, selectors: [[\"\", \"matStepLabel\", \"\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatStepLabel_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepLabel);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepLabel, [{\n        type: Directive,\n        args: [{\n                selector: '[matStepLabel]'\n            }]\n    }], null, null); })();\n    return MatStepLabel;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Stepper data that is required for internationalization. */\nlet MatStepperIntl = /** @class */ (() => {\n    class MatStepperIntl {\n        constructor() {\n            /**\n             * Stream that emits whenever the labels here are changed. Use this to notify\n             * components if the labels have changed after initialization.\n             */\n            this.changes = new Subject();\n            /** Label that is rendered below optional steps. */\n            this.optionalLabel = 'Optional';\n        }\n    }\nMatStepperIntl.ɵfac = function MatStepperIntl_Factory(t) { return new (t || MatStepperIntl)(); };\n    MatStepperIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatStepperIntl_Factory() { return new MatStepperIntl(); }, token: MatStepperIntl, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepperIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n    return MatStepperIntl;\n})();\n/** @docs-private */\nfunction MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatStepperIntl();\n}\n/** @docs-private */\nconst MAT_STEPPER_INTL_PROVIDER = {\n    provide: MatStepperIntl,\n    deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n    useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatStepHeader = /** @class */ (() => {\n    class MatStepHeader extends CdkStepHeader {\n        constructor(_intl, _focusMonitor, _elementRef, changeDetectorRef) {\n            super(_elementRef);\n            this._intl = _intl;\n            this._focusMonitor = _focusMonitor;\n            this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n        }\n        ngAfterViewInit() {\n            this._focusMonitor.monitor(this._elementRef, true);\n        }\n        ngOnDestroy() {\n            this._intlSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        /** Focuses the step header. */\n        focus() {\n            this._focusMonitor.focusVia(this._elementRef, 'program');\n        }\n        /** Returns string label of given step if it is a text label. */\n        _stringLabel() {\n            return this.label instanceof MatStepLabel ? null : this.label;\n        }\n        /** Returns MatStepLabel if the label of given step is a template label. */\n        _templateLabel() {\n            return this.label instanceof MatStepLabel ? this.label : null;\n        }\n        /** Returns the host HTML element. */\n        _getHostElement() {\n            return this._elementRef.nativeElement;\n        }\n        /** Template context variables that are exposed to the `matStepperIcon` instances. */\n        _getIconContext() {\n            return {\n                index: this.index,\n                active: this.active,\n                optional: this.optional\n            };\n        }\n        _getDefaultTextForState(state) {\n            if (state == 'number') {\n                return `${this.index + 1}`;\n            }\n            if (state == 'edit') {\n                return 'create';\n            }\n            if (state == 'error') {\n                return 'warning';\n            }\n            return state;\n        }\n    }\nMatStepHeader.ɵfac = function MatStepHeader_Factory(t) { return new (t || MatStepHeader)(ɵngcc0.ɵɵdirectiveInject(MatStepperIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatStepHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatStepHeader, selectors: [[\"mat-step-header\"]], hostAttrs: [\"role\", \"tab\", 1, \"mat-step-header\", \"mat-focus-indicator\"], inputs: { state: \"state\", label: \"label\", errorMessage: \"errorMessage\", iconOverrides: \"iconOverrides\", index: \"index\", selected: \"selected\", active: \"active\", optional: \"optional\", disableRipple: \"disableRipple\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 19, consts: [[\"matRipple\", \"\", 1, \"mat-step-header-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-step-icon-content\", 3, \"ngSwitch\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngSwitchCase\"], [3, \"ngSwitch\", 4, \"ngSwitchDefault\"], [1, \"mat-step-label\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [\"class\", \"mat-step-text-label\", 4, \"ngIf\"], [\"class\", \"mat-step-optional\", 4, \"ngIf\"], [\"class\", \"mat-step-sub-label-error\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [3, \"ngTemplateOutlet\"], [1, \"mat-step-text-label\"], [1, \"mat-step-optional\"], [1, \"mat-step-sub-label-error\"]], template: function MatStepHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\");\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(3, MatStepHeader_ng_container_3_Template, 1, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatStepHeader_ng_container_4_Template, 3, 2, \"ng-container\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(6, MatStepHeader_ng_container_6_Template, 1, 1, \"ng-container\", 5);\n        ɵngcc0.ɵɵtemplate(7, MatStepHeader_div_7_Template, 2, 1, \"div\", 6);\n        ɵngcc0.ɵɵtemplate(8, MatStepHeader_div_8_Template, 2, 1, \"div\", 7);\n        ɵngcc0.ɵɵtemplate(9, MatStepHeader_div_9_Template, 2, 1, \"div\", 8);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disableRipple);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMapInterpolate1(\"mat-step-icon-state-\", ctx.state, \" mat-step-icon\");\n        ɵngcc0.ɵɵclassProp(\"mat-step-icon-selected\", ctx.selected);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", !!(ctx.iconOverrides && ctx.iconOverrides[ctx.state]));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-step-label-active\", ctx.active)(\"mat-step-label-selected\", ctx.selected)(\"mat-step-label-error\", ctx.state == \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._templateLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._stringLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.optional && ctx.state != \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state == \"error\");\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc3.NgSwitchDefault, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.MatIcon], styles: [\".mat-step-header{overflow:hidden;outline:none;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon-content,.mat-step-icon .mat-icon{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatStepHeader.ctorParameters = () => [\n        { type: MatStepperIntl },\n        { type: FocusMonitor },\n        { type: ElementRef },\n        { type: ChangeDetectorRef }\n    ];\n    MatStepHeader.propDecorators = {\n        state: [{ type: Input }],\n        label: [{ type: Input }],\n        errorMessage: [{ type: Input }],\n        iconOverrides: [{ type: Input }],\n        index: [{ type: Input }],\n        selected: [{ type: Input }],\n        active: [{ type: Input }],\n        optional: [{ type: Input }],\n        disableRipple: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-step-header',\n                template: \"<div class=\\\"mat-step-header-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disableRipple\\\"></div>\\n\\n<div class=\\\"mat-step-icon-state-{{state}} mat-step-icon\\\" [class.mat-step-icon-selected]=\\\"selected\\\">\\n  <div class=\\\"mat-step-icon-content\\\" [ngSwitch]=\\\"!!(iconOverrides && iconOverrides[state])\\\">\\n    <ng-container\\n      *ngSwitchCase=\\\"true\\\"\\n      [ngTemplateOutlet]=\\\"iconOverrides[state]\\\"\\n      [ngTemplateOutletContext]=\\\"_getIconContext()\\\"></ng-container>\\n    <ng-container *ngSwitchDefault [ngSwitch]=\\\"state\\\">\\n      <span *ngSwitchCase=\\\"'number'\\\">{{_getDefaultTextForState(state)}}</span>\\n      <mat-icon *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon>\\n    </ng-container>\\n  </div>\\n</div>\\n<div class=\\\"mat-step-label\\\"\\n     [class.mat-step-label-active]=\\\"active\\\"\\n     [class.mat-step-label-selected]=\\\"selected\\\"\\n     [class.mat-step-label-error]=\\\"state == 'error'\\\">\\n  <!-- If there is a label template, use it. -->\\n  <ng-container *ngIf=\\\"_templateLabel()\\\" [ngTemplateOutlet]=\\\"_templateLabel()!.template\\\">\\n  </ng-container>\\n  <!-- If there is no label template, fall back to the text label. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_stringLabel()\\\">{{label}}</div>\\n\\n  <div class=\\\"mat-step-optional\\\" *ngIf=\\\"optional && state != 'error'\\\">{{_intl.optionalLabel}}</div>\\n  <div class=\\\"mat-step-sub-label-error\\\" *ngIf=\\\"state == 'error'\\\">{{errorMessage}}</div>\\n</div>\\n\\n\",\n                host: {\n                    'class': 'mat-step-header mat-focus-indicator',\n                    'role': 'tab'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-step-header{overflow:hidden;outline:none;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon-content,.mat-step-icon .mat-icon{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: MatStepperIntl }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { state: [{\n            type: Input\n        }], label: [{\n            type: Input\n        }], errorMessage: [{\n            type: Input\n        }], iconOverrides: [{\n            type: Input\n        }], index: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], active: [{\n            type: Input\n        }], optional: [{\n            type: Input\n        }], disableRipple: [{\n            type: Input\n        }] }); })();\n    return MatStepHeader;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nconst matStepperAnimations = {\n    /** Animation that transitions the step along the X axis in a horizontal stepper. */\n    horizontalStepTransition: trigger('stepTransition', [\n        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),\n        state('current', style({ transform: 'none', visibility: 'visible' })),\n        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),\n        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ]),\n    /** Animation that transitions the step along the Y axis in a vertical stepper. */\n    verticalStepTransition: trigger('stepTransition', [\n        state('previous', style({ height: '0px', visibility: 'hidden' })),\n        state('next', style({ height: '0px', visibility: 'hidden' })),\n        state('current', style({ height: '*', visibility: 'visible' })),\n        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Template to be used to override the icons inside the step header.\n */\nlet MatStepperIcon = /** @class */ (() => {\n    class MatStepperIcon {\n        constructor(templateRef) {\n            this.templateRef = templateRef;\n        }\n    }\nMatStepperIcon.ɵfac = function MatStepperIcon_Factory(t) { return new (t || MatStepperIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatStepperIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatStepperIcon, selectors: [[\"ng-template\", \"matStepperIcon\", \"\"]], inputs: { name: [\"matStepperIcon\", \"name\"] } });\n    MatStepperIcon.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n    MatStepperIcon.propDecorators = {\n        name: [{ type: Input, args: ['matStepperIcon',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepperIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matStepperIcon]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { name: [{\n            type: Input,\n            args: ['matStepperIcon']\n        }] }); })();\n    return MatStepperIcon;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatStep = /** @class */ (() => {\n    class MatStep extends CdkStep {\n        /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n        constructor(stepper, _errorStateMatcher, stepperOptions) {\n            super(stepper, stepperOptions);\n            this._errorStateMatcher = _errorStateMatcher;\n        }\n        /** Custom error state matcher that additionally checks for validity of interacted form. */\n        isErrorState(control, form) {\n            const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n            // Custom error state checks for the validity of form that is not submitted or touched\n            // since user can trigger a form change by calling for another step without directly\n            // interacting with the current form.\n            const customErrorState = !!(control && control.invalid && this.interacted);\n            return originalErrorState || customErrorState;\n        }\n    }\nMatStep.ɵfac = function MatStep_Factory(t) { return new (t || MatStep)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatStepper)), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher, 4), ɵngcc0.ɵɵdirectiveInject(STEPPER_GLOBAL_OPTIONS, 8)); };\nMatStep.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatStep, selectors: [[\"mat-step\"]], contentQueries: function MatStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatStepLabel, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepLabel = _t.first);\n    } }, exportAs: [\"matStep\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: ErrorStateMatcher, useExisting: MatStep },\n            { provide: CdkStep, useExisting: MatStep },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatStep_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatStep_ng_template_0_Template, 1, 0, \"ng-template\");\n    } }, encapsulation: 2, changeDetection: 0 });\n    MatStep.ctorParameters = () => [\n        { type: MatStepper, decorators: [{ type: Inject, args: [forwardRef(() => MatStepper),] }] },\n        { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n    ];\n    MatStep.propDecorators = {\n        stepLabel: [{ type: ContentChild, args: [MatStepLabel,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStep, [{\n        type: Component,\n        args: [{\n                selector: 'mat-step',\n                template: \"<ng-template><ng-content></ng-content></ng-template>\\n\",\n                providers: [\n                    { provide: ErrorStateMatcher, useExisting: MatStep },\n                    { provide: CdkStep, useExisting: MatStep },\n                ],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matStep',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: MatStepper, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatStepper)]\n            }] }, { type: ɵngcc2.ErrorStateMatcher, decorators: [{\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [STEPPER_GLOBAL_OPTIONS]\n            }] }]; }, { stepLabel: [{\n            type: ContentChild,\n            args: [MatStepLabel]\n        }] }); })();\n    return MatStep;\n})();\nlet MatStepper = /** @class */ (() => {\n    class MatStepper extends CdkStepper {\n        constructor() {\n            super(...arguments);\n            /** Event emitted when the current step is done transitioning in. */\n            this.animationDone = new EventEmitter();\n            /** Consumer-specified template-refs to be used to override the header icons. */\n            this._iconOverrides = {};\n            /** Stream of animation `done` events when the body expands/collapses. */\n            this._animationDone = new Subject();\n        }\n        ngAfterContentInit() {\n            this._icons.forEach(({ name, templateRef }) => this._iconOverrides[name] = templateRef);\n            // Mark the component for change detection whenever the content children query changes\n            this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._stateChanged();\n            });\n            this._animationDone.pipe(\n            // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n            // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n            // See https://github.com/angular/angular/issues/24084\n            distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState), takeUntil(this._destroyed)).subscribe(event => {\n                if (event.toState === 'current') {\n                    this.animationDone.emit();\n                }\n            });\n        }\n    }\nMatStepper.ɵfac = function MatStepper_Factory(t) { return ɵMatStepper_BaseFactory(t || MatStepper); };\nMatStepper.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatStepper, selectors: [[\"\", \"matStepper\", \"\"]], contentQueries: function MatStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatStep, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatStepperIcon, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._steps = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icons = _t);\n    } }, viewQuery: function MatStepper_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatStepHeader, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stepHeader = _t);\n    } }, inputs: { disableRipple: \"disableRipple\" }, outputs: { animationDone: \"animationDone\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkStepper, useExisting: MatStepper }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatStepper.propDecorators = {\n        _stepHeader: [{ type: ViewChildren, args: [MatStepHeader,] }],\n        _steps: [{ type: ContentChildren, args: [MatStep, { descendants: true },] }],\n        _icons: [{ type: ContentChildren, args: [MatStepperIcon, { descendants: true },] }],\n        animationDone: [{ type: Output }],\n        disableRipple: [{ type: Input }]\n    };\nconst ɵMatStepper_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepper);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepper, [{\n        type: Directive,\n        args: [{ selector: '[matStepper]', providers: [{ provide: CdkStepper, useExisting: MatStepper }] }]\n    }], null, { animationDone: [{\n            type: Output\n        }], _stepHeader: [{\n            type: ViewChildren,\n            args: [MatStepHeader]\n        }], _steps: [{\n            type: ContentChildren,\n            args: [MatStep, { descendants: true }]\n        }], _icons: [{\n            type: ContentChildren,\n            args: [MatStepperIcon, { descendants: true }]\n        }], disableRipple: [{\n            type: Input\n        }] }); })();\n    return MatStepper;\n})();\nlet MatHorizontalStepper = /** @class */ (() => {\n    class MatHorizontalStepper extends MatStepper {\n        constructor() {\n            super(...arguments);\n            /** Whether the label should display in bottom or end position. */\n            this.labelPosition = 'end';\n        }\n    }\nMatHorizontalStepper.ɵfac = function MatHorizontalStepper_Factory(t) { return ɵMatHorizontalStepper_BaseFactory(t || MatHorizontalStepper); };\nMatHorizontalStepper.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatHorizontalStepper, selectors: [[\"mat-horizontal-stepper\"]], hostAttrs: [\"aria-orientation\", \"horizontal\", \"role\", \"tablist\", 1, \"mat-stepper-horizontal\"], hostVars: 4, hostBindings: function MatHorizontalStepper_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-stepper-label-position-end\", ctx.labelPosition == \"end\")(\"mat-stepper-label-position-bottom\", ctx.labelPosition == \"bottom\");\n    } }, inputs: { selectedIndex: \"selectedIndex\", labelPosition: \"labelPosition\" }, exportAs: [\"matHorizontalStepper\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatStepper, useExisting: MatHorizontalStepper },\n            { provide: CdkStepper, useExisting: MatHorizontalStepper }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 2, consts: [[1, \"mat-horizontal-stepper-header-container\"], [4, \"ngFor\", \"ngForOf\"], [1, \"mat-horizontal-content-container\"], [\"class\", \"mat-horizontal-stepper-content\", \"role\", \"tabpanel\", 3, \"id\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-horizontal-stepper-header\", 3, \"tabIndex\", \"id\", \"index\", \"state\", \"label\", \"selected\", \"active\", \"optional\", \"errorMessage\", \"iconOverrides\", \"disableRipple\", \"click\", \"keydown\"], [\"class\", \"mat-stepper-horizontal-line\", 4, \"ngIf\"], [1, \"mat-stepper-horizontal-line\"], [\"role\", \"tabpanel\", 1, \"mat-horizontal-stepper-content\", 3, \"id\"], [3, \"ngTemplateOutlet\"]], template: function MatHorizontalStepper_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatHorizontalStepper_ng_container_1_Template, 3, 18, \"ng-container\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, MatHorizontalStepper_div_3_Template, 2, 6, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.steps);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.steps);\n    } }, directives: [ɵngcc3.NgForOf, MatStepHeader, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet], styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"], encapsulation: 2, data: { animation: [matStepperAnimations.horizontalStepTransition] }, changeDetection: 0 });\n    MatHorizontalStepper.propDecorators = {\n        labelPosition: [{ type: Input }]\n    };\nconst ɵMatHorizontalStepper_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHorizontalStepper);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHorizontalStepper, [{\n        type: Component,\n        args: [{\n                selector: 'mat-horizontal-stepper',\n                exportAs: 'matHorizontalStepper',\n                template: \"<div class=\\\"mat-horizontal-stepper-header-container\\\">\\n  <ng-container *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n    <mat-step-header class=\\\"mat-horizontal-stepper-header\\\"\\n                     (click)=\\\"step.select()\\\"\\n                     (keydown)=\\\"_onKeydown($event)\\\"\\n                     [tabIndex]=\\\"_getFocusIndex() === i ? 0 : -1\\\"\\n                     [id]=\\\"_getStepLabelId(i)\\\"\\n                     [attr.aria-posinset]=\\\"i + 1\\\"\\n                     [attr.aria-setsize]=\\\"steps.length\\\"\\n                     [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n                     [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n                     [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n                     [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n                     [index]=\\\"i\\\"\\n                     [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n                     [label]=\\\"step.stepLabel || step.label\\\"\\n                     [selected]=\\\"selectedIndex === i\\\"\\n                     [active]=\\\"step.completed || selectedIndex === i || !linear\\\"\\n                     [optional]=\\\"step.optional\\\"\\n                     [errorMessage]=\\\"step.errorMessage\\\"\\n                     [iconOverrides]=\\\"_iconOverrides\\\"\\n                     [disableRipple]=\\\"disableRipple\\\">\\n    </mat-step-header>\\n    <div *ngIf=\\\"!isLast\\\" class=\\\"mat-stepper-horizontal-line\\\"></div>\\n  </ng-container>\\n</div>\\n\\n<div class=\\\"mat-horizontal-content-container\\\">\\n  <div *ngFor=\\\"let step of steps; let i = index\\\"\\n       [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\"\\n       class=\\\"mat-horizontal-stepper-content\\\" role=\\\"tabpanel\\\"\\n       [@stepTransition]=\\\"_getAnimationDirection(i)\\\"\\n       (@stepTransition.done)=\\\"_animationDone.next($event)\\\"\\n       [id]=\\\"_getStepContentId(i)\\\"\\n       [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n       [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n    <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n  </div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-horizontal',\n                    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n                    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n                    'aria-orientation': 'horizontal',\n                    'role': 'tablist'\n                },\n                animations: [matStepperAnimations.horizontalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatHorizontalStepper },\n                    { provide: CdkStepper, useExisting: MatHorizontalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"]\n            }]\n    }], null, { labelPosition: [{\n            type: Input\n        }] }); })();\n    return MatHorizontalStepper;\n})();\nlet MatVerticalStepper = /** @class */ (() => {\n    class MatVerticalStepper extends MatStepper {\n        constructor(dir, changeDetectorRef, \n        // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n        elementRef, _document) {\n            super(dir, changeDetectorRef, elementRef, _document);\n            this._orientation = 'vertical';\n        }\n    }\nMatVerticalStepper.ɵfac = function MatVerticalStepper_Factory(t) { return new (t || MatVerticalStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatVerticalStepper.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatVerticalStepper, selectors: [[\"mat-vertical-stepper\"]], hostAttrs: [\"aria-orientation\", \"vertical\", \"role\", \"tablist\", 1, \"mat-stepper-vertical\"], inputs: { selectedIndex: \"selectedIndex\" }, exportAs: [\"matVerticalStepper\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatStepper, useExisting: MatVerticalStepper },\n            { provide: CdkStepper, useExisting: MatVerticalStepper }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[\"class\", \"mat-step\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-step\"], [1, \"mat-vertical-stepper-header\", 3, \"tabIndex\", \"id\", \"index\", \"state\", \"label\", \"selected\", \"active\", \"optional\", \"errorMessage\", \"iconOverrides\", \"disableRipple\", \"click\", \"keydown\"], [1, \"mat-vertical-content-container\"], [\"role\", \"tabpanel\", 1, \"mat-vertical-stepper-content\", 3, \"id\"], [1, \"mat-vertical-content\"], [3, \"ngTemplateOutlet\"]], template: function MatVerticalStepper_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatVerticalStepper_div_0_Template, 6, 25, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.steps);\n    } }, directives: [ɵngcc3.NgForOf, MatStepHeader, ɵngcc3.NgTemplateOutlet], styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"], encapsulation: 2, data: { animation: [matStepperAnimations.verticalStepTransition] }, changeDetection: 0 });\n    MatVerticalStepper.ctorParameters = () => [\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatVerticalStepper, [{\n        type: Component,\n        args: [{\n                selector: 'mat-vertical-stepper',\n                exportAs: 'matVerticalStepper',\n                template: \"<div class=\\\"mat-step\\\" *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n  <mat-step-header class=\\\"mat-vertical-stepper-header\\\"\\n                   (click)=\\\"step.select()\\\"\\n                   (keydown)=\\\"_onKeydown($event)\\\"\\n                   [tabIndex]=\\\"_getFocusIndex() == i ? 0 : -1\\\"\\n                   [id]=\\\"_getStepLabelId(i)\\\"\\n                   [attr.aria-posinset]=\\\"i + 1\\\"\\n                   [attr.aria-setsize]=\\\"steps.length\\\"\\n                   [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n                   [attr.aria-selected]=\\\"selectedIndex === i\\\"\\n                   [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n                   [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n                   [index]=\\\"i\\\"\\n                   [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n                   [label]=\\\"step.stepLabel || step.label\\\"\\n                   [selected]=\\\"selectedIndex === i\\\"\\n                   [active]=\\\"step.completed || selectedIndex === i || !linear\\\"\\n                   [optional]=\\\"step.optional\\\"\\n                   [errorMessage]=\\\"step.errorMessage\\\"\\n                   [iconOverrides]=\\\"_iconOverrides\\\"\\n                   [disableRipple]=\\\"disableRipple\\\">\\n  </mat-step-header>\\n\\n  <div class=\\\"mat-vertical-content-container\\\" [class.mat-stepper-vertical-line]=\\\"!isLast\\\">\\n    <div class=\\\"mat-vertical-stepper-content\\\" role=\\\"tabpanel\\\"\\n         [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\"\\n         [@stepTransition]=\\\"_getAnimationDirection(i)\\\"\\n         (@stepTransition.done)=\\\"_animationDone.next($event)\\\"\\n         [id]=\\\"_getStepContentId(i)\\\"\\n         [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n         [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n      <div class=\\\"mat-vertical-content\\\">\\n        <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-vertical',\n                    'aria-orientation': 'vertical',\n                    'role': 'tablist'\n                },\n                animations: [matStepperAnimations.verticalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatVerticalStepper },\n                    { provide: CdkStepper, useExisting: MatVerticalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return MatVerticalStepper;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nlet MatStepperNext = /** @class */ (() => {\n    class MatStepperNext extends CdkStepperNext {\n    }\nMatStepperNext.ɵfac = function MatStepperNext_Factory(t) { return ɵMatStepperNext_BaseFactory(t || MatStepperNext); };\nMatStepperNext.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatStepperNext, selectors: [[\"button\", \"matStepperNext\", \"\"]], hostVars: 1, hostBindings: function MatStepperNext_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatStepperNext_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepperNext);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepperNext, [{\n        type: Directive,\n        args: [{\n                selector: 'button[matStepperNext]',\n                host: {\n                    '[type]': 'type'\n                },\n                inputs: ['type']\n            }]\n    }], null, null); })();\n    return MatStepperNext;\n})();\n/** Button that moves to the previous step in a stepper workflow. */\nlet MatStepperPrevious = /** @class */ (() => {\n    class MatStepperPrevious extends CdkStepperPrevious {\n    }\nMatStepperPrevious.ɵfac = function MatStepperPrevious_Factory(t) { return ɵMatStepperPrevious_BaseFactory(t || MatStepperPrevious); };\nMatStepperPrevious.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatStepperPrevious, selectors: [[\"button\", \"matStepperPrevious\", \"\"]], hostVars: 1, hostBindings: function MatStepperPrevious_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatStepperPrevious_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepperPrevious);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepperPrevious, [{\n        type: Directive,\n        args: [{\n                selector: 'button[matStepperPrevious]',\n                host: {\n                    '[type]': 'type'\n                },\n                inputs: ['type']\n            }]\n    }], null, null); })();\n    return MatStepperPrevious;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatStepperModule = /** @class */ (() => {\n    class MatStepperModule {\n    }\nMatStepperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatStepperModule });\nMatStepperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatStepperModule_Factory(t) { return new (t || MatStepperModule)(); }, providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher], imports: [[\n            MatCommonModule,\n            CommonModule,\n            PortalModule,\n            MatButtonModule,\n            CdkStepperModule,\n            MatIconModule,\n            MatRippleModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatStepperModule, { declarations: function () { return [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIcon]; }, imports: function () { return [MatCommonModule,\n        CommonModule,\n        PortalModule,\n        MatButtonModule,\n        CdkStepperModule,\n        MatIconModule,\n        MatRippleModule]; }, exports: function () { return [MatCommonModule, MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIcon]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepperModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatCommonModule,\n                    CommonModule,\n                    PortalModule,\n                    MatButtonModule,\n                    CdkStepperModule,\n                    MatIconModule,\n                    MatRippleModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                declarations: [\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher]\n            }]\n    }], null, null); })();\n    return MatStepperModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_STEPPER_INTL_PROVIDER, MAT_STEPPER_INTL_PROVIDER_FACTORY, MatHorizontalStepper, MatStep, MatStepHeader, MatStepLabel, MatStepper, MatStepperIcon, MatStepperIntl, MatStepperModule, MatStepperNext, MatStepperPrevious, MatVerticalStepper, matStepperAnimations };\n\n//# sourceMappingURL=stepper.js.map","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, isDevMode, ChangeDetectorRef, Attribute, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() { return this._sticky; }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nlet CdkCellDef = /** @class */ (() => {\n    class CdkCellDef {\n        constructor(/** @docs-private */ template) {\n            this.template = template;\n        }\n    }\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\n    CdkCellDef.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return CdkCellDef;\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nlet CdkHeaderCellDef = /** @class */ (() => {\n    class CdkHeaderCellDef {\n        constructor(/** @docs-private */ template) {\n            this.template = template;\n        }\n    }\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\n    CdkHeaderCellDef.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return CdkHeaderCellDef;\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nlet CdkFooterCellDef = /** @class */ (() => {\n    class CdkFooterCellDef {\n        constructor(/** @docs-private */ template) {\n            this.template = template;\n        }\n    }\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\n    CdkFooterCellDef.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return CdkFooterCellDef;\n})();\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nlet CdkColumnDef = /** @class */ (() => {\n    class CdkColumnDef extends _CdkColumnDefBase {\n        constructor(_table) {\n            super();\n            this._table = _table;\n            this._stickyEnd = false;\n        }\n        /** Unique name for this column. */\n        get name() {\n            return this._name;\n        }\n        set name(name) {\n            // If the directive is set without a name (updated programatically), then this setter will\n            // trigger with an empty string and should not overwrite the programatically set value.\n            if (name) {\n                this._name = name;\n                this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n            }\n        }\n        /**\n         * Whether this column should be sticky positioned on the end of the row. Should make sure\n         * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n         * has been changed.\n         */\n        get stickyEnd() {\n            return this._stickyEnd;\n        }\n        set stickyEnd(v) {\n            const prevValue = this._stickyEnd;\n            this._stickyEnd = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._stickyEnd;\n        }\n    }\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkColumnDef.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n    ];\n    CdkColumnDef.propDecorators = {\n        name: [{ type: Input, args: ['cdkColumnDef',] }],\n        stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n        cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n        headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n        footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n    return CdkColumnDef;\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nlet CdkHeaderCell = /** @class */ (() => {\n    class CdkHeaderCell extends BaseCdkCell {\n        constructor(columnDef, elementRef) {\n            super(columnDef, elementRef);\n        }\n    }\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkHeaderCell.ctorParameters = () => [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return CdkHeaderCell;\n})();\n/** Footer cell template container that adds the right classes and role. */\nlet CdkFooterCell = /** @class */ (() => {\n    class CdkFooterCell extends BaseCdkCell {\n        constructor(columnDef, elementRef) {\n            super(columnDef, elementRef);\n        }\n    }\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkFooterCell.ctorParameters = () => [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return CdkFooterCell;\n})();\n/** Cell template container that adds the right classes and role. */\nlet CdkCell = /** @class */ (() => {\n    class CdkCell extends BaseCdkCell {\n        constructor(columnDef, elementRef) {\n            super(columnDef, elementRef);\n        }\n    }\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkCell.ctorParameters = () => [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return CdkCell;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nlet BaseRowDef = /** @class */ (() => {\n    class BaseRowDef {\n        constructor(\n        /** @docs-private */ template, _differs) {\n            this.template = template;\n            this._differs = _differs;\n        }\n        ngOnChanges(changes) {\n            // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n            // of the columns property or an empty array if none is provided.\n            if (!this._columnsDiffer) {\n                const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n                this._columnsDiffer = this._differs.find(columns).create();\n                this._columnsDiffer.diff(columns);\n            }\n        }\n        /**\n         * Returns the difference between the current columns and the columns from the last diff, or null\n         * if there is no difference.\n         */\n        getColumnsDiff() {\n            return this._columnsDiffer.diff(this.columns);\n        }\n        /** Gets this row def's relevant cell template from the provided column def. */\n        extractCellTemplate(column) {\n            if (this instanceof CdkHeaderRowDef) {\n                return column.headerCell.template;\n            }\n            if (this instanceof CdkFooterRowDef) {\n                return column.footerCell.template;\n            }\n            else {\n                return column.cell.template;\n            }\n        }\n    }\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nBaseRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    BaseRowDef.ctorParameters = () => [\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n    return BaseRowDef;\n})();\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nlet CdkHeaderRowDef = /** @class */ (() => {\n    class CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n        constructor(template, _differs, _table) {\n            super(template, _differs);\n            this._table = _table;\n        }\n        // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n        // Explicitly define it so that the method is called as part of the Angular lifecycle.\n        ngOnChanges(changes) {\n            super.ngOnChanges(changes);\n        }\n    }\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkHeaderRowDef.ctorParameters = () => [\n        { type: TemplateRef },\n        { type: IterableDiffers },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n    return CdkHeaderRowDef;\n})();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nlet CdkFooterRowDef = /** @class */ (() => {\n    class CdkFooterRowDef extends _CdkFooterRowDefBase {\n        constructor(template, _differs, _table) {\n            super(template, _differs);\n            this._table = _table;\n        }\n        // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n        // Explicitly define it so that the method is called as part of the Angular lifecycle.\n        ngOnChanges(changes) {\n            super.ngOnChanges(changes);\n        }\n    }\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkFooterRowDef.ctorParameters = () => [\n        { type: TemplateRef },\n        { type: IterableDiffers },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n    return CdkFooterRowDef;\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nlet CdkRowDef = /** @class */ (() => {\n    class CdkRowDef extends BaseRowDef {\n        // TODO(andrewseguin): Add an input for providing a switch function to determine\n        //   if this template should be used.\n        constructor(template, _differs, _table) {\n            super(template, _differs);\n            this._table = _table;\n        }\n    }\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkRowDef.ctorParameters = () => [\n        { type: TemplateRef },\n        { type: IterableDiffers },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n    return CdkRowDef;\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nlet CdkCellOutlet = /** @class */ (() => {\n    class CdkCellOutlet {\n        constructor(_viewContainer) {\n            this._viewContainer = _viewContainer;\n            CdkCellOutlet.mostRecentCellOutlet = this;\n        }\n        ngOnDestroy() {\n            // If this was the last outlet being rendered in the view, remove the reference\n            // from the static property after it has been destroyed to avoid leaking memory.\n            if (CdkCellOutlet.mostRecentCellOutlet === this) {\n                CdkCellOutlet.mostRecentCellOutlet = null;\n            }\n        }\n    }\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    CdkCellOutlet.mostRecentCellOutlet = null;\n    CdkCellOutlet.ctorParameters = () => [\n        { type: ViewContainerRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n    return CdkCellOutlet;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nlet CdkHeaderRow = /** @class */ (() => {\n    class CdkHeaderRow {\n    }\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n    return CdkHeaderRow;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nlet CdkFooterRow = /** @class */ (() => {\n    class CdkFooterRow {\n    }\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n    return CdkFooterRow;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nlet CdkRow = /** @class */ (() => {\n    class CdkRow {\n    }\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n    return CdkRow;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nlet CdkNoDataRow = /** @class */ (() => {\n    class CdkNoDataRow {\n        constructor(templateRef) {\n            this.templateRef = templateRef;\n        }\n    }\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkNoDataRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\n    CdkNoDataRow.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkNoDataRow]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return CdkNoDataRow;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser = true) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                const cell = row.children[i];\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        const hasStickyColumns = stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                const cell = row.children[i];\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            const row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    const cell = row.children[j];\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        if (stickyStates.some(state => !state)) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row) {\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nlet DataRowOutlet = /** @class */ (() => {\n    class DataRowOutlet {\n        constructor(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n    }\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\n    DataRowOutlet.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return DataRowOutlet;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nlet HeaderRowOutlet = /** @class */ (() => {\n    class HeaderRowOutlet {\n        constructor(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n    }\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\n    HeaderRowOutlet.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return HeaderRowOutlet;\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nlet FooterRowOutlet = /** @class */ (() => {\n    class FooterRowOutlet {\n        constructor(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n    }\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\n    FooterRowOutlet.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return FooterRowOutlet;\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nlet NoDataRowOutlet = /** @class */ (() => {\n    class NoDataRowOutlet {\n        constructor(viewContainer, elementRef) {\n            this.viewContainer = viewContainer;\n            this.elementRef = elementRef;\n        }\n    }\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNoDataRowOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\n    NoDataRowOutlet.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[noDataRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return NoDataRowOutlet;\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nlet CdkTable = /** @class */ (() => {\n    class CdkTable {\n        constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n            this._differs = _differs;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._elementRef = _elementRef;\n            this._dir = _dir;\n            this._platform = _platform;\n            /** Subject that emits when the component has been destroyed. */\n            this._onDestroy = new Subject();\n            /**\n             * Map of all the user's defined columns (header, data, and footer cell template) identified by\n             * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n             * any custom column definitions added to `_customColumnDefs`.\n             */\n            this._columnDefsByName = new Map();\n            /**\n             * Column definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * column definitions as *its* content child.\n             */\n            this._customColumnDefs = new Set();\n            /**\n             * Data row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * built-in data rows as *its* content child.\n             */\n            this._customRowDefs = new Set();\n            /**\n             * Header row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n             * built-in header rows as *its* content child.\n             */\n            this._customHeaderRowDefs = new Set();\n            /**\n             * Footer row definitions that were defined outside of the direct content children of the table.\n             * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n             * built-in footer row as *its* content child.\n             */\n            this._customFooterRowDefs = new Set();\n            /**\n             * Whether the header row definition has been changed. Triggers an update to the header row after\n             * content is checked. Initialized as true so that the table renders the initial set of rows.\n             */\n            this._headerRowDefChanged = true;\n            /**\n             * Whether the footer row definition has been changed. Triggers an update to the footer row after\n             * content is checked. Initialized as true so that the table renders the initial set of rows.\n             */\n            this._footerRowDefChanged = true;\n            /**\n             * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n             * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n             * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n             * and row template matches, which allows the `IterableDiffer` to check rows by reference\n             * and understand which rows are added/moved/removed.\n             *\n             * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n             * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n             * contains an array of created pairs. The array is necessary to handle cases where the data\n             * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n             * stored.\n             */\n            this._cachedRenderRowsMap = new Map();\n            /**\n             * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n             * table subclasses.\n             */\n            this.stickyCssClass = 'cdk-table-sticky';\n            /** Whether the no data row is currently showing anything. */\n            this._isShowingNoDataRow = false;\n            this._multiTemplateDataRows = false;\n            // TODO(andrewseguin): Remove max value as the end index\n            //   and instead calculate the view on init and scroll.\n            /**\n             * Stream containing the latest information on what rows are being displayed on screen.\n             * Can be used by the data source to as a heuristic of what data should be provided.\n             *\n             * @docs-private\n             */\n            this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n            if (!role) {\n                this._elementRef.nativeElement.setAttribute('role', 'grid');\n            }\n            this._document = _document;\n            this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n        }\n        /**\n         * Tracking function that will be used to check the differences in data changes. Used similarly\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n         * relative to the function to know if a row should be added/removed/moved.\n         * Accepts a function that takes two parameters, `index` and `item`.\n         */\n        get trackBy() {\n            return this._trackByFn;\n        }\n        set trackBy(fn) {\n            if (isDevMode() && fn != null && typeof fn !== 'function' && console &&\n                console.warn) {\n                console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n            }\n            this._trackByFn = fn;\n        }\n        /**\n         * The table's source of data, which can be provided in three ways (in order of complexity):\n         *   - Simple data array (each object represents one table row)\n         *   - Stream that emits a data array each time the array changes\n         *   - `DataSource` object that implements the connect/disconnect interface.\n         *\n         * If a data array is provided, the table must be notified when the array's objects are\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n         * render the diff since the last table render. If the data array reference is changed, the table\n         * will automatically trigger an update to the rows.\n         *\n         * When providing an Observable stream, the table will trigger an update automatically when the\n         * stream emits a new array of data.\n         *\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\n         * provided by the connect function and trigger updates when that stream emits new data array\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n         * subscriptions registered during the connect process).\n         */\n        get dataSource() {\n            return this._dataSource;\n        }\n        set dataSource(dataSource) {\n            if (this._dataSource !== dataSource) {\n                this._switchDataSource(dataSource);\n            }\n        }\n        /**\n         * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n         * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n         * dataobject will render the first row that evaluates its when predicate to true, in the order\n         * defined in the table, or otherwise the default row which does not have a when predicate.\n         */\n        get multiTemplateDataRows() {\n            return this._multiTemplateDataRows;\n        }\n        set multiTemplateDataRows(v) {\n            this._multiTemplateDataRows = coerceBooleanProperty(v);\n            // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n            // this setter will be invoked before the row outlet has been defined hence the null check.\n            if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n                this._forceRenderDataRows();\n            }\n        }\n        ngOnInit() {\n            this._setupStickyStyler();\n            if (this._isNativeHtmlTable) {\n                this._applyNativeTableSections();\n            }\n            // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n            // the user has provided a custom trackBy, return the result of that function as evaluated\n            // with the values of the `RenderRow`'s data and index.\n            this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n                return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n            });\n        }\n        ngAfterContentChecked() {\n            // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n            this._cacheRowDefs();\n            this._cacheColumnDefs();\n            // Make sure that the user has at least added header, footer, or data row def.\n            if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n                throw getTableMissingRowDefsError();\n            }\n            // Render updates if the list of columns have been changed for the header, row, or footer defs.\n            this._renderUpdatedColumns();\n            // If the header row definition has been changed, trigger a render to the header row.\n            if (this._headerRowDefChanged) {\n                this._forceRenderHeaderRows();\n                this._headerRowDefChanged = false;\n            }\n            // If the footer row definition has been changed, trigger a render to the footer row.\n            if (this._footerRowDefChanged) {\n                this._forceRenderFooterRows();\n                this._footerRowDefChanged = false;\n            }\n            // If there is a data source and row definitions, connect to the data source unless a\n            // connection has already been made.\n            if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n                this._observeRenderChanges();\n            }\n            this._checkStickyStates();\n        }\n        ngOnDestroy() {\n            this._rowOutlet.viewContainer.clear();\n            this._noDataRowOutlet.viewContainer.clear();\n            this._headerRowOutlet.viewContainer.clear();\n            this._footerRowOutlet.viewContainer.clear();\n            this._cachedRenderRowsMap.clear();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (isDataSource(this.dataSource)) {\n                this.dataSource.disconnect(this);\n            }\n        }\n        /**\n         * Renders rows based on the table's latest set of data, which was either provided directly as an\n         * input or retrieved through an Observable stream (directly or from a DataSource).\n         * Checks for differences in the data since the last diff to perform only the necessary\n         * changes (add/remove/move rows).\n         *\n         * If the table's data source is a DataSource or Observable, this will be invoked automatically\n         * each time the provided Observable stream emits a new data array. Otherwise if your data is\n         * an array, this function will need to be called to render any changes.\n         */\n        renderRows() {\n            this._renderRows = this._getAllRenderRows();\n            const changes = this._dataDiffer.diff(this._renderRows);\n            if (!changes) {\n                return;\n            }\n            const viewContainer = this._rowOutlet.viewContainer;\n            changes.forEachOperation((record, prevIndex, currentIndex) => {\n                if (record.previousIndex == null) {\n                    this._insertRow(record.item, currentIndex);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(prevIndex);\n                }\n                else {\n                    const view = viewContainer.get(prevIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n            // Update the meta context of a row's context data (index, count, first, last, ...)\n            this._updateRowIndexContext();\n            // Update rows that did not get added/removed/moved but may have had their identity changed,\n            // e.g. if trackBy matched data on some property but the actual data reference changed.\n            changes.forEachIdentityChange((record) => {\n                const rowView = viewContainer.get(record.currentIndex);\n                rowView.context.$implicit = record.item.data;\n            });\n            this._updateNoDataRow();\n            this.updateStickyColumnStyles();\n        }\n        /** Adds a column definition that was not included as part of the content children. */\n        addColumnDef(columnDef) {\n            this._customColumnDefs.add(columnDef);\n        }\n        /** Removes a column definition that was not included as part of the content children. */\n        removeColumnDef(columnDef) {\n            this._customColumnDefs.delete(columnDef);\n        }\n        /** Adds a row definition that was not included as part of the content children. */\n        addRowDef(rowDef) {\n            this._customRowDefs.add(rowDef);\n        }\n        /** Removes a row definition that was not included as part of the content children. */\n        removeRowDef(rowDef) {\n            this._customRowDefs.delete(rowDef);\n        }\n        /** Adds a header row definition that was not included as part of the content children. */\n        addHeaderRowDef(headerRowDef) {\n            this._customHeaderRowDefs.add(headerRowDef);\n            this._headerRowDefChanged = true;\n        }\n        /** Removes a header row definition that was not included as part of the content children. */\n        removeHeaderRowDef(headerRowDef) {\n            this._customHeaderRowDefs.delete(headerRowDef);\n            this._headerRowDefChanged = true;\n        }\n        /** Adds a footer row definition that was not included as part of the content children. */\n        addFooterRowDef(footerRowDef) {\n            this._customFooterRowDefs.add(footerRowDef);\n            this._footerRowDefChanged = true;\n        }\n        /** Removes a footer row definition that was not included as part of the content children. */\n        removeFooterRowDef(footerRowDef) {\n            this._customFooterRowDefs.delete(footerRowDef);\n            this._footerRowDefChanged = true;\n        }\n        /**\n         * Updates the header sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n         * automatically called when the header row changes its displayed set of columns, or if its\n         * sticky input changes. May be called manually for cases where the cell content changes outside\n         * of these events.\n         */\n        updateStickyHeaderRowStyles() {\n            const headerRows = this._getRenderedRows(this._headerRowOutlet);\n            const tableElement = this._elementRef.nativeElement;\n            // Hide the thead element if there are no header rows. This is necessary to satisfy\n            // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n            // required child `row`.\n            const thead = tableElement.querySelector('thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n            const stickyStates = this._headerRowDefs.map(def => def.sticky);\n            this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n            this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n            // Reset the dirty state of the sticky input change since it has been used.\n            this._headerRowDefs.forEach(def => def.resetStickyChanged());\n        }\n        /**\n         * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n         * automatically called when the footer row changes its displayed set of columns, or if its\n         * sticky input changes. May be called manually for cases where the cell content changes outside\n         * of these events.\n         */\n        updateStickyFooterRowStyles() {\n            const footerRows = this._getRenderedRows(this._footerRowOutlet);\n            const tableElement = this._elementRef.nativeElement;\n            // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n            // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n            // required child `row`.\n            const tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n            const stickyStates = this._footerRowDefs.map(def => def.sticky);\n            this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n            this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n            this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n            // Reset the dirty state of the sticky input change since it has been used.\n            this._footerRowDefs.forEach(def => def.resetStickyChanged());\n        }\n        /**\n         * Updates the column sticky styles. First resets all applied styles with respect to the cells\n         * sticking to the left and right. Then sticky styles are added for the left and right according\n         * to the column definitions for each cell in each row. This is automatically called when\n         * the data source provides a new set of data or when a column definition changes its sticky\n         * input. May be called manually for cases where the cell content changes outside of these events.\n         */\n        updateStickyColumnStyles() {\n            const headerRows = this._getRenderedRows(this._headerRowOutlet);\n            const dataRows = this._getRenderedRows(this._rowOutlet);\n            const footerRows = this._getRenderedRows(this._footerRowOutlet);\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            // Update the sticky styles for each header row depending on the def's sticky state\n            headerRows.forEach((headerRow, i) => {\n                this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n            });\n            // Update the sticky styles for each data row depending on its def's sticky state\n            this._rowDefs.forEach(rowDef => {\n                // Collect all the rows rendered with this row definition.\n                const rows = [];\n                for (let i = 0; i < dataRows.length; i++) {\n                    if (this._renderRows[i].rowDef === rowDef) {\n                        rows.push(dataRows[i]);\n                    }\n                }\n                this._addStickyColumnStyles(rows, rowDef);\n            });\n            // Update the sticky styles for each footer row depending on the def's sticky state\n            footerRows.forEach((footerRow, i) => {\n                this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n            });\n            // Reset the dirty state of the sticky input change since it has been used.\n            Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n        }\n        /**\n         * Get the list of RenderRow objects to render according to the current list of data and defined\n         * row definitions. If the previous list already contained a particular pair, it should be reused\n         * so that the differ equates their references.\n         */\n        _getAllRenderRows() {\n            const renderRows = [];\n            // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n            // new cache while unused ones can be picked up by garbage collection.\n            const prevCachedRenderRows = this._cachedRenderRowsMap;\n            this._cachedRenderRowsMap = new Map();\n            // For each data object, get the list of rows that should be rendered, represented by the\n            // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n            for (let i = 0; i < this._data.length; i++) {\n                let data = this._data[i];\n                const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n                if (!this._cachedRenderRowsMap.has(data)) {\n                    this._cachedRenderRowsMap.set(data, new WeakMap());\n                }\n                for (let j = 0; j < renderRowsForData.length; j++) {\n                    let renderRow = renderRowsForData[j];\n                    const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                    if (cache.has(renderRow.rowDef)) {\n                        cache.get(renderRow.rowDef).push(renderRow);\n                    }\n                    else {\n                        cache.set(renderRow.rowDef, [renderRow]);\n                    }\n                    renderRows.push(renderRow);\n                }\n            }\n            return renderRows;\n        }\n        /**\n         * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n         * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n         * `(T, CdkRowDef)` pair.\n         */\n        _getRenderRowsForData(data, dataIndex, cache) {\n            const rowDefs = this._getRowDefs(data, dataIndex);\n            return rowDefs.map(rowDef => {\n                const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n                if (cachedRenderRows.length) {\n                    const dataRow = cachedRenderRows.shift();\n                    dataRow.dataIndex = dataIndex;\n                    return dataRow;\n                }\n                else {\n                    return { data, rowDef, dataIndex };\n                }\n            });\n        }\n        /** Update the map containing the content's column definitions. */\n        _cacheColumnDefs() {\n            this._columnDefsByName.clear();\n            const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n            columnDefs.forEach(columnDef => {\n                if (this._columnDefsByName.has(columnDef.name)) {\n                    throw getTableDuplicateColumnNameError(columnDef.name);\n                }\n                this._columnDefsByName.set(columnDef.name, columnDef);\n            });\n        }\n        /** Update the list of all available row definitions that can be used. */\n        _cacheRowDefs() {\n            this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n            this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n            this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n            // After all row definitions are determined, find the row definition to be considered default.\n            const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n            if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n                throw getTableMultipleDefaultRowDefsError();\n            }\n            this._defaultRowDef = defaultRowDefs[0];\n        }\n        /**\n         * Check if the header, data, or footer rows have changed what columns they want to display or\n         * whether the sticky states have changed for the header or footer. If there is a diff, then\n         * re-render that section.\n         */\n        _renderUpdatedColumns() {\n            const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n            // Force re-render data rows if the list of column definitions have changed.\n            if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderDataRows();\n            }\n            // Force re-render header/footer rows if the list of column definitions have changed..\n            if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderHeaderRows();\n            }\n            if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n                this._forceRenderFooterRows();\n            }\n        }\n        /**\n         * Switch to the provided data source by resetting the data and unsubscribing from the current\n         * render change subscription if one exists. If the data source is null, interpret this by\n         * clearing the row outlet. Otherwise start listening for new data.\n         */\n        _switchDataSource(dataSource) {\n            this._data = [];\n            if (isDataSource(this.dataSource)) {\n                this.dataSource.disconnect(this);\n            }\n            // Stop listening for data from the previous data source.\n            if (this._renderChangeSubscription) {\n                this._renderChangeSubscription.unsubscribe();\n                this._renderChangeSubscription = null;\n            }\n            if (!dataSource) {\n                if (this._dataDiffer) {\n                    this._dataDiffer.diff([]);\n                }\n                this._rowOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n        }\n        /** Set up a subscription for the data provided by the data source. */\n        _observeRenderChanges() {\n            // If no data source has been set, there is nothing to observe for changes.\n            if (!this.dataSource) {\n                return;\n            }\n            let dataStream;\n            if (isDataSource(this.dataSource)) {\n                dataStream = this.dataSource.connect(this);\n            }\n            else if (isObservable(this.dataSource)) {\n                dataStream = this.dataSource;\n            }\n            else if (Array.isArray(this.dataSource)) {\n                dataStream = of(this.dataSource);\n            }\n            if (dataStream === undefined) {\n                throw getTableUnknownDataSourceError();\n            }\n            this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n                this._data = data || [];\n                this.renderRows();\n            });\n        }\n        /**\n         * Clears any existing content in the header row outlet and creates a new embedded view\n         * in the outlet using the header row definition.\n         */\n        _forceRenderHeaderRows() {\n            // Clear the header row outlet if any content exists.\n            if (this._headerRowOutlet.viewContainer.length > 0) {\n                this._headerRowOutlet.viewContainer.clear();\n            }\n            this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n            this.updateStickyHeaderRowStyles();\n            this.updateStickyColumnStyles();\n        }\n        /**\n         * Clears any existing content in the footer row outlet and creates a new embedded view\n         * in the outlet using the footer row definition.\n         */\n        _forceRenderFooterRows() {\n            // Clear the footer row outlet if any content exists.\n            if (this._footerRowOutlet.viewContainer.length > 0) {\n                this._footerRowOutlet.viewContainer.clear();\n            }\n            this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n            this.updateStickyFooterRowStyles();\n            this.updateStickyColumnStyles();\n        }\n        /** Adds the sticky column styles for the rows according to the columns' stick states. */\n        _addStickyColumnStyles(rows, rowDef) {\n            const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n                const columnDef = this._columnDefsByName.get(columnName);\n                if (!columnDef) {\n                    throw getTableUnknownColumnError(columnName);\n                }\n                return columnDef;\n            });\n            const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n            const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n            this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n        }\n        /** Gets the list of rows that have been rendered in the row outlet. */\n        _getRenderedRows(rowOutlet) {\n            const renderedRows = [];\n            for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n                const viewRef = rowOutlet.viewContainer.get(i);\n                renderedRows.push(viewRef.rootNodes[0]);\n            }\n            return renderedRows;\n        }\n        /**\n         * Get the matching row definitions that should be used for this row data. If there is only\n         * one row definition, it is returned. Otherwise, find the row definitions that has a when\n         * predicate that returns true with the data. If none return true, return the default row\n         * definition.\n         */\n        _getRowDefs(data, dataIndex) {\n            if (this._rowDefs.length == 1) {\n                return [this._rowDefs[0]];\n            }\n            let rowDefs = [];\n            if (this.multiTemplateDataRows) {\n                rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n            }\n            else {\n                let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n                if (rowDef) {\n                    rowDefs.push(rowDef);\n                }\n            }\n            if (!rowDefs.length) {\n                throw getTableMissingMatchingRowDefError(data);\n            }\n            return rowDefs;\n        }\n        /**\n         * Create the embedded view for the data row template and place it in the correct index location\n         * within the data row view container.\n         */\n        _insertRow(renderRow, renderIndex) {\n            const rowDef = renderRow.rowDef;\n            const context = { $implicit: renderRow.data };\n            this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n        }\n        /**\n         * Creates a new row template in the outlet and fills it with the set of cell templates.\n         * Optionally takes a context to provide to the row and cells, as well as an optional index\n         * of where to place the new row template in the outlet.\n         */\n        _renderRow(outlet, rowDef, index, context = {}) {\n            // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n            outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n            for (let cellTemplate of this._getCellTemplates(rowDef)) {\n                if (CdkCellOutlet.mostRecentCellOutlet) {\n                    CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n        /**\n         * Updates the index-related context for each row to reflect any changes in the index of the rows,\n         * e.g. first/last/even/odd.\n         */\n        _updateRowIndexContext() {\n            const viewContainer = this._rowOutlet.viewContainer;\n            for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n                const viewRef = viewContainer.get(renderIndex);\n                const context = viewRef.context;\n                context.count = count;\n                context.first = renderIndex === 0;\n                context.last = renderIndex === count - 1;\n                context.even = renderIndex % 2 === 0;\n                context.odd = !context.even;\n                if (this.multiTemplateDataRows) {\n                    context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                    context.renderIndex = renderIndex;\n                }\n                else {\n                    context.index = this._renderRows[renderIndex].dataIndex;\n                }\n            }\n        }\n        /** Gets the column definitions for the provided row def. */\n        _getCellTemplates(rowDef) {\n            if (!rowDef || !rowDef.columns) {\n                return [];\n            }\n            return Array.from(rowDef.columns, columnId => {\n                const column = this._columnDefsByName.get(columnId);\n                if (!column) {\n                    throw getTableUnknownColumnError(columnId);\n                }\n                return rowDef.extractCellTemplate(column);\n            });\n        }\n        /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n        _applyNativeTableSections() {\n            const documentFragment = this._document.createDocumentFragment();\n            const sections = [\n                { tag: 'thead', outlets: [this._headerRowOutlet] },\n                { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n                { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n            ];\n            for (const section of sections) {\n                const element = this._document.createElement(section.tag);\n                element.setAttribute('role', 'rowgroup');\n                for (const outlet of section.outlets) {\n                    element.appendChild(outlet.elementRef.nativeElement);\n                }\n                documentFragment.appendChild(element);\n            }\n            // Use a DocumentFragment so we don't hit the DOM on each iteration.\n            this._elementRef.nativeElement.appendChild(documentFragment);\n        }\n        /**\n         * Forces a re-render of the data rows. Should be called in cases where there has been an input\n         * change that affects the evaluation of which rows should be rendered, e.g. toggling\n         * `multiTemplateDataRows` or adding/removing row definitions.\n         */\n        _forceRenderDataRows() {\n            this._dataDiffer.diff([]);\n            this._rowOutlet.viewContainer.clear();\n            this.renderRows();\n            this.updateStickyColumnStyles();\n        }\n        /**\n         * Checks if there has been a change in sticky states since last check and applies the correct\n         * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n         * during a change detection and after the inputs are settled (after content check).\n         */\n        _checkStickyStates() {\n            const stickyCheckReducer = (acc, d) => {\n                return acc || d.hasStickyChanged();\n            };\n            // Note that the check needs to occur for every definition since it notifies the definition\n            // that it can reset its dirty state. Using another operator like `some` may short-circuit\n            // remaining definitions and leave them in an unchecked state.\n            if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n                this.updateStickyHeaderRowStyles();\n            }\n            if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n                this.updateStickyFooterRowStyles();\n            }\n            if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n                this.updateStickyColumnStyles();\n            }\n        }\n        /**\n         * Creates the sticky styler that will be used for sticky rows and columns. Listens\n         * for directionality changes and provides the latest direction to the styler. Re-applies column\n         * stickiness when directionality changes.\n         */\n        _setupStickyStyler() {\n            const direction = this._dir ? this._dir.value : 'ltr';\n            this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n            (this._dir ? this._dir.change : of())\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(value => {\n                this._stickyStyler.direction = value;\n                this.updateStickyColumnStyles();\n            });\n        }\n        /** Filters definitions that belong to this table from a QueryList. */\n        _getOwnDefs(items) {\n            return items.filter(item => !item._table || item._table === this);\n        }\n        /** Creates or removes the no data row, depending on whether any data is being shown. */\n        _updateNoDataRow() {\n            if (this._noDataRow) {\n                const shouldShow = this._rowOutlet.viewContainer.length === 0;\n                if (shouldShow !== this._isShowingNoDataRow) {\n                    const container = this._noDataRowOutlet.viewContainer;\n                    shouldShow ? container.createEmbeddedView(this._noDataRow.templateRef) : container.clear();\n                    this._isShowingNoDataRow = shouldShow;\n                }\n            }\n        }\n    }\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform)); };\nCdkTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(DataRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(HeaderRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(FooterRowOutlet, true);\n        ɵngcc0.ɵɵstaticViewQuery(NoDataRowOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_TABLE, useExisting: CdkTable }])], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], encapsulation: 2 });\n    CdkTable.ctorParameters = () => [\n        { type: IterableDiffers },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform }\n    ];\n    CdkTable.propDecorators = {\n        trackBy: [{ type: Input }],\n        dataSource: [{ type: Input }],\n        multiTemplateDataRows: [{ type: Input }],\n        _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n        _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n        _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n        _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\n        _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n        _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n        _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                        descendants: true\n                    },] }],\n        _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                        descendants: true\n                    },] }],\n        _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CDK_TABLE, useExisting: CdkTable }]\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _noDataRowOutlet: [{\n            type: ViewChild,\n            args: [NoDataRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef, { descendants: true }]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef, { descendants: true }]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef, {\n                    descendants: true\n                }]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef, {\n                    descendants: true\n                }]\n        }], _noDataRow: [{\n            type: ContentChild,\n            args: [CdkNoDataRow]\n        }] }); })();\n    return CdkTable;\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nlet CdkTextColumn = /** @class */ (() => {\n    class CdkTextColumn {\n        constructor(_table, _options) {\n            this._table = _table;\n            this._options = _options;\n            /** Alignment of the cell values. */\n            this.justify = 'start';\n            this._options = _options || {};\n        }\n        /** Column name that should be used to reference this column. */\n        get name() {\n            return this._name;\n        }\n        set name(name) {\n            this._name = name;\n            // With Ivy, inputs can be initialized before static query results are\n            // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n            this._syncColumnDefName();\n        }\n        ngOnInit() {\n            this._syncColumnDefName();\n            if (this.headerText === undefined) {\n                this.headerText = this._createDefaultHeaderText();\n            }\n            if (!this.dataAccessor) {\n                this.dataAccessor =\n                    this._options.defaultDataAccessor || ((data, name) => data[name]);\n            }\n            if (this._table) {\n                // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n                // since the columnDef will not pick up its content by the time the table finishes checking\n                // its content and initializing the rows.\n                this.columnDef.cell = this.cell;\n                this.columnDef.headerCell = this.headerCell;\n                this._table.addColumnDef(this.columnDef);\n            }\n            else {\n                throw getTableTextColumnMissingParentTableError();\n            }\n        }\n        ngOnDestroy() {\n            if (this._table) {\n                this._table.removeColumnDef(this.columnDef);\n            }\n        }\n        /**\n         * Creates a default header text. Use the options' header text transformation function if one\n         * has been provided. Otherwise simply capitalize the column name.\n         */\n        _createDefaultHeaderText() {\n            const name = this.name;\n            if (isDevMode() && !name) {\n                throw getTableTextColumnMissingNameError();\n            }\n            if (this._options && this._options.defaultHeaderTextTransform) {\n                return this._options.defaultHeaderTextTransform(name);\n            }\n            return name[0].toUpperCase() + name.slice(1);\n        }\n        /** Synchronizes the column definition name with the text column name. */\n        _syncColumnDefName() {\n            if (this.columnDef) {\n                this.columnDef.name = this.name;\n            }\n        }\n    }\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkColumnDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(CdkCellDef, true);\n        ɵngcc0.ɵɵstaticViewQuery(CdkHeaderCellDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell], encapsulation: 2 });\n    CdkTextColumn.ctorParameters = () => [\n        { type: CdkTable, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n    ];\n    CdkTextColumn.propDecorators = {\n        name: [{ type: Input }],\n        headerText: [{ type: Input }],\n        dataAccessor: [{ type: Input }],\n        justify: [{ type: Input }],\n        columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n        cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n        headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\n    return CdkTextColumn;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    NoDataRowOutlet,\n];\nlet CdkTableModule = /** @class */ (() => {\n    class CdkTableModule {\n    }\nCdkTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet], exports: [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n    return CdkTableModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, StickyStyler, TEXT_COLUMN_OPTIONS, mixinHasStickyInput };\n\n//# sourceMappingURL=table.js.map","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Input, ElementRef, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE_TEMPLATE, CDK_TABLE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, Subscription, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/table';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction MatTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction MatTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nlet MatTable = /** @class */ (() => {\n    class MatTable extends CdkTable {\n        constructor() {\n            super(...arguments);\n            /** Overrides the sticky CSS class set by the `CdkTable`. */\n            this.stickyCssClass = 'mat-table-sticky';\n        }\n    }\nMatTable.ɵfac = function MatTable_Factory(t) { return ɵMatTable_BaseFactory(t || MatTable); };\nMatTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTable, selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]], hostAttrs: [1, \"mat-table\"], exportAs: [\"matTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function MatTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n    } }, directives: [ɵngcc1.HeaderRowOutlet, ɵngcc1.DataRowOutlet, ɵngcc1.NoDataRowOutlet, ɵngcc1.FooterRowOutlet], styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type,[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type{padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type,[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type{padding-right:0;padding-left:24px}\\n\"], encapsulation: 2 });\nconst ɵMatTable_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTable);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTable, [{\n        type: Component,\n        args: [{\n                selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'mat-table'\n                },\n                providers: [\n                    { provide: CdkTable, useExisting: MatTable },\n                    { provide: CDK_TABLE, useExisting: MatTable }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type,[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type{padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type,[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type{padding-right:0;padding-left:24px}\\n\"]\n            }]\n    }], null, null); })();\n    return MatTable;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nlet MatCellDef = /** @class */ (() => {\n    class MatCellDef extends CdkCellDef {\n    }\nMatCellDef.ɵfac = function MatCellDef_Factory(t) { return ɵMatCellDef_BaseFactory(t || MatCellDef); };\nMatCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCellDef, selectors: [[\"\", \"matCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkCellDef, useExisting: MatCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCellDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            }]\n    }], null, null); })();\n    return MatCellDef;\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nlet MatHeaderCellDef = /** @class */ (() => {\n    class MatHeaderCellDef extends CdkHeaderCellDef {\n    }\nMatHeaderCellDef.ɵfac = function MatHeaderCellDef_Factory(t) { return ɵMatHeaderCellDef_BaseFactory(t || MatHeaderCellDef); };\nMatHeaderCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatHeaderCellDef, selectors: [[\"\", \"matHeaderCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatHeaderCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCellDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHeaderCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            }]\n    }], null, null); })();\n    return MatHeaderCellDef;\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nlet MatFooterCellDef = /** @class */ (() => {\n    class MatFooterCellDef extends CdkFooterCellDef {\n    }\nMatFooterCellDef.ɵfac = function MatFooterCellDef_Factory(t) { return ɵMatFooterCellDef_BaseFactory(t || MatFooterCellDef); };\nMatFooterCellDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatFooterCellDef, selectors: [[\"\", \"matFooterCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatFooterCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCellDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFooterCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            }]\n    }], null, null); })();\n    return MatFooterCellDef;\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nlet MatColumnDef = /** @class */ (() => {\n    class MatColumnDef extends CdkColumnDef {\n    }\nMatColumnDef.ɵfac = function MatColumnDef_Factory(t) { return ɵMatColumnDef_BaseFactory(t || MatColumnDef); };\nMatColumnDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatColumnDef, selectors: [[\"\", \"matColumnDef\", \"\"]], inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatColumnDef.propDecorators = {\n        name: [{ type: Input, args: ['matColumnDef',] }]\n    };\nconst ɵMatColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatColumnDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matColumnDef]',\n                inputs: ['sticky'],\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ]\n            }]\n    }], null, { name: [{\n            type: Input,\n            args: ['matColumnDef']\n        }] }); })();\n    return MatColumnDef;\n})();\n/** Header cell template container that adds the right classes and role. */\nlet MatHeaderCell = /** @class */ (() => {\n    class MatHeaderCell extends CdkHeaderCell {\n        constructor(columnDef, elementRef) {\n            super(columnDef, elementRef);\n            elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n        }\n    }\nMatHeaderCell.ɵfac = function MatHeaderCell_Factory(t) { return new (t || MatHeaderCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatHeaderCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatHeaderCell, selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatHeaderCell.ctorParameters = () => [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatHeaderCell;\n})();\n/** Footer cell template container that adds the right classes and role. */\nlet MatFooterCell = /** @class */ (() => {\n    class MatFooterCell extends CdkFooterCell {\n        constructor(columnDef, elementRef) {\n            super(columnDef, elementRef);\n            elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n        }\n    }\nMatFooterCell.ɵfac = function MatFooterCell_Factory(t) { return new (t || MatFooterCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatFooterCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatFooterCell, selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatFooterCell.ctorParameters = () => [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatFooterCell;\n})();\n/** Cell template container that adds the right classes and role. */\nlet MatCell = /** @class */ (() => {\n    class MatCell extends CdkCell {\n        constructor(columnDef, elementRef) {\n            super(columnDef, elementRef);\n            elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n        }\n    }\nMatCell.ɵfac = function MatCell_Factory(t) { return new (t || MatCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatCell.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCell, selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatCell.ctorParameters = () => [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n    return MatCell;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nlet MatHeaderRowDef = /** @class */ (() => {\n    class MatHeaderRowDef extends CdkHeaderRowDef {\n    }\nMatHeaderRowDef.ɵfac = function MatHeaderRowDef_Factory(t) { return ɵMatHeaderRowDef_BaseFactory(t || MatHeaderRowDef); };\nMatHeaderRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatHeaderRowDef, selectors: [[\"\", \"matHeaderRowDef\", \"\"]], inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatHeaderRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRowDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n            }]\n    }], null, null); })();\n    return MatHeaderRowDef;\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nlet MatFooterRowDef = /** @class */ (() => {\n    class MatFooterRowDef extends CdkFooterRowDef {\n    }\nMatFooterRowDef.ɵfac = function MatFooterRowDef_Factory(t) { return ɵMatFooterRowDef_BaseFactory(t || MatFooterRowDef); };\nMatFooterRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatFooterRowDef, selectors: [[\"\", \"matFooterRowDef\", \"\"]], inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatFooterRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRowDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n            }]\n    }], null, null); })();\n    return MatFooterRowDef;\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nlet MatRowDef = /** @class */ (() => {\n    class MatRowDef extends CdkRowDef {\n    }\nMatRowDef.ɵfac = function MatRowDef_Factory(t) { return ɵMatRowDef_BaseFactory(t || MatRowDef); };\nMatRowDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRowDef, selectors: [[\"\", \"matRowDef\", \"\"]], inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkRowDef, useExisting: MatRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRowDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n            }]\n    }], null, null); })();\n    return MatRowDef;\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nlet MatHeaderRow = /** @class */ (() => {\n    class MatHeaderRow extends CdkHeaderRow {\n    }\nMatHeaderRow.ɵfac = function MatHeaderRow_Factory(t) { return ɵMatHeaderRow_BaseFactory(t || MatHeaderRow); };\nMatHeaderRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatHeaderRow, selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"], exportAs: [\"matHeaderRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderRow, useExisting: MatHeaderRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\nconst ɵMatHeaderRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRow);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }]\n            }]\n    }], null, null); })();\n    return MatHeaderRow;\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nlet MatFooterRow = /** @class */ (() => {\n    class MatFooterRow extends CdkFooterRow {\n    }\nMatFooterRow.ɵfac = function MatFooterRow_Factory(t) { return ɵMatFooterRow_BaseFactory(t || MatFooterRow); };\nMatFooterRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatFooterRow, selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"], exportAs: [\"matFooterRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterRow, useExisting: MatFooterRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\nconst ɵMatFooterRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRow);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }]\n            }]\n    }], null, null); })();\n    return MatFooterRow;\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nlet MatRow = /** @class */ (() => {\n    class MatRow extends CdkRow {\n    }\nMatRow.ɵfac = function MatRow_Factory(t) { return ɵMatRow_BaseFactory(t || MatRow); };\nMatRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRow, selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-row\"], exportAs: [\"matRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkRow, useExisting: MatRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\nconst ɵMatRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRow);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }]\n            }]\n    }], null, null); })();\n    return MatRow;\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nlet MatNoDataRow = /** @class */ (() => {\n    class MatNoDataRow extends CdkNoDataRow {\n    }\nMatNoDataRow.ɵfac = function MatNoDataRow_Factory(t) { return ɵMatNoDataRow_BaseFactory(t || MatNoDataRow); };\nMatNoDataRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatNoDataRow, selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkNoDataRow, useExisting: MatNoDataRow }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatNoDataRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatNoDataRow);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matNoDataRow]',\n                providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }]\n            }]\n    }], null, null); })();\n    return MatNoDataRow;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nlet MatTextColumn = /** @class */ (() => {\n    class MatTextColumn extends CdkTextColumn {\n    }\nMatTextColumn.ɵfac = function MatTextColumn_Factory(t) { return ɵMatTextColumn_BaseFactory(t || MatTextColumn); };\nMatTextColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTextColumn, selectors: [[\"mat-text-column\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 0, consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]], template: function MatTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [MatColumnDef, MatHeaderCellDef, MatCellDef, MatHeaderCell, MatCell], encapsulation: 2 });\nconst ɵMatTextColumn_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextColumn);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], null, null); })();\n    return MatTextColumn;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nlet MatTableModule = /** @class */ (() => {\n    class MatTableModule {\n    }\nMatTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTableModule });\nMatTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTableModule_Factory(t) { return new (t || MatTableModule)(); }, imports: [[\n            CdkTableModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableModule, { declarations: function () { return [MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn]; }, imports: function () { return [CdkTableModule,\n        MatCommonModule]; }, exports: function () { return [MatCommonModule, MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CdkTableModule,\n                    MatCommonModule,\n                ],\n                exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n    return MatTableModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() { return this._data.value; }\n    set data(data) { this._data.next(data); }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() { return this._filter.value; }\n    set filter(filter) { this._filter.next(filter); }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() { return this._sort; }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() { return this._paginator; }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort ?\n            merge(this._sort.sortChange, this._sort.initialized) :\n            of(null);\n        const pageChange = this._paginator ?\n            merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n            of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter])\n            .pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange])\n            .pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange])\n            .pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() { return this._renderData; }\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n    disconnect() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n\n//# sourceMappingURL=table.js.map","import { Directive, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\n\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\nclass MatToolbarBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nlet MatToolbarRow = /** @class */ (() => {\n    class MatToolbarRow {\n    }\nMatToolbarRow.ɵfac = function MatToolbarRow_Factory(t) { return new (t || MatToolbarRow)(); };\nMatToolbarRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatToolbarRow, selectors: [[\"mat-toolbar-row\"]], hostAttrs: [1, \"mat-toolbar-row\"], exportAs: [\"matToolbarRow\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbarRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-toolbar-row',\n                exportAs: 'matToolbarRow',\n                host: { 'class': 'mat-toolbar-row' }\n            }]\n    }], null, null); })();\n    return MatToolbarRow;\n})();\nlet MatToolbar = /** @class */ (() => {\n    class MatToolbar extends _MatToolbarMixinBase {\n        constructor(elementRef, _platform, document) {\n            super(elementRef);\n            this._platform = _platform;\n            // TODO: make the document a required param when doing breaking changes.\n            this._document = document;\n        }\n        ngAfterViewInit() {\n            if (!isDevMode() || !this._platform.isBrowser) {\n                return;\n            }\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n        }\n        /**\n         * Throws an exception when developers are attempting to combine the different toolbar row modes.\n         */\n        _checkToolbarMixedModes() {\n            if (!this._toolbarRows.length) {\n                return;\n            }\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n                .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n                .some(node => !!(node.textContent && node.textContent.trim()));\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        }\n    }\nMatToolbar.ɵfac = function MatToolbar_Factory(t) { return new (t || MatToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatToolbar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatToolbar, selectors: [[\"mat-toolbar\"]], contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatToolbarRow, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n    } }, hostAttrs: [1, \"mat-toolbar\"], hostVars: 4, hostBindings: function MatToolbar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n    } }, inputs: { color: \"color\" }, exportAs: [\"matToolbar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 0, template: function MatToolbar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n    } }, styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"], encapsulation: 2, changeDetection: 0 });\n    MatToolbar.ctorParameters = () => [\n        { type: ElementRef },\n        { type: Platform },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n    MatToolbar.propDecorators = {\n        _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow, { descendants: true },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-toolbar',\n                exportAs: 'matToolbar',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-toolbar',\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { _toolbarRows: [{\n            type: ContentChildren,\n            args: [MatToolbarRow, { descendants: true }]\n        }] }); })();\n    return MatToolbar;\n})();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet MatToolbarModule = /** @class */ (() => {\n    class MatToolbarModule {\n    }\nMatToolbarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatToolbarModule });\nMatToolbarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatToolbarModule_Factory(t) { return new (t || MatToolbarModule)(); }, imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatToolbarModule, { declarations: function () { return [MatToolbar, MatToolbarRow]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatToolbar, MatToolbarRow, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatToolbarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                declarations: [MatToolbar, MatToolbarRow]\n            }]\n    }], null, null); })();\n    return MatToolbarModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n\n//# sourceMappingURL=toolbar.js.map","import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, Renderer2, HostListener, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base tree control. It has basic toggle/expand/collapse operations on a single data node. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /** A selection model with multi-selection to track expansion status. */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    toggle(dataNode) {\n        this.expansionModel.toggle(this._trackByValue(dataNode));\n    }\n    /** Expands one single data node. */\n    expand(dataNode) {\n        this.expansionModel.select(this._trackByValue(dataNode));\n    }\n    /** Collapses one single data node. */\n    collapse(dataNode) {\n        this.expansionModel.deselect(this._trackByValue(dataNode));\n    }\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(this._trackByValue(dataNode));\n    }\n    /** Toggles a subtree rooted at `node` recursively. */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(this._trackByValue(dataNode)) ?\n            this.collapseDescendants(dataNode) :\n            this.expandDescendants(dataNode);\n    }\n    /** Collapse all dataNodes in the tree. */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /** Expands a subtree rooted at given data node recursively. */\n    expandDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    /** Collapses a subtree rooted at given data node recursively. */\n    collapseDescendants(dataNode) {\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed.map(value => this._trackByValue(value)));\n    }\n    _trackByValue(value) {\n        return this.trackBy ? this.trackBy(value) : value;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Flat tree control. Able to expand/collapse a subtree recursively for flattened tree. */\nclass FlatTreeControl extends BaseTreeControl {\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    constructor(getLevel, isExpandable, options) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.options = options;\n        if (this.options) {\n            this.trackBy = this.options.trackBy;\n        }\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    getDescendants(dataNode) {\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes.map(node => this._trackByValue(node)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type. */\nclass NestedTreeControl extends BaseTreeControl {\n    /** Construct with nested tree function getChildren. */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        const allNodes = this.dataNodes.reduce((accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode], []);\n        this.expansionModel.select(...allNodes);\n    }\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    getDescendants(dataNode) {\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /** A helper function to get descendants recursively. */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((child) => this._getDescendants(descendants, child));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter(Boolean))\n                .subscribe(children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * @docs-private\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nlet CdkTreeNodeOutlet = /** @class */ (() => {\n    class CdkTreeNodeOutlet {\n        constructor(viewContainer, _node) {\n            this.viewContainer = viewContainer;\n            this._node = _node;\n        }\n    }\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\n    CdkTreeNodeOutlet.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n    return CdkTreeNodeOutlet;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Context provided to the tree node component. */\nclass CdkTreeNodeOutletContext {\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nlet CdkTreeNodeDef = /** @class */ (() => {\n    class CdkTreeNodeDef {\n        /** @docs-private */\n        constructor(template) {\n            this.template = template;\n        }\n    }\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\n    CdkTreeNodeDef.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return CdkTreeNodeDef;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * @docs-private\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * @docs-private\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * @docs-private\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * @docs-private\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * @docs-private\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n */\nlet CdkTree = /** @class */ (() => {\n    class CdkTree {\n        constructor(_differs, _changeDetectorRef) {\n            this._differs = _differs;\n            this._changeDetectorRef = _changeDetectorRef;\n            /** Subject that emits when the component has been destroyed. */\n            this._onDestroy = new Subject();\n            /** Level of nodes */\n            this._levels = new Map();\n            // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n            //     Remove the MAX_VALUE in viewChange\n            /**\n             * Stream containing the latest information on what rows are being displayed on screen.\n             * Can be used by the data source to as a heuristic of what data should be provided.\n             */\n            this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        }\n        /**\n         * Provides a stream containing the latest data array to render. Influenced by the tree's\n         * stream of view window (what dataNodes are currently on screen).\n         * Data source can be an observable of data array, or a data array to render.\n         */\n        get dataSource() { return this._dataSource; }\n        set dataSource(dataSource) {\n            if (this._dataSource !== dataSource) {\n                this._switchDataSource(dataSource);\n            }\n        }\n        ngOnInit() {\n            this._dataDiffer = this._differs.find([]).create(this.trackBy);\n            if (!this.treeControl) {\n                throw getTreeControlMissingError();\n            }\n        }\n        ngOnDestroy() {\n            this._nodeOutlet.viewContainer.clear();\n            this.viewChange.complete();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n                this.dataSource.disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n        }\n        ngAfterContentChecked() {\n            const defaultNodeDefs = this._nodeDefs.filter(def => !def.when);\n            if (defaultNodeDefs.length > 1) {\n                throw getTreeMultipleDefaultNodeDefsError();\n            }\n            this._defaultNodeDef = defaultNodeDefs[0];\n            if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n                this._observeRenderChanges();\n            }\n        }\n        // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n        //     and nested trees.\n        /**\n         * Switch to the provided data source by resetting the data and unsubscribing from the current\n         * render change subscription if one exists. If the data source is null, interpret this by\n         * clearing the node outlet. Otherwise start listening for new data.\n         */\n        _switchDataSource(dataSource) {\n            if (this._dataSource && typeof this._dataSource.disconnect === 'function') {\n                this.dataSource.disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n            // Remove the all dataNodes if there is now no data source\n            if (!dataSource) {\n                this._nodeOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n            if (this._nodeDefs) {\n                this._observeRenderChanges();\n            }\n        }\n        /** Set up a subscription for the data provided by the data source. */\n        _observeRenderChanges() {\n            let dataStream;\n            if (isDataSource(this._dataSource)) {\n                dataStream = this._dataSource.connect(this);\n            }\n            else if (isObservable(this._dataSource)) {\n                dataStream = this._dataSource;\n            }\n            else if (Array.isArray(this._dataSource)) {\n                dataStream = of(this._dataSource);\n            }\n            if (dataStream) {\n                this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                    .subscribe(data => this.renderNodeChanges(data));\n            }\n            else {\n                throw getTreeNoValidDataSourceError();\n            }\n        }\n        /** Check for changes made in the data and render each change (node added/removed/moved). */\n        renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n            const changes = dataDiffer.diff(data);\n            if (!changes) {\n                return;\n            }\n            changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {\n                if (item.previousIndex == null) {\n                    this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(adjustedPreviousIndex);\n                    this._levels.delete(item.item);\n                }\n                else {\n                    const view = viewContainer.get(adjustedPreviousIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n            this._changeDetectorRef.detectChanges();\n        }\n        /**\n         * Finds the matching node definition that should be used for this node data. If there is only\n         * one node definition, it is returned. Otherwise, find the node definition that has a when\n         * predicate that returns true with the data. If none return true, return the default node\n         * definition.\n         */\n        _getNodeDef(data, i) {\n            if (this._nodeDefs.length === 1) {\n                return this._nodeDefs.first;\n            }\n            const nodeDef = this._nodeDefs.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n            if (!nodeDef) {\n                throw getTreeMissingMatchingNodeDefError();\n            }\n            return nodeDef;\n        }\n        /**\n         * Create the embedded view for the data node template and place it in the correct index location\n         * within the data node view container.\n         */\n        insertNode(nodeData, index, viewContainer, parentData) {\n            const node = this._getNodeDef(nodeData, index);\n            // Node context that will be provided to created embedded view\n            const context = new CdkTreeNodeOutletContext(nodeData);\n            // If the tree is flat tree, then use the `getLevel` function in flat tree control\n            // Otherwise, use the level of parent node.\n            if (this.treeControl.getLevel) {\n                context.level = this.treeControl.getLevel(nodeData);\n            }\n            else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n                context.level = this._levels.get(parentData) + 1;\n            }\n            else {\n                context.level = 0;\n            }\n            this._levels.set(nodeData, context.level);\n            // Use default tree nodeOutlet, or nested node's nodeOutlet\n            const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n            container.createEmbeddedView(node.template, context, index);\n            // Set the data to just created `CdkTreeNode`.\n            // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n            //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n            if (CdkTreeNode.mostRecentTreeNode) {\n                CdkTreeNode.mostRecentTreeNode.data = nodeData;\n            }\n        }\n    }\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\n    CdkTree.ctorParameters = () => [\n        { type: IterableDiffers },\n        { type: ChangeDetectorRef }\n    ];\n    CdkTree.propDecorators = {\n        dataSource: [{ type: Input }],\n        treeControl: [{ type: Input }],\n        trackBy: [{ type: Input }],\n        _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n        _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n    return CdkTree;\n})();\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n */\nlet CdkTreeNode = /** @class */ (() => {\n    class CdkTreeNode {\n        constructor(_elementRef, _tree) {\n            this._elementRef = _elementRef;\n            this._tree = _tree;\n            /** Subject that emits when the component has been destroyed. */\n            this._destroyed = new Subject();\n            /** Emits when the node's data has changed. */\n            this._dataChanges = new Subject();\n            /**\n             * The role of the node should be 'group' if it's an internal node,\n             * and 'treeitem' if it's a leaf node.\n             */\n            this.role = 'treeitem';\n            CdkTreeNode.mostRecentTreeNode = this;\n        }\n        /** The tree node's data. */\n        get data() { return this._data; }\n        set data(value) {\n            if (value !== this._data) {\n                this._data = value;\n                this._setRoleFromData();\n                this._dataChanges.next();\n            }\n        }\n        get isExpanded() {\n            return this._tree.treeControl.isExpanded(this._data);\n        }\n        get level() {\n            return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n        }\n        ngOnDestroy() {\n            // If this is the last tree node being destroyed,\n            // clear out the reference to avoid leaking memory.\n            if (CdkTreeNode.mostRecentTreeNode === this) {\n                CdkTreeNode.mostRecentTreeNode = null;\n            }\n            this._dataChanges.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Focuses the menu item. Implements for FocusableOption. */\n        focus() {\n            this._elementRef.nativeElement.focus();\n        }\n        _setRoleFromData() {\n            if (this._tree.treeControl.isExpandable) {\n                this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n            }\n            else {\n                if (!this._tree.treeControl.getChildren) {\n                    throw getTreeControlFunctionsMissingError();\n                }\n                const childrenNodes = this._tree.treeControl.getChildren(this._data);\n                if (Array.isArray(childrenNodes)) {\n                    this._setRoleFromChildren(childrenNodes);\n                }\n                else if (isObservable(childrenNodes)) {\n                    childrenNodes.pipe(takeUntil(this._destroyed))\n                        .subscribe(children => this._setRoleFromChildren(children));\n                }\n            }\n        }\n        _setRoleFromChildren(children) {\n            this.role = children && children.length ? 'group' : 'treeitem';\n        }\n    }\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], hostAttrs: [1, \"cdk-tree-node\"], hostVars: 3, hostBindings: function CdkTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    CdkTreeNode.mostRecentTreeNode = null;\n    CdkTreeNode.ctorParameters = () => [\n        { type: ElementRef },\n        { type: CdkTree }\n    ];\n    CdkTreeNode.propDecorators = {\n        role: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\n    return CdkTreeNode;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n */\nlet CdkNestedTreeNode = /** @class */ (() => {\n    class CdkNestedTreeNode extends CdkTreeNode {\n        constructor(_elementRef, _tree, _differs) {\n            super(_elementRef, _tree);\n            this._elementRef = _elementRef;\n            this._tree = _tree;\n            this._differs = _differs;\n        }\n        ngAfterContentInit() {\n            this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            const childrenNodes = this._tree.treeControl.getChildren(this.data);\n            if (Array.isArray(childrenNodes)) {\n                this.updateChildrenNodes(childrenNodes);\n            }\n            else if (isObservable(childrenNodes)) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe(result => this.updateChildrenNodes(result));\n            }\n            this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n                .subscribe(() => this.updateChildrenNodes());\n        }\n        ngOnDestroy() {\n            this._clear();\n            super.ngOnDestroy();\n        }\n        /** Add children dataNodes to the NodeOutlet */\n        updateChildrenNodes(children) {\n            const outlet = this._getNodeOutlet();\n            if (children) {\n                this._children = children;\n            }\n            if (outlet && this._children) {\n                const viewContainer = outlet.viewContainer;\n                this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n            }\n            else {\n                // Reset the data differ if there's no children nodes displayed\n                this._dataDiffer.diff([]);\n            }\n        }\n        /** Clear the children dataNodes. */\n        _clear() {\n            const outlet = this._getNodeOutlet();\n            if (outlet) {\n                outlet.viewContainer.clear();\n                this._dataDiffer.diff([]);\n            }\n        }\n        /** Gets the outlet for the current node. */\n        _getNodeOutlet() {\n            const outlets = this.nodeOutlet;\n            // Note that since we use `descendants: true` on the query, we have to ensure\n            // that we don't pick up the outlet of a child node by accident.\n            return outlets && outlets.find(outlet => !outlet._node || outlet._node === this);\n        }\n    }\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"], hostVars: 2, hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    CdkNestedTreeNode.ctorParameters = () => [\n        { type: ElementRef },\n        { type: CdkTree },\n        { type: IterableDiffers }\n    ];\n    CdkNestedTreeNode.propDecorators = {\n        nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true\n                    },] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n    return CdkNestedTreeNode;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n */\nlet CdkTreeNodePadding = /** @class */ (() => {\n    class CdkTreeNodePadding {\n        constructor(_treeNode, _tree, \n        /**\n         * @deprecated _renderer parameter no longer being used. To be removed.\n         * @breaking-change 11.0.0\n         */\n        _renderer, _element, _dir) {\n            this._treeNode = _treeNode;\n            this._tree = _tree;\n            this._element = _element;\n            this._dir = _dir;\n            /** Subject that emits when the component has been destroyed. */\n            this._destroyed = new Subject();\n            /** CSS units used for the indentation value. */\n            this.indentUnits = 'px';\n            this._indent = 40;\n            this._setPadding();\n            if (_dir) {\n                _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => this._setPadding(true));\n            }\n            // In Ivy the indentation binding might be set before the tree node's data has been added,\n            // which means that we'll miss the first render. We have to subscribe to changes in the\n            // data to ensure that everything is up to date.\n            _treeNode._dataChanges.subscribe(() => this._setPadding());\n        }\n        /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n        get level() { return this._level; }\n        set level(value) {\n            // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n            // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n            // they set 0 explicitly.\n            this._level = coerceNumberProperty(value, null);\n            this._setPadding();\n        }\n        /**\n         * The indent for each level. Can be a number or a CSS string.\n         * Default number 40px from material design menu sub-menu spec.\n         */\n        get indent() { return this._indent; }\n        set indent(indent) {\n            let value = indent;\n            let units = 'px';\n            if (typeof indent === 'string') {\n                const parts = indent.split(cssUnitPattern);\n                value = parts[0];\n                units = parts[1] || units;\n            }\n            this.indentUnits = units;\n            this._indent = coerceNumberProperty(value);\n            this._setPadding();\n        }\n        ngOnDestroy() {\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n        _paddingIndent() {\n            const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n                ? this._tree.treeControl.getLevel(this._treeNode.data)\n                : null;\n            const level = this._level == null ? nodeLevel : this._level;\n            return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n        }\n        _setPadding(forceChange = false) {\n            const padding = this._paddingIndent();\n            if (padding !== this._currentPadding || forceChange) {\n                const element = this._element.nativeElement;\n                const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n                const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n                element.style[paddingProp] = padding || '';\n                element.style[resetProp] = '';\n                this._currentPadding = padding;\n            }\n        }\n    }\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\n    CdkTreeNodePadding.ctorParameters = () => [\n        { type: CdkTreeNode },\n        { type: CdkTree },\n        { type: Renderer2 },\n        { type: ElementRef },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ];\n    CdkTreeNodePadding.propDecorators = {\n        level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n        indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\n    return CdkTreeNodePadding;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Node toggle to expand/collapse the node.\n */\nlet CdkTreeNodeToggle = /** @class */ (() => {\n    class CdkTreeNodeToggle {\n        constructor(_tree, _treeNode) {\n            this._tree = _tree;\n            this._treeNode = _treeNode;\n            this._recursive = false;\n        }\n        /** Whether expand/collapse the node recursively. */\n        get recursive() { return this._recursive; }\n        set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n        // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n        // ViewEngine they're overwritten.\n        // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        _toggle(event) {\n            this.recursive\n                ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n                : this._tree.treeControl.toggle(this._treeNode.data);\n            event.stopPropagation();\n        }\n    }\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\n    CdkTreeNodeToggle.ctorParameters = () => [\n        { type: CdkTree },\n        { type: CdkTreeNode }\n    ];\n    CdkTreeNodeToggle.propDecorators = {\n        recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n        _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\n    return CdkTreeNodeToggle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nlet CdkTreeModule = /** @class */ (() => {\n    class CdkTreeModule {\n    }\nCdkTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); }, providers: [FocusMonitor, CdkTreeNodeDef] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet], exports: [CdkNestedTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTree, CdkTreeNode, CdkTreeNodeOutlet] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            }]\n    }], null, null); })();\n    return CdkTreeModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n//# sourceMappingURL=tree.js.map","import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nlet MatTreeNode = /** @class */ (() => {\n    class MatTreeNode extends _MatTreeNodeMixinBase {\n        constructor(_elementRef, _tree, tabIndex) {\n            super(_elementRef, _tree);\n            this._elementRef = _elementRef;\n            this._tree = _tree;\n            this.role = 'treeitem';\n            this.tabIndex = Number(tabIndex) || 0;\n        }\n    }\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTreeNode.ctorParameters = () => [\n        { type: ElementRef },\n        { type: CdkTree },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n    ];\n    MatTreeNode.propDecorators = {\n        role: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\n    return MatTreeNode;\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\nlet MatTreeNodeDef = /** @class */ (() => {\n    class MatTreeNodeDef extends CdkTreeNodeDef {\n    }\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) { return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef); };\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTreeNodeDef.propDecorators = {\n        data: [{ type: Input, args: ['matTreeNode',] }]\n    };\nconst ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n    return MatTreeNodeDef;\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nlet MatNestedTreeNode = /** @class */ (() => {\n    class MatNestedTreeNode extends CdkNestedTreeNode {\n        constructor(_elementRef, _tree, _differs, tabIndex) {\n            super(_elementRef, _tree, _differs);\n            this._elementRef = _elementRef;\n            this._tree = _tree;\n            this._differs = _differs;\n            this._disabled = false;\n            this.tabIndex = Number(tabIndex) || 0;\n        }\n        /** Whether the node is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n        /** Tabindex for the node. */\n        get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n        set tabIndex(value) {\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\n            this._tabIndex = value != null ? value : 0;\n        }\n        // This is a workaround for https://github.com/angular/angular/issues/23091\n        // In aot mode, the lifecycle hooks from parent class are not called.\n        // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n        ngAfterContentInit() {\n            super.ngAfterContentInit();\n        }\n        ngOnDestroy() {\n            super.ngOnDestroy();\n        }\n    }\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { tabIndex: \"tabIndex\", disabled: \"disabled\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatNestedTreeNode.ctorParameters = () => [\n        { type: ElementRef },\n        { type: CdkTree },\n        { type: IterableDiffers },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n    ];\n    MatNestedTreeNode.propDecorators = {\n        node: [{ type: Input, args: ['matNestedTreeNode',] }],\n        disabled: [{ type: Input }],\n        tabIndex: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\n    return MatNestedTreeNode;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nlet MatTreeNodePadding = /** @class */ (() => {\n    class MatTreeNodePadding extends CdkTreeNodePadding {\n    }\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) { return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding); };\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTreeNodePadding.propDecorators = {\n        level: [{ type: Input, args: ['matTreeNodePadding',] }],\n        indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n    };\nconst ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n    return MatTreeNodePadding;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nlet MatTreeNodeOutlet = /** @class */ (() => {\n    class MatTreeNodeOutlet {\n        constructor(viewContainer, _node) {\n            this.viewContainer = viewContainer;\n            this._node = _node;\n        }\n    }\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\n    MatTreeNodeOutlet.ctorParameters = () => [\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n    return MatTreeNodeOutlet;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nlet MatTree = /** @class */ (() => {\n    class MatTree extends CdkTree {\n    }\nMatTree.ɵfac = function MatTree_Factory(t) { return ɵMatTree_BaseFactory(t || MatTree); };\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\n    MatTree.propDecorators = {\n        _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n    };\nconst ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\n    return MatTree;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nlet MatTreeNodeToggle = /** @class */ (() => {\n    class MatTreeNodeToggle extends CdkTreeNodeToggle {\n        constructor() {\n            super(...arguments);\n            this.recursive = false;\n        }\n    }\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) { return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle); };\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n    MatTreeNodeToggle.propDecorators = {\n        recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n    };\nconst ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n    return MatTreeNodeToggle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nlet MatTreeModule = /** @class */ (() => {\n    class MatTreeModule {\n    }\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); }, imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n    return MatTreeModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    get data() { return this._data.value; }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.changed,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() { return this._data.value; }\n    set data(value) { this._data.next(value); }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => {\n            return this.data;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n//# sourceMappingURL=tree.js.map","import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n        this._toggleNativeDragInteractions();\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position));\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(x, y);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        return {\n            x: point.pageX - scrollPosition.left,\n            y: point.pageY - scrollPosition.top\n        };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            // ClientRect dimensions are based on the page's scroll position so\n            // we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n                // We can't do much about it so just ignore the error.\n                try {\n                    correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n                }\n                catch (_a) { }\n            }\n        }\n    }\n    return clone;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(sibling => sibling._startReceiving(this));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nlet DragDropRegistry = /** @class */ (() => {\n    class DragDropRegistry {\n        constructor(_ngZone, _document) {\n            this._ngZone = _ngZone;\n            /** Registered drop container instances. */\n            this._dropInstances = new Set();\n            /** Registered drag item instances. */\n            this._dragInstances = new Set();\n            /** Drag item instances that are currently being dragged. */\n            this._activeDragInstances = new Set();\n            /** Keeps track of the event listeners that we've bound to the `document`. */\n            this._globalListeners = new Map();\n            /**\n             * Emits the `touchmove` or `mousemove` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerMove = new Subject();\n            /**\n             * Emits the `touchend` or `mouseup` events that are dispatched\n             * while the user is dragging a drag item instance.\n             */\n            this.pointerUp = new Subject();\n            /** Emits when the viewport has been scrolled while the user is dragging an item. */\n            this.scroll = new Subject();\n            /**\n             * Event listener that will prevent the default browser action while the user is dragging.\n             * @param event Event whose default action should be prevented.\n             */\n            this._preventDefaultWhileDragging = (event) => {\n                if (this._activeDragInstances.size) {\n                    event.preventDefault();\n                }\n            };\n            this._document = _document;\n        }\n        /** Adds a drop container to the registry. */\n        registerDropContainer(drop) {\n            if (!this._dropInstances.has(drop)) {\n                this._dropInstances.add(drop);\n            }\n        }\n        /** Adds a drag item instance to the registry. */\n        registerDragItem(drag) {\n            this._dragInstances.add(drag);\n            // The `touchmove` event gets bound once, ahead of time, because WebKit\n            // won't preventDefault on a dynamically-added `touchmove` listener.\n            // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n            if (this._dragInstances.size === 1) {\n                this._ngZone.runOutsideAngular(() => {\n                    // The event handler has to be explicitly active,\n                    // because newer browsers make it passive by default.\n                    this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n                });\n            }\n        }\n        /** Removes a drop container from the registry. */\n        removeDropContainer(drop) {\n            this._dropInstances.delete(drop);\n        }\n        /** Removes a drag item instance from the registry. */\n        removeDragItem(drag) {\n            this._dragInstances.delete(drag);\n            this.stopDragging(drag);\n            if (this._dragInstances.size === 0) {\n                this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }\n        }\n        /**\n         * Starts the dragging sequence for a drag instance.\n         * @param drag Drag instance which is being dragged.\n         * @param event Event that initiated the dragging.\n         */\n        startDragging(drag, event) {\n            // Do not process the same drag twice to avoid memory leaks and redundant listeners\n            if (this._activeDragInstances.has(drag)) {\n                return;\n            }\n            this._activeDragInstances.add(drag);\n            if (this._activeDragInstances.size === 1) {\n                const isTouchEvent = event.type.startsWith('touch');\n                const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n                const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n                // We explicitly bind __active__ listeners here, because newer browsers will default to\n                // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n                // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n                this._globalListeners\n                    .set(moveEvent, {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                })\n                    .set(upEvent, {\n                    handler: (e) => this.pointerUp.next(e),\n                    options: true\n                })\n                    .set('scroll', {\n                    handler: (e) => this.scroll.next(e),\n                    // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                    // the document. See https://github.com/angular/components/issues/17144.\n                    options: true\n                })\n                    // Preventing the default action on `mousemove` isn't enough to disable text selection\n                    // on Safari so we need to prevent the selection event as well. Alternatively this can\n                    // be done by setting `user-select: none` on the `body`, however it has causes a style\n                    // recalculation which can be expensive on pages with a lot of elements.\n                    .set('selectstart', {\n                    handler: this._preventDefaultWhileDragging,\n                    options: activeCapturingEventOptions\n                });\n                this._ngZone.runOutsideAngular(() => {\n                    this._globalListeners.forEach((config, name) => {\n                        this._document.addEventListener(name, config.handler, config.options);\n                    });\n                });\n            }\n        }\n        /** Stops dragging a drag item instance. */\n        stopDragging(drag) {\n            this._activeDragInstances.delete(drag);\n            if (this._activeDragInstances.size === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n        /** Gets whether a drag item instance is currently being dragged. */\n        isDragging(drag) {\n            return this._activeDragInstances.has(drag);\n        }\n        ngOnDestroy() {\n            this._dragInstances.forEach(instance => this.removeDragItem(instance));\n            this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n            this._clearGlobalListeners();\n            this.pointerMove.complete();\n            this.pointerUp.complete();\n        }\n        /** Clears out the global event listeners from the `document`. */\n        _clearGlobalListeners() {\n            this._globalListeners.forEach((config, name) => {\n                this._document.removeEventListener(name, config.handler, config.options);\n            });\n            this._globalListeners.clear();\n        }\n    }\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n    DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n    DragDropRegistry.ctorParameters = () => [\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return DragDropRegistry;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nlet DragDrop = /** @class */ (() => {\n    class DragDrop {\n        constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewportRuler = _viewportRuler;\n            this._dragDropRegistry = _dragDropRegistry;\n        }\n        /**\n         * Turns an element into a draggable item.\n         * @param element Element to which to attach the dragging functionality.\n         * @param config Object used to configure the dragging behavior.\n         */\n        createDrag(element, config = DEFAULT_CONFIG) {\n            return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n        }\n        /**\n         * Turns an element into a drop list.\n         * @param element Element to which to attach the drop list functionality.\n         */\n        createDropList(element) {\n            return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n        }\n    }\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n    DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n    DragDrop.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewportRuler },\n        { type: DragDropRegistry }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n    return DragDrop;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Handle that can be used to drag and CdkDrag instance. */\nlet CdkDragHandle = /** @class */ (() => {\n    class CdkDragHandle {\n        constructor(element, parentDrag) {\n            this.element = element;\n            /** Emits when the state of the handle has changed. */\n            this._stateChanges = new Subject();\n            this._disabled = false;\n            this._parentDrag = parentDrag;\n            toggleNativeDragInteractions(element.nativeElement, false);\n        }\n        /** Whether starting to drag through this handle is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._stateChanges.next(this);\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n    }\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n    CdkDragHandle.ctorParameters = () => [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n    ];\n    CdkDragHandle.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n    return CdkDragHandle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nlet CdkDragPlaceholder = /** @class */ (() => {\n    class CdkDragPlaceholder {\n        constructor(templateRef) {\n            this.templateRef = templateRef;\n        }\n    }\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n    CdkDragPlaceholder.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n    CdkDragPlaceholder.propDecorators = {\n        data: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n    return CdkDragPlaceholder;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nlet CdkDragPreview = /** @class */ (() => {\n    class CdkDragPreview {\n        constructor(templateRef) {\n            this.templateRef = templateRef;\n            this._matchSize = false;\n        }\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        get matchSize() { return this._matchSize; }\n        set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n    }\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" } });\n    CdkDragPreview.ctorParameters = () => [\n        { type: TemplateRef }\n    ];\n    CdkDragPreview.propDecorators = {\n        data: [{ type: Input }],\n        matchSize: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n    return CdkDragPreview;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/** Element that can be moved inside a CdkDropList container. */\nlet CdkDrag = /** @class */ (() => {\n    class CdkDrag {\n        constructor(\n        /** Element that the draggable is attached to. */\n        element, \n        /** Droppable container that the draggable is a part of. */\n        dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n            this.element = element;\n            this.dropContainer = dropContainer;\n            this._document = _document;\n            this._ngZone = _ngZone;\n            this._viewContainerRef = _viewContainerRef;\n            this._dir = _dir;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._destroyed = new Subject();\n            /** Emits when the user starts dragging the item. */\n            this.started = new EventEmitter();\n            /** Emits when the user has released a drag item, before any animations have started. */\n            this.released = new EventEmitter();\n            /** Emits when the user stops dragging an item in the container. */\n            this.ended = new EventEmitter();\n            /** Emits when the user has moved the item into a new container. */\n            this.entered = new EventEmitter();\n            /** Emits when the user removes the item its container by dragging it into another container. */\n            this.exited = new EventEmitter();\n            /** Emits when the user drops the item inside a container. */\n            this.dropped = new EventEmitter();\n            /**\n             * Emits as the user is dragging the item. Use with caution,\n             * because this event will fire for every pixel that the user has dragged.\n             */\n            this.moved = new Observable((observer) => {\n                const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                    source: this,\n                    pointerPosition: movedEvent.pointerPosition,\n                    event: movedEvent.event,\n                    delta: movedEvent.delta,\n                    distance: movedEvent.distance\n                }))).subscribe(observer);\n                return () => {\n                    subscription.unsubscribe();\n                };\n            });\n            this._dragRef = dragDrop.createDrag(element, {\n                dragStartThreshold: config && config.dragStartThreshold != null ?\n                    config.dragStartThreshold : 5,\n                pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                    config.pointerDirectionChangeThreshold : 5,\n                zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n            });\n            this._dragRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            // Note that usually the container is assigned when the drop list is picks up the item, but in\n            // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n            // where there are no items on the first change detection pass, but the items get picked up as\n            // soon as the user triggers another pass by dragging. This is a problem, because the item would\n            // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n            // is too late since the two modes save different kinds of information. We work around it by\n            // assigning the drop container both from here and the list.\n            if (dropContainer) {\n                this._dragRef._withDropContainer(dropContainer._dropListRef);\n                dropContainer.addItem(this);\n            }\n            this._syncInputs(this._dragRef);\n            this._handleEvents(this._dragRef);\n        }\n        /** Whether starting to drag this element is disabled. */\n        get disabled() {\n            return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n        }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._dragRef.disabled = this._disabled;\n        }\n        /**\n         * Returns the element that is being used as a placeholder\n         * while the current element is being dragged.\n         */\n        getPlaceholderElement() {\n            return this._dragRef.getPlaceholderElement();\n        }\n        /** Returns the root draggable element. */\n        getRootElement() {\n            return this._dragRef.getRootElement();\n        }\n        /** Resets a standalone drag item to its initial position. */\n        reset() {\n            this._dragRef.reset();\n        }\n        /**\n         * Gets the pixel coordinates of the draggable outside of a drop container.\n         */\n        getFreeDragPosition() {\n            return this._dragRef.getFreeDragPosition();\n        }\n        ngAfterViewInit() {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1), takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._updateRootElement();\n                // Listen for any newly-added handles.\n                this._handles.changes.pipe(startWith(this._handles), \n                // Sync the new handles with the DragRef.\n                tap((handles) => {\n                    const childHandleElements = handles\n                        .filter(handle => handle._parentDrag === this)\n                        .map(handle => handle.element);\n                    this._dragRef.withHandles(childHandleElements);\n                }), \n                // Listen if the state of any of the handles changes.\n                switchMap((handles) => {\n                    return merge(...handles.map(item => {\n                        return item._stateChanges.pipe(startWith(item));\n                    }));\n                }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                    // Enabled/disable the handle that changed in the DragRef.\n                    const dragRef = this._dragRef;\n                    const handle = handleInstance.element.nativeElement;\n                    handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n                });\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        }\n        ngOnChanges(changes) {\n            const rootSelectorChange = changes['rootElementSelector'];\n            const positionChange = changes['freeDragPosition'];\n            // We don't have to react to the first change since it's being\n            // handled in `ngAfterViewInit` where it needs to be deferred.\n            if (rootSelectorChange && !rootSelectorChange.firstChange) {\n                this._updateRootElement();\n            }\n            // Skip the first change since it's being handled in `ngAfterViewInit`.\n            if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }\n        ngOnDestroy() {\n            if (this.dropContainer) {\n                this.dropContainer.removeItem(this);\n            }\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        }\n        /** Syncs the root element with the `DragRef`. */\n        _updateRootElement() {\n            const element = this.element.nativeElement;\n            const rootElement = this.rootElementSelector ?\n                getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n            if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n                throw Error(`cdkDrag must be attached to an element node. ` +\n                    `Currently attached to \"${rootElement.nodeName}\".`);\n            }\n            this._dragRef.withRootElement(rootElement || element);\n        }\n        /** Gets the boundary element, based on the `boundaryElement` value. */\n        _getBoundaryElement() {\n            const boundary = this.boundaryElement;\n            if (!boundary) {\n                return null;\n            }\n            if (typeof boundary === 'string') {\n                return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n            }\n            const element = coerceElement(boundary);\n            if (isDevMode() && !element.contains(this.element.nativeElement)) {\n                throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n            }\n            return element;\n        }\n        /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n        _syncInputs(ref) {\n            ref.beforeStarted.subscribe(() => {\n                if (!ref.isDragging()) {\n                    const dir = this._dir;\n                    const dragStartDelay = this.dragStartDelay;\n                    const placeholder = this._placeholderTemplate ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef\n                    } : null;\n                    const preview = this._previewTemplate ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef\n                    } : null;\n                    ref.disabled = this.disabled;\n                    ref.lockAxis = this.lockAxis;\n                    ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                        dragStartDelay : coerceNumberProperty(dragStartDelay);\n                    ref.constrainPosition = this.constrainPosition;\n                    ref.previewClass = this.previewClass;\n                    ref\n                        .withBoundaryElement(this._getBoundaryElement())\n                        .withPlaceholderTemplate(placeholder)\n                        .withPreviewTemplate(preview);\n                    if (dir) {\n                        ref.withDirection(dir.value);\n                    }\n                }\n            });\n        }\n        /** Handles the events from the underlying `DragRef`. */\n        _handleEvents(ref) {\n            ref.started.subscribe(() => {\n                this.started.emit({ source: this });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                this._changeDetectorRef.markForCheck();\n            });\n            ref.released.subscribe(() => {\n                this.released.emit({ source: this });\n            });\n            ref.ended.subscribe(event => {\n                this.ended.emit({ source: this, distance: event.distance });\n                // Since all of these events run outside of change detection,\n                // we need to ensure that everything is marked correctly.\n                this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(event => {\n                this.entered.emit({\n                    container: event.container.data,\n                    item: this,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(event => {\n                this.exited.emit({\n                    container: event.container.data,\n                    item: this\n                });\n            });\n            ref.dropped.subscribe(event => {\n                this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    item: this,\n                    distance: event.distance\n                });\n            });\n        }\n        /** Assigns the default input values based on a provided config object. */\n        _assignDefaults(config) {\n            const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.dragStartDelay = dragStartDelay || 0;\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n            if (constrainPosition) {\n                this.constrainPosition = constrainPosition;\n            }\n            if (previewClass) {\n                this.previewClass = previewClass;\n            }\n            if (boundaryElement) {\n                this.boundaryElement = boundaryElement;\n            }\n            if (rootElementSelector) {\n                this.rootElementSelector = rootElementSelector;\n            }\n        }\n    }\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkDrag.ctorParameters = () => [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: DragDrop },\n        { type: ChangeDetectorRef }\n    ];\n    CdkDrag.propDecorators = {\n        _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n        _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n        _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n        data: [{ type: Input, args: ['cdkDragData',] }],\n        lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n        rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n        boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n        dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n        freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n        disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n        constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n        previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n        started: [{ type: Output, args: ['cdkDragStarted',] }],\n        released: [{ type: Output, args: ['cdkDragReleased',] }],\n        ended: [{ type: Output, args: ['cdkDragEnded',] }],\n        entered: [{ type: Output, args: ['cdkDragEntered',] }],\n        exited: [{ type: Output, args: ['cdkDragExited',] }],\n        dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n        moved: [{ type: Output, args: ['cdkDragMoved',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n    return CdkDrag;\n})();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nlet CdkDropListGroup = /** @class */ (() => {\n    class CdkDropListGroup {\n        constructor() {\n            /** Drop lists registered inside the group. */\n            this._items = new Set();\n            this._disabled = false;\n        }\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(value) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n        ngOnDestroy() {\n            this._items.clear();\n        }\n    }\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\n    CdkDropListGroup.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n    return CdkDropListGroup;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nlet CdkDropList = /** @class */ (() => {\n    class CdkDropList {\n        constructor(\n        /** Element that the drop list is attached to. */\n        element, dragDrop, _changeDetectorRef, _dir, _group, \n        /**\n         * @deprecated _scrollDispatcher parameter to become required.\n         * @breaking-change 11.0.0\n         */\n        _scrollDispatcher, config) {\n            this.element = element;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._dir = _dir;\n            this._group = _group;\n            this._scrollDispatcher = _scrollDispatcher;\n            /** Emits when the list has been destroyed. */\n            this._destroyed = new Subject();\n            /**\n             * Other draggable containers that this container is connected to and into which the\n             * container's items can be transferred. Can either be references to other drop containers,\n             * or their unique IDs.\n             */\n            this.connectedTo = [];\n            /**\n             * Unique ID for the drop zone. Can be used as a reference\n             * in the `connectedTo` of another `CdkDropList`.\n             */\n            this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n            /**\n             * Function that is used to determine whether an item\n             * is allowed to be moved into a drop container.\n             */\n            this.enterPredicate = () => true;\n            /** Emits when the user drops an item inside the container. */\n            this.dropped = new EventEmitter();\n            /**\n             * Emits when the user has moved a new drag item into this container.\n             */\n            this.entered = new EventEmitter();\n            /**\n             * Emits when the user removes an item from the container\n             * by dragging it into another container.\n             */\n            this.exited = new EventEmitter();\n            /** Emits as the user is swapping items while actively dragging. */\n            this.sorted = new EventEmitter();\n            /**\n             * Keeps track of the items that are registered with this container. Historically we used to\n             * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n             * well which means that we can't handle cases like dragging the headers of a `mat-table`\n             * correctly. What we do instead is to have the items register themselves with the container\n             * and then we sort them based on their position in the DOM.\n             */\n            this._unsortedItems = new Set();\n            this._dropListRef = dragDrop.createDropList(element);\n            this._dropListRef.data = this;\n            if (config) {\n                this._assignDefaults(config);\n            }\n            this._dropListRef.enterPredicate = (drag, drop) => {\n                return this.enterPredicate(drag.data, drop.data);\n            };\n            this._setupInputSyncSubscription(this._dropListRef);\n            this._handleEvents(this._dropListRef);\n            CdkDropList._dropLists.push(this);\n            if (_group) {\n                _group._items.add(this);\n            }\n        }\n        /** Whether starting a dragging sequence from this container is disabled. */\n        get disabled() {\n            return this._disabled || (!!this._group && this._group.disabled);\n        }\n        set disabled(value) {\n            // Usually we sync the directive and ref state right before dragging starts, in order to have\n            // a single point of failure and to avoid having to use setters for everything. `disabled` is\n            // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n            // the user in a disabled state, so we also need to sync it as it's being set.\n            this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n        }\n        /** Registers an items with the drop list. */\n        addItem(item) {\n            this._unsortedItems.add(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        }\n        /** Removes an item from the drop list. */\n        removeItem(item) {\n            this._unsortedItems.delete(item);\n            if (this._dropListRef.isDragging()) {\n                this._syncItemsWithRef();\n            }\n        }\n        /** Gets the registered items in the list, sorted by their position in the DOM. */\n        getSortedItems() {\n            return Array.from(this._unsortedItems).sort((a, b) => {\n                const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n                // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n                // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n                // tslint:disable-next-line:no-bitwise\n                return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n            });\n        }\n        ngOnDestroy() {\n            const index = CdkDropList._dropLists.indexOf(this);\n            if (index > -1) {\n                CdkDropList._dropLists.splice(index, 1);\n            }\n            if (this._group) {\n                this._group._items.delete(this);\n            }\n            this._unsortedItems.clear();\n            this._dropListRef.dispose();\n            this._destroyed.next();\n            this._destroyed.complete();\n        }\n        /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n        _setupInputSyncSubscription(ref) {\n            if (this._dir) {\n                this._dir.change\n                    .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                    .subscribe(value => ref.withDirection(value));\n            }\n            ref.beforeStarted.subscribe(() => {\n                const siblings = coerceArray(this.connectedTo).map(drop => {\n                    return typeof drop === 'string' ?\n                        CdkDropList._dropLists.find(list => list.id === drop) : drop;\n                });\n                if (this._group) {\n                    this._group._items.forEach(drop => {\n                        if (siblings.indexOf(drop) === -1) {\n                            siblings.push(drop);\n                        }\n                    });\n                }\n                // Note that we resolve the scrollable parents here so that we delay the resolution\n                // as long as possible, ensuring that the element is in its final place in the DOM.\n                // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n                if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                    const scrollableParents = this._scrollDispatcher\n                        .getAncestorScrollContainers(this.element)\n                        .map(scrollable => scrollable.getElementRef().nativeElement);\n                    this._dropListRef.withScrollableParents(scrollableParents);\n                    // Only do this once since it involves traversing the DOM and the parents\n                    // shouldn't be able to change without the drop list being destroyed.\n                    this._scrollableParentsResolved = true;\n                }\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n                ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n                ref\n                    .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                    .withOrientation(this.orientation);\n            });\n        }\n        /** Handles events from the underlying DropListRef. */\n        _handleEvents(ref) {\n            ref.beforeStarted.subscribe(() => {\n                this._syncItemsWithRef();\n                this._changeDetectorRef.markForCheck();\n            });\n            ref.entered.subscribe(event => {\n                this.entered.emit({\n                    container: this,\n                    item: event.item.data,\n                    currentIndex: event.currentIndex\n                });\n            });\n            ref.exited.subscribe(event => {\n                this.exited.emit({\n                    container: this,\n                    item: event.item.data\n                });\n                this._changeDetectorRef.markForCheck();\n            });\n            ref.sorted.subscribe(event => {\n                this.sorted.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    container: this,\n                    item: event.item.data\n                });\n            });\n            ref.dropped.subscribe(event => {\n                this.dropped.emit({\n                    previousIndex: event.previousIndex,\n                    currentIndex: event.currentIndex,\n                    previousContainer: event.previousContainer.data,\n                    container: event.container.data,\n                    item: event.item.data,\n                    isPointerOverContainer: event.isPointerOverContainer,\n                    distance: event.distance\n                });\n                // Mark for check since all of these events run outside of change\n                // detection and we're not guaranteed for something else to have triggered it.\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n        /** Assigns the default input values based on a provided config object. */\n        _assignDefaults(config) {\n            const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n            this.disabled = draggingDisabled == null ? false : draggingDisabled;\n            this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n            this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n            this.orientation = listOrientation || 'vertical';\n            if (lockAxis) {\n                this.lockAxis = lockAxis;\n            }\n        }\n        /** Syncs up the registered drag items with underlying drop list ref. */\n        _syncItemsWithRef() {\n            this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n        }\n    }\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n    /** Keeps track of the drop lists that are currently on the page. */\n    CdkDropList._dropLists = [];\n    CdkDropList.ctorParameters = () => [\n        { type: ElementRef },\n        { type: DragDrop },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ScrollDispatcher },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n    ];\n    CdkDropList.propDecorators = {\n        connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n        data: [{ type: Input, args: ['cdkDropListData',] }],\n        orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n        id: [{ type: Input }],\n        lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n        disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n        sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n        enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n        autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n        dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n        entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n        exited: [{ type: Output, args: ['cdkDropListExited',] }],\n        sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\n    return CdkDropList;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet DragDropModule = /** @class */ (() => {\n    class DragDropModule {\n    }\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n    return DragDropModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set an\n        // absolute position so the page layout isn't affected.\n        styles.opacity = '0';\n        styles.position = 'absolute';\n        styles.left = styles.top = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nlet Clipboard = /** @class */ (() => {\n    class Clipboard {\n        constructor(document) {\n            this._document = document;\n        }\n        /**\n         * Copies the provided text into the user's clipboard.\n         *\n         * @param text The string to copy.\n         * @returns Whether the operation was successful.\n         */\n        copy(text) {\n            const pendingCopy = this.beginCopy(text);\n            const successful = pendingCopy.copy();\n            pendingCopy.destroy();\n            return successful;\n        }\n        /**\n         * Prepares a string to be copied later. This is useful for large strings\n         * which take too long to successfully render and be copied in the same tick.\n         *\n         * The caller must call `destroy` on the returned `PendingCopy`.\n         *\n         * @param text The string to copy.\n         * @returns the pending copy operation.\n         */\n        beginCopy(text) {\n            return new PendingCopy(text, this._document);\n        }\n    }\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\n    Clipboard.ɵprov = ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(ɵɵinject(DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\n    Clipboard.ctorParameters = () => [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return Clipboard;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CKD_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nlet CdkCopyToClipboard = /** @class */ (() => {\n    class CdkCopyToClipboard {\n        constructor(_clipboard, _ngZone, config) {\n            this._clipboard = _clipboard;\n            this._ngZone = _ngZone;\n            /** Content to be copied. */\n            this.text = '';\n            /**\n             * How many times to attempt to copy the text. This may be necessary for longer text, because\n             * the browser needs time to fill an intermediate textarea element and copy the content.\n             */\n            this.attempts = 1;\n            /**\n             * Emits when some text is copied to the clipboard. The\n             * emitted value indicates whether copying was successful.\n             */\n            this.copied = new EventEmitter();\n            /** Copies that are currently being attempted. */\n            this._pending = new Set();\n            if (config && config.attempts != null) {\n                this.attempts = config.attempts;\n            }\n        }\n        /** Copies the current text to the clipboard. */\n        copy(attempts = this.attempts) {\n            if (attempts > 1) {\n                let remainingAttempts = attempts;\n                const pending = this._clipboard.beginCopy(this.text);\n                this._pending.add(pending);\n                const attempt = () => {\n                    const successful = pending.copy();\n                    if (!successful && --remainingAttempts && !this._destroyed) {\n                        // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                        this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                    }\n                    else {\n                        this._currentTimeout = null;\n                        this._pending.delete(pending);\n                        pending.destroy();\n                        this.copied.emit(successful);\n                    }\n                };\n                attempt();\n            }\n            else {\n                this.copied.emit(this._clipboard.copy(this.text));\n            }\n        }\n        ngOnDestroy() {\n            if (this._currentTimeout) {\n                clearTimeout(this._currentTimeout);\n            }\n            this._pending.forEach(copy => copy.destroy());\n            this._pending.clear();\n            this._destroyed = true;\n        }\n    }\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\n    CdkCopyToClipboard.ctorParameters = () => [\n        { type: Clipboard },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n    ];\n    CdkCopyToClipboard.propDecorators = {\n        text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n        attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n        copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n    return CdkCopyToClipboard;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet ClipboardModule = /** @class */ (() => {\n    class ClipboardModule {\n    }\nClipboardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n    return ClipboardModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n//# sourceMappingURL=clipboard.js.map","import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nlet CdkAccordion = /** @class */ (() => {\n    class CdkAccordion {\n        constructor() {\n            /** Emits when the state of the accordion changes */\n            this._stateChanges = new Subject();\n            /** Stream that emits true/false when openAll/closeAll is triggered. */\n            this._openCloseAllActions = new Subject();\n            /** A readonly id value to use for unique selection coordination. */\n            this.id = `cdk-accordion-${nextId++}`;\n            this._multi = false;\n        }\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        get multi() { return this._multi; }\n        set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n        /** Opens all enabled accordion items in an accordion where multi is enabled. */\n        openAll() {\n            this._openCloseAll(true);\n        }\n        /** Closes all enabled accordion items in an accordion where multi is enabled. */\n        closeAll() {\n            this._openCloseAll(false);\n        }\n        ngOnChanges(changes) {\n            this._stateChanges.next(changes);\n        }\n        ngOnDestroy() {\n            this._stateChanges.complete();\n        }\n        _openCloseAll(expanded) {\n            if (this.multi) {\n                this._openCloseAllActions.next(expanded);\n            }\n        }\n    }\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n    CdkAccordion.propDecorators = {\n        multi: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion'\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n    return CdkAccordion;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId$1 = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nlet CdkAccordionItem = /** @class */ (() => {\n    class CdkAccordionItem {\n        constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n            this.accordion = accordion;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._expansionDispatcher = _expansionDispatcher;\n            /** Subscription to openAll/closeAll events. */\n            this._openCloseAllSubscription = Subscription.EMPTY;\n            /** Event emitted every time the AccordionItem is closed. */\n            this.closed = new EventEmitter();\n            /** Event emitted every time the AccordionItem is opened. */\n            this.opened = new EventEmitter();\n            /** Event emitted when the AccordionItem is destroyed. */\n            this.destroyed = new EventEmitter();\n            /**\n             * Emits whenever the expanded state of the accordion changes.\n             * Primarily used to facilitate two-way binding.\n             * @docs-private\n             */\n            this.expandedChange = new EventEmitter();\n            /** The unique AccordionItem id. */\n            this.id = `cdk-accordion-child-${nextId$1++}`;\n            this._expanded = false;\n            this._disabled = false;\n            /** Unregister function for _expansionDispatcher. */\n            this._removeUniqueSelectionListener = () => { };\n            this._removeUniqueSelectionListener =\n                _expansionDispatcher.listen((id, accordionId) => {\n                    if (this.accordion && !this.accordion.multi &&\n                        this.accordion.id === accordionId && this.id !== id) {\n                        this.expanded = false;\n                    }\n                });\n            // When an accordion item is hosted in an accordion, subscribe to open/close events.\n            if (this.accordion) {\n                this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n            }\n        }\n        /** Whether the AccordionItem is expanded. */\n        get expanded() { return this._expanded; }\n        set expanded(expanded) {\n            expanded = coerceBooleanProperty(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    const accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        }\n        /** Whether the AccordionItem is disabled. */\n        get disabled() { return this._disabled; }\n        set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n        /** Emits an event for the accordion item being destroyed. */\n        ngOnDestroy() {\n            this.opened.complete();\n            this.closed.complete();\n            this.destroyed.emit();\n            this.destroyed.complete();\n            this._removeUniqueSelectionListener();\n            this._openCloseAllSubscription.unsubscribe();\n        }\n        /** Toggles the expanded state of the accordion item. */\n        toggle() {\n            if (!this.disabled) {\n                this.expanded = !this.expanded;\n            }\n        }\n        /** Sets the expanded state of the accordion item to false. */\n        close() {\n            if (!this.disabled) {\n                this.expanded = false;\n            }\n        }\n        /** Sets the expanded state of the accordion item to true. */\n        open() {\n            if (!this.disabled) {\n                this.expanded = true;\n            }\n        }\n        _subscribeToOpenCloseAllActions() {\n            return this.accordion._openCloseAllActions.subscribe(expanded => {\n                // Only change expanded state if item is enabled\n                if (!this.disabled) {\n                    this.expanded = expanded;\n                }\n            });\n        }\n    }\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n            // to the same accordion.\n            { provide: CdkAccordion, useValue: ɵ0 },\n        ])] });\n    CdkAccordionItem.ctorParameters = () => [\n        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher }\n    ];\n    CdkAccordionItem.propDecorators = {\n        closed: [{ type: Output }],\n        opened: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        expandedChange: [{ type: Output }],\n        expanded: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n    return CdkAccordionItem;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet CdkAccordionModule = /** @class */ (() => {\n    class CdkAccordionModule {\n    }\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n    return CdkAccordionModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n\n//# sourceMappingURL=accordion.js.map","import { NgModule } from '@angular/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { TextFieldModule } from '@angular/cdk/text-field';\r\nimport { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\r\n\r\n\r\n\r\n@NgModule({\r\n\texports: [\r\n\t\tMatAutocompleteModule,\r\n\t\tMatBadgeModule,\r\n\t\tMatBottomSheetModule,\r\n\t\tMatButtonModule,\r\n\t\tMatButtonToggleModule,\r\n\t\tMatCardModule,\r\n\t\tMatCheckboxModule,\r\n\t\tMatChipsModule,\r\n\t\tMatDatepickerModule,\r\n\t\tMatDialogModule,\r\n\t\tMatDividerModule,\r\n\t\tMatGridListModule,\r\n\t\tMatIconModule,\r\n\t\tMatInputModule,\r\n\t\tMatListModule,\r\n\t\tMatMenuModule,\r\n\t\tMatPaginatorModule,\r\n\t\tMatProgressBarModule,\r\n\t\tMatProgressSpinnerModule,\r\n\t\tMatRadioModule,\r\n\t\tMatSelectModule,\r\n\t\tMatSidenavModule,\r\n\t\tMatSlideToggleModule,\r\n\t\tMatSliderModule,\r\n\t\tMatSnackBarModule,\r\n\t\tMatSortModule,\r\n\t\tMatStepperModule,\r\n\t\tMatTableModule,\r\n\t\tMatTabsModule,\r\n\t\tMatToolbarModule,\r\n\t\tMatTooltipModule,\r\n\t\tMatTreeModule,\r\n\t\tDragDropModule,\r\n\t\tCdkTreeModule,\r\n\t\tScrollingModule,\r\n\t\tOverlayModule,\r\n\t\tCdkStepperModule,\r\n\t\tCdkTableModule,\r\n\t\tLayoutModule,\r\n\t\tTextFieldModule,\r\n\t\tClipboardModule,\r\n\t\tCdkAccordionModule\r\n\t]\r\n})\r\nexport class MaterialModule { }\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { MaterialModule } from './material.module';\r\n\r\n\r\n@NgModule({\r\n\texports: [\r\n\t\tMaterialModule\r\n\t]\r\n})\r\nexport class SharedModule { }\r\n","<ng-container *ngIf=\"tab$ | async as tab\">\r\n\t<ax-lazy-element *axLazyElementDynamic=\"tab.element, url: tab.src\" [state]=\"state$ | async\">\r\n\t</ax-lazy-element>\r\n</ng-container>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TabContainerComponent } from './tab-container/tab-container.component';\r\n\r\nconst routes: Routes = [\r\n\t{ path: ':name', component: TabContainerComponent },\r\n\t{ path: '', pathMatch: 'full', redirectTo: 'moana' },\r\n\t{ path: '**', redirectTo: 'moana' }\r\n];\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forRoot(routes)\r\n\t],\r\n\texports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { TabElement } from '../shared/models/tab-item.interface';\r\nimport { State } from '../../../../narnia/src/app/shared/state.interface';\r\nimport { TabManagerService } from '../core/tab-manager.service';\r\nimport { StateService } from '../core/state.service';\r\n\r\n\r\n@Component({\r\n\tselector: 'hst-tab-container',\r\n\ttemplateUrl: './tab-container.component.html',\r\n\tstyleUrls: ['./tab-container.component.less']\r\n})\r\nexport class TabContainerComponent {\r\n\r\n\tconstructor(\r\n\t\tprivate tabManager: TabManagerService,\r\n\t\tprivate stateService: StateService\r\n\t) { }\r\n\r\n\tget tab$(): Observable<TabElement> {\r\n\t\treturn this.tabManager.currentTab$;\r\n\t}\r\n\r\n\tget state$(): Observable<State> {\r\n\t\treturn this.stateService.state$;\r\n\t}\r\n}\r\n","import { LazyElementsModule } from '@angular-extensions/elements';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule, DoBootstrap, ApplicationRef, Injector } from '@angular/core';\r\nimport { createCustomElement } from '@angular/elements';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { LoadingComponent } from './loading/loading.component';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { TabContainerComponent } from './tab-container/tab-container.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@NgModule({\r\n\tdeclarations: [\r\n\t\tAppComponent,\r\n\t\tErrorComponent,\r\n\t\tLoadingComponent,\r\n\t\tTabContainerComponent\r\n\t],\r\n\timports: [\r\n\t\tBrowserModule,\r\n\t\tBrowserAnimationsModule,\r\n\t\tHttpClientModule,\r\n\t\tSharedModule,\r\n\t\tAppRoutingModule,\r\n\t\tLazyElementsModule.forRoot({\r\n\t\t\trootOptions: {\r\n\t\t\t\terrorComponent: ErrorComponent,\r\n\t\t\t\tloadingComponent: LoadingComponent,\r\n\t\t\t\tisModule: true\r\n\t\t\t}\r\n\t\t})\r\n\t],\r\n\tbootstrap: [],\r\n\tschemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class AppModule implements DoBootstrap {\r\n\tconstructor(private injector: Injector) { }\r\n\r\n\tngDoBootstrap(appRef: ApplicationRef) {\r\n\t\tif (environment.production) {\r\n\t\t\tconst element = createCustomElement(AppComponent, { injector: this.injector }) as any;\r\n\t\t\tcustomElements.define('elm-hostel', element);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tappRef.bootstrap(AppComponent);\r\n\t}\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\n\r\nif (environment.production) {\r\n\tenableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n\t.catch(err => console.error(err));\r\n"]}